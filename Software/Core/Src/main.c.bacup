/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "ssd1306.h"
#include <stdbool.h>
#include <stdio.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
CAN_HandleTypeDef hcan;

I2C_HandleTypeDef hi2c1;

UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */
CAN_RxHeaderTypeDef rxHeader; //CAN Bus Transmit Header
CAN_TxHeaderTypeDef txHeader; //CAN Bus Receive Header
uint8_t canRX[8] = {0,0,0,0,0,0,0,0};  //CAN Bus Receive Buffer
CAN_FilterTypeDef canfilter; //CAN Bus Filter
uint32_t canMailbox; //CAN Bus Mail box variable
char buff[64];
int val = 0;


// Format for data
// - 0 Integer Value
// - 1 Decimal Value
// - 2 Inverse of scale, Ex : 0.002 = 200
// - 3 Use to select decimal places, Ex : 10 will remove last digit, 100 -> up to 2 places

// [int] [decimal] [1/scale dec place] [dec places] [max] [min] [non-Scaled]
int afr[] = {0,0,1000,100,17,12,0};
int rpm[] = {0,0,1,1,7000,50,0};
int clt[] = {0,0,1,1,60,250,0};
int iat[] = {0,0,1,1,50,150,0};
int accel[] = {0,0,100,1,0,100,0};
int tps1[] = {0,0,100,1,0,100,0};
int tps2[] = {0,0,100,1,0,100,0};
int map[] = {0,0,300,100,0,100,0};
int ignT[] = {0,0,200,100,0,50,0};
int injD[] = {0,0,200,1,0,100,0};
int vBat[] = {0,0,1000,100,0,16,0};


char dataName[16];
int printData1;
int printData2;
int intVal;
int decVal;
int currentMs = 0;
int lastMs = 0;
int btnDebounce = 250;
int currentGauge = 0;
int totalNumGauge = 8;
int delta = 0;
int b[] = {0,0,0,0,0,0,0};
const int baseID = 512;

int percent = 0;

#define dataTest (baseID - 1)
int filterID[] = {(baseID + 0), (baseID + 1), (baseID + 2), (baseID + 3), (baseID + 4), (baseID + 5)};
int currentFilter = 4;


int rxID;
int msgRXstatus = 0;

int btnPress = 0;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_I2C1_Init(void);
static void MX_CAN_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan1)
{
	HAL_CAN_GetRxMessage(hcan1, CAN_RX_FIFO0, &rxHeader, canRX); //Receive CAN bus message to canRX buffer
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);// toggle PA3 LED
	msgRXstatus = 1;
	rxID = rxHeader.StdId;
}

void EXTI4_15_IRQHandler(){
	currentMs = HAL_GetTick();
	 if ((currentMs - lastMs > btnDebounce))
	  {
	    lastMs = currentMs;
	    btnPress=1;
	  }
	 HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
}




void canFilterInit(int hiID, int loID){
  	canfilter.FilterBank = 0;
  	canfilter.FilterMode = CAN_FILTERMODE_IDLIST;
  	canfilter.FilterFIFOAssignment = CAN_RX_FIFO0;
  	canfilter.FilterIdHigh = hiID<<5;
  	canfilter.FilterIdLow = loID<<5;
  	canfilter.FilterMaskIdHigh = 0;
  	canfilter.FilterMaskIdLow = 0;
  	canfilter.FilterScale = CAN_FILTERSCALE_32BIT;
  	canfilter.FilterActivation = ENABLE;
  	canfilter.SlaveStartFilterBank = 1;
  	HAL_CAN_ConfigFilter(&hcan,&canfilter);
}

int byte2Data(int b1, int b2){
	uint32_t sensorVal = (canRX[b1] << 8)|(canRX[b2]);
	return sensorVal;
}


void calcValues(int * x){


	 // Get the integer value
	 // Multiply by the inverse of the scale
	 x[0] = x[6] / (x[2]);

	 // Get the decimal value
	 // Subtract the int value from the total
	 // Multiply by the inverse of the scale
	 // Scale and multiply to get number of desired decimal places
	 x[1] = ((x[6]  - (x[0]*x[2])) * (x[3])/(x[2]));

}


void getData(){


	switch(rxID){
	case 511:
		 b[0] = canRX[0];
		 b[1] = canRX[1];
		 b[2] = canRX[2];
		 b[3] = canRX[3];
		 b[4] = canRX[4];
		 b[5] = canRX[5];
		 b[6] = canRX[6];
		 b[7] = canRX[7];

	case 512 :
		break;

	case 513 :
		//RPM
		rpm[6] = byte2Data(1,0);

		//Ign Timing
		ignT[6] = byte2Data(3,2);

		//Injector Duty
		injD[6] = byte2Data(4,5);
		break;

	case 514 :
		//TPS1
		tps1[6] = byte2Data(3,2);
		break;

	case 515 :
		//MAP
		map[6] = byte2Data(1,0);

		//Coolant Temp C
		clt[6] = canRX[2];

		//Intake Temp C
		iat[6] = canRX[3];
		break;

	case 516 :
		//AFR
		afr[6] = byte2Data(1,0);

		//Battery V
		vBat[6] = byte2Data(7,6);
		break;

	case 517 :
		break;

	}
}

void printName( char* dataName, int X, int Y){
	ssd1306_SetCursor(X, Y);
	ssd1306_WriteString(dataName, Font_11x18, White);

}

void printNameSmall( char* dataName, int X, int Y){
	ssd1306_SetCursor(X, Y);
	ssd1306_WriteString(dataName, Font_7x10, White);

}

void printDataDigital(int * x, int X, int Y){

	ssd1306_SetCursor(X, Y);
	if (x[1] > 0){
		snprintf(buff, sizeof(buff), "%d.%d", x[0],x[1]);
		ssd1306_WriteString(buff, Font_16x26, White);
	}

	else {
		snprintf(buff, sizeof(buff), "%d", x[0]);
		ssd1306_WriteString(buff, Font_16x26, White);
	}

}

void printBarGraph(int locX, int locY, int height, int width, int progress){

	int boarderRelief = 2;
	ssd1306_SetCursor(locX,locY);

	//Draw boarder
	// Top
	for (int x = locX; x<(locX + width); x++){
		int y = locY;
		ssd1306_DrawPixel(x,y,White);
	}
	// Bottom
	for (int x =locX; x<(locX + width); x++){
		int y = locY + height;
		ssd1306_DrawPixel(x,y,White);
	}
	// Left
	for (int y = locY; y< (locY + height); y++){
		int x = locX;
		ssd1306_DrawPixel(x,y,White);
	}
	// Right
	for (int y = locY; y<(locY + height); y++){
		int x = locX + width;
		ssd1306_DrawPixel(x,y,White);
	}

	// Draw Fill
	for (int y = (locY+boarderRelief); y<((locY + height)-boarderRelief); y++){
		for (int x = (locX+boarderRelief) ; x< (((locX + width)-boarderRelief)*progress/100); x++){
			ssd1306_DrawPixel(x,y,White);
		}
	}
}


int getPercent(int * x){

	// Offset current and max values by min, then divide by the max to get the percentage
	int scale = x[2];
	int currentVal = x[6];
	int max = x[4];
	int min = x[5];

	int p = ((currentVal-(min*scale))*100);
	p = p / ((max - min)*scale);

	// Limit percentage to 0 -> 100
	if (p > 100){
		p = 100;
	}
	if (p < 0){
		p = 0;
	}

	return p;
}

void updateGauge(int gaugePrint){

	//Setup CAN filter with address for desired data
	//Print specified data to the display

	ssd1306_Fill(Black);
	switch (gaugePrint){

	case 0 : // AFR
		currentFilter = 4;
		calcValues(afr);
		printName("AFR",5,2);
		printDataDigital(afr,5,30);
		ssd1306_UpdateScreen();
		break;
	case 1 :
		currentFilter = 4;
		calcValues(afr);
		percent = getPercent(afr);
		printBarGraph(5,0,10,120,percent);
		printNameSmall("AFR",2,18);
		printDataDigital(afr,30,30);
		ssd1306_UpdateScreen();
		break;

	case 2 :
		currentFilter = 1;
		calcValues(rpm);
		percent = getPercent(rpm);
		printBarGraph(5,0,10,120,percent);
		printNameSmall("RPM",2,18);
		printDataDigital(rpm,30,30);
		ssd1306_UpdateScreen();
		break;

	default :
		ssd1306_SetCursor(5, 30);
		ssd1306_WriteString("No Data", Font_11x18, White);
		ssd1306_SetCursor(5, 0);
		snprintf(buff, sizeof(buff), "%d", currentGauge);
		ssd1306_WriteString(buff, Font_11x18, White);
		ssd1306_UpdateScreen();
		break;


	}
}

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART2_UART_Init();
  MX_I2C1_Init();
  MX_CAN_Init();
  /* USER CODE BEGIN 2 */

	// Setup CAN filter
	canFilterInit(filterID[currentFilter], filterID[currentFilter]);
	HAL_CAN_Start(&hcan); //Initialize CAN Bus
	HAL_CAN_ActivateNotification(&hcan,CAN_IT_RX_FIFO0_MSG_PENDING);// Initialize CAN Bus Rx Interrupt

	// Initialize Display
	ssd1306_Init();
	ssd1306_Fill(Black);


  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	updateGauge(currentGauge);

	 if (msgRXstatus == 1){
		 getData();
		 msgRXstatus = 0;
	 }


	 if (btnPress == 1){
		 btnPress = 0;
		 currentGauge++;
		 if (currentGauge > totalNumGauge){
			 currentGauge = 0;
		 }
		 updateGauge(currentGauge);
		 canFilterInit(filterID[currentFilter], filterID[currentFilter]);
	 }

  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{

  /* USER CODE BEGIN CAN_Init 0 */

  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
  hcan.Init.Prescaler = 2;
  hcan.Init.Mode = CAN_MODE_NORMAL;
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
  hcan.Init.TimeSeg1 = CAN_BS1_3TQ;
  hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
  hcan.Init.TimeTriggeredMode = DISABLE;
  hcan.Init.AutoBusOff = DISABLE;
  hcan.Init.AutoWakeUp = DISABLE;
  hcan.Init.AutoRetransmission = DISABLE;
  hcan.Init.ReceiveFifoLocked = DISABLE;
  hcan.Init.TransmitFifoPriority = DISABLE;
  if (HAL_CAN_Init(&hcan) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}

/**
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
  hi2c1.Init.Timing = 0x0000020B;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
  {
    Error_Handler();
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
  {
    Error_Handler();
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 38400;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : button_Pin */
  GPIO_InitStruct.Pin = button_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(button_GPIO_Port, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);

}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
