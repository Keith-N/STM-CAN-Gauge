
STM32F042 CAN Gauge.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005224  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002928  080052e4  080052e4  000152e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c0c  08007c0c  0002029c  2**0
                  CONTENTS
  4 .ARM          00000000  08007c0c  08007c0c  0002029c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007c0c  08007c0c  0002029c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c0c  08007c0c  00017c0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007c10  08007c10  00017c10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000029c  20000000  08007c14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009f8  2000029c  08007eb0  0002029c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000c94  08007eb0  00020c94  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002029c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010419  00000000  00000000  000202c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002242  00000000  00000000  000306dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c00  00000000  00000000  00032920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b20  00000000  00000000  00033520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001938d  00000000  00000000  00034040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ee58  00000000  00000000  0004d3cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e625  00000000  00000000  0005c225  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ea84a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e10  00000000  00000000  000ea8a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000029c 	.word	0x2000029c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080052cc 	.word	0x080052cc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200002a0 	.word	0x200002a0
 8000104:	080052cc 	.word	0x080052cc

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	; 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	; 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan1){
 8000408:	b580      	push	{r7, lr}
 800040a:	b082      	sub	sp, #8
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
	// Receive CAN message interrupt
	HAL_CAN_GetRxMessage(hcan1, CAN_RX_FIFO0, &rxHeader, canRX);
 8000410:	4b0b      	ldr	r3, [pc, #44]	; (8000440 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8000412:	4a0c      	ldr	r2, [pc, #48]	; (8000444 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8000414:	6878      	ldr	r0, [r7, #4]
 8000416:	2100      	movs	r1, #0
 8000418:	f001 ff60 	bl	80022dc <HAL_CAN_GetRxMessage>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 800041c:	4b0a      	ldr	r3, [pc, #40]	; (8000448 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 800041e:	2108      	movs	r1, #8
 8000420:	0018      	movs	r0, r3
 8000422:	f002 fd18 	bl	8002e56 <HAL_GPIO_TogglePin>
	msgRXstatus = 1;
 8000426:	4b09      	ldr	r3, [pc, #36]	; (800044c <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 8000428:	2201      	movs	r2, #1
 800042a:	601a      	str	r2, [r3, #0]
	rxID = rxHeader.StdId;
 800042c:	4b05      	ldr	r3, [pc, #20]	; (8000444 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	001a      	movs	r2, r3
 8000432:	4b07      	ldr	r3, [pc, #28]	; (8000450 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 8000434:	601a      	str	r2, [r3, #0]
}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	46bd      	mov	sp, r7
 800043a:	b002      	add	sp, #8
 800043c:	bd80      	pop	{r7, pc}
 800043e:	46c0      	nop			; (mov r8, r8)
 8000440:	200002b8 	.word	0x200002b8
 8000444:	20000b1c 	.word	0x20000b1c
 8000448:	48000400 	.word	0x48000400
 800044c:	200002f4 	.word	0x200002f4
 8000450:	20000bcc 	.word	0x20000bcc

08000454 <EXTI4_15_IRQHandler>:

void EXTI4_15_IRQHandler(){
 8000454:	b580      	push	{r7, lr}
 8000456:	af00      	add	r7, sp, #0
	// Push button interrupt
	currentMs = HAL_GetTick();
 8000458:	f001 fcdc 	bl	8001e14 <HAL_GetTick>
 800045c:	0003      	movs	r3, r0
 800045e:	001a      	movs	r2, r3
 8000460:	4b0b      	ldr	r3, [pc, #44]	; (8000490 <EXTI4_15_IRQHandler+0x3c>)
 8000462:	601a      	str	r2, [r3, #0]
	 if ((currentMs - lastMs > btnDebounce))
 8000464:	4b0a      	ldr	r3, [pc, #40]	; (8000490 <EXTI4_15_IRQHandler+0x3c>)
 8000466:	681a      	ldr	r2, [r3, #0]
 8000468:	4b0a      	ldr	r3, [pc, #40]	; (8000494 <EXTI4_15_IRQHandler+0x40>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	1ad2      	subs	r2, r2, r3
 800046e:	4b0a      	ldr	r3, [pc, #40]	; (8000498 <EXTI4_15_IRQHandler+0x44>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	429a      	cmp	r2, r3
 8000474:	dd06      	ble.n	8000484 <EXTI4_15_IRQHandler+0x30>
	  {
	    lastMs = currentMs;
 8000476:	4b06      	ldr	r3, [pc, #24]	; (8000490 <EXTI4_15_IRQHandler+0x3c>)
 8000478:	681a      	ldr	r2, [r3, #0]
 800047a:	4b06      	ldr	r3, [pc, #24]	; (8000494 <EXTI4_15_IRQHandler+0x40>)
 800047c:	601a      	str	r2, [r3, #0]
	    btnPress=1;
 800047e:	4b07      	ldr	r3, [pc, #28]	; (800049c <EXTI4_15_IRQHandler+0x48>)
 8000480:	2201      	movs	r2, #1
 8000482:	601a      	str	r2, [r3, #0]
	  }
	 HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8000484:	2010      	movs	r0, #16
 8000486:	f002 fd01 	bl	8002e8c <HAL_GPIO_EXTI_IRQHandler>
}
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	46bd      	mov	sp, r7
 800048e:	bd80      	pop	{r7, pc}
 8000490:	200002c0 	.word	0x200002c0
 8000494:	200002c4 	.word	0x200002c4
 8000498:	200001f8 	.word	0x200001f8
 800049c:	200002c8 	.word	0x200002c8

080004a0 <canFilterInit>:

void canFilterInit(int hiID, int loID){
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b082      	sub	sp, #8
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
 80004a8:	6039      	str	r1, [r7, #0]
  	canfilter.FilterBank = 0;
 80004aa:	4b16      	ldr	r3, [pc, #88]	; (8000504 <canFilterInit+0x64>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	615a      	str	r2, [r3, #20]
  	canfilter.FilterMode = CAN_FILTERMODE_IDLIST;
 80004b0:	4b14      	ldr	r3, [pc, #80]	; (8000504 <canFilterInit+0x64>)
 80004b2:	2201      	movs	r2, #1
 80004b4:	619a      	str	r2, [r3, #24]
  	canfilter.FilterFIFOAssignment = CAN_RX_FIFO0;
 80004b6:	4b13      	ldr	r3, [pc, #76]	; (8000504 <canFilterInit+0x64>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	611a      	str	r2, [r3, #16]
  	canfilter.FilterIdHigh = hiID<<5;
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	015b      	lsls	r3, r3, #5
 80004c0:	001a      	movs	r2, r3
 80004c2:	4b10      	ldr	r3, [pc, #64]	; (8000504 <canFilterInit+0x64>)
 80004c4:	601a      	str	r2, [r3, #0]
  	canfilter.FilterIdLow = loID<<5;
 80004c6:	683b      	ldr	r3, [r7, #0]
 80004c8:	015b      	lsls	r3, r3, #5
 80004ca:	001a      	movs	r2, r3
 80004cc:	4b0d      	ldr	r3, [pc, #52]	; (8000504 <canFilterInit+0x64>)
 80004ce:	605a      	str	r2, [r3, #4]
  	canfilter.FilterMaskIdHigh = 0;
 80004d0:	4b0c      	ldr	r3, [pc, #48]	; (8000504 <canFilterInit+0x64>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	609a      	str	r2, [r3, #8]
  	canfilter.FilterMaskIdLow = 0;
 80004d6:	4b0b      	ldr	r3, [pc, #44]	; (8000504 <canFilterInit+0x64>)
 80004d8:	2200      	movs	r2, #0
 80004da:	60da      	str	r2, [r3, #12]
  	canfilter.FilterScale = CAN_FILTERSCALE_32BIT;
 80004dc:	4b09      	ldr	r3, [pc, #36]	; (8000504 <canFilterInit+0x64>)
 80004de:	2201      	movs	r2, #1
 80004e0:	61da      	str	r2, [r3, #28]
  	canfilter.FilterActivation = ENABLE;
 80004e2:	4b08      	ldr	r3, [pc, #32]	; (8000504 <canFilterInit+0x64>)
 80004e4:	2201      	movs	r2, #1
 80004e6:	621a      	str	r2, [r3, #32]
  	canfilter.SlaveStartFilterBank = 1;
 80004e8:	4b06      	ldr	r3, [pc, #24]	; (8000504 <canFilterInit+0x64>)
 80004ea:	2201      	movs	r2, #1
 80004ec:	625a      	str	r2, [r3, #36]	; 0x24
  	HAL_CAN_ConfigFilter(&hcan,&canfilter);
 80004ee:	4a05      	ldr	r2, [pc, #20]	; (8000504 <canFilterInit+0x64>)
 80004f0:	4b05      	ldr	r3, [pc, #20]	; (8000508 <canFilterInit+0x68>)
 80004f2:	0011      	movs	r1, r2
 80004f4:	0018      	movs	r0, r3
 80004f6:	f001 fdb9 	bl	800206c <HAL_CAN_ConfigFilter>
}
 80004fa:	46c0      	nop			; (mov r8, r8)
 80004fc:	46bd      	mov	sp, r7
 80004fe:	b002      	add	sp, #8
 8000500:	bd80      	pop	{r7, pc}
 8000502:	46c0      	nop			; (mov r8, r8)
 8000504:	20000c54 	.word	0x20000c54
 8000508:	20000b9c 	.word	0x20000b9c

0800050c <canFilterUpdate>:

void canFilterUpdate(int hiID, int loID) {
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
 8000514:	6039      	str	r1, [r7, #0]
  	canfilter.FilterIdHigh = hiID<<5;
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	015b      	lsls	r3, r3, #5
 800051a:	001a      	movs	r2, r3
 800051c:	4b08      	ldr	r3, [pc, #32]	; (8000540 <canFilterUpdate+0x34>)
 800051e:	601a      	str	r2, [r3, #0]
  	canfilter.FilterIdLow = loID<<5;
 8000520:	683b      	ldr	r3, [r7, #0]
 8000522:	015b      	lsls	r3, r3, #5
 8000524:	001a      	movs	r2, r3
 8000526:	4b06      	ldr	r3, [pc, #24]	; (8000540 <canFilterUpdate+0x34>)
 8000528:	605a      	str	r2, [r3, #4]
  	HAL_CAN_ConfigFilter(&hcan,&canfilter);
 800052a:	4a05      	ldr	r2, [pc, #20]	; (8000540 <canFilterUpdate+0x34>)
 800052c:	4b05      	ldr	r3, [pc, #20]	; (8000544 <canFilterUpdate+0x38>)
 800052e:	0011      	movs	r1, r2
 8000530:	0018      	movs	r0, r3
 8000532:	f001 fd9b 	bl	800206c <HAL_CAN_ConfigFilter>
}
 8000536:	46c0      	nop			; (mov r8, r8)
 8000538:	46bd      	mov	sp, r7
 800053a:	b002      	add	sp, #8
 800053c:	bd80      	pop	{r7, pc}
 800053e:	46c0      	nop			; (mov r8, r8)
 8000540:	20000c54 	.word	0x20000c54
 8000544:	20000b9c 	.word	0x20000b9c

08000548 <byte2Data>:

int byte2Data(int b1, int b2){
 8000548:	b580      	push	{r7, lr}
 800054a:	b084      	sub	sp, #16
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
 8000550:	6039      	str	r1, [r7, #0]
	// combine two bytes into a single value
	uint32_t sensorVal = (canRX[b1] << 8)|(canRX[b2]);
 8000552:	4a08      	ldr	r2, [pc, #32]	; (8000574 <byte2Data+0x2c>)
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	18d3      	adds	r3, r2, r3
 8000558:	781b      	ldrb	r3, [r3, #0]
 800055a:	021b      	lsls	r3, r3, #8
 800055c:	4905      	ldr	r1, [pc, #20]	; (8000574 <byte2Data+0x2c>)
 800055e:	683a      	ldr	r2, [r7, #0]
 8000560:	188a      	adds	r2, r1, r2
 8000562:	7812      	ldrb	r2, [r2, #0]
 8000564:	4313      	orrs	r3, r2
 8000566:	60fb      	str	r3, [r7, #12]
	return sensorVal;
 8000568:	68fb      	ldr	r3, [r7, #12]
}
 800056a:	0018      	movs	r0, r3
 800056c:	46bd      	mov	sp, r7
 800056e:	b004      	add	sp, #16
 8000570:	bd80      	pop	{r7, pc}
 8000572:	46c0      	nop			; (mov r8, r8)
 8000574:	200002b8 	.word	0x200002b8

08000578 <getIntValue>:

int getIntValue(struct rxData* data){
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
	 // Get the integer value
	 // Multiply by the inverse of the scale
	 data->intVal = data->val / data->scale;
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	699a      	ldr	r2, [r3, #24]
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	689b      	ldr	r3, [r3, #8]
 8000588:	0019      	movs	r1, r3
 800058a:	0010      	movs	r0, r2
 800058c:	f7ff fe50 	bl	8000230 <__divsi3>
 8000590:	0003      	movs	r3, r0
 8000592:	001a      	movs	r2, r3
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	601a      	str	r2, [r3, #0]
	 return data->intVal;
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	681b      	ldr	r3, [r3, #0]
}
 800059c:	0018      	movs	r0, r3
 800059e:	46bd      	mov	sp, r7
 80005a0:	b002      	add	sp, #8
 80005a2:	bd80      	pop	{r7, pc}

080005a4 <getDecValue>:

int getDecValue(struct rxData* data){
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]

	 // Get the decimal value
	 // Subtract the int value from the total
	 // Multiply by the inverse of the scale
	 // Scale and multiply to get number of desired decimal places
	 data->decVal = ((data->val  - (data->intVal*data->scale)) * (data->decScale)/(data->scale));
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	699a      	ldr	r2, [r3, #24]
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	6819      	ldr	r1, [r3, #0]
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	689b      	ldr	r3, [r3, #8]
 80005b8:	434b      	muls	r3, r1
 80005ba:	1ad2      	subs	r2, r2, r3
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	68db      	ldr	r3, [r3, #12]
 80005c0:	435a      	muls	r2, r3
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	689b      	ldr	r3, [r3, #8]
 80005c6:	0019      	movs	r1, r3
 80005c8:	0010      	movs	r0, r2
 80005ca:	f7ff fe31 	bl	8000230 <__divsi3>
 80005ce:	0003      	movs	r3, r0
 80005d0:	001a      	movs	r2, r3
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	605a      	str	r2, [r3, #4]
	 return data->decVal;
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	685b      	ldr	r3, [r3, #4]
}
 80005da:	0018      	movs	r0, r3
 80005dc:	46bd      	mov	sp, r7
 80005de:	b002      	add	sp, #8
 80005e0:	bd80      	pop	{r7, pc}
	...

080005e4 <getData>:

void getData(){
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0


	switch(rxID){
 80005e8:	4b3b      	ldr	r3, [pc, #236]	; (80006d8 <getData+0xf4>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4a3b      	ldr	r2, [pc, #236]	; (80006dc <getData+0xf8>)
 80005ee:	4694      	mov	ip, r2
 80005f0:	4463      	add	r3, ip
 80005f2:	2b06      	cmp	r3, #6
 80005f4:	d86d      	bhi.n	80006d2 <getData+0xee>
 80005f6:	009a      	lsls	r2, r3, #2
 80005f8:	4b39      	ldr	r3, [pc, #228]	; (80006e0 <getData+0xfc>)
 80005fa:	18d3      	adds	r3, r2, r3
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	469f      	mov	pc, r3

	case (511):
		// Get test data
		 b[0] = canRX[0];
 8000600:	4b38      	ldr	r3, [pc, #224]	; (80006e4 <getData+0x100>)
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	001a      	movs	r2, r3
 8000606:	4b38      	ldr	r3, [pc, #224]	; (80006e8 <getData+0x104>)
 8000608:	601a      	str	r2, [r3, #0]
		 b[1] = canRX[1];
 800060a:	4b36      	ldr	r3, [pc, #216]	; (80006e4 <getData+0x100>)
 800060c:	785b      	ldrb	r3, [r3, #1]
 800060e:	001a      	movs	r2, r3
 8000610:	4b35      	ldr	r3, [pc, #212]	; (80006e8 <getData+0x104>)
 8000612:	605a      	str	r2, [r3, #4]
		 b[2] = canRX[2];
 8000614:	4b33      	ldr	r3, [pc, #204]	; (80006e4 <getData+0x100>)
 8000616:	789b      	ldrb	r3, [r3, #2]
 8000618:	001a      	movs	r2, r3
 800061a:	4b33      	ldr	r3, [pc, #204]	; (80006e8 <getData+0x104>)
 800061c:	609a      	str	r2, [r3, #8]
		 b[3] = canRX[3];
 800061e:	4b31      	ldr	r3, [pc, #196]	; (80006e4 <getData+0x100>)
 8000620:	78db      	ldrb	r3, [r3, #3]
 8000622:	001a      	movs	r2, r3
 8000624:	4b30      	ldr	r3, [pc, #192]	; (80006e8 <getData+0x104>)
 8000626:	60da      	str	r2, [r3, #12]
		 b[4] = canRX[4];
 8000628:	4b2e      	ldr	r3, [pc, #184]	; (80006e4 <getData+0x100>)
 800062a:	791b      	ldrb	r3, [r3, #4]
 800062c:	001a      	movs	r2, r3
 800062e:	4b2e      	ldr	r3, [pc, #184]	; (80006e8 <getData+0x104>)
 8000630:	611a      	str	r2, [r3, #16]
		 b[5] = canRX[5];
 8000632:	4b2c      	ldr	r3, [pc, #176]	; (80006e4 <getData+0x100>)
 8000634:	795b      	ldrb	r3, [r3, #5]
 8000636:	001a      	movs	r2, r3
 8000638:	4b2b      	ldr	r3, [pc, #172]	; (80006e8 <getData+0x104>)
 800063a:	615a      	str	r2, [r3, #20]
		 b[6] = canRX[6];
 800063c:	4b29      	ldr	r3, [pc, #164]	; (80006e4 <getData+0x100>)
 800063e:	799b      	ldrb	r3, [r3, #6]
 8000640:	001a      	movs	r2, r3
 8000642:	4b29      	ldr	r3, [pc, #164]	; (80006e8 <getData+0x104>)
 8000644:	619a      	str	r2, [r3, #24]
		 b[7] = canRX[7];
 8000646:	4b27      	ldr	r3, [pc, #156]	; (80006e4 <getData+0x100>)
 8000648:	79db      	ldrb	r3, [r3, #7]
 800064a:	001a      	movs	r2, r3
 800064c:	4b26      	ldr	r3, [pc, #152]	; (80006e8 <getData+0x104>)
 800064e:	61da      	str	r2, [r3, #28]

	case 512 :
		break;
 8000650:	e03f      	b.n	80006d2 <getData+0xee>

	case 513 :
		rpm.val = byte2Data(1,0);		//RPM
 8000652:	2100      	movs	r1, #0
 8000654:	2001      	movs	r0, #1
 8000656:	f7ff ff77 	bl	8000548 <byte2Data>
 800065a:	0002      	movs	r2, r0
 800065c:	4b23      	ldr	r3, [pc, #140]	; (80006ec <getData+0x108>)
 800065e:	619a      	str	r2, [r3, #24]
		timing.val = byte2Data(3,2);	//Timing deg
 8000660:	2102      	movs	r1, #2
 8000662:	2003      	movs	r0, #3
 8000664:	f7ff ff70 	bl	8000548 <byte2Data>
 8000668:	0002      	movs	r2, r0
 800066a:	4b21      	ldr	r3, [pc, #132]	; (80006f0 <getData+0x10c>)
 800066c:	619a      	str	r2, [r3, #24]
		injDuty.val = byte2Data(4,5);	//Injector Duty %
 800066e:	2105      	movs	r1, #5
 8000670:	2004      	movs	r0, #4
 8000672:	f7ff ff69 	bl	8000548 <byte2Data>
 8000676:	0002      	movs	r2, r0
 8000678:	4b1e      	ldr	r3, [pc, #120]	; (80006f4 <getData+0x110>)
 800067a:	619a      	str	r2, [r3, #24]
		break;
 800067c:	e029      	b.n	80006d2 <getData+0xee>

	case 514 :
		tps1.val = byte2Data(3,2);		//TPS1 %
 800067e:	2102      	movs	r1, #2
 8000680:	2003      	movs	r0, #3
 8000682:	f7ff ff61 	bl	8000548 <byte2Data>
 8000686:	0002      	movs	r2, r0
 8000688:	4b1b      	ldr	r3, [pc, #108]	; (80006f8 <getData+0x114>)
 800068a:	619a      	str	r2, [r3, #24]
		break;
 800068c:	e021      	b.n	80006d2 <getData+0xee>

	case 515 :
		map.val = byte2Data(1,0);		//MAP kPa
 800068e:	2100      	movs	r1, #0
 8000690:	2001      	movs	r0, #1
 8000692:	f7ff ff59 	bl	8000548 <byte2Data>
 8000696:	0002      	movs	r2, r0
 8000698:	4b18      	ldr	r3, [pc, #96]	; (80006fc <getData+0x118>)
 800069a:	619a      	str	r2, [r3, #24]
		clt.val = canRX[2];				//Coolant Temp C
 800069c:	4b11      	ldr	r3, [pc, #68]	; (80006e4 <getData+0x100>)
 800069e:	789b      	ldrb	r3, [r3, #2]
 80006a0:	001a      	movs	r2, r3
 80006a2:	4b17      	ldr	r3, [pc, #92]	; (8000700 <getData+0x11c>)
 80006a4:	619a      	str	r2, [r3, #24]
		iat.val = canRX[3];				//Intake Temp C
 80006a6:	4b0f      	ldr	r3, [pc, #60]	; (80006e4 <getData+0x100>)
 80006a8:	78db      	ldrb	r3, [r3, #3]
 80006aa:	001a      	movs	r2, r3
 80006ac:	4b15      	ldr	r3, [pc, #84]	; (8000704 <getData+0x120>)
 80006ae:	619a      	str	r2, [r3, #24]
		break;
 80006b0:	e00f      	b.n	80006d2 <getData+0xee>

	case 516 :
		afr.val = byte2Data(1,0);		//AFR
 80006b2:	2100      	movs	r1, #0
 80006b4:	2001      	movs	r0, #1
 80006b6:	f7ff ff47 	bl	8000548 <byte2Data>
 80006ba:	0002      	movs	r2, r0
 80006bc:	4b12      	ldr	r3, [pc, #72]	; (8000708 <getData+0x124>)
 80006be:	619a      	str	r2, [r3, #24]
		battery.val = byte2Data(7,6);	//Battery V
 80006c0:	2106      	movs	r1, #6
 80006c2:	2007      	movs	r0, #7
 80006c4:	f7ff ff40 	bl	8000548 <byte2Data>
 80006c8:	0002      	movs	r2, r0
 80006ca:	4b10      	ldr	r3, [pc, #64]	; (800070c <getData+0x128>)
 80006cc:	619a      	str	r2, [r3, #24]
		break;
 80006ce:	e000      	b.n	80006d2 <getData+0xee>

	case 517 :
		break;
 80006d0:	46c0      	nop			; (mov r8, r8)

	}
}
 80006d2:	46c0      	nop			; (mov r8, r8)
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	20000bcc 	.word	0x20000bcc
 80006dc:	fffffe01 	.word	0xfffffe01
 80006e0:	08005390 	.word	0x08005390
 80006e4:	200002b8 	.word	0x200002b8
 80006e8:	200002d0 	.word	0x200002d0
 80006ec:	20000038 	.word	0x20000038
 80006f0:	20000150 	.word	0x20000150
 80006f4:	20000188 	.word	0x20000188
 80006f8:	200000e0 	.word	0x200000e0
 80006fc:	20000118 	.word	0x20000118
 8000700:	20000070 	.word	0x20000070
 8000704:	200000a8 	.word	0x200000a8
 8000708:	20000000 	.word	0x20000000
 800070c:	200001c0 	.word	0x200001c0

08000710 <printText>:

void printText( char* text, int X, int Y, int textSize){
 8000710:	b580      	push	{r7, lr}
 8000712:	b084      	sub	sp, #16
 8000714:	af00      	add	r7, sp, #0
 8000716:	60f8      	str	r0, [r7, #12]
 8000718:	60b9      	str	r1, [r7, #8]
 800071a:	607a      	str	r2, [r7, #4]
 800071c:	603b      	str	r3, [r7, #0]
	// Set cursor and print 11x18 text
	ssd1306_SetCursor(X, Y);
 800071e:	68bb      	ldr	r3, [r7, #8]
 8000720:	b2db      	uxtb	r3, r3
 8000722:	687a      	ldr	r2, [r7, #4]
 8000724:	b2d2      	uxtb	r2, r2
 8000726:	0011      	movs	r1, r2
 8000728:	0018      	movs	r0, r3
 800072a:	f001 f909 	bl	8001940 <ssd1306_SetCursor>
	switch (textSize){
 800072e:	683b      	ldr	r3, [r7, #0]
 8000730:	2b02      	cmp	r3, #2
 8000732:	d003      	beq.n	800073c <printText+0x2c>
 8000734:	683b      	ldr	r3, [r7, #0]
 8000736:	2b03      	cmp	r3, #3
 8000738:	d008      	beq.n	800074c <printText+0x3c>
 800073a:	e00f      	b.n	800075c <printText+0x4c>

	case 2:
	ssd1306_WriteString(text, Font_11x18, White);
 800073c:	4a0d      	ldr	r2, [pc, #52]	; (8000774 <printText+0x64>)
 800073e:	68f8      	ldr	r0, [r7, #12]
 8000740:	2301      	movs	r3, #1
 8000742:	6811      	ldr	r1, [r2, #0]
 8000744:	6852      	ldr	r2, [r2, #4]
 8000746:	f001 f8d1 	bl	80018ec <ssd1306_WriteString>
	break;
 800074a:	e00f      	b.n	800076c <printText+0x5c>

	case 3:
	ssd1306_WriteString(text, Font_16x26, White);
 800074c:	4a0a      	ldr	r2, [pc, #40]	; (8000778 <printText+0x68>)
 800074e:	68f8      	ldr	r0, [r7, #12]
 8000750:	2301      	movs	r3, #1
 8000752:	6811      	ldr	r1, [r2, #0]
 8000754:	6852      	ldr	r2, [r2, #4]
 8000756:	f001 f8c9 	bl	80018ec <ssd1306_WriteString>
	break;
 800075a:	e007      	b.n	800076c <printText+0x5c>

	default:
	ssd1306_WriteString(text, Font_7x10, White);
 800075c:	4a07      	ldr	r2, [pc, #28]	; (800077c <printText+0x6c>)
 800075e:	68f8      	ldr	r0, [r7, #12]
 8000760:	2301      	movs	r3, #1
 8000762:	6811      	ldr	r1, [r2, #0]
 8000764:	6852      	ldr	r2, [r2, #4]
 8000766:	f001 f8c1 	bl	80018ec <ssd1306_WriteString>
	break;
 800076a:	46c0      	nop			; (mov r8, r8)
	}


}
 800076c:	46c0      	nop			; (mov r8, r8)
 800076e:	46bd      	mov	sp, r7
 8000770:	b004      	add	sp, #16
 8000772:	bd80      	pop	{r7, pc}
 8000774:	2000021c 	.word	0x2000021c
 8000778:	20000224 	.word	0x20000224
 800077c:	20000214 	.word	0x20000214

08000780 <printDataDigital>:

void printDataDigital(struct rxData * data, int X, int Y, int textSize){
 8000780:	b580      	push	{r7, lr}
 8000782:	b086      	sub	sp, #24
 8000784:	af02      	add	r7, sp, #8
 8000786:	60f8      	str	r0, [r7, #12]
 8000788:	60b9      	str	r1, [r7, #8]
 800078a:	607a      	str	r2, [r7, #4]
 800078c:	603b      	str	r3, [r7, #0]
	// Set cursor x/y location and print the selected data
	// If decimal value is 0 it will not be printed
	// This will print the maximum stored value
	ssd1306_SetCursor(X, Y);
 800078e:	68bb      	ldr	r3, [r7, #8]
 8000790:	b2db      	uxtb	r3, r3
 8000792:	687a      	ldr	r2, [r7, #4]
 8000794:	b2d2      	uxtb	r2, r2
 8000796:	0011      	movs	r1, r2
 8000798:	0018      	movs	r0, r3
 800079a:	f001 f8d1 	bl	8001940 <ssd1306_SetCursor>
	if (data->decVal > 0){
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	685b      	ldr	r3, [r3, #4]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	dd29      	ble.n	80007fa <printDataDigital+0x7a>
		snprintf(buff, sizeof(buff), "%d.%d", data->intVal,data->decVal);
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	6819      	ldr	r1, [r3, #0]
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	685b      	ldr	r3, [r3, #4]
 80007ae:	4a28      	ldr	r2, [pc, #160]	; (8000850 <printDataDigital+0xd0>)
 80007b0:	4828      	ldr	r0, [pc, #160]	; (8000854 <printDataDigital+0xd4>)
 80007b2:	9300      	str	r3, [sp, #0]
 80007b4:	000b      	movs	r3, r1
 80007b6:	2110      	movs	r1, #16
 80007b8:	f004 f958 	bl	8004a6c <sniprintf>
		switch (textSize){
 80007bc:	683b      	ldr	r3, [r7, #0]
 80007be:	2b02      	cmp	r3, #2
 80007c0:	d003      	beq.n	80007ca <printDataDigital+0x4a>
 80007c2:	683b      	ldr	r3, [r7, #0]
 80007c4:	2b03      	cmp	r3, #3
 80007c6:	d008      	beq.n	80007da <printDataDigital+0x5a>
 80007c8:	e00f      	b.n	80007ea <printDataDigital+0x6a>

			case 2:
			ssd1306_WriteString(buff, Font_11x18, White);
 80007ca:	4a23      	ldr	r2, [pc, #140]	; (8000858 <printDataDigital+0xd8>)
 80007cc:	4821      	ldr	r0, [pc, #132]	; (8000854 <printDataDigital+0xd4>)
 80007ce:	2301      	movs	r3, #1
 80007d0:	6811      	ldr	r1, [r2, #0]
 80007d2:	6852      	ldr	r2, [r2, #4]
 80007d4:	f001 f88a 	bl	80018ec <ssd1306_WriteString>
			break;
 80007d8:	e035      	b.n	8000846 <printDataDigital+0xc6>

			case 3:
			ssd1306_WriteString(buff, Font_16x26, White);
 80007da:	4a20      	ldr	r2, [pc, #128]	; (800085c <printDataDigital+0xdc>)
 80007dc:	481d      	ldr	r0, [pc, #116]	; (8000854 <printDataDigital+0xd4>)
 80007de:	2301      	movs	r3, #1
 80007e0:	6811      	ldr	r1, [r2, #0]
 80007e2:	6852      	ldr	r2, [r2, #4]
 80007e4:	f001 f882 	bl	80018ec <ssd1306_WriteString>
			break;
 80007e8:	e02d      	b.n	8000846 <printDataDigital+0xc6>

			default:
			ssd1306_WriteString(buff, Font_7x10, White);
 80007ea:	4a1d      	ldr	r2, [pc, #116]	; (8000860 <printDataDigital+0xe0>)
 80007ec:	4819      	ldr	r0, [pc, #100]	; (8000854 <printDataDigital+0xd4>)
 80007ee:	2301      	movs	r3, #1
 80007f0:	6811      	ldr	r1, [r2, #0]
 80007f2:	6852      	ldr	r2, [r2, #4]
 80007f4:	f001 f87a 	bl	80018ec <ssd1306_WriteString>
			break;
 80007f8:	e025      	b.n	8000846 <printDataDigital+0xc6>
			}

	}

	else {
		snprintf(buff, sizeof(buff), "%d", data->intVal);
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	4a19      	ldr	r2, [pc, #100]	; (8000864 <printDataDigital+0xe4>)
 8000800:	4814      	ldr	r0, [pc, #80]	; (8000854 <printDataDigital+0xd4>)
 8000802:	2110      	movs	r1, #16
 8000804:	f004 f932 	bl	8004a6c <sniprintf>
		switch (textSize){
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	2b02      	cmp	r3, #2
 800080c:	d003      	beq.n	8000816 <printDataDigital+0x96>
 800080e:	683b      	ldr	r3, [r7, #0]
 8000810:	2b03      	cmp	r3, #3
 8000812:	d008      	beq.n	8000826 <printDataDigital+0xa6>
 8000814:	e00f      	b.n	8000836 <printDataDigital+0xb6>

			case 2:
			ssd1306_WriteString(buff, Font_11x18, White);
 8000816:	4a10      	ldr	r2, [pc, #64]	; (8000858 <printDataDigital+0xd8>)
 8000818:	480e      	ldr	r0, [pc, #56]	; (8000854 <printDataDigital+0xd4>)
 800081a:	2301      	movs	r3, #1
 800081c:	6811      	ldr	r1, [r2, #0]
 800081e:	6852      	ldr	r2, [r2, #4]
 8000820:	f001 f864 	bl	80018ec <ssd1306_WriteString>
			break;
 8000824:	e00f      	b.n	8000846 <printDataDigital+0xc6>

			case 3:
			ssd1306_WriteString(buff, Font_16x26, White);
 8000826:	4a0d      	ldr	r2, [pc, #52]	; (800085c <printDataDigital+0xdc>)
 8000828:	480a      	ldr	r0, [pc, #40]	; (8000854 <printDataDigital+0xd4>)
 800082a:	2301      	movs	r3, #1
 800082c:	6811      	ldr	r1, [r2, #0]
 800082e:	6852      	ldr	r2, [r2, #4]
 8000830:	f001 f85c 	bl	80018ec <ssd1306_WriteString>
			break;
 8000834:	e007      	b.n	8000846 <printDataDigital+0xc6>

			default:
			ssd1306_WriteString(buff, Font_7x10, White);
 8000836:	4a0a      	ldr	r2, [pc, #40]	; (8000860 <printDataDigital+0xe0>)
 8000838:	4806      	ldr	r0, [pc, #24]	; (8000854 <printDataDigital+0xd4>)
 800083a:	2301      	movs	r3, #1
 800083c:	6811      	ldr	r1, [r2, #0]
 800083e:	6852      	ldr	r2, [r2, #4]
 8000840:	f001 f854 	bl	80018ec <ssd1306_WriteString>
			break;
 8000844:	46c0      	nop			; (mov r8, r8)
			}
	}

}
 8000846:	46c0      	nop			; (mov r8, r8)
 8000848:	46bd      	mov	sp, r7
 800084a:	b004      	add	sp, #16
 800084c:	bd80      	pop	{r7, pc}
 800084e:	46c0      	nop			; (mov r8, r8)
 8000850:	080052e4 	.word	0x080052e4
 8000854:	20000b88 	.word	0x20000b88
 8000858:	2000021c 	.word	0x2000021c
 800085c:	20000224 	.word	0x20000224
 8000860:	20000214 	.word	0x20000214
 8000864:	080052ec 	.word	0x080052ec

08000868 <printDataMin>:

void printDataMin(struct rxData * data, int X, int Y, int textSize){
 8000868:	b580      	push	{r7, lr}
 800086a:	b086      	sub	sp, #24
 800086c:	af02      	add	r7, sp, #8
 800086e:	60f8      	str	r0, [r7, #12]
 8000870:	60b9      	str	r1, [r7, #8]
 8000872:	607a      	str	r2, [r7, #4]
 8000874:	603b      	str	r3, [r7, #0]
	// Set cursor x/y location and print the selected data
	// If decimal value is 0 it will not be printed
	// This will print the minimum stored value
	ssd1306_SetCursor(X, Y);
 8000876:	68bb      	ldr	r3, [r7, #8]
 8000878:	b2db      	uxtb	r3, r3
 800087a:	687a      	ldr	r2, [r7, #4]
 800087c:	b2d2      	uxtb	r2, r2
 800087e:	0011      	movs	r1, r2
 8000880:	0018      	movs	r0, r3
 8000882:	f001 f85d 	bl	8001940 <ssd1306_SetCursor>
	if (data->decMin > 0){
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800088a:	2b00      	cmp	r3, #0
 800088c:	dd29      	ble.n	80008e2 <printDataMin+0x7a>
		snprintf(buff, sizeof(buff), "%d.%d", data->intMin,data->decMin);
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000896:	4a28      	ldr	r2, [pc, #160]	; (8000938 <printDataMin+0xd0>)
 8000898:	4828      	ldr	r0, [pc, #160]	; (800093c <printDataMin+0xd4>)
 800089a:	9300      	str	r3, [sp, #0]
 800089c:	000b      	movs	r3, r1
 800089e:	2110      	movs	r1, #16
 80008a0:	f004 f8e4 	bl	8004a6c <sniprintf>

		switch (textSize){
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	2b02      	cmp	r3, #2
 80008a8:	d003      	beq.n	80008b2 <printDataMin+0x4a>
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	2b03      	cmp	r3, #3
 80008ae:	d008      	beq.n	80008c2 <printDataMin+0x5a>
 80008b0:	e00f      	b.n	80008d2 <printDataMin+0x6a>

					case 2:
					ssd1306_WriteString(buff, Font_11x18, White);
 80008b2:	4a23      	ldr	r2, [pc, #140]	; (8000940 <printDataMin+0xd8>)
 80008b4:	4821      	ldr	r0, [pc, #132]	; (800093c <printDataMin+0xd4>)
 80008b6:	2301      	movs	r3, #1
 80008b8:	6811      	ldr	r1, [r2, #0]
 80008ba:	6852      	ldr	r2, [r2, #4]
 80008bc:	f001 f816 	bl	80018ec <ssd1306_WriteString>
					break;
 80008c0:	e035      	b.n	800092e <printDataMin+0xc6>

					case 3:
					ssd1306_WriteString(buff, Font_16x26, White);
 80008c2:	4a20      	ldr	r2, [pc, #128]	; (8000944 <printDataMin+0xdc>)
 80008c4:	481d      	ldr	r0, [pc, #116]	; (800093c <printDataMin+0xd4>)
 80008c6:	2301      	movs	r3, #1
 80008c8:	6811      	ldr	r1, [r2, #0]
 80008ca:	6852      	ldr	r2, [r2, #4]
 80008cc:	f001 f80e 	bl	80018ec <ssd1306_WriteString>
					break;
 80008d0:	e02d      	b.n	800092e <printDataMin+0xc6>

					default:
					ssd1306_WriteString(buff, Font_7x10, White);
 80008d2:	4a1d      	ldr	r2, [pc, #116]	; (8000948 <printDataMin+0xe0>)
 80008d4:	4819      	ldr	r0, [pc, #100]	; (800093c <printDataMin+0xd4>)
 80008d6:	2301      	movs	r3, #1
 80008d8:	6811      	ldr	r1, [r2, #0]
 80008da:	6852      	ldr	r2, [r2, #4]
 80008dc:	f001 f806 	bl	80018ec <ssd1306_WriteString>
					break;
 80008e0:	e025      	b.n	800092e <printDataMin+0xc6>
					}
	}

	else {
		snprintf(buff, sizeof(buff), "%d", data->intMin);
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008e6:	4a19      	ldr	r2, [pc, #100]	; (800094c <printDataMin+0xe4>)
 80008e8:	4814      	ldr	r0, [pc, #80]	; (800093c <printDataMin+0xd4>)
 80008ea:	2110      	movs	r1, #16
 80008ec:	f004 f8be 	bl	8004a6c <sniprintf>
		switch (textSize){
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	2b02      	cmp	r3, #2
 80008f4:	d003      	beq.n	80008fe <printDataMin+0x96>
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	2b03      	cmp	r3, #3
 80008fa:	d008      	beq.n	800090e <printDataMin+0xa6>
 80008fc:	e00f      	b.n	800091e <printDataMin+0xb6>

					case 2:
					ssd1306_WriteString(buff, Font_11x18, White);
 80008fe:	4a10      	ldr	r2, [pc, #64]	; (8000940 <printDataMin+0xd8>)
 8000900:	480e      	ldr	r0, [pc, #56]	; (800093c <printDataMin+0xd4>)
 8000902:	2301      	movs	r3, #1
 8000904:	6811      	ldr	r1, [r2, #0]
 8000906:	6852      	ldr	r2, [r2, #4]
 8000908:	f000 fff0 	bl	80018ec <ssd1306_WriteString>
					break;
 800090c:	e00f      	b.n	800092e <printDataMin+0xc6>

					case 3:
					ssd1306_WriteString(buff, Font_16x26, White);
 800090e:	4a0d      	ldr	r2, [pc, #52]	; (8000944 <printDataMin+0xdc>)
 8000910:	480a      	ldr	r0, [pc, #40]	; (800093c <printDataMin+0xd4>)
 8000912:	2301      	movs	r3, #1
 8000914:	6811      	ldr	r1, [r2, #0]
 8000916:	6852      	ldr	r2, [r2, #4]
 8000918:	f000 ffe8 	bl	80018ec <ssd1306_WriteString>
					break;
 800091c:	e007      	b.n	800092e <printDataMin+0xc6>

					default:
					ssd1306_WriteString(buff, Font_7x10, White);
 800091e:	4a0a      	ldr	r2, [pc, #40]	; (8000948 <printDataMin+0xe0>)
 8000920:	4806      	ldr	r0, [pc, #24]	; (800093c <printDataMin+0xd4>)
 8000922:	2301      	movs	r3, #1
 8000924:	6811      	ldr	r1, [r2, #0]
 8000926:	6852      	ldr	r2, [r2, #4]
 8000928:	f000 ffe0 	bl	80018ec <ssd1306_WriteString>
					break;
 800092c:	46c0      	nop			; (mov r8, r8)
					}
	}

}
 800092e:	46c0      	nop			; (mov r8, r8)
 8000930:	46bd      	mov	sp, r7
 8000932:	b004      	add	sp, #16
 8000934:	bd80      	pop	{r7, pc}
 8000936:	46c0      	nop			; (mov r8, r8)
 8000938:	080052e4 	.word	0x080052e4
 800093c:	20000b88 	.word	0x20000b88
 8000940:	2000021c 	.word	0x2000021c
 8000944:	20000224 	.word	0x20000224
 8000948:	20000214 	.word	0x20000214
 800094c:	080052ec 	.word	0x080052ec

08000950 <printDataMax>:

void printDataMax(struct rxData * data, int X, int Y, int textSize){
 8000950:	b580      	push	{r7, lr}
 8000952:	b086      	sub	sp, #24
 8000954:	af02      	add	r7, sp, #8
 8000956:	60f8      	str	r0, [r7, #12]
 8000958:	60b9      	str	r1, [r7, #8]
 800095a:	607a      	str	r2, [r7, #4]
 800095c:	603b      	str	r3, [r7, #0]
	// Set cursor x/y location and print the selected data
	// If decimal value is 0 it will not be printed
	// This will print the maximum stored value
	ssd1306_SetCursor(X, Y);
 800095e:	68bb      	ldr	r3, [r7, #8]
 8000960:	b2db      	uxtb	r3, r3
 8000962:	687a      	ldr	r2, [r7, #4]
 8000964:	b2d2      	uxtb	r2, r2
 8000966:	0011      	movs	r1, r2
 8000968:	0018      	movs	r0, r3
 800096a:	f000 ffe9 	bl	8001940 <ssd1306_SetCursor>
	if (data->decMax > 0){
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000972:	2b00      	cmp	r3, #0
 8000974:	dd29      	ble.n	80009ca <printDataMax+0x7a>
		snprintf(buff, sizeof(buff), "%d.%d", data->intMax,data->decMax);
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	6a19      	ldr	r1, [r3, #32]
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800097e:	4a28      	ldr	r2, [pc, #160]	; (8000a20 <printDataMax+0xd0>)
 8000980:	4828      	ldr	r0, [pc, #160]	; (8000a24 <printDataMax+0xd4>)
 8000982:	9300      	str	r3, [sp, #0]
 8000984:	000b      	movs	r3, r1
 8000986:	2110      	movs	r1, #16
 8000988:	f004 f870 	bl	8004a6c <sniprintf>
		switch (textSize){
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	2b02      	cmp	r3, #2
 8000990:	d003      	beq.n	800099a <printDataMax+0x4a>
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	2b03      	cmp	r3, #3
 8000996:	d008      	beq.n	80009aa <printDataMax+0x5a>
 8000998:	e00f      	b.n	80009ba <printDataMax+0x6a>

					case 2:
					ssd1306_WriteString(buff, Font_11x18, White);
 800099a:	4a23      	ldr	r2, [pc, #140]	; (8000a28 <printDataMax+0xd8>)
 800099c:	4821      	ldr	r0, [pc, #132]	; (8000a24 <printDataMax+0xd4>)
 800099e:	2301      	movs	r3, #1
 80009a0:	6811      	ldr	r1, [r2, #0]
 80009a2:	6852      	ldr	r2, [r2, #4]
 80009a4:	f000 ffa2 	bl	80018ec <ssd1306_WriteString>
					break;
 80009a8:	e035      	b.n	8000a16 <printDataMax+0xc6>

					case 3:
					ssd1306_WriteString(buff, Font_16x26, White);
 80009aa:	4a20      	ldr	r2, [pc, #128]	; (8000a2c <printDataMax+0xdc>)
 80009ac:	481d      	ldr	r0, [pc, #116]	; (8000a24 <printDataMax+0xd4>)
 80009ae:	2301      	movs	r3, #1
 80009b0:	6811      	ldr	r1, [r2, #0]
 80009b2:	6852      	ldr	r2, [r2, #4]
 80009b4:	f000 ff9a 	bl	80018ec <ssd1306_WriteString>
					break;
 80009b8:	e02d      	b.n	8000a16 <printDataMax+0xc6>

					default:
					ssd1306_WriteString(buff, Font_7x10, White);
 80009ba:	4a1d      	ldr	r2, [pc, #116]	; (8000a30 <printDataMax+0xe0>)
 80009bc:	4819      	ldr	r0, [pc, #100]	; (8000a24 <printDataMax+0xd4>)
 80009be:	2301      	movs	r3, #1
 80009c0:	6811      	ldr	r1, [r2, #0]
 80009c2:	6852      	ldr	r2, [r2, #4]
 80009c4:	f000 ff92 	bl	80018ec <ssd1306_WriteString>
					break;
 80009c8:	e025      	b.n	8000a16 <printDataMax+0xc6>
					}
	}

	else {
		snprintf(buff, sizeof(buff), "%d", data->intMax);
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	6a1b      	ldr	r3, [r3, #32]
 80009ce:	4a19      	ldr	r2, [pc, #100]	; (8000a34 <printDataMax+0xe4>)
 80009d0:	4814      	ldr	r0, [pc, #80]	; (8000a24 <printDataMax+0xd4>)
 80009d2:	2110      	movs	r1, #16
 80009d4:	f004 f84a 	bl	8004a6c <sniprintf>
		switch (textSize){
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	2b02      	cmp	r3, #2
 80009dc:	d003      	beq.n	80009e6 <printDataMax+0x96>
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	2b03      	cmp	r3, #3
 80009e2:	d008      	beq.n	80009f6 <printDataMax+0xa6>
 80009e4:	e00f      	b.n	8000a06 <printDataMax+0xb6>

					case 2:
					ssd1306_WriteString(buff, Font_11x18, White);
 80009e6:	4a10      	ldr	r2, [pc, #64]	; (8000a28 <printDataMax+0xd8>)
 80009e8:	480e      	ldr	r0, [pc, #56]	; (8000a24 <printDataMax+0xd4>)
 80009ea:	2301      	movs	r3, #1
 80009ec:	6811      	ldr	r1, [r2, #0]
 80009ee:	6852      	ldr	r2, [r2, #4]
 80009f0:	f000 ff7c 	bl	80018ec <ssd1306_WriteString>
					break;
 80009f4:	e00f      	b.n	8000a16 <printDataMax+0xc6>

					case 3:
					ssd1306_WriteString(buff, Font_16x26, White);
 80009f6:	4a0d      	ldr	r2, [pc, #52]	; (8000a2c <printDataMax+0xdc>)
 80009f8:	480a      	ldr	r0, [pc, #40]	; (8000a24 <printDataMax+0xd4>)
 80009fa:	2301      	movs	r3, #1
 80009fc:	6811      	ldr	r1, [r2, #0]
 80009fe:	6852      	ldr	r2, [r2, #4]
 8000a00:	f000 ff74 	bl	80018ec <ssd1306_WriteString>
					break;
 8000a04:	e007      	b.n	8000a16 <printDataMax+0xc6>

					default:
					ssd1306_WriteString(buff, Font_7x10, White);
 8000a06:	4a0a      	ldr	r2, [pc, #40]	; (8000a30 <printDataMax+0xe0>)
 8000a08:	4806      	ldr	r0, [pc, #24]	; (8000a24 <printDataMax+0xd4>)
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	6811      	ldr	r1, [r2, #0]
 8000a0e:	6852      	ldr	r2, [r2, #4]
 8000a10:	f000 ff6c 	bl	80018ec <ssd1306_WriteString>
					break;
 8000a14:	46c0      	nop			; (mov r8, r8)
					}
	}

}
 8000a16:	46c0      	nop			; (mov r8, r8)
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	b004      	add	sp, #16
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	46c0      	nop			; (mov r8, r8)
 8000a20:	080052e4 	.word	0x080052e4
 8000a24:	20000b88 	.word	0x20000b88
 8000a28:	2000021c 	.word	0x2000021c
 8000a2c:	20000224 	.word	0x20000224
 8000a30:	20000214 	.word	0x20000214
 8000a34:	080052ec 	.word	0x080052ec

08000a38 <printBarGraph>:

void printBarGraph(int X, int Y, int height, int width, int progress, int boarder){
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b08e      	sub	sp, #56	; 0x38
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	60f8      	str	r0, [r7, #12]
 8000a40:	60b9      	str	r1, [r7, #8]
 8000a42:	607a      	str	r2, [r7, #4]
 8000a44:	603b      	str	r3, [r7, #0]

	// Draw bar graph
	// setup location, provide a progress percent 0 -> 100, and a boarder spacing for the fill

	ssd1306_SetCursor(X,Y);
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	b2db      	uxtb	r3, r3
 8000a4a:	68ba      	ldr	r2, [r7, #8]
 8000a4c:	b2d2      	uxtb	r2, r2
 8000a4e:	0011      	movs	r1, r2
 8000a50:	0018      	movs	r0, r3
 8000a52:	f000 ff75 	bl	8001940 <ssd1306_SetCursor>

	//Draw boarder
	// Top
	for (int x = X; x<(X + width); x++){
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	637b      	str	r3, [r7, #52]	; 0x34
 8000a5a:	e00c      	b.n	8000a76 <printBarGraph+0x3e>
		int y = Y;
 8000a5c:	68bb      	ldr	r3, [r7, #8]
 8000a5e:	613b      	str	r3, [r7, #16]
		ssd1306_DrawPixel(x,y,White);
 8000a60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a62:	b2db      	uxtb	r3, r3
 8000a64:	693a      	ldr	r2, [r7, #16]
 8000a66:	b2d1      	uxtb	r1, r2
 8000a68:	2201      	movs	r2, #1
 8000a6a:	0018      	movs	r0, r3
 8000a6c:	f000 fe34 	bl	80016d8 <ssd1306_DrawPixel>
	for (int x = X; x<(X + width); x++){
 8000a70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a72:	3301      	adds	r3, #1
 8000a74:	637b      	str	r3, [r7, #52]	; 0x34
 8000a76:	68fa      	ldr	r2, [r7, #12]
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	18d3      	adds	r3, r2, r3
 8000a7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000a7e:	429a      	cmp	r2, r3
 8000a80:	dbec      	blt.n	8000a5c <printBarGraph+0x24>
	}
	// Bottom
	for (int x =X; x<(X + width); x++){
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	633b      	str	r3, [r7, #48]	; 0x30
 8000a86:	e00e      	b.n	8000aa6 <printBarGraph+0x6e>
		int y = Y + height;
 8000a88:	68ba      	ldr	r2, [r7, #8]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	18d3      	adds	r3, r2, r3
 8000a8e:	617b      	str	r3, [r7, #20]
		ssd1306_DrawPixel(x,y,White);
 8000a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a92:	b2db      	uxtb	r3, r3
 8000a94:	697a      	ldr	r2, [r7, #20]
 8000a96:	b2d1      	uxtb	r1, r2
 8000a98:	2201      	movs	r2, #1
 8000a9a:	0018      	movs	r0, r3
 8000a9c:	f000 fe1c 	bl	80016d8 <ssd1306_DrawPixel>
	for (int x =X; x<(X + width); x++){
 8000aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000aa2:	3301      	adds	r3, #1
 8000aa4:	633b      	str	r3, [r7, #48]	; 0x30
 8000aa6:	68fa      	ldr	r2, [r7, #12]
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	18d3      	adds	r3, r2, r3
 8000aac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000aae:	429a      	cmp	r2, r3
 8000ab0:	dbea      	blt.n	8000a88 <printBarGraph+0x50>
	}
	// Left
	for (int y = Y; y< (Y + height); y++){
 8000ab2:	68bb      	ldr	r3, [r7, #8]
 8000ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ab6:	e00c      	b.n	8000ad2 <printBarGraph+0x9a>
		int x = X;
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	61bb      	str	r3, [r7, #24]
		ssd1306_DrawPixel(x,y,White);
 8000abc:	69bb      	ldr	r3, [r7, #24]
 8000abe:	b2db      	uxtb	r3, r3
 8000ac0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000ac2:	b2d1      	uxtb	r1, r2
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	f000 fe06 	bl	80016d8 <ssd1306_DrawPixel>
	for (int y = Y; y< (Y + height); y++){
 8000acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ace:	3301      	adds	r3, #1
 8000ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ad2:	68ba      	ldr	r2, [r7, #8]
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	18d3      	adds	r3, r2, r3
 8000ad8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000ada:	429a      	cmp	r2, r3
 8000adc:	dbec      	blt.n	8000ab8 <printBarGraph+0x80>
	}
	// Right
	for (int y = Y; y<(Y + height); y++){
 8000ade:	68bb      	ldr	r3, [r7, #8]
 8000ae0:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ae2:	e00e      	b.n	8000b02 <printBarGraph+0xca>
		int x = X + width;
 8000ae4:	68fa      	ldr	r2, [r7, #12]
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	18d3      	adds	r3, r2, r3
 8000aea:	61fb      	str	r3, [r7, #28]
		ssd1306_DrawPixel(x,y,White);
 8000aec:	69fb      	ldr	r3, [r7, #28]
 8000aee:	b2db      	uxtb	r3, r3
 8000af0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000af2:	b2d1      	uxtb	r1, r2
 8000af4:	2201      	movs	r2, #1
 8000af6:	0018      	movs	r0, r3
 8000af8:	f000 fdee 	bl	80016d8 <ssd1306_DrawPixel>
	for (int y = Y; y<(Y + height); y++){
 8000afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000afe:	3301      	adds	r3, #1
 8000b00:	62bb      	str	r3, [r7, #40]	; 0x28
 8000b02:	68ba      	ldr	r2, [r7, #8]
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	18d3      	adds	r3, r2, r3
 8000b08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000b0a:	429a      	cmp	r2, r3
 8000b0c:	dbea      	blt.n	8000ae4 <printBarGraph+0xac>
	}

	// Draw Fill
	for (int y = (Y+boarder); y<((Y + height)-boarder); y++){
 8000b0e:	68ba      	ldr	r2, [r7, #8]
 8000b10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000b12:	18d3      	adds	r3, r2, r3
 8000b14:	627b      	str	r3, [r7, #36]	; 0x24
 8000b16:	e022      	b.n	8000b5e <printBarGraph+0x126>
		for (int x = (X+boarder) ; x< (((X + width)-boarder)*progress/100); x++){
 8000b18:	68fa      	ldr	r2, [r7, #12]
 8000b1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000b1c:	18d3      	adds	r3, r2, r3
 8000b1e:	623b      	str	r3, [r7, #32]
 8000b20:	e00a      	b.n	8000b38 <printBarGraph+0x100>
			ssd1306_DrawPixel(x,y,White);
 8000b22:	6a3b      	ldr	r3, [r7, #32]
 8000b24:	b2db      	uxtb	r3, r3
 8000b26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b28:	b2d1      	uxtb	r1, r2
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	0018      	movs	r0, r3
 8000b2e:	f000 fdd3 	bl	80016d8 <ssd1306_DrawPixel>
		for (int x = (X+boarder) ; x< (((X + width)-boarder)*progress/100); x++){
 8000b32:	6a3b      	ldr	r3, [r7, #32]
 8000b34:	3301      	adds	r3, #1
 8000b36:	623b      	str	r3, [r7, #32]
 8000b38:	68fa      	ldr	r2, [r7, #12]
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	18d2      	adds	r2, r2, r3
 8000b3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000b40:	1ad3      	subs	r3, r2, r3
 8000b42:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000b44:	4353      	muls	r3, r2
 8000b46:	2164      	movs	r1, #100	; 0x64
 8000b48:	0018      	movs	r0, r3
 8000b4a:	f7ff fb71 	bl	8000230 <__divsi3>
 8000b4e:	0003      	movs	r3, r0
 8000b50:	001a      	movs	r2, r3
 8000b52:	6a3b      	ldr	r3, [r7, #32]
 8000b54:	4293      	cmp	r3, r2
 8000b56:	dbe4      	blt.n	8000b22 <printBarGraph+0xea>
	for (int y = (Y+boarder); y<((Y + height)-boarder); y++){
 8000b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b5a:	3301      	adds	r3, #1
 8000b5c:	627b      	str	r3, [r7, #36]	; 0x24
 8000b5e:	68ba      	ldr	r2, [r7, #8]
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	18d2      	adds	r2, r2, r3
 8000b64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000b66:	1ad3      	subs	r3, r2, r3
 8000b68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b6a:	429a      	cmp	r2, r3
 8000b6c:	dbd4      	blt.n	8000b18 <printBarGraph+0xe0>
		}
	}
}
 8000b6e:	46c0      	nop			; (mov r8, r8)
 8000b70:	46c0      	nop			; (mov r8, r8)
 8000b72:	46bd      	mov	sp, r7
 8000b74:	b00e      	add	sp, #56	; 0x38
 8000b76:	bd80      	pop	{r7, pc}

08000b78 <printBarMinMax>:

void printBarMinMax(int X, int Y, int height, int width, int min, int max){
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b088      	sub	sp, #32
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	60f8      	str	r0, [r7, #12]
 8000b80:	60b9      	str	r1, [r7, #8]
 8000b82:	607a      	str	r2, [r7, #4]
 8000b84:	603b      	str	r3, [r7, #0]

	// Setup x location to draw max marker then draw a vertical line
	// width should be the same as the bar graph, but height can vary to extend beyond the bar graph boarder
	int x = (X+width)*max/100;
 8000b86:	68fa      	ldr	r2, [r7, #12]
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	18d3      	adds	r3, r2, r3
 8000b8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000b8e:	4353      	muls	r3, r2
 8000b90:	2164      	movs	r1, #100	; 0x64
 8000b92:	0018      	movs	r0, r3
 8000b94:	f7ff fb4c 	bl	8000230 <__divsi3>
 8000b98:	0003      	movs	r3, r0
 8000b9a:	617b      	str	r3, [r7, #20]
	for (int y = (Y- height); y< (Y + height); y++){
 8000b9c:	68ba      	ldr	r2, [r7, #8]
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	1ad3      	subs	r3, r2, r3
 8000ba2:	61fb      	str	r3, [r7, #28]
 8000ba4:	e00a      	b.n	8000bbc <printBarMinMax+0x44>
		ssd1306_DrawPixel(x,y,White);
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	b2db      	uxtb	r3, r3
 8000baa:	69fa      	ldr	r2, [r7, #28]
 8000bac:	b2d1      	uxtb	r1, r2
 8000bae:	2201      	movs	r2, #1
 8000bb0:	0018      	movs	r0, r3
 8000bb2:	f000 fd91 	bl	80016d8 <ssd1306_DrawPixel>
	for (int y = (Y- height); y< (Y + height); y++){
 8000bb6:	69fb      	ldr	r3, [r7, #28]
 8000bb8:	3301      	adds	r3, #1
 8000bba:	61fb      	str	r3, [r7, #28]
 8000bbc:	68ba      	ldr	r2, [r7, #8]
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	18d3      	adds	r3, r2, r3
 8000bc2:	69fa      	ldr	r2, [r7, #28]
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	dbee      	blt.n	8000ba6 <printBarMinMax+0x2e>
	}

	// Setup x location to draw min marker then draw a vertical line
	x = (X+width)*min/100;
 8000bc8:	68fa      	ldr	r2, [r7, #12]
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	18d3      	adds	r3, r2, r3
 8000bce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000bd0:	4353      	muls	r3, r2
 8000bd2:	2164      	movs	r1, #100	; 0x64
 8000bd4:	0018      	movs	r0, r3
 8000bd6:	f7ff fb2b 	bl	8000230 <__divsi3>
 8000bda:	0003      	movs	r3, r0
 8000bdc:	617b      	str	r3, [r7, #20]
	for  (int y = (Y-height); y< (Y + height); y++){
 8000bde:	68ba      	ldr	r2, [r7, #8]
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	1ad3      	subs	r3, r2, r3
 8000be4:	61bb      	str	r3, [r7, #24]
 8000be6:	e00a      	b.n	8000bfe <printBarMinMax+0x86>
			ssd1306_DrawPixel(x,y,White);
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	b2db      	uxtb	r3, r3
 8000bec:	69ba      	ldr	r2, [r7, #24]
 8000bee:	b2d1      	uxtb	r1, r2
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	0018      	movs	r0, r3
 8000bf4:	f000 fd70 	bl	80016d8 <ssd1306_DrawPixel>
	for  (int y = (Y-height); y< (Y + height); y++){
 8000bf8:	69bb      	ldr	r3, [r7, #24]
 8000bfa:	3301      	adds	r3, #1
 8000bfc:	61bb      	str	r3, [r7, #24]
 8000bfe:	68ba      	ldr	r2, [r7, #8]
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	18d3      	adds	r3, r2, r3
 8000c04:	69ba      	ldr	r2, [r7, #24]
 8000c06:	429a      	cmp	r2, r3
 8000c08:	dbee      	blt.n	8000be8 <printBarMinMax+0x70>
		}
}
 8000c0a:	46c0      	nop			; (mov r8, r8)
 8000c0c:	46c0      	nop			; (mov r8, r8)
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	b008      	add	sp, #32
 8000c12:	bd80      	pop	{r7, pc}

08000c14 <getPercent>:

int getPercent(struct rxData *data){
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b084      	sub	sp, #16
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
	// This returns a percentage of the current value vs the set limits for the data

	// Offset current and max values by min, then divide by the max to get the percentage
	int p = ((data->val-(data->min*data->scale))*100);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	699a      	ldr	r2, [r3, #24]
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	6959      	ldr	r1, [r3, #20]
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	689b      	ldr	r3, [r3, #8]
 8000c28:	434b      	muls	r3, r1
 8000c2a:	1ad3      	subs	r3, r2, r3
 8000c2c:	2264      	movs	r2, #100	; 0x64
 8000c2e:	4353      	muls	r3, r2
 8000c30:	60fb      	str	r3, [r7, #12]
	p = p / ((data->max - data->min)*data->scale);
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	691a      	ldr	r2, [r3, #16]
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	695b      	ldr	r3, [r3, #20]
 8000c3a:	1ad2      	subs	r2, r2, r3
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	689b      	ldr	r3, [r3, #8]
 8000c40:	4353      	muls	r3, r2
 8000c42:	0019      	movs	r1, r3
 8000c44:	68f8      	ldr	r0, [r7, #12]
 8000c46:	f7ff faf3 	bl	8000230 <__divsi3>
 8000c4a:	0003      	movs	r3, r0
 8000c4c:	60fb      	str	r3, [r7, #12]

	// Limit percentage to 0 -> 100
	if (p > 100){
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	2b64      	cmp	r3, #100	; 0x64
 8000c52:	dd01      	ble.n	8000c58 <getPercent+0x44>
		p = 100;
 8000c54:	2364      	movs	r3, #100	; 0x64
 8000c56:	60fb      	str	r3, [r7, #12]
	}
	if (p < 0){
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	da01      	bge.n	8000c62 <getPercent+0x4e>
		p = 0;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	60fb      	str	r3, [r7, #12]
	}

	return p;
 8000c62:	68fb      	ldr	r3, [r7, #12]
}
 8000c64:	0018      	movs	r0, r3
 8000c66:	46bd      	mov	sp, r7
 8000c68:	b004      	add	sp, #16
 8000c6a:	bd80      	pop	{r7, pc}

08000c6c <getMinMax>:

void getMinMax(struct rxData *data){
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b084      	sub	sp, #16
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
	// This stores the current minimum value and updates if necessary

	// Using the set time interval, set the current min/max so that the current value is the new min/max
	int currentTime = HAL_GetTick();
 8000c74:	f001 f8ce 	bl	8001e14 <HAL_GetTick>
 8000c78:	0003      	movs	r3, r0
 8000c7a:	60fb      	str	r3, [r7, #12]
	 if (((currentTime - lastTimeMin) > timerMinMax)){
 8000c7c:	4b35      	ldr	r3, [pc, #212]	; (8000d54 <getMinMax+0xe8>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	68fa      	ldr	r2, [r7, #12]
 8000c82:	1ad2      	subs	r2, r2, r3
 8000c84:	4b34      	ldr	r3, [pc, #208]	; (8000d58 <getMinMax+0xec>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	429a      	cmp	r2, r3
 8000c8a:	dd08      	ble.n	8000c9e <getMinMax+0x32>
		lastTimeMin = currentTime;
 8000c8c:	4b31      	ldr	r3, [pc, #196]	; (8000d54 <getMinMax+0xe8>)
 8000c8e:	68fa      	ldr	r2, [r7, #12]
 8000c90:	601a      	str	r2, [r3, #0]
		data->valMin = 0xFFFF;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4a31      	ldr	r2, [pc, #196]	; (8000d5c <getMinMax+0xf0>)
 8000c96:	631a      	str	r2, [r3, #48]	; 0x30
		data->valMax = 0;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	635a      	str	r2, [r3, #52]	; 0x34
	}

	 // Update min/max if current value is exceeded
	if (data->val < data->valMin){
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	699a      	ldr	r2, [r3, #24]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	429a      	cmp	r2, r3
 8000ca8:	da24      	bge.n	8000cf4 <getMinMax+0x88>
		data->valMin = data->val;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	699a      	ldr	r2, [r3, #24]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	631a      	str	r2, [r3, #48]	; 0x30
		data->intMin = data->val / data->scale;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	699a      	ldr	r2, [r3, #24]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	689b      	ldr	r3, [r3, #8]
 8000cba:	0019      	movs	r1, r3
 8000cbc:	0010      	movs	r0, r2
 8000cbe:	f7ff fab7 	bl	8000230 <__divsi3>
 8000cc2:	0003      	movs	r3, r0
 8000cc4:	001a      	movs	r2, r3
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	625a      	str	r2, [r3, #36]	; 0x24
		data->decMin = ((data->val  - (data->intVal*data->scale)) * (data->decScale)/(data->scale));
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	699a      	ldr	r2, [r3, #24]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	6819      	ldr	r1, [r3, #0]
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	689b      	ldr	r3, [r3, #8]
 8000cd6:	434b      	muls	r3, r1
 8000cd8:	1ad2      	subs	r2, r2, r3
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	68db      	ldr	r3, [r3, #12]
 8000cde:	435a      	muls	r2, r3
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	689b      	ldr	r3, [r3, #8]
 8000ce4:	0019      	movs	r1, r3
 8000ce6:	0010      	movs	r0, r2
 8000ce8:	f7ff faa2 	bl	8000230 <__divsi3>
 8000cec:	0003      	movs	r3, r0
 8000cee:	001a      	movs	r2, r3
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	// Update min/max if current value is exceeded
	if (data->val > data->valMax){
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	699a      	ldr	r2, [r3, #24]
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	dd24      	ble.n	8000d4a <getMinMax+0xde>
		data->valMax = data->val;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	699a      	ldr	r2, [r3, #24]
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	635a      	str	r2, [r3, #52]	; 0x34
		data->intMax = data->val / data->scale;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	699a      	ldr	r2, [r3, #24]
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	689b      	ldr	r3, [r3, #8]
 8000d10:	0019      	movs	r1, r3
 8000d12:	0010      	movs	r0, r2
 8000d14:	f7ff fa8c 	bl	8000230 <__divsi3>
 8000d18:	0003      	movs	r3, r0
 8000d1a:	001a      	movs	r2, r3
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	621a      	str	r2, [r3, #32]
		data->decMax = ((data->val  - (data->intVal*data->scale)) * (data->decScale)/(data->scale));
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	699a      	ldr	r2, [r3, #24]
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	6819      	ldr	r1, [r3, #0]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	689b      	ldr	r3, [r3, #8]
 8000d2c:	434b      	muls	r3, r1
 8000d2e:	1ad2      	subs	r2, r2, r3
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	68db      	ldr	r3, [r3, #12]
 8000d34:	435a      	muls	r2, r3
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	689b      	ldr	r3, [r3, #8]
 8000d3a:	0019      	movs	r1, r3
 8000d3c:	0010      	movs	r0, r2
 8000d3e:	f7ff fa77 	bl	8000230 <__divsi3>
 8000d42:	0003      	movs	r3, r0
 8000d44:	001a      	movs	r2, r3
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	629a      	str	r2, [r3, #40]	; 0x28
	}
}
 8000d4a:	46c0      	nop			; (mov r8, r8)
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	b004      	add	sp, #16
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	46c0      	nop			; (mov r8, r8)
 8000d54:	20000bc8 	.word	0x20000bc8
 8000d58:	2000020c 	.word	0x2000020c
 8000d5c:	0000ffff 	.word	0x0000ffff

08000d60 <printStartup>:

void printStartup(){
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0

	ssd1306_Fill(Black);
 8000d64:	2000      	movs	r0, #0
 8000d66:	f000 fc65 	bl	8001634 <ssd1306_Fill>
	printText("CAN 500k",5,05,1);
 8000d6a:	480b      	ldr	r0, [pc, #44]	; (8000d98 <printStartup+0x38>)
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	2205      	movs	r2, #5
 8000d70:	2105      	movs	r1, #5
 8000d72:	f7ff fccd 	bl	8000710 <printText>
	printText("Base ID 512 ",5,25,1);
 8000d76:	4809      	ldr	r0, [pc, #36]	; (8000d9c <printStartup+0x3c>)
 8000d78:	2301      	movs	r3, #1
 8000d7a:	2219      	movs	r2, #25
 8000d7c:	2105      	movs	r1, #5
 8000d7e:	f7ff fcc7 	bl	8000710 <printText>
	printText("Waiting ...",5,45,1);
 8000d82:	4807      	ldr	r0, [pc, #28]	; (8000da0 <printStartup+0x40>)
 8000d84:	2301      	movs	r3, #1
 8000d86:	222d      	movs	r2, #45	; 0x2d
 8000d88:	2105      	movs	r1, #5
 8000d8a:	f7ff fcc1 	bl	8000710 <printText>
	ssd1306_UpdateScreen();
 8000d8e:	f000 fc75 	bl	800167c <ssd1306_UpdateScreen>

}
 8000d92:	46c0      	nop			; (mov r8, r8)
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	080052f0 	.word	0x080052f0
 8000d9c:	080052fc 	.word	0x080052fc
 8000da0:	0800530c 	.word	0x0800530c

08000da4 <getPercentMinMax>:

void getPercentMinMax(int p, int *min, int *max){
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b086      	sub	sp, #24
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	60f8      	str	r0, [r7, #12]
 8000dac:	60b9      	str	r1, [r7, #8]
 8000dae:	607a      	str	r2, [r7, #4]
	// This stores the current minimum percent value and updates if necessary

	// Using the set time interval, set the current min/max so that the current value is the new min/max
	int currentTime = HAL_GetTick();
 8000db0:	f001 f830 	bl	8001e14 <HAL_GetTick>
 8000db4:	0003      	movs	r3, r0
 8000db6:	617b      	str	r3, [r7, #20]
	if (((currentTime - lastTimeMinP) > timerMinMax)){
 8000db8:	4b12      	ldr	r3, [pc, #72]	; (8000e04 <getPercentMinMax+0x60>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	697a      	ldr	r2, [r7, #20]
 8000dbe:	1ad2      	subs	r2, r2, r3
 8000dc0:	4b11      	ldr	r3, [pc, #68]	; (8000e08 <getPercentMinMax+0x64>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	dd08      	ble.n	8000dda <getPercentMinMax+0x36>
		 lastTimeMinP = currentTime;
 8000dc8:	4b0e      	ldr	r3, [pc, #56]	; (8000e04 <getPercentMinMax+0x60>)
 8000dca:	697a      	ldr	r2, [r7, #20]
 8000dcc:	601a      	str	r2, [r3, #0]
		 *min = 999;
 8000dce:	68bb      	ldr	r3, [r7, #8]
 8000dd0:	4a0e      	ldr	r2, [pc, #56]	; (8000e0c <getPercentMinMax+0x68>)
 8000dd2:	601a      	str	r2, [r3, #0]
		 *max = 0;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	601a      	str	r2, [r3, #0]
	}
	// Update min/max if current value is exceeded
	if (p < *min){
 8000dda:	68bb      	ldr	r3, [r7, #8]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	68fa      	ldr	r2, [r7, #12]
 8000de0:	429a      	cmp	r2, r3
 8000de2:	da02      	bge.n	8000dea <getPercentMinMax+0x46>
		*min = p;
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	68fa      	ldr	r2, [r7, #12]
 8000de8:	601a      	str	r2, [r3, #0]
	}
	if (p > *max){
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	68fa      	ldr	r2, [r7, #12]
 8000df0:	429a      	cmp	r2, r3
 8000df2:	dd02      	ble.n	8000dfa <getPercentMinMax+0x56>
		*max = p;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	68fa      	ldr	r2, [r7, #12]
 8000df8:	601a      	str	r2, [r3, #0]
		}

}
 8000dfa:	46c0      	nop			; (mov r8, r8)
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	b006      	add	sp, #24
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	46c0      	nop			; (mov r8, r8)
 8000e04:	20000b14 	.word	0x20000b14
 8000e08:	2000020c 	.word	0x2000020c
 8000e0c:	000003e7 	.word	0x000003e7

08000e10 <digitalGaugeBasicRotated>:
	ssd1306_UpdateScreen();

}

void digitalGaugeBasicRotated(struct rxData* data, char text[12])
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
 8000e18:	6039      	str	r1, [r7, #0]

	getIntValue(data);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	0018      	movs	r0, r3
 8000e1e:	f7ff fbab 	bl	8000578 <getIntValue>
	getDecValue(data);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	0018      	movs	r0, r3
 8000e26:	f7ff fbbd 	bl	80005a4 <getDecValue>
	printText(text,5,5,1);
 8000e2a:	6838      	ldr	r0, [r7, #0]
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	2205      	movs	r2, #5
 8000e30:	2105      	movs	r1, #5
 8000e32:	f7ff fc6d 	bl	8000710 <printText>
	printDataDigital(data,0,30,3);
 8000e36:	6878      	ldr	r0, [r7, #4]
 8000e38:	2303      	movs	r3, #3
 8000e3a:	221e      	movs	r2, #30
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	f7ff fc9f 	bl	8000780 <printDataDigital>
	ssd1306_UpdateScreen();
 8000e42:	f000 fc1b 	bl	800167c <ssd1306_UpdateScreen>

}
 8000e46:	46c0      	nop			; (mov r8, r8)
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	b002      	add	sp, #8
 8000e4c:	bd80      	pop	{r7, pc}
	...

08000e50 <digitalGaugeBarRotated>:
	printDataDigital(&afr,40,30,2);
	ssd1306_UpdateScreen();
}

void digitalGaugeBarRotated(struct rxData* data, char text[12])
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af02      	add	r7, sp, #8
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	6039      	str	r1, [r7, #0]
	getIntValue(data);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	0018      	movs	r0, r3
 8000e5e:	f7ff fb8b 	bl	8000578 <getIntValue>
	getDecValue(data);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	0018      	movs	r0, r3
 8000e66:	f7ff fb9d 	bl	80005a4 <getDecValue>
	getMinMax(data);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	0018      	movs	r0, r3
 8000e6e:	f7ff fefd 	bl	8000c6c <getMinMax>
	p = getPercent(data);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	0018      	movs	r0, r3
 8000e76:	f7ff fecd 	bl	8000c14 <getPercent>
 8000e7a:	0002      	movs	r2, r0
 8000e7c:	4b24      	ldr	r3, [pc, #144]	; (8000f10 <digitalGaugeBarRotated+0xc0>)
 8000e7e:	601a      	str	r2, [r3, #0]

	getPercentMinMax(p,&pMin,&pMax);
 8000e80:	4b23      	ldr	r3, [pc, #140]	; (8000f10 <digitalGaugeBarRotated+0xc0>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a23      	ldr	r2, [pc, #140]	; (8000f14 <digitalGaugeBarRotated+0xc4>)
 8000e86:	4924      	ldr	r1, [pc, #144]	; (8000f18 <digitalGaugeBarRotated+0xc8>)
 8000e88:	0018      	movs	r0, r3
 8000e8a:	f7ff ff8b 	bl	8000da4 <getPercentMinMax>
	printBarGraph(5,2,10,50,p,1);
 8000e8e:	4b20      	ldr	r3, [pc, #128]	; (8000f10 <digitalGaugeBarRotated+0xc0>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	2201      	movs	r2, #1
 8000e94:	9201      	str	r2, [sp, #4]
 8000e96:	9300      	str	r3, [sp, #0]
 8000e98:	2332      	movs	r3, #50	; 0x32
 8000e9a:	220a      	movs	r2, #10
 8000e9c:	2102      	movs	r1, #2
 8000e9e:	2005      	movs	r0, #5
 8000ea0:	f7ff fdca 	bl	8000a38 <printBarGraph>
	printBarMinMax(5,2,20,50,pMin,pMax);
 8000ea4:	4b1c      	ldr	r3, [pc, #112]	; (8000f18 <digitalGaugeBarRotated+0xc8>)
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	4b1a      	ldr	r3, [pc, #104]	; (8000f14 <digitalGaugeBarRotated+0xc4>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	9301      	str	r3, [sp, #4]
 8000eae:	9200      	str	r2, [sp, #0]
 8000eb0:	2332      	movs	r3, #50	; 0x32
 8000eb2:	2214      	movs	r2, #20
 8000eb4:	2102      	movs	r1, #2
 8000eb6:	2005      	movs	r0, #5
 8000eb8:	f7ff fe5e 	bl	8000b78 <printBarMinMax>

	printText(text,2,25,0);
 8000ebc:	6838      	ldr	r0, [r7, #0]
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	2219      	movs	r2, #25
 8000ec2:	2102      	movs	r1, #2
 8000ec4:	f7ff fc24 	bl	8000710 <printText>
	printText("Current",2,35,0);
 8000ec8:	4814      	ldr	r0, [pc, #80]	; (8000f1c <digitalGaugeBarRotated+0xcc>)
 8000eca:	2300      	movs	r3, #0
 8000ecc:	2223      	movs	r2, #35	; 0x23
 8000ece:	2102      	movs	r1, #2
 8000ed0:	f7ff fc1e 	bl	8000710 <printText>
	printText("Min/Max",2,65,0);
 8000ed4:	4812      	ldr	r0, [pc, #72]	; (8000f20 <digitalGaugeBarRotated+0xd0>)
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	2241      	movs	r2, #65	; 0x41
 8000eda:	2102      	movs	r1, #2
 8000edc:	f7ff fc18 	bl	8000710 <printText>
	printDataMin(data,2,100,2);
 8000ee0:	6878      	ldr	r0, [r7, #4]
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	2264      	movs	r2, #100	; 0x64
 8000ee6:	2102      	movs	r1, #2
 8000ee8:	f7ff fcbe 	bl	8000868 <printDataMin>
	printDataMax(data,2,80,2);
 8000eec:	6878      	ldr	r0, [r7, #4]
 8000eee:	2302      	movs	r3, #2
 8000ef0:	2250      	movs	r2, #80	; 0x50
 8000ef2:	2102      	movs	r1, #2
 8000ef4:	f7ff fd2c 	bl	8000950 <printDataMax>

	printDataDigital(data,0,45,2);
 8000ef8:	6878      	ldr	r0, [r7, #4]
 8000efa:	2302      	movs	r3, #2
 8000efc:	222d      	movs	r2, #45	; 0x2d
 8000efe:	2100      	movs	r1, #0
 8000f00:	f7ff fc3e 	bl	8000780 <printDataDigital>
	ssd1306_UpdateScreen();
 8000f04:	f000 fbba 	bl	800167c <ssd1306_UpdateScreen>
}
 8000f08:	46c0      	nop			; (mov r8, r8)
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	b002      	add	sp, #8
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	20000b18 	.word	0x20000b18
 8000f14:	200002f8 	.word	0x200002f8
 8000f18:	20000208 	.word	0x20000208
 8000f1c:	08005318 	.word	0x08005318
 8000f20:	08005320 	.word	0x08005320

08000f24 <updateGauge>:

void updateGauge(int gaugePrint){
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]

	//Setup CAN filter with address for desired data
	//Print specified data to the display

	ssd1306_Fill(Black);
 8000f2c:	2000      	movs	r0, #0
 8000f2e:	f000 fb81 	bl	8001634 <ssd1306_Fill>
	switch (gaugePrint){
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2b03      	cmp	r3, #3
 8000f36:	d030      	beq.n	8000f9a <updateGauge+0x76>
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2b03      	cmp	r3, #3
 8000f3c:	dc38      	bgt.n	8000fb0 <updateGauge+0x8c>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2b02      	cmp	r3, #2
 8000f42:	d01f      	beq.n	8000f84 <updateGauge+0x60>
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2b02      	cmp	r3, #2
 8000f48:	dc32      	bgt.n	8000fb0 <updateGauge+0x8c>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d003      	beq.n	8000f58 <updateGauge+0x34>
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d00b      	beq.n	8000f6e <updateGauge+0x4a>
 8000f56:	e02b      	b.n	8000fb0 <updateGauge+0x8c>

	case 0 : // Basic AFR
		currentFilter = afr.id;
 8000f58:	4b27      	ldr	r3, [pc, #156]	; (8000ff8 <updateGauge+0xd4>)
 8000f5a:	69da      	ldr	r2, [r3, #28]
 8000f5c:	4b27      	ldr	r3, [pc, #156]	; (8000ffc <updateGauge+0xd8>)
 8000f5e:	601a      	str	r2, [r3, #0]
		digitalGaugeBasicRotated(&afr,"AFR");
 8000f60:	4a27      	ldr	r2, [pc, #156]	; (8001000 <updateGauge+0xdc>)
 8000f62:	4b25      	ldr	r3, [pc, #148]	; (8000ff8 <updateGauge+0xd4>)
 8000f64:	0011      	movs	r1, r2
 8000f66:	0018      	movs	r0, r3
 8000f68:	f7ff ff52 	bl	8000e10 <digitalGaugeBasicRotated>
		break;
 8000f6c:	e040      	b.n	8000ff0 <updateGauge+0xcc>

	case 1 : // AFR with bar graph and min/max
		currentFilter = afr.id;
 8000f6e:	4b22      	ldr	r3, [pc, #136]	; (8000ff8 <updateGauge+0xd4>)
 8000f70:	69da      	ldr	r2, [r3, #28]
 8000f72:	4b22      	ldr	r3, [pc, #136]	; (8000ffc <updateGauge+0xd8>)
 8000f74:	601a      	str	r2, [r3, #0]
		digitalGaugeBarRotated(&afr,"AFR");
 8000f76:	4a22      	ldr	r2, [pc, #136]	; (8001000 <updateGauge+0xdc>)
 8000f78:	4b1f      	ldr	r3, [pc, #124]	; (8000ff8 <updateGauge+0xd4>)
 8000f7a:	0011      	movs	r1, r2
 8000f7c:	0018      	movs	r0, r3
 8000f7e:	f7ff ff67 	bl	8000e50 <digitalGaugeBarRotated>
		break;
 8000f82:	e035      	b.n	8000ff0 <updateGauge+0xcc>


	case 2 : // Basic RPM
		currentFilter = rpm.id;
 8000f84:	4b1f      	ldr	r3, [pc, #124]	; (8001004 <updateGauge+0xe0>)
 8000f86:	69da      	ldr	r2, [r3, #28]
 8000f88:	4b1c      	ldr	r3, [pc, #112]	; (8000ffc <updateGauge+0xd8>)
 8000f8a:	601a      	str	r2, [r3, #0]
		digitalGaugeBasicRotated(&rpm,"RPM");
 8000f8c:	4a1e      	ldr	r2, [pc, #120]	; (8001008 <updateGauge+0xe4>)
 8000f8e:	4b1d      	ldr	r3, [pc, #116]	; (8001004 <updateGauge+0xe0>)
 8000f90:	0011      	movs	r1, r2
 8000f92:	0018      	movs	r0, r3
 8000f94:	f7ff ff3c 	bl	8000e10 <digitalGaugeBasicRotated>
		break;
 8000f98:	e02a      	b.n	8000ff0 <updateGauge+0xcc>

	case 3 : // RPM Bar
		currentFilter = rpm.id;
 8000f9a:	4b1a      	ldr	r3, [pc, #104]	; (8001004 <updateGauge+0xe0>)
 8000f9c:	69da      	ldr	r2, [r3, #28]
 8000f9e:	4b17      	ldr	r3, [pc, #92]	; (8000ffc <updateGauge+0xd8>)
 8000fa0:	601a      	str	r2, [r3, #0]
		digitalGaugeBarRotated(&rpm,"RPM");
 8000fa2:	4a19      	ldr	r2, [pc, #100]	; (8001008 <updateGauge+0xe4>)
 8000fa4:	4b17      	ldr	r3, [pc, #92]	; (8001004 <updateGauge+0xe0>)
 8000fa6:	0011      	movs	r1, r2
 8000fa8:	0018      	movs	r0, r3
 8000faa:	f7ff ff51 	bl	8000e50 <digitalGaugeBarRotated>
		break;
 8000fae:	e01f      	b.n	8000ff0 <updateGauge+0xcc>



	default : // If no gauge is available print something
		ssd1306_SetCursor(5, 30);
 8000fb0:	211e      	movs	r1, #30
 8000fb2:	2005      	movs	r0, #5
 8000fb4:	f000 fcc4 	bl	8001940 <ssd1306_SetCursor>
		ssd1306_WriteString("No Data", Font_11x18, White);
 8000fb8:	4a14      	ldr	r2, [pc, #80]	; (800100c <updateGauge+0xe8>)
 8000fba:	4815      	ldr	r0, [pc, #84]	; (8001010 <updateGauge+0xec>)
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	6811      	ldr	r1, [r2, #0]
 8000fc0:	6852      	ldr	r2, [r2, #4]
 8000fc2:	f000 fc93 	bl	80018ec <ssd1306_WriteString>
		ssd1306_SetCursor(5, 0);
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	2005      	movs	r0, #5
 8000fca:	f000 fcb9 	bl	8001940 <ssd1306_SetCursor>
		snprintf(buff, sizeof(buff), "%d", currentGauge);
 8000fce:	4b11      	ldr	r3, [pc, #68]	; (8001014 <updateGauge+0xf0>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4a11      	ldr	r2, [pc, #68]	; (8001018 <updateGauge+0xf4>)
 8000fd4:	4811      	ldr	r0, [pc, #68]	; (800101c <updateGauge+0xf8>)
 8000fd6:	2110      	movs	r1, #16
 8000fd8:	f003 fd48 	bl	8004a6c <sniprintf>
		ssd1306_WriteString(buff, Font_11x18, White);
 8000fdc:	4a0b      	ldr	r2, [pc, #44]	; (800100c <updateGauge+0xe8>)
 8000fde:	480f      	ldr	r0, [pc, #60]	; (800101c <updateGauge+0xf8>)
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	6811      	ldr	r1, [r2, #0]
 8000fe4:	6852      	ldr	r2, [r2, #4]
 8000fe6:	f000 fc81 	bl	80018ec <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8000fea:	f000 fb47 	bl	800167c <ssd1306_UpdateScreen>
		break;
 8000fee:	46c0      	nop			; (mov r8, r8)


	}
}
 8000ff0:	46c0      	nop			; (mov r8, r8)
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	b002      	add	sp, #8
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	20000000 	.word	0x20000000
 8000ffc:	200002ec 	.word	0x200002ec
 8001000:	08005328 	.word	0x08005328
 8001004:	20000038 	.word	0x20000038
 8001008:	0800532c 	.word	0x0800532c
 800100c:	2000021c 	.word	0x2000021c
 8001010:	08005330 	.word	0x08005330
 8001014:	20000200 	.word	0x20000200
 8001018:	080052ec 	.word	0x080052ec
 800101c:	20000b88 	.word	0x20000b88

08001020 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 8001024:	f000 fe9c 	bl	8001d60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001028:	f000 f8ec 	bl	8001204 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800102c:	f000 f9ea 	bl	8001404 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001030:	f000 f9b8 	bl	80013a4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001034:	f000 f976 	bl	8001324 <MX_I2C1_Init>
  MX_CAN_Init();
 8001038:	f000 f93c 	bl	80012b4 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */

	// Setup CAN


	HAL_CAN_Start(&hcan);
 800103c:	4b5e      	ldr	r3, [pc, #376]	; (80011b8 <main+0x198>)
 800103e:	0018      	movs	r0, r3
 8001040:	f001 f906 	bl	8002250 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan,CAN_IT_RX_FIFO0_MSG_PENDING);
 8001044:	4b5c      	ldr	r3, [pc, #368]	; (80011b8 <main+0x198>)
 8001046:	2102      	movs	r1, #2
 8001048:	0018      	movs	r0, r3
 800104a:	f001 fa63 	bl	8002514 <HAL_CAN_ActivateNotification>
	canFilterInit(516, 512);
 800104e:	2380      	movs	r3, #128	; 0x80
 8001050:	009a      	lsls	r2, r3, #2
 8001052:	2381      	movs	r3, #129	; 0x81
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	0011      	movs	r1, r2
 8001058:	0018      	movs	r0, r3
 800105a:	f7ff fa21 	bl	80004a0 <canFilterInit>
	// Initialize Display and clear
	ssd1306_Init();
 800105e:	f000 fa7d 	bl	800155c <ssd1306_Init>
	printStartup();
 8001062:	f7ff fe7d 	bl	8000d60 <printStartup>

    /* USER CODE BEGIN 3 */

	// Print current gauge to display

	 if (lastCanMessage > 0 && ((HAL_GetTick() - lastCanMessage) > canWaitTime)){
 8001066:	4b55      	ldr	r3, [pc, #340]	; (80011bc <main+0x19c>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	2b00      	cmp	r3, #0
 800106c:	dd20      	ble.n	80010b0 <main+0x90>
 800106e:	f000 fed1 	bl	8001e14 <HAL_GetTick>
 8001072:	0002      	movs	r2, r0
 8001074:	4b51      	ldr	r3, [pc, #324]	; (80011bc <main+0x19c>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	1ad2      	subs	r2, r2, r3
 800107a:	4b51      	ldr	r3, [pc, #324]	; (80011c0 <main+0x1a0>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	429a      	cmp	r2, r3
 8001080:	d916      	bls.n	80010b0 <main+0x90>
		 	ssd1306_Fill(Black);
 8001082:	2000      	movs	r0, #0
 8001084:	f000 fad6 	bl	8001634 <ssd1306_Fill>
		 	printText("Lost CAN",5,5,2);
 8001088:	484e      	ldr	r0, [pc, #312]	; (80011c4 <main+0x1a4>)
 800108a:	2302      	movs	r3, #2
 800108c:	2205      	movs	r2, #5
 800108e:	2105      	movs	r1, #5
 8001090:	f7ff fb3e 	bl	8000710 <printText>
		 	printText("Connection",5,20,2);
 8001094:	484c      	ldr	r0, [pc, #304]	; (80011c8 <main+0x1a8>)
 8001096:	2302      	movs	r3, #2
 8001098:	2214      	movs	r2, #20
 800109a:	2105      	movs	r1, #5
 800109c:	f7ff fb38 	bl	8000710 <printText>
		 	printText("!!!!!!!",20,40,2);
 80010a0:	484a      	ldr	r0, [pc, #296]	; (80011cc <main+0x1ac>)
 80010a2:	2302      	movs	r3, #2
 80010a4:	2228      	movs	r2, #40	; 0x28
 80010a6:	2114      	movs	r1, #20
 80010a8:	f7ff fb32 	bl	8000710 <printText>
		 	ssd1306_UpdateScreen();
 80010ac:	f000 fae6 	bl	800167c <ssd1306_UpdateScreen>
	 }

	// Get data from received CAN message
	 if (msgRXstatus == 1){
 80010b0:	4b47      	ldr	r3, [pc, #284]	; (80011d0 <main+0x1b0>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	2b01      	cmp	r3, #1
 80010b6:	d132      	bne.n	800111e <main+0xfe>
		 getData();
 80010b8:	f7ff fa94 	bl	80005e4 <getData>
		 msgRXstatus = 0;
 80010bc:	4b44      	ldr	r3, [pc, #272]	; (80011d0 <main+0x1b0>)
 80010be:	2200      	movs	r2, #0
 80010c0:	601a      	str	r2, [r3, #0]
		 updateGauge(currentGauge);
 80010c2:	4b44      	ldr	r3, [pc, #272]	; (80011d4 <main+0x1b4>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	0018      	movs	r0, r3
 80010c8:	f7ff ff2c 	bl	8000f24 <updateGauge>
		 lastCanMessage = HAL_GetTick();
 80010cc:	f000 fea2 	bl	8001e14 <HAL_GetTick>
 80010d0:	0003      	movs	r3, r0
 80010d2:	001a      	movs	r2, r3
 80010d4:	4b39      	ldr	r3, [pc, #228]	; (80011bc <main+0x19c>)
 80010d6:	601a      	str	r2, [r3, #0]

		 if (fastUpdateRate == 0){
 80010d8:	4b3f      	ldr	r3, [pc, #252]	; (80011d8 <main+0x1b8>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d11e      	bne.n	800111e <main+0xfe>
			 cycleFilter++;
 80010e0:	4b3e      	ldr	r3, [pc, #248]	; (80011dc <main+0x1bc>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	1c5a      	adds	r2, r3, #1
 80010e6:	4b3d      	ldr	r3, [pc, #244]	; (80011dc <main+0x1bc>)
 80010e8:	601a      	str	r2, [r3, #0]
			 cycleFilter++;
 80010ea:	4b3c      	ldr	r3, [pc, #240]	; (80011dc <main+0x1bc>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	1c5a      	adds	r2, r3, #1
 80010f0:	4b3a      	ldr	r3, [pc, #232]	; (80011dc <main+0x1bc>)
 80010f2:	601a      	str	r2, [r3, #0]
			 if (cycleFilter > 5){
 80010f4:	4b39      	ldr	r3, [pc, #228]	; (80011dc <main+0x1bc>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	2b05      	cmp	r3, #5
 80010fa:	dd02      	ble.n	8001102 <main+0xe2>
				 cycleFilter = 0;
 80010fc:	4b37      	ldr	r3, [pc, #220]	; (80011dc <main+0x1bc>)
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]
			 	 }
					 canFilterUpdate(filterID[cycleFilter+1], filterID[cycleFilter]);
 8001102:	4b36      	ldr	r3, [pc, #216]	; (80011dc <main+0x1bc>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	1c5a      	adds	r2, r3, #1
 8001108:	4b35      	ldr	r3, [pc, #212]	; (80011e0 <main+0x1c0>)
 800110a:	0092      	lsls	r2, r2, #2
 800110c:	58d0      	ldr	r0, [r2, r3]
 800110e:	4b33      	ldr	r3, [pc, #204]	; (80011dc <main+0x1bc>)
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	4b33      	ldr	r3, [pc, #204]	; (80011e0 <main+0x1c0>)
 8001114:	0092      	lsls	r2, r2, #2
 8001116:	58d3      	ldr	r3, [r2, r3]
 8001118:	0019      	movs	r1, r3
 800111a:	f7ff f9f7 	bl	800050c <canFilterUpdate>
	 }



	 // Cycle gauges if the button was pressed
	 if (btnPress == 1){
 800111e:	4b31      	ldr	r3, [pc, #196]	; (80011e4 <main+0x1c4>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	2b01      	cmp	r3, #1
 8001124:	d132      	bne.n	800118c <main+0x16c>

		 btnPress = 0;
 8001126:	4b2f      	ldr	r3, [pc, #188]	; (80011e4 <main+0x1c4>)
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
		 // Reset min/max on gauge change
		 lastTimeMax=0;
 800112c:	4b2e      	ldr	r3, [pc, #184]	; (80011e8 <main+0x1c8>)
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
		 lastTimeMin=0;
 8001132:	4b2e      	ldr	r3, [pc, #184]	; (80011ec <main+0x1cc>)
 8001134:	2200      	movs	r2, #0
 8001136:	601a      	str	r2, [r3, #0]
		 lastTimeMaxP=0;
 8001138:	4b2d      	ldr	r3, [pc, #180]	; (80011f0 <main+0x1d0>)
 800113a:	2200      	movs	r2, #0
 800113c:	601a      	str	r2, [r3, #0]
		 lastTimeMinP=0;
 800113e:	4b2d      	ldr	r3, [pc, #180]	; (80011f4 <main+0x1d4>)
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]

		 currentGauge++;
 8001144:	4b23      	ldr	r3, [pc, #140]	; (80011d4 <main+0x1b4>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	1c5a      	adds	r2, r3, #1
 800114a:	4b22      	ldr	r3, [pc, #136]	; (80011d4 <main+0x1b4>)
 800114c:	601a      	str	r2, [r3, #0]
		 if (currentGauge > totalNumGauge){
 800114e:	4b21      	ldr	r3, [pc, #132]	; (80011d4 <main+0x1b4>)
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	4b29      	ldr	r3, [pc, #164]	; (80011f8 <main+0x1d8>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	429a      	cmp	r2, r3
 8001158:	dd02      	ble.n	8001160 <main+0x140>
			 currentGauge = 0;
 800115a:	4b1e      	ldr	r3, [pc, #120]	; (80011d4 <main+0x1b4>)
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
		 }

		 updateGauge(currentGauge);
 8001160:	4b1c      	ldr	r3, [pc, #112]	; (80011d4 <main+0x1b4>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	0018      	movs	r0, r3
 8001166:	f7ff fedd 	bl	8000f24 <updateGauge>

		 if (fastUpdateRate == 1){
 800116a:	4b1b      	ldr	r3, [pc, #108]	; (80011d8 <main+0x1b8>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	2b01      	cmp	r3, #1
 8001170:	d10c      	bne.n	800118c <main+0x16c>
			 canFilterUpdate(filterID[currentFilter], filterID[currentFilter]);
 8001172:	4b22      	ldr	r3, [pc, #136]	; (80011fc <main+0x1dc>)
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	4b1a      	ldr	r3, [pc, #104]	; (80011e0 <main+0x1c0>)
 8001178:	0092      	lsls	r2, r2, #2
 800117a:	58d0      	ldr	r0, [r2, r3]
 800117c:	4b1f      	ldr	r3, [pc, #124]	; (80011fc <main+0x1dc>)
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	4b17      	ldr	r3, [pc, #92]	; (80011e0 <main+0x1c0>)
 8001182:	0092      	lsls	r2, r2, #2
 8001184:	58d3      	ldr	r3, [r2, r3]
 8001186:	0019      	movs	r1, r3
 8001188:	f7ff f9c0 	bl	800050c <canFilterUpdate>
		 }

	 }

	 if (debug == 1){
 800118c:	4b1c      	ldr	r3, [pc, #112]	; (8001200 <main+0x1e0>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2b01      	cmp	r3, #1
 8001192:	d000      	beq.n	8001196 <main+0x176>
 8001194:	e767      	b.n	8001066 <main+0x46>
		 getData();
 8001196:	f7ff fa25 	bl	80005e4 <getData>
		 msgRXstatus = 0;
 800119a:	4b0d      	ldr	r3, [pc, #52]	; (80011d0 <main+0x1b0>)
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
		 updateGauge(currentGauge);
 80011a0:	4b0c      	ldr	r3, [pc, #48]	; (80011d4 <main+0x1b4>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	0018      	movs	r0, r3
 80011a6:	f7ff febd 	bl	8000f24 <updateGauge>
		 lastCanMessage = HAL_GetTick();
 80011aa:	f000 fe33 	bl	8001e14 <HAL_GetTick>
 80011ae:	0003      	movs	r3, r0
 80011b0:	001a      	movs	r2, r3
 80011b2:	4b02      	ldr	r3, [pc, #8]	; (80011bc <main+0x19c>)
 80011b4:	601a      	str	r2, [r3, #0]
	 if (lastCanMessage > 0 && ((HAL_GetTick() - lastCanMessage) > canWaitTime)){
 80011b6:	e756      	b.n	8001066 <main+0x46>
 80011b8:	20000b9c 	.word	0x20000b9c
 80011bc:	200002fc 	.word	0x200002fc
 80011c0:	20000210 	.word	0x20000210
 80011c4:	08005338 	.word	0x08005338
 80011c8:	08005344 	.word	0x08005344
 80011cc:	08005350 	.word	0x08005350
 80011d0:	200002f4 	.word	0x200002f4
 80011d4:	20000200 	.word	0x20000200
 80011d8:	200001fc 	.word	0x200001fc
 80011dc:	200002f0 	.word	0x200002f0
 80011e0:	08005378 	.word	0x08005378
 80011e4:	200002c8 	.word	0x200002c8
 80011e8:	20000b98 	.word	0x20000b98
 80011ec:	20000bc8 	.word	0x20000bc8
 80011f0:	20000bc4 	.word	0x20000bc4
 80011f4:	20000b14 	.word	0x20000b14
 80011f8:	20000204 	.word	0x20000204
 80011fc:	200002ec 	.word	0x200002ec
 8001200:	200002cc 	.word	0x200002cc

08001204 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001204:	b590      	push	{r4, r7, lr}
 8001206:	b099      	sub	sp, #100	; 0x64
 8001208:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800120a:	242c      	movs	r4, #44	; 0x2c
 800120c:	193b      	adds	r3, r7, r4
 800120e:	0018      	movs	r0, r3
 8001210:	2334      	movs	r3, #52	; 0x34
 8001212:	001a      	movs	r2, r3
 8001214:	2100      	movs	r1, #0
 8001216:	f003 fc20 	bl	8004a5a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800121a:	231c      	movs	r3, #28
 800121c:	18fb      	adds	r3, r7, r3
 800121e:	0018      	movs	r0, r3
 8001220:	2310      	movs	r3, #16
 8001222:	001a      	movs	r2, r3
 8001224:	2100      	movs	r1, #0
 8001226:	f003 fc18 	bl	8004a5a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800122a:	1d3b      	adds	r3, r7, #4
 800122c:	0018      	movs	r0, r3
 800122e:	2318      	movs	r3, #24
 8001230:	001a      	movs	r2, r3
 8001232:	2100      	movs	r1, #0
 8001234:	f003 fc11 	bl	8004a5a <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001238:	0021      	movs	r1, r4
 800123a:	187b      	adds	r3, r7, r1
 800123c:	2202      	movs	r2, #2
 800123e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001240:	187b      	adds	r3, r7, r1
 8001242:	2201      	movs	r2, #1
 8001244:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001246:	187b      	adds	r3, r7, r1
 8001248:	2210      	movs	r2, #16
 800124a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800124c:	187b      	adds	r3, r7, r1
 800124e:	2200      	movs	r2, #0
 8001250:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001252:	187b      	adds	r3, r7, r1
 8001254:	0018      	movs	r0, r3
 8001256:	f002 fa8b 	bl	8003770 <HAL_RCC_OscConfig>
 800125a:	1e03      	subs	r3, r0, #0
 800125c:	d001      	beq.n	8001262 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800125e:	f000 f93f 	bl	80014e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001262:	211c      	movs	r1, #28
 8001264:	187b      	adds	r3, r7, r1
 8001266:	2207      	movs	r2, #7
 8001268:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800126a:	187b      	adds	r3, r7, r1
 800126c:	2200      	movs	r2, #0
 800126e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001270:	187b      	adds	r3, r7, r1
 8001272:	2200      	movs	r2, #0
 8001274:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001276:	187b      	adds	r3, r7, r1
 8001278:	2200      	movs	r2, #0
 800127a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800127c:	187b      	adds	r3, r7, r1
 800127e:	2100      	movs	r1, #0
 8001280:	0018      	movs	r0, r3
 8001282:	f002 fdfb 	bl	8003e7c <HAL_RCC_ClockConfig>
 8001286:	1e03      	subs	r3, r0, #0
 8001288:	d001      	beq.n	800128e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800128a:	f000 f929 	bl	80014e0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800128e:	1d3b      	adds	r3, r7, #4
 8001290:	2220      	movs	r2, #32
 8001292:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001294:	1d3b      	adds	r3, r7, #4
 8001296:	2200      	movs	r2, #0
 8001298:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800129a:	1d3b      	adds	r3, r7, #4
 800129c:	0018      	movs	r0, r3
 800129e:	f002 ff67 	bl	8004170 <HAL_RCCEx_PeriphCLKConfig>
 80012a2:	1e03      	subs	r3, r0, #0
 80012a4:	d001      	beq.n	80012aa <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80012a6:	f000 f91b 	bl	80014e0 <Error_Handler>
  }
}
 80012aa:	46c0      	nop			; (mov r8, r8)
 80012ac:	46bd      	mov	sp, r7
 80012ae:	b019      	add	sp, #100	; 0x64
 80012b0:	bd90      	pop	{r4, r7, pc}
	...

080012b4 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80012b8:	4b18      	ldr	r3, [pc, #96]	; (800131c <MX_CAN_Init+0x68>)
 80012ba:	4a19      	ldr	r2, [pc, #100]	; (8001320 <MX_CAN_Init+0x6c>)
 80012bc:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 2;
 80012be:	4b17      	ldr	r3, [pc, #92]	; (800131c <MX_CAN_Init+0x68>)
 80012c0:	2202      	movs	r2, #2
 80012c2:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80012c4:	4b15      	ldr	r3, [pc, #84]	; (800131c <MX_CAN_Init+0x68>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80012ca:	4b14      	ldr	r3, [pc, #80]	; (800131c <MX_CAN_Init+0x68>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_3TQ;
 80012d0:	4b12      	ldr	r3, [pc, #72]	; (800131c <MX_CAN_Init+0x68>)
 80012d2:	2280      	movs	r2, #128	; 0x80
 80012d4:	0292      	lsls	r2, r2, #10
 80012d6:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 80012d8:	4b10      	ldr	r3, [pc, #64]	; (800131c <MX_CAN_Init+0x68>)
 80012da:	22c0      	movs	r2, #192	; 0xc0
 80012dc:	0392      	lsls	r2, r2, #14
 80012de:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80012e0:	4b0e      	ldr	r3, [pc, #56]	; (800131c <MX_CAN_Init+0x68>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80012e6:	4b0d      	ldr	r3, [pc, #52]	; (800131c <MX_CAN_Init+0x68>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80012ec:	4b0b      	ldr	r3, [pc, #44]	; (800131c <MX_CAN_Init+0x68>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80012f2:	4b0a      	ldr	r3, [pc, #40]	; (800131c <MX_CAN_Init+0x68>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80012f8:	4b08      	ldr	r3, [pc, #32]	; (800131c <MX_CAN_Init+0x68>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80012fe:	4b07      	ldr	r3, [pc, #28]	; (800131c <MX_CAN_Init+0x68>)
 8001300:	2200      	movs	r2, #0
 8001302:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001304:	4b05      	ldr	r3, [pc, #20]	; (800131c <MX_CAN_Init+0x68>)
 8001306:	0018      	movs	r0, r3
 8001308:	f000 fdb2 	bl	8001e70 <HAL_CAN_Init>
 800130c:	1e03      	subs	r3, r0, #0
 800130e:	d001      	beq.n	8001314 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8001310:	f000 f8e6 	bl	80014e0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8001314:	46c0      	nop			; (mov r8, r8)
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	46c0      	nop			; (mov r8, r8)
 800131c:	20000b9c 	.word	0x20000b9c
 8001320:	40006400 	.word	0x40006400

08001324 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001328:	4b1b      	ldr	r3, [pc, #108]	; (8001398 <MX_I2C1_Init+0x74>)
 800132a:	4a1c      	ldr	r2, [pc, #112]	; (800139c <MX_I2C1_Init+0x78>)
 800132c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 800132e:	4b1a      	ldr	r3, [pc, #104]	; (8001398 <MX_I2C1_Init+0x74>)
 8001330:	4a1b      	ldr	r2, [pc, #108]	; (80013a0 <MX_I2C1_Init+0x7c>)
 8001332:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001334:	4b18      	ldr	r3, [pc, #96]	; (8001398 <MX_I2C1_Init+0x74>)
 8001336:	2200      	movs	r2, #0
 8001338:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800133a:	4b17      	ldr	r3, [pc, #92]	; (8001398 <MX_I2C1_Init+0x74>)
 800133c:	2201      	movs	r2, #1
 800133e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001340:	4b15      	ldr	r3, [pc, #84]	; (8001398 <MX_I2C1_Init+0x74>)
 8001342:	2200      	movs	r2, #0
 8001344:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001346:	4b14      	ldr	r3, [pc, #80]	; (8001398 <MX_I2C1_Init+0x74>)
 8001348:	2200      	movs	r2, #0
 800134a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800134c:	4b12      	ldr	r3, [pc, #72]	; (8001398 <MX_I2C1_Init+0x74>)
 800134e:	2200      	movs	r2, #0
 8001350:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001352:	4b11      	ldr	r3, [pc, #68]	; (8001398 <MX_I2C1_Init+0x74>)
 8001354:	2200      	movs	r2, #0
 8001356:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001358:	4b0f      	ldr	r3, [pc, #60]	; (8001398 <MX_I2C1_Init+0x74>)
 800135a:	2200      	movs	r2, #0
 800135c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800135e:	4b0e      	ldr	r3, [pc, #56]	; (8001398 <MX_I2C1_Init+0x74>)
 8001360:	0018      	movs	r0, r3
 8001362:	f001 fdb9 	bl	8002ed8 <HAL_I2C_Init>
 8001366:	1e03      	subs	r3, r0, #0
 8001368:	d001      	beq.n	800136e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800136a:	f000 f8b9 	bl	80014e0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800136e:	4b0a      	ldr	r3, [pc, #40]	; (8001398 <MX_I2C1_Init+0x74>)
 8001370:	2100      	movs	r1, #0
 8001372:	0018      	movs	r0, r3
 8001374:	f002 f964 	bl	8003640 <HAL_I2CEx_ConfigAnalogFilter>
 8001378:	1e03      	subs	r3, r0, #0
 800137a:	d001      	beq.n	8001380 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800137c:	f000 f8b0 	bl	80014e0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001380:	4b05      	ldr	r3, [pc, #20]	; (8001398 <MX_I2C1_Init+0x74>)
 8001382:	2100      	movs	r1, #0
 8001384:	0018      	movs	r0, r3
 8001386:	f002 f9a7 	bl	80036d8 <HAL_I2CEx_ConfigDigitalFilter>
 800138a:	1e03      	subs	r3, r0, #0
 800138c:	d001      	beq.n	8001392 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800138e:	f000 f8a7 	bl	80014e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001392:	46c0      	nop			; (mov r8, r8)
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	20000b3c 	.word	0x20000b3c
 800139c:	40005400 	.word	0x40005400
 80013a0:	0000020b 	.word	0x0000020b

080013a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013a8:	4b14      	ldr	r3, [pc, #80]	; (80013fc <MX_USART2_UART_Init+0x58>)
 80013aa:	4a15      	ldr	r2, [pc, #84]	; (8001400 <MX_USART2_UART_Init+0x5c>)
 80013ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80013ae:	4b13      	ldr	r3, [pc, #76]	; (80013fc <MX_USART2_UART_Init+0x58>)
 80013b0:	2296      	movs	r2, #150	; 0x96
 80013b2:	0212      	lsls	r2, r2, #8
 80013b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013b6:	4b11      	ldr	r3, [pc, #68]	; (80013fc <MX_USART2_UART_Init+0x58>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013bc:	4b0f      	ldr	r3, [pc, #60]	; (80013fc <MX_USART2_UART_Init+0x58>)
 80013be:	2200      	movs	r2, #0
 80013c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013c2:	4b0e      	ldr	r3, [pc, #56]	; (80013fc <MX_USART2_UART_Init+0x58>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013c8:	4b0c      	ldr	r3, [pc, #48]	; (80013fc <MX_USART2_UART_Init+0x58>)
 80013ca:	220c      	movs	r2, #12
 80013cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ce:	4b0b      	ldr	r3, [pc, #44]	; (80013fc <MX_USART2_UART_Init+0x58>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013d4:	4b09      	ldr	r3, [pc, #36]	; (80013fc <MX_USART2_UART_Init+0x58>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013da:	4b08      	ldr	r3, [pc, #32]	; (80013fc <MX_USART2_UART_Init+0x58>)
 80013dc:	2200      	movs	r2, #0
 80013de:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013e0:	4b06      	ldr	r3, [pc, #24]	; (80013fc <MX_USART2_UART_Init+0x58>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013e6:	4b05      	ldr	r3, [pc, #20]	; (80013fc <MX_USART2_UART_Init+0x58>)
 80013e8:	0018      	movs	r0, r3
 80013ea:	f002 ffaf 	bl	800434c <HAL_UART_Init>
 80013ee:	1e03      	subs	r3, r0, #0
 80013f0:	d001      	beq.n	80013f6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80013f2:	f000 f875 	bl	80014e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013f6:	46c0      	nop			; (mov r8, r8)
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	20000bd0 	.word	0x20000bd0
 8001400:	40004400 	.word	0x40004400

08001404 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001404:	b590      	push	{r4, r7, lr}
 8001406:	b089      	sub	sp, #36	; 0x24
 8001408:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800140a:	240c      	movs	r4, #12
 800140c:	193b      	adds	r3, r7, r4
 800140e:	0018      	movs	r0, r3
 8001410:	2314      	movs	r3, #20
 8001412:	001a      	movs	r2, r3
 8001414:	2100      	movs	r1, #0
 8001416:	f003 fb20 	bl	8004a5a <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800141a:	4b2f      	ldr	r3, [pc, #188]	; (80014d8 <MX_GPIO_Init+0xd4>)
 800141c:	695a      	ldr	r2, [r3, #20]
 800141e:	4b2e      	ldr	r3, [pc, #184]	; (80014d8 <MX_GPIO_Init+0xd4>)
 8001420:	2180      	movs	r1, #128	; 0x80
 8001422:	03c9      	lsls	r1, r1, #15
 8001424:	430a      	orrs	r2, r1
 8001426:	615a      	str	r2, [r3, #20]
 8001428:	4b2b      	ldr	r3, [pc, #172]	; (80014d8 <MX_GPIO_Init+0xd4>)
 800142a:	695a      	ldr	r2, [r3, #20]
 800142c:	2380      	movs	r3, #128	; 0x80
 800142e:	03db      	lsls	r3, r3, #15
 8001430:	4013      	ands	r3, r2
 8001432:	60bb      	str	r3, [r7, #8]
 8001434:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001436:	4b28      	ldr	r3, [pc, #160]	; (80014d8 <MX_GPIO_Init+0xd4>)
 8001438:	695a      	ldr	r2, [r3, #20]
 800143a:	4b27      	ldr	r3, [pc, #156]	; (80014d8 <MX_GPIO_Init+0xd4>)
 800143c:	2180      	movs	r1, #128	; 0x80
 800143e:	0289      	lsls	r1, r1, #10
 8001440:	430a      	orrs	r2, r1
 8001442:	615a      	str	r2, [r3, #20]
 8001444:	4b24      	ldr	r3, [pc, #144]	; (80014d8 <MX_GPIO_Init+0xd4>)
 8001446:	695a      	ldr	r2, [r3, #20]
 8001448:	2380      	movs	r3, #128	; 0x80
 800144a:	029b      	lsls	r3, r3, #10
 800144c:	4013      	ands	r3, r2
 800144e:	607b      	str	r3, [r7, #4]
 8001450:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001452:	4b21      	ldr	r3, [pc, #132]	; (80014d8 <MX_GPIO_Init+0xd4>)
 8001454:	695a      	ldr	r2, [r3, #20]
 8001456:	4b20      	ldr	r3, [pc, #128]	; (80014d8 <MX_GPIO_Init+0xd4>)
 8001458:	2180      	movs	r1, #128	; 0x80
 800145a:	02c9      	lsls	r1, r1, #11
 800145c:	430a      	orrs	r2, r1
 800145e:	615a      	str	r2, [r3, #20]
 8001460:	4b1d      	ldr	r3, [pc, #116]	; (80014d8 <MX_GPIO_Init+0xd4>)
 8001462:	695a      	ldr	r2, [r3, #20]
 8001464:	2380      	movs	r3, #128	; 0x80
 8001466:	02db      	lsls	r3, r3, #11
 8001468:	4013      	ands	r3, r2
 800146a:	603b      	str	r3, [r7, #0]
 800146c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800146e:	4b1b      	ldr	r3, [pc, #108]	; (80014dc <MX_GPIO_Init+0xd8>)
 8001470:	2200      	movs	r2, #0
 8001472:	2108      	movs	r1, #8
 8001474:	0018      	movs	r0, r3
 8001476:	f001 fcd1 	bl	8002e1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800147a:	193b      	adds	r3, r7, r4
 800147c:	2208      	movs	r2, #8
 800147e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001480:	193b      	adds	r3, r7, r4
 8001482:	2201      	movs	r2, #1
 8001484:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001486:	193b      	adds	r3, r7, r4
 8001488:	2200      	movs	r2, #0
 800148a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800148c:	193b      	adds	r3, r7, r4
 800148e:	2200      	movs	r2, #0
 8001490:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001492:	193b      	adds	r3, r7, r4
 8001494:	4a11      	ldr	r2, [pc, #68]	; (80014dc <MX_GPIO_Init+0xd8>)
 8001496:	0019      	movs	r1, r3
 8001498:	0010      	movs	r0, r2
 800149a:	f001 fb57 	bl	8002b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : button_Pin */
  GPIO_InitStruct.Pin = button_Pin;
 800149e:	0021      	movs	r1, r4
 80014a0:	187b      	adds	r3, r7, r1
 80014a2:	2210      	movs	r2, #16
 80014a4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014a6:	187b      	adds	r3, r7, r1
 80014a8:	2284      	movs	r2, #132	; 0x84
 80014aa:	0392      	lsls	r2, r2, #14
 80014ac:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014ae:	187b      	adds	r3, r7, r1
 80014b0:	2201      	movs	r2, #1
 80014b2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(button_GPIO_Port, &GPIO_InitStruct);
 80014b4:	187b      	adds	r3, r7, r1
 80014b6:	4a09      	ldr	r2, [pc, #36]	; (80014dc <MX_GPIO_Init+0xd8>)
 80014b8:	0019      	movs	r1, r3
 80014ba:	0010      	movs	r0, r2
 80014bc:	f001 fb46 	bl	8002b4c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80014c0:	2200      	movs	r2, #0
 80014c2:	2100      	movs	r1, #0
 80014c4:	2007      	movs	r0, #7
 80014c6:	f001 fb0f 	bl	8002ae8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80014ca:	2007      	movs	r0, #7
 80014cc:	f001 fb21 	bl	8002b12 <HAL_NVIC_EnableIRQ>

}
 80014d0:	46c0      	nop			; (mov r8, r8)
 80014d2:	46bd      	mov	sp, r7
 80014d4:	b009      	add	sp, #36	; 0x24
 80014d6:	bd90      	pop	{r4, r7, pc}
 80014d8:	40021000 	.word	0x40021000
 80014dc:	48000400 	.word	0x48000400

080014e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014e4:	b672      	cpsid	i
}
 80014e6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014e8:	e7fe      	b.n	80014e8 <Error_Handler+0x8>

080014ea <ssd1306_Reset>:



#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80014ea:	b580      	push	{r7, lr}
 80014ec:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80014ee:	46c0      	nop			; (mov r8, r8)
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b086      	sub	sp, #24
 80014f8:	af04      	add	r7, sp, #16
 80014fa:	0002      	movs	r2, r0
 80014fc:	1dfb      	adds	r3, r7, #7
 80014fe:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001500:	4808      	ldr	r0, [pc, #32]	; (8001524 <ssd1306_WriteCommand+0x30>)
 8001502:	2301      	movs	r3, #1
 8001504:	425b      	negs	r3, r3
 8001506:	9302      	str	r3, [sp, #8]
 8001508:	2301      	movs	r3, #1
 800150a:	9301      	str	r3, [sp, #4]
 800150c:	1dfb      	adds	r3, r7, #7
 800150e:	9300      	str	r3, [sp, #0]
 8001510:	2301      	movs	r3, #1
 8001512:	2200      	movs	r2, #0
 8001514:	2178      	movs	r1, #120	; 0x78
 8001516:	f001 fd75 	bl	8003004 <HAL_I2C_Mem_Write>
}
 800151a:	46c0      	nop			; (mov r8, r8)
 800151c:	46bd      	mov	sp, r7
 800151e:	b002      	add	sp, #8
 8001520:	bd80      	pop	{r7, pc}
 8001522:	46c0      	nop			; (mov r8, r8)
 8001524:	20000b3c 	.word	0x20000b3c

08001528 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001528:	b580      	push	{r7, lr}
 800152a:	b086      	sub	sp, #24
 800152c:	af04      	add	r7, sp, #16
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	b29b      	uxth	r3, r3
 8001536:	4808      	ldr	r0, [pc, #32]	; (8001558 <ssd1306_WriteData+0x30>)
 8001538:	2201      	movs	r2, #1
 800153a:	4252      	negs	r2, r2
 800153c:	9202      	str	r2, [sp, #8]
 800153e:	9301      	str	r3, [sp, #4]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	9300      	str	r3, [sp, #0]
 8001544:	2301      	movs	r3, #1
 8001546:	2240      	movs	r2, #64	; 0x40
 8001548:	2178      	movs	r1, #120	; 0x78
 800154a:	f001 fd5b 	bl	8003004 <HAL_I2C_Mem_Write>
}
 800154e:	46c0      	nop			; (mov r8, r8)
 8001550:	46bd      	mov	sp, r7
 8001552:	b002      	add	sp, #8
 8001554:	bd80      	pop	{r7, pc}
 8001556:	46c0      	nop			; (mov r8, r8)
 8001558:	20000b3c 	.word	0x20000b3c

0800155c <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001560:	f7ff ffc3 	bl	80014ea <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001564:	2064      	movs	r0, #100	; 0x64
 8001566:	f000 fc5f 	bl	8001e28 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800156a:	2000      	movs	r0, #0
 800156c:	f000 fa1a 	bl	80019a4 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001570:	2020      	movs	r0, #32
 8001572:	f7ff ffbf 	bl	80014f4 <ssd1306_WriteCommand>


    ssd1306_WriteCommand(0x00b);	 // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001576:	200b      	movs	r0, #11
 8001578:	f7ff ffbc 	bl	80014f4 <ssd1306_WriteCommand>
        // 10b,Page Addressing Mode (RESET); 11b,Invalid



    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800157c:	20b0      	movs	r0, #176	; 0xb0
 800157e:	f7ff ffb9 	bl	80014f4 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror verticallys
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001582:	20c8      	movs	r0, #200	; 0xc8
 8001584:	f7ff ffb6 	bl	80014f4 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001588:	2000      	movs	r0, #0
 800158a:	f7ff ffb3 	bl	80014f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800158e:	2010      	movs	r0, #16
 8001590:	f7ff ffb0 	bl	80014f4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001594:	2040      	movs	r0, #64	; 0x40
 8001596:	f7ff ffad 	bl	80014f4 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800159a:	20ff      	movs	r0, #255	; 0xff
 800159c:	f000 f9ea 	bl	8001974 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
 80015a0:	20a0      	movs	r0, #160	; 0xa0
 80015a2:	f7ff ffa7 	bl	80014f4 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80015a6:	20a6      	movs	r0, #166	; 0xa6
 80015a8:	f7ff ffa4 	bl	80014f4 <ssd1306_WriteCommand>
#endif

// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
 80015ac:	20ff      	movs	r0, #255	; 0xff
 80015ae:	f7ff ffa1 	bl	80014f4 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
#elif (SSD1306_HEIGHT == 128)
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
 80015b2:	203f      	movs	r0, #63	; 0x3f
 80015b4:	f7ff ff9e 	bl	80014f4 <ssd1306_WriteCommand>
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80015b8:	20a4      	movs	r0, #164	; 0xa4
 80015ba:	f7ff ff9b 	bl	80014f4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80015be:	20d3      	movs	r0, #211	; 0xd3
 80015c0:	f7ff ff98 	bl	80014f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x0); //-not offset
 80015c4:	2000      	movs	r0, #0
 80015c6:	f7ff ff95 	bl	80014f4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80015ca:	20d5      	movs	r0, #213	; 0xd5
 80015cc:	f7ff ff92 	bl	80014f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //--set divide ratio
 80015d0:	2010      	movs	r0, #16
 80015d2:	f7ff ff8f 	bl	80014f4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80015d6:	20d9      	movs	r0, #217	; 0xd9
 80015d8:	f7ff ff8c 	bl	80014f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80015dc:	2022      	movs	r0, #34	; 0x22
 80015de:	f7ff ff89 	bl	80014f4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80015e2:	20da      	movs	r0, #218	; 0xda
 80015e4:	f7ff ff86 	bl	80014f4 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
#elif (SSD1306_HEIGHT == 128)
    ssd1306_WriteCommand(0x12);
 80015e8:	2012      	movs	r0, #18
 80015ea:	f7ff ff83 	bl	80014f4 <ssd1306_WriteCommand>
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80015ee:	20db      	movs	r0, #219	; 0xdb
 80015f0:	f7ff ff80 	bl	80014f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVccs
 80015f4:	2020      	movs	r0, #32
 80015f6:	f7ff ff7d 	bl	80014f4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80015fa:	208d      	movs	r0, #141	; 0x8d
 80015fc:	f7ff ff7a 	bl	80014f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001600:	2014      	movs	r0, #20
 8001602:	f7ff ff77 	bl	80014f4 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001606:	2001      	movs	r0, #1
 8001608:	f000 f9cc 	bl	80019a4 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 800160c:	2000      	movs	r0, #0
 800160e:	f000 f811 	bl	8001634 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001612:	f000 f833 	bl	800167c <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001616:	4b06      	ldr	r3, [pc, #24]	; (8001630 <ssd1306_Init+0xd4>)
 8001618:	2200      	movs	r2, #0
 800161a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 800161c:	4b04      	ldr	r3, [pc, #16]	; (8001630 <ssd1306_Init+0xd4>)
 800161e:	2200      	movs	r2, #0
 8001620:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001622:	4b03      	ldr	r3, [pc, #12]	; (8001630 <ssd1306_Init+0xd4>)
 8001624:	2201      	movs	r2, #1
 8001626:	715a      	strb	r2, [r3, #5]
}
 8001628:	46c0      	nop			; (mov r8, r8)
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	46c0      	nop			; (mov r8, r8)
 8001630:	20000b00 	.word	0x20000b00

08001634 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
 800163a:	0002      	movs	r2, r0
 800163c:	1dfb      	adds	r3, r7, #7
 800163e:	701a      	strb	r2, [r3, #0]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001640:	2300      	movs	r3, #0
 8001642:	60fb      	str	r3, [r7, #12]
 8001644:	e00e      	b.n	8001664 <ssd1306_Fill+0x30>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001646:	1dfb      	adds	r3, r7, #7
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d101      	bne.n	8001652 <ssd1306_Fill+0x1e>
 800164e:	2100      	movs	r1, #0
 8001650:	e000      	b.n	8001654 <ssd1306_Fill+0x20>
 8001652:	21ff      	movs	r1, #255	; 0xff
 8001654:	4a08      	ldr	r2, [pc, #32]	; (8001678 <ssd1306_Fill+0x44>)
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	18d3      	adds	r3, r2, r3
 800165a:	1c0a      	adds	r2, r1, #0
 800165c:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	3301      	adds	r3, #1
 8001662:	60fb      	str	r3, [r7, #12]
 8001664:	68fa      	ldr	r2, [r7, #12]
 8001666:	2380      	movs	r3, #128	; 0x80
 8001668:	011b      	lsls	r3, r3, #4
 800166a:	429a      	cmp	r2, r3
 800166c:	d3eb      	bcc.n	8001646 <ssd1306_Fill+0x12>
    }
}
 800166e:	46c0      	nop			; (mov r8, r8)
 8001670:	46c0      	nop			; (mov r8, r8)
 8001672:	46bd      	mov	sp, r7
 8001674:	b004      	add	sp, #16
 8001676:	bd80      	pop	{r7, pc}
 8001678:	20000300 	.word	0x20000300

0800167c <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen

void ssd1306_UpdateScreen(void) {
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001682:	1dfb      	adds	r3, r7, #7
 8001684:	2200      	movs	r2, #0
 8001686:	701a      	strb	r2, [r3, #0]
 8001688:	e01a      	b.n	80016c0 <ssd1306_UpdateScreen+0x44>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 800168a:	1dfb      	adds	r3, r7, #7
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	3b50      	subs	r3, #80	; 0x50
 8001690:	b2db      	uxtb	r3, r3
 8001692:	0018      	movs	r0, r3
 8001694:	f7ff ff2e 	bl	80014f4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 8001698:	2000      	movs	r0, #0
 800169a:	f7ff ff2b 	bl	80014f4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 800169e:	2010      	movs	r0, #16
 80016a0:	f7ff ff28 	bl	80014f4 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80016a4:	1dfb      	adds	r3, r7, #7
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	01da      	lsls	r2, r3, #7
 80016aa:	4b0a      	ldr	r3, [pc, #40]	; (80016d4 <ssd1306_UpdateScreen+0x58>)
 80016ac:	18d3      	adds	r3, r2, r3
 80016ae:	2180      	movs	r1, #128	; 0x80
 80016b0:	0018      	movs	r0, r3
 80016b2:	f7ff ff39 	bl	8001528 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80016b6:	1dfb      	adds	r3, r7, #7
 80016b8:	781a      	ldrb	r2, [r3, #0]
 80016ba:	1dfb      	adds	r3, r7, #7
 80016bc:	3201      	adds	r2, #1
 80016be:	701a      	strb	r2, [r3, #0]
 80016c0:	1dfb      	adds	r3, r7, #7
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	2b0f      	cmp	r3, #15
 80016c6:	d9e0      	bls.n	800168a <ssd1306_UpdateScreen+0xe>
    }
}
 80016c8:	46c0      	nop			; (mov r8, r8)
 80016ca:	46c0      	nop			; (mov r8, r8)
 80016cc:	46bd      	mov	sp, r7
 80016ce:	b002      	add	sp, #8
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	46c0      	nop			; (mov r8, r8)
 80016d4:	20000300 	.word	0x20000300

080016d8 <ssd1306_DrawPixel>:
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color

#ifdef SSD1306_ROTATE_90
void ssd1306_DrawPixel(uint8_t y, uint8_t x, SSD1306_COLOR color) {
 80016d8:	b590      	push	{r4, r7, lr}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	0004      	movs	r4, r0
 80016e0:	0008      	movs	r0, r1
 80016e2:	0011      	movs	r1, r2
 80016e4:	1dfb      	adds	r3, r7, #7
 80016e6:	1c22      	adds	r2, r4, #0
 80016e8:	701a      	strb	r2, [r3, #0]
 80016ea:	1dbb      	adds	r3, r7, #6
 80016ec:	1c02      	adds	r2, r0, #0
 80016ee:	701a      	strb	r2, [r3, #0]
 80016f0:	1d7b      	adds	r3, r7, #5
 80016f2:	1c0a      	adds	r2, r1, #0
 80016f4:	701a      	strb	r2, [r3, #0]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80016f6:	1dbb      	adds	r3, r7, #6
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	b25b      	sxtb	r3, r3
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	db53      	blt.n	80017a8 <ssd1306_DrawPixel+0xd0>
 8001700:	1dfb      	adds	r3, r7, #7
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	b25b      	sxtb	r3, r3
 8001706:	2b00      	cmp	r3, #0
 8001708:	db4e      	blt.n	80017a8 <ssd1306_DrawPixel+0xd0>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 800170a:	4b29      	ldr	r3, [pc, #164]	; (80017b0 <ssd1306_DrawPixel+0xd8>)
 800170c:	791b      	ldrb	r3, [r3, #4]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d006      	beq.n	8001720 <ssd1306_DrawPixel+0x48>
        color = (SSD1306_COLOR)!color;
 8001712:	1d7b      	adds	r3, r7, #5
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	425a      	negs	r2, r3
 8001718:	4153      	adcs	r3, r2
 800171a:	b2da      	uxtb	r2, r3
 800171c:	1d7b      	adds	r3, r7, #5
 800171e:	701a      	strb	r2, [r3, #0]
    }
    
    // Draw in the right color
    if(color == White) {
 8001720:	1d7b      	adds	r3, r7, #5
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	2b01      	cmp	r3, #1
 8001726:	d11e      	bne.n	8001766 <ssd1306_DrawPixel+0x8e>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001728:	1dbb      	adds	r3, r7, #6
 800172a:	781a      	ldrb	r2, [r3, #0]
 800172c:	1dfb      	adds	r3, r7, #7
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	08db      	lsrs	r3, r3, #3
 8001732:	b2d8      	uxtb	r0, r3
 8001734:	0003      	movs	r3, r0
 8001736:	01db      	lsls	r3, r3, #7
 8001738:	18d3      	adds	r3, r2, r3
 800173a:	4a1e      	ldr	r2, [pc, #120]	; (80017b4 <ssd1306_DrawPixel+0xdc>)
 800173c:	5cd3      	ldrb	r3, [r2, r3]
 800173e:	b25a      	sxtb	r2, r3
 8001740:	1dfb      	adds	r3, r7, #7
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	2107      	movs	r1, #7
 8001746:	400b      	ands	r3, r1
 8001748:	2101      	movs	r1, #1
 800174a:	4099      	lsls	r1, r3
 800174c:	000b      	movs	r3, r1
 800174e:	b25b      	sxtb	r3, r3
 8001750:	4313      	orrs	r3, r2
 8001752:	b259      	sxtb	r1, r3
 8001754:	1dbb      	adds	r3, r7, #6
 8001756:	781a      	ldrb	r2, [r3, #0]
 8001758:	0003      	movs	r3, r0
 800175a:	01db      	lsls	r3, r3, #7
 800175c:	18d3      	adds	r3, r2, r3
 800175e:	b2c9      	uxtb	r1, r1
 8001760:	4a14      	ldr	r2, [pc, #80]	; (80017b4 <ssd1306_DrawPixel+0xdc>)
 8001762:	54d1      	strb	r1, [r2, r3]
 8001764:	e021      	b.n	80017aa <ssd1306_DrawPixel+0xd2>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001766:	1dbb      	adds	r3, r7, #6
 8001768:	781a      	ldrb	r2, [r3, #0]
 800176a:	1dfb      	adds	r3, r7, #7
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	08db      	lsrs	r3, r3, #3
 8001770:	b2d8      	uxtb	r0, r3
 8001772:	0003      	movs	r3, r0
 8001774:	01db      	lsls	r3, r3, #7
 8001776:	18d3      	adds	r3, r2, r3
 8001778:	4a0e      	ldr	r2, [pc, #56]	; (80017b4 <ssd1306_DrawPixel+0xdc>)
 800177a:	5cd3      	ldrb	r3, [r2, r3]
 800177c:	b25b      	sxtb	r3, r3
 800177e:	1dfa      	adds	r2, r7, #7
 8001780:	7812      	ldrb	r2, [r2, #0]
 8001782:	2107      	movs	r1, #7
 8001784:	400a      	ands	r2, r1
 8001786:	2101      	movs	r1, #1
 8001788:	4091      	lsls	r1, r2
 800178a:	000a      	movs	r2, r1
 800178c:	b252      	sxtb	r2, r2
 800178e:	43d2      	mvns	r2, r2
 8001790:	b252      	sxtb	r2, r2
 8001792:	4013      	ands	r3, r2
 8001794:	b259      	sxtb	r1, r3
 8001796:	1dbb      	adds	r3, r7, #6
 8001798:	781a      	ldrb	r2, [r3, #0]
 800179a:	0003      	movs	r3, r0
 800179c:	01db      	lsls	r3, r3, #7
 800179e:	18d3      	adds	r3, r2, r3
 80017a0:	b2c9      	uxtb	r1, r1
 80017a2:	4a04      	ldr	r2, [pc, #16]	; (80017b4 <ssd1306_DrawPixel+0xdc>)
 80017a4:	54d1      	strb	r1, [r2, r3]
 80017a6:	e000      	b.n	80017aa <ssd1306_DrawPixel+0xd2>
        return;
 80017a8:	46c0      	nop			; (mov r8, r8)
    }
}
 80017aa:	46bd      	mov	sp, r7
 80017ac:	b003      	add	sp, #12
 80017ae:	bd90      	pop	{r4, r7, pc}
 80017b0:	20000b00 	.word	0x20000b00
 80017b4:	20000300 	.word	0x20000300

080017b8 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80017b8:	b590      	push	{r4, r7, lr}
 80017ba:	b089      	sub	sp, #36	; 0x24
 80017bc:	af00      	add	r7, sp, #0
 80017be:	0004      	movs	r4, r0
 80017c0:	1d38      	adds	r0, r7, #4
 80017c2:	6001      	str	r1, [r0, #0]
 80017c4:	6042      	str	r2, [r0, #4]
 80017c6:	0019      	movs	r1, r3
 80017c8:	200f      	movs	r0, #15
 80017ca:	183b      	adds	r3, r7, r0
 80017cc:	1c22      	adds	r2, r4, #0
 80017ce:	701a      	strb	r2, [r3, #0]
 80017d0:	230e      	movs	r3, #14
 80017d2:	18fb      	adds	r3, r7, r3
 80017d4:	1c0a      	adds	r2, r1, #0
 80017d6:	701a      	strb	r2, [r3, #0]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80017d8:	183b      	adds	r3, r7, r0
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	2b1f      	cmp	r3, #31
 80017de:	d903      	bls.n	80017e8 <ssd1306_WriteChar+0x30>
 80017e0:	183b      	adds	r3, r7, r0
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	2b7e      	cmp	r3, #126	; 0x7e
 80017e6:	d901      	bls.n	80017ec <ssd1306_WriteChar+0x34>
        return 0;
 80017e8:	2300      	movs	r3, #0
 80017ea:	e078      	b.n	80018de <ssd1306_WriteChar+0x126>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80017ec:	4b3e      	ldr	r3, [pc, #248]	; (80018e8 <ssd1306_WriteChar+0x130>)
 80017ee:	881b      	ldrh	r3, [r3, #0]
 80017f0:	001a      	movs	r2, r3
 80017f2:	1d3b      	adds	r3, r7, #4
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	18d3      	adds	r3, r2, r3
 80017f8:	2b80      	cmp	r3, #128	; 0x80
 80017fa:	dc07      	bgt.n	800180c <ssd1306_WriteChar+0x54>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80017fc:	4b3a      	ldr	r3, [pc, #232]	; (80018e8 <ssd1306_WriteChar+0x130>)
 80017fe:	885b      	ldrh	r3, [r3, #2]
 8001800:	001a      	movs	r2, r3
 8001802:	1d3b      	adds	r3, r7, #4
 8001804:	785b      	ldrb	r3, [r3, #1]
 8001806:	18d3      	adds	r3, r2, r3
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001808:	2b80      	cmp	r3, #128	; 0x80
 800180a:	dd01      	ble.n	8001810 <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 800180c:	2300      	movs	r3, #0
 800180e:	e066      	b.n	80018de <ssd1306_WriteChar+0x126>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8001810:	2300      	movs	r3, #0
 8001812:	61fb      	str	r3, [r7, #28]
 8001814:	e051      	b.n	80018ba <ssd1306_WriteChar+0x102>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001816:	1d3b      	adds	r3, r7, #4
 8001818:	685a      	ldr	r2, [r3, #4]
 800181a:	230f      	movs	r3, #15
 800181c:	18fb      	adds	r3, r7, r3
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	3b20      	subs	r3, #32
 8001822:	1d39      	adds	r1, r7, #4
 8001824:	7849      	ldrb	r1, [r1, #1]
 8001826:	434b      	muls	r3, r1
 8001828:	0019      	movs	r1, r3
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	18cb      	adds	r3, r1, r3
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	18d3      	adds	r3, r2, r3
 8001832:	881b      	ldrh	r3, [r3, #0]
 8001834:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8001836:	2300      	movs	r3, #0
 8001838:	61bb      	str	r3, [r7, #24]
 800183a:	e035      	b.n	80018a8 <ssd1306_WriteChar+0xf0>
            if((b << j) & 0x8000)  {
 800183c:	697a      	ldr	r2, [r7, #20]
 800183e:	69bb      	ldr	r3, [r7, #24]
 8001840:	409a      	lsls	r2, r3
 8001842:	2380      	movs	r3, #128	; 0x80
 8001844:	021b      	lsls	r3, r3, #8
 8001846:	4013      	ands	r3, r2
 8001848:	d014      	beq.n	8001874 <ssd1306_WriteChar+0xbc>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800184a:	4b27      	ldr	r3, [pc, #156]	; (80018e8 <ssd1306_WriteChar+0x130>)
 800184c:	881b      	ldrh	r3, [r3, #0]
 800184e:	b2da      	uxtb	r2, r3
 8001850:	69bb      	ldr	r3, [r7, #24]
 8001852:	b2db      	uxtb	r3, r3
 8001854:	18d3      	adds	r3, r2, r3
 8001856:	b2d8      	uxtb	r0, r3
 8001858:	4b23      	ldr	r3, [pc, #140]	; (80018e8 <ssd1306_WriteChar+0x130>)
 800185a:	885b      	ldrh	r3, [r3, #2]
 800185c:	b2da      	uxtb	r2, r3
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	b2db      	uxtb	r3, r3
 8001862:	18d3      	adds	r3, r2, r3
 8001864:	b2d9      	uxtb	r1, r3
 8001866:	230e      	movs	r3, #14
 8001868:	18fb      	adds	r3, r7, r3
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	001a      	movs	r2, r3
 800186e:	f7ff ff33 	bl	80016d8 <ssd1306_DrawPixel>
 8001872:	e016      	b.n	80018a2 <ssd1306_WriteChar+0xea>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001874:	4b1c      	ldr	r3, [pc, #112]	; (80018e8 <ssd1306_WriteChar+0x130>)
 8001876:	881b      	ldrh	r3, [r3, #0]
 8001878:	b2da      	uxtb	r2, r3
 800187a:	69bb      	ldr	r3, [r7, #24]
 800187c:	b2db      	uxtb	r3, r3
 800187e:	18d3      	adds	r3, r2, r3
 8001880:	b2d8      	uxtb	r0, r3
 8001882:	4b19      	ldr	r3, [pc, #100]	; (80018e8 <ssd1306_WriteChar+0x130>)
 8001884:	885b      	ldrh	r3, [r3, #2]
 8001886:	b2da      	uxtb	r2, r3
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	b2db      	uxtb	r3, r3
 800188c:	18d3      	adds	r3, r2, r3
 800188e:	b2d9      	uxtb	r1, r3
 8001890:	230e      	movs	r3, #14
 8001892:	18fb      	adds	r3, r7, r3
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	425a      	negs	r2, r3
 8001898:	4153      	adcs	r3, r2
 800189a:	b2db      	uxtb	r3, r3
 800189c:	001a      	movs	r2, r3
 800189e:	f7ff ff1b 	bl	80016d8 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80018a2:	69bb      	ldr	r3, [r7, #24]
 80018a4:	3301      	adds	r3, #1
 80018a6:	61bb      	str	r3, [r7, #24]
 80018a8:	1d3b      	adds	r3, r7, #4
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	001a      	movs	r2, r3
 80018ae:	69bb      	ldr	r3, [r7, #24]
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d3c3      	bcc.n	800183c <ssd1306_WriteChar+0x84>
    for(i = 0; i < Font.FontHeight; i++) {
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	3301      	adds	r3, #1
 80018b8:	61fb      	str	r3, [r7, #28]
 80018ba:	1d3b      	adds	r3, r7, #4
 80018bc:	785b      	ldrb	r3, [r3, #1]
 80018be:	001a      	movs	r2, r3
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d3a7      	bcc.n	8001816 <ssd1306_WriteChar+0x5e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80018c6:	4b08      	ldr	r3, [pc, #32]	; (80018e8 <ssd1306_WriteChar+0x130>)
 80018c8:	881a      	ldrh	r2, [r3, #0]
 80018ca:	1d3b      	adds	r3, r7, #4
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	b29b      	uxth	r3, r3
 80018d0:	18d3      	adds	r3, r2, r3
 80018d2:	b29a      	uxth	r2, r3
 80018d4:	4b04      	ldr	r3, [pc, #16]	; (80018e8 <ssd1306_WriteChar+0x130>)
 80018d6:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80018d8:	230f      	movs	r3, #15
 80018da:	18fb      	adds	r3, r7, r3
 80018dc:	781b      	ldrb	r3, [r3, #0]
}
 80018de:	0018      	movs	r0, r3
 80018e0:	46bd      	mov	sp, r7
 80018e2:	b009      	add	sp, #36	; 0x24
 80018e4:	bd90      	pop	{r4, r7, pc}
 80018e6:	46c0      	nop			; (mov r8, r8)
 80018e8:	20000b00 	.word	0x20000b00

080018ec <ssd1306_WriteString>:

// Write full string to screen buffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	60f8      	str	r0, [r7, #12]
 80018f4:	1d38      	adds	r0, r7, #4
 80018f6:	6001      	str	r1, [r0, #0]
 80018f8:	6042      	str	r2, [r0, #4]
 80018fa:	001a      	movs	r2, r3
 80018fc:	1cfb      	adds	r3, r7, #3
 80018fe:	701a      	strb	r2, [r3, #0]
    // Write until null-byte
    while (*str) {
 8001900:	e014      	b.n	800192c <ssd1306_WriteString+0x40>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	7818      	ldrb	r0, [r3, #0]
 8001906:	1cfb      	adds	r3, r7, #3
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	1d3a      	adds	r2, r7, #4
 800190c:	6811      	ldr	r1, [r2, #0]
 800190e:	6852      	ldr	r2, [r2, #4]
 8001910:	f7ff ff52 	bl	80017b8 <ssd1306_WriteChar>
 8001914:	0003      	movs	r3, r0
 8001916:	001a      	movs	r2, r3
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	429a      	cmp	r2, r3
 800191e:	d002      	beq.n	8001926 <ssd1306_WriteString+0x3a>
            // Char could not be written
            return *str;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	e008      	b.n	8001938 <ssd1306_WriteString+0x4c>
        }
        
        // Next char
        str++;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	3301      	adds	r3, #1
 800192a:	60fb      	str	r3, [r7, #12]
    while (*str) {
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d1e6      	bne.n	8001902 <ssd1306_WriteString+0x16>
    }
    
    // Everything ok
    return *str;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	781b      	ldrb	r3, [r3, #0]
}
 8001938:	0018      	movs	r0, r3
 800193a:	46bd      	mov	sp, r7
 800193c:	b004      	add	sp, #16
 800193e:	bd80      	pop	{r7, pc}

08001940 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	0002      	movs	r2, r0
 8001948:	1dfb      	adds	r3, r7, #7
 800194a:	701a      	strb	r2, [r3, #0]
 800194c:	1dbb      	adds	r3, r7, #6
 800194e:	1c0a      	adds	r2, r1, #0
 8001950:	701a      	strb	r2, [r3, #0]
    SSD1306.CurrentX = x;
 8001952:	1dfb      	adds	r3, r7, #7
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	b29a      	uxth	r2, r3
 8001958:	4b05      	ldr	r3, [pc, #20]	; (8001970 <ssd1306_SetCursor+0x30>)
 800195a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 800195c:	1dbb      	adds	r3, r7, #6
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	b29a      	uxth	r2, r3
 8001962:	4b03      	ldr	r3, [pc, #12]	; (8001970 <ssd1306_SetCursor+0x30>)
 8001964:	805a      	strh	r2, [r3, #2]
}
 8001966:	46c0      	nop			; (mov r8, r8)
 8001968:	46bd      	mov	sp, r7
 800196a:	b002      	add	sp, #8
 800196c:	bd80      	pop	{r7, pc}
 800196e:	46c0      	nop			; (mov r8, r8)
 8001970:	20000b00 	.word	0x20000b00

08001974 <ssd1306_SetContrast>:
  ssd1306_Line(x1,y2,x1,y1,color);

  return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	0002      	movs	r2, r0
 800197c:	1dfb      	adds	r3, r7, #7
 800197e:	701a      	strb	r2, [r3, #0]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001980:	210f      	movs	r1, #15
 8001982:	187b      	adds	r3, r7, r1
 8001984:	2281      	movs	r2, #129	; 0x81
 8001986:	701a      	strb	r2, [r3, #0]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001988:	187b      	adds	r3, r7, r1
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	0018      	movs	r0, r3
 800198e:	f7ff fdb1 	bl	80014f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001992:	1dfb      	adds	r3, r7, #7
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	0018      	movs	r0, r3
 8001998:	f7ff fdac 	bl	80014f4 <ssd1306_WriteCommand>
}
 800199c:	46c0      	nop			; (mov r8, r8)
 800199e:	46bd      	mov	sp, r7
 80019a0:	b004      	add	sp, #16
 80019a2:	bd80      	pop	{r7, pc}

080019a4 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	0002      	movs	r2, r0
 80019ac:	1dfb      	adds	r3, r7, #7
 80019ae:	701a      	strb	r2, [r3, #0]
    uint8_t value;
    if (on) {
 80019b0:	1dfb      	adds	r3, r7, #7
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d007      	beq.n	80019c8 <ssd1306_SetDisplayOn+0x24>
        value = 0xAF;   // Display on
 80019b8:	230f      	movs	r3, #15
 80019ba:	18fb      	adds	r3, r7, r3
 80019bc:	22af      	movs	r2, #175	; 0xaf
 80019be:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 1;
 80019c0:	4b0a      	ldr	r3, [pc, #40]	; (80019ec <ssd1306_SetDisplayOn+0x48>)
 80019c2:	2201      	movs	r2, #1
 80019c4:	719a      	strb	r2, [r3, #6]
 80019c6:	e006      	b.n	80019d6 <ssd1306_SetDisplayOn+0x32>
    } else {
        value = 0xAE;   // Display off
 80019c8:	230f      	movs	r3, #15
 80019ca:	18fb      	adds	r3, r7, r3
 80019cc:	22ae      	movs	r2, #174	; 0xae
 80019ce:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 0;
 80019d0:	4b06      	ldr	r3, [pc, #24]	; (80019ec <ssd1306_SetDisplayOn+0x48>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	719a      	strb	r2, [r3, #6]
    }
    ssd1306_WriteCommand(value);
 80019d6:	230f      	movs	r3, #15
 80019d8:	18fb      	adds	r3, r7, r3
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	0018      	movs	r0, r3
 80019de:	f7ff fd89 	bl	80014f4 <ssd1306_WriteCommand>
}
 80019e2:	46c0      	nop			; (mov r8, r8)
 80019e4:	46bd      	mov	sp, r7
 80019e6:	b004      	add	sp, #16
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	46c0      	nop			; (mov r8, r8)
 80019ec:	20000b00 	.word	0x20000b00

080019f0 <HAL_MspInit>:
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	4b0f      	ldr	r3, [pc, #60]	; (8001a34 <HAL_MspInit+0x44>)
 80019f8:	699a      	ldr	r2, [r3, #24]
 80019fa:	4b0e      	ldr	r3, [pc, #56]	; (8001a34 <HAL_MspInit+0x44>)
 80019fc:	2101      	movs	r1, #1
 80019fe:	430a      	orrs	r2, r1
 8001a00:	619a      	str	r2, [r3, #24]
 8001a02:	4b0c      	ldr	r3, [pc, #48]	; (8001a34 <HAL_MspInit+0x44>)
 8001a04:	699b      	ldr	r3, [r3, #24]
 8001a06:	2201      	movs	r2, #1
 8001a08:	4013      	ands	r3, r2
 8001a0a:	607b      	str	r3, [r7, #4]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	4b09      	ldr	r3, [pc, #36]	; (8001a34 <HAL_MspInit+0x44>)
 8001a10:	69da      	ldr	r2, [r3, #28]
 8001a12:	4b08      	ldr	r3, [pc, #32]	; (8001a34 <HAL_MspInit+0x44>)
 8001a14:	2180      	movs	r1, #128	; 0x80
 8001a16:	0549      	lsls	r1, r1, #21
 8001a18:	430a      	orrs	r2, r1
 8001a1a:	61da      	str	r2, [r3, #28]
 8001a1c:	4b05      	ldr	r3, [pc, #20]	; (8001a34 <HAL_MspInit+0x44>)
 8001a1e:	69da      	ldr	r2, [r3, #28]
 8001a20:	2380      	movs	r3, #128	; 0x80
 8001a22:	055b      	lsls	r3, r3, #21
 8001a24:	4013      	ands	r3, r2
 8001a26:	603b      	str	r3, [r7, #0]
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	46c0      	nop			; (mov r8, r8)
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	b002      	add	sp, #8
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	46c0      	nop			; (mov r8, r8)
 8001a34:	40021000 	.word	0x40021000

08001a38 <HAL_CAN_MspInit>:
 8001a38:	b590      	push	{r4, r7, lr}
 8001a3a:	b08b      	sub	sp, #44	; 0x2c
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	2414      	movs	r4, #20
 8001a42:	193b      	adds	r3, r7, r4
 8001a44:	0018      	movs	r0, r3
 8001a46:	2314      	movs	r3, #20
 8001a48:	001a      	movs	r2, r3
 8001a4a:	2100      	movs	r1, #0
 8001a4c:	f003 f805 	bl	8004a5a <memset>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a21      	ldr	r2, [pc, #132]	; (8001adc <HAL_CAN_MspInit+0xa4>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d13b      	bne.n	8001ad2 <HAL_CAN_MspInit+0x9a>
 8001a5a:	4b21      	ldr	r3, [pc, #132]	; (8001ae0 <HAL_CAN_MspInit+0xa8>)
 8001a5c:	69da      	ldr	r2, [r3, #28]
 8001a5e:	4b20      	ldr	r3, [pc, #128]	; (8001ae0 <HAL_CAN_MspInit+0xa8>)
 8001a60:	2180      	movs	r1, #128	; 0x80
 8001a62:	0489      	lsls	r1, r1, #18
 8001a64:	430a      	orrs	r2, r1
 8001a66:	61da      	str	r2, [r3, #28]
 8001a68:	4b1d      	ldr	r3, [pc, #116]	; (8001ae0 <HAL_CAN_MspInit+0xa8>)
 8001a6a:	69da      	ldr	r2, [r3, #28]
 8001a6c:	2380      	movs	r3, #128	; 0x80
 8001a6e:	049b      	lsls	r3, r3, #18
 8001a70:	4013      	ands	r3, r2
 8001a72:	613b      	str	r3, [r7, #16]
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	4b1a      	ldr	r3, [pc, #104]	; (8001ae0 <HAL_CAN_MspInit+0xa8>)
 8001a78:	695a      	ldr	r2, [r3, #20]
 8001a7a:	4b19      	ldr	r3, [pc, #100]	; (8001ae0 <HAL_CAN_MspInit+0xa8>)
 8001a7c:	2180      	movs	r1, #128	; 0x80
 8001a7e:	0289      	lsls	r1, r1, #10
 8001a80:	430a      	orrs	r2, r1
 8001a82:	615a      	str	r2, [r3, #20]
 8001a84:	4b16      	ldr	r3, [pc, #88]	; (8001ae0 <HAL_CAN_MspInit+0xa8>)
 8001a86:	695a      	ldr	r2, [r3, #20]
 8001a88:	2380      	movs	r3, #128	; 0x80
 8001a8a:	029b      	lsls	r3, r3, #10
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	60fb      	str	r3, [r7, #12]
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	193b      	adds	r3, r7, r4
 8001a94:	22c0      	movs	r2, #192	; 0xc0
 8001a96:	0152      	lsls	r2, r2, #5
 8001a98:	601a      	str	r2, [r3, #0]
 8001a9a:	0021      	movs	r1, r4
 8001a9c:	187b      	adds	r3, r7, r1
 8001a9e:	2202      	movs	r2, #2
 8001aa0:	605a      	str	r2, [r3, #4]
 8001aa2:	187b      	adds	r3, r7, r1
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	609a      	str	r2, [r3, #8]
 8001aa8:	187b      	adds	r3, r7, r1
 8001aaa:	2203      	movs	r2, #3
 8001aac:	60da      	str	r2, [r3, #12]
 8001aae:	187b      	adds	r3, r7, r1
 8001ab0:	2204      	movs	r2, #4
 8001ab2:	611a      	str	r2, [r3, #16]
 8001ab4:	187a      	adds	r2, r7, r1
 8001ab6:	2390      	movs	r3, #144	; 0x90
 8001ab8:	05db      	lsls	r3, r3, #23
 8001aba:	0011      	movs	r1, r2
 8001abc:	0018      	movs	r0, r3
 8001abe:	f001 f845 	bl	8002b4c <HAL_GPIO_Init>
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	201e      	movs	r0, #30
 8001ac8:	f001 f80e 	bl	8002ae8 <HAL_NVIC_SetPriority>
 8001acc:	201e      	movs	r0, #30
 8001ace:	f001 f820 	bl	8002b12 <HAL_NVIC_EnableIRQ>
 8001ad2:	46c0      	nop			; (mov r8, r8)
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	b00b      	add	sp, #44	; 0x2c
 8001ad8:	bd90      	pop	{r4, r7, pc}
 8001ada:	46c0      	nop			; (mov r8, r8)
 8001adc:	40006400 	.word	0x40006400
 8001ae0:	40021000 	.word	0x40021000

08001ae4 <HAL_I2C_MspInit>:
 8001ae4:	b590      	push	{r4, r7, lr}
 8001ae6:	b08b      	sub	sp, #44	; 0x2c
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	2414      	movs	r4, #20
 8001aee:	193b      	adds	r3, r7, r4
 8001af0:	0018      	movs	r0, r3
 8001af2:	2314      	movs	r3, #20
 8001af4:	001a      	movs	r2, r3
 8001af6:	2100      	movs	r1, #0
 8001af8:	f002 ffaf 	bl	8004a5a <memset>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a1d      	ldr	r2, [pc, #116]	; (8001b78 <HAL_I2C_MspInit+0x94>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d133      	bne.n	8001b6e <HAL_I2C_MspInit+0x8a>
 8001b06:	4b1d      	ldr	r3, [pc, #116]	; (8001b7c <HAL_I2C_MspInit+0x98>)
 8001b08:	695a      	ldr	r2, [r3, #20]
 8001b0a:	4b1c      	ldr	r3, [pc, #112]	; (8001b7c <HAL_I2C_MspInit+0x98>)
 8001b0c:	2180      	movs	r1, #128	; 0x80
 8001b0e:	0289      	lsls	r1, r1, #10
 8001b10:	430a      	orrs	r2, r1
 8001b12:	615a      	str	r2, [r3, #20]
 8001b14:	4b19      	ldr	r3, [pc, #100]	; (8001b7c <HAL_I2C_MspInit+0x98>)
 8001b16:	695a      	ldr	r2, [r3, #20]
 8001b18:	2380      	movs	r3, #128	; 0x80
 8001b1a:	029b      	lsls	r3, r3, #10
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	613b      	str	r3, [r7, #16]
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	193b      	adds	r3, r7, r4
 8001b24:	22c0      	movs	r2, #192	; 0xc0
 8001b26:	00d2      	lsls	r2, r2, #3
 8001b28:	601a      	str	r2, [r3, #0]
 8001b2a:	0021      	movs	r1, r4
 8001b2c:	187b      	adds	r3, r7, r1
 8001b2e:	2212      	movs	r2, #18
 8001b30:	605a      	str	r2, [r3, #4]
 8001b32:	187b      	adds	r3, r7, r1
 8001b34:	2200      	movs	r2, #0
 8001b36:	609a      	str	r2, [r3, #8]
 8001b38:	187b      	adds	r3, r7, r1
 8001b3a:	2203      	movs	r2, #3
 8001b3c:	60da      	str	r2, [r3, #12]
 8001b3e:	187b      	adds	r3, r7, r1
 8001b40:	2204      	movs	r2, #4
 8001b42:	611a      	str	r2, [r3, #16]
 8001b44:	187a      	adds	r2, r7, r1
 8001b46:	2390      	movs	r3, #144	; 0x90
 8001b48:	05db      	lsls	r3, r3, #23
 8001b4a:	0011      	movs	r1, r2
 8001b4c:	0018      	movs	r0, r3
 8001b4e:	f000 fffd 	bl	8002b4c <HAL_GPIO_Init>
 8001b52:	4b0a      	ldr	r3, [pc, #40]	; (8001b7c <HAL_I2C_MspInit+0x98>)
 8001b54:	69da      	ldr	r2, [r3, #28]
 8001b56:	4b09      	ldr	r3, [pc, #36]	; (8001b7c <HAL_I2C_MspInit+0x98>)
 8001b58:	2180      	movs	r1, #128	; 0x80
 8001b5a:	0389      	lsls	r1, r1, #14
 8001b5c:	430a      	orrs	r2, r1
 8001b5e:	61da      	str	r2, [r3, #28]
 8001b60:	4b06      	ldr	r3, [pc, #24]	; (8001b7c <HAL_I2C_MspInit+0x98>)
 8001b62:	69da      	ldr	r2, [r3, #28]
 8001b64:	2380      	movs	r3, #128	; 0x80
 8001b66:	039b      	lsls	r3, r3, #14
 8001b68:	4013      	ands	r3, r2
 8001b6a:	60fb      	str	r3, [r7, #12]
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	46c0      	nop			; (mov r8, r8)
 8001b70:	46bd      	mov	sp, r7
 8001b72:	b00b      	add	sp, #44	; 0x2c
 8001b74:	bd90      	pop	{r4, r7, pc}
 8001b76:	46c0      	nop			; (mov r8, r8)
 8001b78:	40005400 	.word	0x40005400
 8001b7c:	40021000 	.word	0x40021000

08001b80 <HAL_UART_MspInit>:
 8001b80:	b590      	push	{r4, r7, lr}
 8001b82:	b08b      	sub	sp, #44	; 0x2c
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	2414      	movs	r4, #20
 8001b8a:	193b      	adds	r3, r7, r4
 8001b8c:	0018      	movs	r0, r3
 8001b8e:	2314      	movs	r3, #20
 8001b90:	001a      	movs	r2, r3
 8001b92:	2100      	movs	r1, #0
 8001b94:	f002 ff61 	bl	8004a5a <memset>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a1c      	ldr	r2, [pc, #112]	; (8001c10 <HAL_UART_MspInit+0x90>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d132      	bne.n	8001c08 <HAL_UART_MspInit+0x88>
 8001ba2:	4b1c      	ldr	r3, [pc, #112]	; (8001c14 <HAL_UART_MspInit+0x94>)
 8001ba4:	69da      	ldr	r2, [r3, #28]
 8001ba6:	4b1b      	ldr	r3, [pc, #108]	; (8001c14 <HAL_UART_MspInit+0x94>)
 8001ba8:	2180      	movs	r1, #128	; 0x80
 8001baa:	0289      	lsls	r1, r1, #10
 8001bac:	430a      	orrs	r2, r1
 8001bae:	61da      	str	r2, [r3, #28]
 8001bb0:	4b18      	ldr	r3, [pc, #96]	; (8001c14 <HAL_UART_MspInit+0x94>)
 8001bb2:	69da      	ldr	r2, [r3, #28]
 8001bb4:	2380      	movs	r3, #128	; 0x80
 8001bb6:	029b      	lsls	r3, r3, #10
 8001bb8:	4013      	ands	r3, r2
 8001bba:	613b      	str	r3, [r7, #16]
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	4b15      	ldr	r3, [pc, #84]	; (8001c14 <HAL_UART_MspInit+0x94>)
 8001bc0:	695a      	ldr	r2, [r3, #20]
 8001bc2:	4b14      	ldr	r3, [pc, #80]	; (8001c14 <HAL_UART_MspInit+0x94>)
 8001bc4:	2180      	movs	r1, #128	; 0x80
 8001bc6:	0289      	lsls	r1, r1, #10
 8001bc8:	430a      	orrs	r2, r1
 8001bca:	615a      	str	r2, [r3, #20]
 8001bcc:	4b11      	ldr	r3, [pc, #68]	; (8001c14 <HAL_UART_MspInit+0x94>)
 8001bce:	695a      	ldr	r2, [r3, #20]
 8001bd0:	2380      	movs	r3, #128	; 0x80
 8001bd2:	029b      	lsls	r3, r3, #10
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	60fb      	str	r3, [r7, #12]
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	0021      	movs	r1, r4
 8001bdc:	187b      	adds	r3, r7, r1
 8001bde:	4a0e      	ldr	r2, [pc, #56]	; (8001c18 <HAL_UART_MspInit+0x98>)
 8001be0:	601a      	str	r2, [r3, #0]
 8001be2:	187b      	adds	r3, r7, r1
 8001be4:	2202      	movs	r2, #2
 8001be6:	605a      	str	r2, [r3, #4]
 8001be8:	187b      	adds	r3, r7, r1
 8001bea:	2200      	movs	r2, #0
 8001bec:	609a      	str	r2, [r3, #8]
 8001bee:	187b      	adds	r3, r7, r1
 8001bf0:	2203      	movs	r2, #3
 8001bf2:	60da      	str	r2, [r3, #12]
 8001bf4:	187b      	adds	r3, r7, r1
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	611a      	str	r2, [r3, #16]
 8001bfa:	187a      	adds	r2, r7, r1
 8001bfc:	2390      	movs	r3, #144	; 0x90
 8001bfe:	05db      	lsls	r3, r3, #23
 8001c00:	0011      	movs	r1, r2
 8001c02:	0018      	movs	r0, r3
 8001c04:	f000 ffa2 	bl	8002b4c <HAL_GPIO_Init>
 8001c08:	46c0      	nop			; (mov r8, r8)
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	b00b      	add	sp, #44	; 0x2c
 8001c0e:	bd90      	pop	{r4, r7, pc}
 8001c10:	40004400 	.word	0x40004400
 8001c14:	40021000 	.word	0x40021000
 8001c18:	00008004 	.word	0x00008004

08001c1c <NMI_Handler>:
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	e7fe      	b.n	8001c20 <NMI_Handler+0x4>

08001c22 <HardFault_Handler>:
 8001c22:	b580      	push	{r7, lr}
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	e7fe      	b.n	8001c26 <HardFault_Handler+0x4>

08001c28 <SVC_Handler>:
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	46c0      	nop			; (mov r8, r8)
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}

08001c32 <PendSV_Handler>:
 8001c32:	b580      	push	{r7, lr}
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	46c0      	nop			; (mov r8, r8)
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <SysTick_Handler>:
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	f000 f8d6 	bl	8001df0 <HAL_IncTick>
 8001c44:	46c0      	nop			; (mov r8, r8)
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
	...

08001c4c <CEC_CAN_IRQHandler>:
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	4b03      	ldr	r3, [pc, #12]	; (8001c60 <CEC_CAN_IRQHandler+0x14>)
 8001c52:	0018      	movs	r0, r3
 8001c54:	f000 fc88 	bl	8002568 <HAL_CAN_IRQHandler>
 8001c58:	46c0      	nop			; (mov r8, r8)
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	46c0      	nop			; (mov r8, r8)
 8001c60:	20000b9c 	.word	0x20000b9c

08001c64 <_sbrk>:
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b086      	sub	sp, #24
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	4a14      	ldr	r2, [pc, #80]	; (8001cc0 <_sbrk+0x5c>)
 8001c6e:	4b15      	ldr	r3, [pc, #84]	; (8001cc4 <_sbrk+0x60>)
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	617b      	str	r3, [r7, #20]
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	613b      	str	r3, [r7, #16]
 8001c78:	4b13      	ldr	r3, [pc, #76]	; (8001cc8 <_sbrk+0x64>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d102      	bne.n	8001c86 <_sbrk+0x22>
 8001c80:	4b11      	ldr	r3, [pc, #68]	; (8001cc8 <_sbrk+0x64>)
 8001c82:	4a12      	ldr	r2, [pc, #72]	; (8001ccc <_sbrk+0x68>)
 8001c84:	601a      	str	r2, [r3, #0]
 8001c86:	4b10      	ldr	r3, [pc, #64]	; (8001cc8 <_sbrk+0x64>)
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	18d3      	adds	r3, r2, r3
 8001c8e:	693a      	ldr	r2, [r7, #16]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d207      	bcs.n	8001ca4 <_sbrk+0x40>
 8001c94:	f002 feae 	bl	80049f4 <__errno>
 8001c98:	0003      	movs	r3, r0
 8001c9a:	220c      	movs	r2, #12
 8001c9c:	601a      	str	r2, [r3, #0]
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	425b      	negs	r3, r3
 8001ca2:	e009      	b.n	8001cb8 <_sbrk+0x54>
 8001ca4:	4b08      	ldr	r3, [pc, #32]	; (8001cc8 <_sbrk+0x64>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	60fb      	str	r3, [r7, #12]
 8001caa:	4b07      	ldr	r3, [pc, #28]	; (8001cc8 <_sbrk+0x64>)
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	18d2      	adds	r2, r2, r3
 8001cb2:	4b05      	ldr	r3, [pc, #20]	; (8001cc8 <_sbrk+0x64>)
 8001cb4:	601a      	str	r2, [r3, #0]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	0018      	movs	r0, r3
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	b006      	add	sp, #24
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	20001800 	.word	0x20001800
 8001cc4:	00000400 	.word	0x00000400
 8001cc8:	20000b08 	.word	0x20000b08
 8001ccc:	20000c98 	.word	0x20000c98

08001cd0 <SystemInit>:
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	46c0      	nop			; (mov r8, r8)
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
	...

08001cdc <Reset_Handler>:
 8001cdc:	4813      	ldr	r0, [pc, #76]	; (8001d2c <LoopForever+0x2>)
 8001cde:	4685      	mov	sp, r0
 8001ce0:	4813      	ldr	r0, [pc, #76]	; (8001d30 <LoopForever+0x6>)
 8001ce2:	6801      	ldr	r1, [r0, #0]
 8001ce4:	0e09      	lsrs	r1, r1, #24
 8001ce6:	4a13      	ldr	r2, [pc, #76]	; (8001d34 <LoopForever+0xa>)
 8001ce8:	4291      	cmp	r1, r2
 8001cea:	d105      	bne.n	8001cf8 <ApplicationStart>
 8001cec:	4812      	ldr	r0, [pc, #72]	; (8001d38 <LoopForever+0xe>)
 8001cee:	4913      	ldr	r1, [pc, #76]	; (8001d3c <LoopForever+0x12>)
 8001cf0:	6001      	str	r1, [r0, #0]
 8001cf2:	4813      	ldr	r0, [pc, #76]	; (8001d40 <LoopForever+0x16>)
 8001cf4:	4913      	ldr	r1, [pc, #76]	; (8001d44 <LoopForever+0x1a>)
 8001cf6:	6001      	str	r1, [r0, #0]

08001cf8 <ApplicationStart>:
 8001cf8:	4813      	ldr	r0, [pc, #76]	; (8001d48 <LoopForever+0x1e>)
 8001cfa:	4914      	ldr	r1, [pc, #80]	; (8001d4c <LoopForever+0x22>)
 8001cfc:	4a14      	ldr	r2, [pc, #80]	; (8001d50 <LoopForever+0x26>)
 8001cfe:	2300      	movs	r3, #0
 8001d00:	e002      	b.n	8001d08 <LoopCopyDataInit>

08001d02 <CopyDataInit>:
 8001d02:	58d4      	ldr	r4, [r2, r3]
 8001d04:	50c4      	str	r4, [r0, r3]
 8001d06:	3304      	adds	r3, #4

08001d08 <LoopCopyDataInit>:
 8001d08:	18c4      	adds	r4, r0, r3
 8001d0a:	428c      	cmp	r4, r1
 8001d0c:	d3f9      	bcc.n	8001d02 <CopyDataInit>
 8001d0e:	4a11      	ldr	r2, [pc, #68]	; (8001d54 <LoopForever+0x2a>)
 8001d10:	4c11      	ldr	r4, [pc, #68]	; (8001d58 <LoopForever+0x2e>)
 8001d12:	2300      	movs	r3, #0
 8001d14:	e001      	b.n	8001d1a <LoopFillZerobss>

08001d16 <FillZerobss>:
 8001d16:	6013      	str	r3, [r2, #0]
 8001d18:	3204      	adds	r2, #4

08001d1a <LoopFillZerobss>:
 8001d1a:	42a2      	cmp	r2, r4
 8001d1c:	d3fb      	bcc.n	8001d16 <FillZerobss>
 8001d1e:	f7ff ffd7 	bl	8001cd0 <SystemInit>
 8001d22:	f002 fe6d 	bl	8004a00 <__libc_init_array>
 8001d26:	f7ff f97b 	bl	8001020 <main>

08001d2a <LoopForever>:
 8001d2a:	e7fe      	b.n	8001d2a <LoopForever>
 8001d2c:	20001800 	.word	0x20001800
 8001d30:	00000004 	.word	0x00000004
 8001d34:	0000001f 	.word	0x0000001f
 8001d38:	40021018 	.word	0x40021018
 8001d3c:	00000001 	.word	0x00000001
 8001d40:	40010000 	.word	0x40010000
 8001d44:	00000000 	.word	0x00000000
 8001d48:	20000000 	.word	0x20000000
 8001d4c:	2000029c 	.word	0x2000029c
 8001d50:	08007c14 	.word	0x08007c14
 8001d54:	2000029c 	.word	0x2000029c
 8001d58:	20000c94 	.word	0x20000c94

08001d5c <ADC1_IRQHandler>:
 8001d5c:	e7fe      	b.n	8001d5c <ADC1_IRQHandler>
	...

08001d60 <HAL_Init>:
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	4b07      	ldr	r3, [pc, #28]	; (8001d84 <HAL_Init+0x24>)
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	4b06      	ldr	r3, [pc, #24]	; (8001d84 <HAL_Init+0x24>)
 8001d6a:	2110      	movs	r1, #16
 8001d6c:	430a      	orrs	r2, r1
 8001d6e:	601a      	str	r2, [r3, #0]
 8001d70:	2000      	movs	r0, #0
 8001d72:	f000 f809 	bl	8001d88 <HAL_InitTick>
 8001d76:	f7ff fe3b 	bl	80019f0 <HAL_MspInit>
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	0018      	movs	r0, r3
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	46c0      	nop			; (mov r8, r8)
 8001d84:	40022000 	.word	0x40022000

08001d88 <HAL_InitTick>:
 8001d88:	b590      	push	{r4, r7, lr}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	4b14      	ldr	r3, [pc, #80]	; (8001de4 <HAL_InitTick+0x5c>)
 8001d92:	681c      	ldr	r4, [r3, #0]
 8001d94:	4b14      	ldr	r3, [pc, #80]	; (8001de8 <HAL_InitTick+0x60>)
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	0019      	movs	r1, r3
 8001d9a:	23fa      	movs	r3, #250	; 0xfa
 8001d9c:	0098      	lsls	r0, r3, #2
 8001d9e:	f7fe f9bd 	bl	800011c <__udivsi3>
 8001da2:	0003      	movs	r3, r0
 8001da4:	0019      	movs	r1, r3
 8001da6:	0020      	movs	r0, r4
 8001da8:	f7fe f9b8 	bl	800011c <__udivsi3>
 8001dac:	0003      	movs	r3, r0
 8001dae:	0018      	movs	r0, r3
 8001db0:	f000 febf 	bl	8002b32 <HAL_SYSTICK_Config>
 8001db4:	1e03      	subs	r3, r0, #0
 8001db6:	d001      	beq.n	8001dbc <HAL_InitTick+0x34>
 8001db8:	2301      	movs	r3, #1
 8001dba:	e00f      	b.n	8001ddc <HAL_InitTick+0x54>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2b03      	cmp	r3, #3
 8001dc0:	d80b      	bhi.n	8001dda <HAL_InitTick+0x52>
 8001dc2:	6879      	ldr	r1, [r7, #4]
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	425b      	negs	r3, r3
 8001dc8:	2200      	movs	r2, #0
 8001dca:	0018      	movs	r0, r3
 8001dcc:	f000 fe8c 	bl	8002ae8 <HAL_NVIC_SetPriority>
 8001dd0:	4b06      	ldr	r3, [pc, #24]	; (8001dec <HAL_InitTick+0x64>)
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	601a      	str	r2, [r3, #0]
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	e000      	b.n	8001ddc <HAL_InitTick+0x54>
 8001dda:	2301      	movs	r3, #1
 8001ddc:	0018      	movs	r0, r3
 8001dde:	46bd      	mov	sp, r7
 8001de0:	b003      	add	sp, #12
 8001de2:	bd90      	pop	{r4, r7, pc}
 8001de4:	2000022c 	.word	0x2000022c
 8001de8:	20000234 	.word	0x20000234
 8001dec:	20000230 	.word	0x20000230

08001df0 <HAL_IncTick>:
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	4b05      	ldr	r3, [pc, #20]	; (8001e0c <HAL_IncTick+0x1c>)
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	001a      	movs	r2, r3
 8001dfa:	4b05      	ldr	r3, [pc, #20]	; (8001e10 <HAL_IncTick+0x20>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	18d2      	adds	r2, r2, r3
 8001e00:	4b03      	ldr	r3, [pc, #12]	; (8001e10 <HAL_IncTick+0x20>)
 8001e02:	601a      	str	r2, [r3, #0]
 8001e04:	46c0      	nop			; (mov r8, r8)
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	46c0      	nop			; (mov r8, r8)
 8001e0c:	20000234 	.word	0x20000234
 8001e10:	20000c80 	.word	0x20000c80

08001e14 <HAL_GetTick>:
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	4b02      	ldr	r3, [pc, #8]	; (8001e24 <HAL_GetTick+0x10>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	0018      	movs	r0, r3
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	46c0      	nop			; (mov r8, r8)
 8001e24:	20000c80 	.word	0x20000c80

08001e28 <HAL_Delay>:
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	f7ff fff0 	bl	8001e14 <HAL_GetTick>
 8001e34:	0003      	movs	r3, r0
 8001e36:	60bb      	str	r3, [r7, #8]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	60fb      	str	r3, [r7, #12]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	3301      	adds	r3, #1
 8001e40:	d005      	beq.n	8001e4e <HAL_Delay+0x26>
 8001e42:	4b0a      	ldr	r3, [pc, #40]	; (8001e6c <HAL_Delay+0x44>)
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	001a      	movs	r2, r3
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	189b      	adds	r3, r3, r2
 8001e4c:	60fb      	str	r3, [r7, #12]
 8001e4e:	46c0      	nop			; (mov r8, r8)
 8001e50:	f7ff ffe0 	bl	8001e14 <HAL_GetTick>
 8001e54:	0002      	movs	r2, r0
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	68fa      	ldr	r2, [r7, #12]
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d8f7      	bhi.n	8001e50 <HAL_Delay+0x28>
 8001e60:	46c0      	nop			; (mov r8, r8)
 8001e62:	46c0      	nop			; (mov r8, r8)
 8001e64:	46bd      	mov	sp, r7
 8001e66:	b004      	add	sp, #16
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	46c0      	nop			; (mov r8, r8)
 8001e6c:	20000234 	.word	0x20000234

08001e70 <HAL_CAN_Init>:
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b084      	sub	sp, #16
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d101      	bne.n	8001e82 <HAL_CAN_Init+0x12>
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e0f0      	b.n	8002064 <HAL_CAN_Init+0x1f4>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2220      	movs	r2, #32
 8001e86:	5c9b      	ldrb	r3, [r3, r2]
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d103      	bne.n	8001e96 <HAL_CAN_Init+0x26>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	0018      	movs	r0, r3
 8001e92:	f7ff fdd1 	bl	8001a38 <HAL_CAN_MspInit>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	2101      	movs	r1, #1
 8001ea2:	430a      	orrs	r2, r1
 8001ea4:	601a      	str	r2, [r3, #0]
 8001ea6:	f7ff ffb5 	bl	8001e14 <HAL_GetTick>
 8001eaa:	0003      	movs	r3, r0
 8001eac:	60fb      	str	r3, [r7, #12]
 8001eae:	e013      	b.n	8001ed8 <HAL_CAN_Init+0x68>
 8001eb0:	f7ff ffb0 	bl	8001e14 <HAL_GetTick>
 8001eb4:	0002      	movs	r2, r0
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	2b0a      	cmp	r3, #10
 8001ebc:	d90c      	bls.n	8001ed8 <HAL_CAN_Init+0x68>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec2:	2280      	movs	r2, #128	; 0x80
 8001ec4:	0292      	lsls	r2, r2, #10
 8001ec6:	431a      	orrs	r2, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	625a      	str	r2, [r3, #36]	; 0x24
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2220      	movs	r2, #32
 8001ed0:	2105      	movs	r1, #5
 8001ed2:	5499      	strb	r1, [r3, r2]
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e0c5      	b.n	8002064 <HAL_CAN_Init+0x1f4>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	d0e5      	beq.n	8001eb0 <HAL_CAN_Init+0x40>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	2102      	movs	r1, #2
 8001ef0:	438a      	bics	r2, r1
 8001ef2:	601a      	str	r2, [r3, #0]
 8001ef4:	f7ff ff8e 	bl	8001e14 <HAL_GetTick>
 8001ef8:	0003      	movs	r3, r0
 8001efa:	60fb      	str	r3, [r7, #12]
 8001efc:	e013      	b.n	8001f26 <HAL_CAN_Init+0xb6>
 8001efe:	f7ff ff89 	bl	8001e14 <HAL_GetTick>
 8001f02:	0002      	movs	r2, r0
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	2b0a      	cmp	r3, #10
 8001f0a:	d90c      	bls.n	8001f26 <HAL_CAN_Init+0xb6>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f10:	2280      	movs	r2, #128	; 0x80
 8001f12:	0292      	lsls	r2, r2, #10
 8001f14:	431a      	orrs	r2, r3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	625a      	str	r2, [r3, #36]	; 0x24
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2220      	movs	r2, #32
 8001f1e:	2105      	movs	r1, #5
 8001f20:	5499      	strb	r1, [r3, r2]
 8001f22:	2301      	movs	r3, #1
 8001f24:	e09e      	b.n	8002064 <HAL_CAN_Init+0x1f4>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	2202      	movs	r2, #2
 8001f2e:	4013      	ands	r3, r2
 8001f30:	d1e5      	bne.n	8001efe <HAL_CAN_Init+0x8e>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	7e1b      	ldrb	r3, [r3, #24]
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d108      	bne.n	8001f4c <HAL_CAN_Init+0xdc>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2180      	movs	r1, #128	; 0x80
 8001f46:	430a      	orrs	r2, r1
 8001f48:	601a      	str	r2, [r3, #0]
 8001f4a:	e007      	b.n	8001f5c <HAL_CAN_Init+0xec>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	2180      	movs	r1, #128	; 0x80
 8001f58:	438a      	bics	r2, r1
 8001f5a:	601a      	str	r2, [r3, #0]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	7e5b      	ldrb	r3, [r3, #25]
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d108      	bne.n	8001f76 <HAL_CAN_Init+0x106>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	2140      	movs	r1, #64	; 0x40
 8001f70:	430a      	orrs	r2, r1
 8001f72:	601a      	str	r2, [r3, #0]
 8001f74:	e007      	b.n	8001f86 <HAL_CAN_Init+0x116>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2140      	movs	r1, #64	; 0x40
 8001f82:	438a      	bics	r2, r1
 8001f84:	601a      	str	r2, [r3, #0]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	7e9b      	ldrb	r3, [r3, #26]
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d108      	bne.n	8001fa0 <HAL_CAN_Init+0x130>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	2120      	movs	r1, #32
 8001f9a:	430a      	orrs	r2, r1
 8001f9c:	601a      	str	r2, [r3, #0]
 8001f9e:	e007      	b.n	8001fb0 <HAL_CAN_Init+0x140>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	2120      	movs	r1, #32
 8001fac:	438a      	bics	r2, r1
 8001fae:	601a      	str	r2, [r3, #0]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	7edb      	ldrb	r3, [r3, #27]
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d108      	bne.n	8001fca <HAL_CAN_Init+0x15a>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	2110      	movs	r1, #16
 8001fc4:	438a      	bics	r2, r1
 8001fc6:	601a      	str	r2, [r3, #0]
 8001fc8:	e007      	b.n	8001fda <HAL_CAN_Init+0x16a>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2110      	movs	r1, #16
 8001fd6:	430a      	orrs	r2, r1
 8001fd8:	601a      	str	r2, [r3, #0]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	7f1b      	ldrb	r3, [r3, #28]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d108      	bne.n	8001ff4 <HAL_CAN_Init+0x184>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	2108      	movs	r1, #8
 8001fee:	430a      	orrs	r2, r1
 8001ff0:	601a      	str	r2, [r3, #0]
 8001ff2:	e007      	b.n	8002004 <HAL_CAN_Init+0x194>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	2108      	movs	r1, #8
 8002000:	438a      	bics	r2, r1
 8002002:	601a      	str	r2, [r3, #0]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	7f5b      	ldrb	r3, [r3, #29]
 8002008:	2b01      	cmp	r3, #1
 800200a:	d108      	bne.n	800201e <HAL_CAN_Init+0x1ae>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	2104      	movs	r1, #4
 8002018:	430a      	orrs	r2, r1
 800201a:	601a      	str	r2, [r3, #0]
 800201c:	e007      	b.n	800202e <HAL_CAN_Init+0x1be>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2104      	movs	r1, #4
 800202a:	438a      	bics	r2, r1
 800202c:	601a      	str	r2, [r3, #0]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	689a      	ldr	r2, [r3, #8]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	68db      	ldr	r3, [r3, #12]
 8002036:	431a      	orrs	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	691b      	ldr	r3, [r3, #16]
 800203c:	431a      	orrs	r2, r3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	695b      	ldr	r3, [r3, #20]
 8002042:	431a      	orrs	r2, r3
 8002044:	0011      	movs	r1, r2
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	1e5a      	subs	r2, r3, #1
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	430a      	orrs	r2, r1
 8002052:	61da      	str	r2, [r3, #28]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2200      	movs	r2, #0
 8002058:	625a      	str	r2, [r3, #36]	; 0x24
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2220      	movs	r2, #32
 800205e:	2101      	movs	r1, #1
 8002060:	5499      	strb	r1, [r3, r2]
 8002062:	2300      	movs	r3, #0
 8002064:	0018      	movs	r0, r3
 8002066:	46bd      	mov	sp, r7
 8002068:	b004      	add	sp, #16
 800206a:	bd80      	pop	{r7, pc}

0800206c <HAL_CAN_ConfigFilter>:
 800206c:	b580      	push	{r7, lr}
 800206e:	b086      	sub	sp, #24
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	6039      	str	r1, [r7, #0]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	617b      	str	r3, [r7, #20]
 800207c:	2013      	movs	r0, #19
 800207e:	183b      	adds	r3, r7, r0
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	2120      	movs	r1, #32
 8002084:	5c52      	ldrb	r2, [r2, r1]
 8002086:	701a      	strb	r2, [r3, #0]
 8002088:	0002      	movs	r2, r0
 800208a:	18bb      	adds	r3, r7, r2
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	2b01      	cmp	r3, #1
 8002090:	d004      	beq.n	800209c <HAL_CAN_ConfigFilter+0x30>
 8002092:	18bb      	adds	r3, r7, r2
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	2b02      	cmp	r3, #2
 8002098:	d000      	beq.n	800209c <HAL_CAN_ConfigFilter+0x30>
 800209a:	e0cd      	b.n	8002238 <HAL_CAN_ConfigFilter+0x1cc>
 800209c:	697a      	ldr	r2, [r7, #20]
 800209e:	2380      	movs	r3, #128	; 0x80
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	58d3      	ldr	r3, [r2, r3]
 80020a4:	2201      	movs	r2, #1
 80020a6:	431a      	orrs	r2, r3
 80020a8:	0011      	movs	r1, r2
 80020aa:	697a      	ldr	r2, [r7, #20]
 80020ac:	2380      	movs	r3, #128	; 0x80
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	50d1      	str	r1, [r2, r3]
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	695b      	ldr	r3, [r3, #20]
 80020b6:	221f      	movs	r2, #31
 80020b8:	4013      	ands	r3, r2
 80020ba:	2201      	movs	r2, #1
 80020bc:	409a      	lsls	r2, r3
 80020be:	0013      	movs	r3, r2
 80020c0:	60fb      	str	r3, [r7, #12]
 80020c2:	697a      	ldr	r2, [r7, #20]
 80020c4:	2387      	movs	r3, #135	; 0x87
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	58d3      	ldr	r3, [r2, r3]
 80020ca:	68fa      	ldr	r2, [r7, #12]
 80020cc:	43d2      	mvns	r2, r2
 80020ce:	401a      	ands	r2, r3
 80020d0:	0011      	movs	r1, r2
 80020d2:	697a      	ldr	r2, [r7, #20]
 80020d4:	2387      	movs	r3, #135	; 0x87
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	50d1      	str	r1, [r2, r3]
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	69db      	ldr	r3, [r3, #28]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d129      	bne.n	8002136 <HAL_CAN_ConfigFilter+0xca>
 80020e2:	697a      	ldr	r2, [r7, #20]
 80020e4:	2383      	movs	r3, #131	; 0x83
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	58d3      	ldr	r3, [r2, r3]
 80020ea:	68fa      	ldr	r2, [r7, #12]
 80020ec:	43d2      	mvns	r2, r2
 80020ee:	401a      	ands	r2, r3
 80020f0:	0011      	movs	r1, r2
 80020f2:	697a      	ldr	r2, [r7, #20]
 80020f4:	2383      	movs	r3, #131	; 0x83
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	50d1      	str	r1, [r2, r3]
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	68db      	ldr	r3, [r3, #12]
 80020fe:	0418      	lsls	r0, r3, #16
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	041b      	lsls	r3, r3, #16
 8002106:	0c19      	lsrs	r1, r3, #16
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	695a      	ldr	r2, [r3, #20]
 800210c:	4301      	orrs	r1, r0
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	3248      	adds	r2, #72	; 0x48
 8002112:	00d2      	lsls	r2, r2, #3
 8002114:	50d1      	str	r1, [r2, r3]
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	0419      	lsls	r1, r3, #16
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	041b      	lsls	r3, r3, #16
 8002122:	0c1a      	lsrs	r2, r3, #16
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	695b      	ldr	r3, [r3, #20]
 8002128:	430a      	orrs	r2, r1
 800212a:	6979      	ldr	r1, [r7, #20]
 800212c:	3348      	adds	r3, #72	; 0x48
 800212e:	00db      	lsls	r3, r3, #3
 8002130:	18cb      	adds	r3, r1, r3
 8002132:	3304      	adds	r3, #4
 8002134:	601a      	str	r2, [r3, #0]
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	69db      	ldr	r3, [r3, #28]
 800213a:	2b01      	cmp	r3, #1
 800213c:	d128      	bne.n	8002190 <HAL_CAN_ConfigFilter+0x124>
 800213e:	697a      	ldr	r2, [r7, #20]
 8002140:	2383      	movs	r3, #131	; 0x83
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	58d2      	ldr	r2, [r2, r3]
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	431a      	orrs	r2, r3
 800214a:	0011      	movs	r1, r2
 800214c:	697a      	ldr	r2, [r7, #20]
 800214e:	2383      	movs	r3, #131	; 0x83
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	50d1      	str	r1, [r2, r3]
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	0418      	lsls	r0, r3, #16
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	041b      	lsls	r3, r3, #16
 8002160:	0c19      	lsrs	r1, r3, #16
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	695a      	ldr	r2, [r3, #20]
 8002166:	4301      	orrs	r1, r0
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	3248      	adds	r2, #72	; 0x48
 800216c:	00d2      	lsls	r2, r2, #3
 800216e:	50d1      	str	r1, [r2, r3]
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	0419      	lsls	r1, r3, #16
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	041b      	lsls	r3, r3, #16
 800217c:	0c1a      	lsrs	r2, r3, #16
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	695b      	ldr	r3, [r3, #20]
 8002182:	430a      	orrs	r2, r1
 8002184:	6979      	ldr	r1, [r7, #20]
 8002186:	3348      	adds	r3, #72	; 0x48
 8002188:	00db      	lsls	r3, r3, #3
 800218a:	18cb      	adds	r3, r1, r3
 800218c:	3304      	adds	r3, #4
 800218e:	601a      	str	r2, [r3, #0]
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	699b      	ldr	r3, [r3, #24]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d10c      	bne.n	80021b2 <HAL_CAN_ConfigFilter+0x146>
 8002198:	697a      	ldr	r2, [r7, #20]
 800219a:	2381      	movs	r3, #129	; 0x81
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	58d3      	ldr	r3, [r2, r3]
 80021a0:	68fa      	ldr	r2, [r7, #12]
 80021a2:	43d2      	mvns	r2, r2
 80021a4:	401a      	ands	r2, r3
 80021a6:	0011      	movs	r1, r2
 80021a8:	697a      	ldr	r2, [r7, #20]
 80021aa:	2381      	movs	r3, #129	; 0x81
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	50d1      	str	r1, [r2, r3]
 80021b0:	e00a      	b.n	80021c8 <HAL_CAN_ConfigFilter+0x15c>
 80021b2:	697a      	ldr	r2, [r7, #20]
 80021b4:	2381      	movs	r3, #129	; 0x81
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	58d2      	ldr	r2, [r2, r3]
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	431a      	orrs	r2, r3
 80021be:	0011      	movs	r1, r2
 80021c0:	697a      	ldr	r2, [r7, #20]
 80021c2:	2381      	movs	r3, #129	; 0x81
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	50d1      	str	r1, [r2, r3]
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	691b      	ldr	r3, [r3, #16]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d10c      	bne.n	80021ea <HAL_CAN_ConfigFilter+0x17e>
 80021d0:	697a      	ldr	r2, [r7, #20]
 80021d2:	2385      	movs	r3, #133	; 0x85
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	58d3      	ldr	r3, [r2, r3]
 80021d8:	68fa      	ldr	r2, [r7, #12]
 80021da:	43d2      	mvns	r2, r2
 80021dc:	401a      	ands	r2, r3
 80021de:	0011      	movs	r1, r2
 80021e0:	697a      	ldr	r2, [r7, #20]
 80021e2:	2385      	movs	r3, #133	; 0x85
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	50d1      	str	r1, [r2, r3]
 80021e8:	e00a      	b.n	8002200 <HAL_CAN_ConfigFilter+0x194>
 80021ea:	697a      	ldr	r2, [r7, #20]
 80021ec:	2385      	movs	r3, #133	; 0x85
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	58d2      	ldr	r2, [r2, r3]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	431a      	orrs	r2, r3
 80021f6:	0011      	movs	r1, r2
 80021f8:	697a      	ldr	r2, [r7, #20]
 80021fa:	2385      	movs	r3, #133	; 0x85
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	50d1      	str	r1, [r2, r3]
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	6a1b      	ldr	r3, [r3, #32]
 8002204:	2b01      	cmp	r3, #1
 8002206:	d10a      	bne.n	800221e <HAL_CAN_ConfigFilter+0x1b2>
 8002208:	697a      	ldr	r2, [r7, #20]
 800220a:	2387      	movs	r3, #135	; 0x87
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	58d2      	ldr	r2, [r2, r3]
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	431a      	orrs	r2, r3
 8002214:	0011      	movs	r1, r2
 8002216:	697a      	ldr	r2, [r7, #20]
 8002218:	2387      	movs	r3, #135	; 0x87
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	50d1      	str	r1, [r2, r3]
 800221e:	697a      	ldr	r2, [r7, #20]
 8002220:	2380      	movs	r3, #128	; 0x80
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	58d3      	ldr	r3, [r2, r3]
 8002226:	2201      	movs	r2, #1
 8002228:	4393      	bics	r3, r2
 800222a:	0019      	movs	r1, r3
 800222c:	697a      	ldr	r2, [r7, #20]
 800222e:	2380      	movs	r3, #128	; 0x80
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	50d1      	str	r1, [r2, r3]
 8002234:	2300      	movs	r3, #0
 8002236:	e007      	b.n	8002248 <HAL_CAN_ConfigFilter+0x1dc>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223c:	2280      	movs	r2, #128	; 0x80
 800223e:	02d2      	lsls	r2, r2, #11
 8002240:	431a      	orrs	r2, r3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	625a      	str	r2, [r3, #36]	; 0x24
 8002246:	2301      	movs	r3, #1
 8002248:	0018      	movs	r0, r3
 800224a:	46bd      	mov	sp, r7
 800224c:	b006      	add	sp, #24
 800224e:	bd80      	pop	{r7, pc}

08002250 <HAL_CAN_Start>:
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2220      	movs	r2, #32
 800225c:	5c9b      	ldrb	r3, [r3, r2]
 800225e:	b2db      	uxtb	r3, r3
 8002260:	2b01      	cmp	r3, #1
 8002262:	d12f      	bne.n	80022c4 <HAL_CAN_Start+0x74>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2220      	movs	r2, #32
 8002268:	2102      	movs	r1, #2
 800226a:	5499      	strb	r1, [r3, r2]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	2101      	movs	r1, #1
 8002278:	438a      	bics	r2, r1
 800227a:	601a      	str	r2, [r3, #0]
 800227c:	f7ff fdca 	bl	8001e14 <HAL_GetTick>
 8002280:	0003      	movs	r3, r0
 8002282:	60fb      	str	r3, [r7, #12]
 8002284:	e013      	b.n	80022ae <HAL_CAN_Start+0x5e>
 8002286:	f7ff fdc5 	bl	8001e14 <HAL_GetTick>
 800228a:	0002      	movs	r2, r0
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	2b0a      	cmp	r3, #10
 8002292:	d90c      	bls.n	80022ae <HAL_CAN_Start+0x5e>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002298:	2280      	movs	r2, #128	; 0x80
 800229a:	0292      	lsls	r2, r2, #10
 800229c:	431a      	orrs	r2, r3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	625a      	str	r2, [r3, #36]	; 0x24
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2220      	movs	r2, #32
 80022a6:	2105      	movs	r1, #5
 80022a8:	5499      	strb	r1, [r3, r2]
 80022aa:	2301      	movs	r3, #1
 80022ac:	e012      	b.n	80022d4 <HAL_CAN_Start+0x84>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	2201      	movs	r2, #1
 80022b6:	4013      	ands	r3, r2
 80022b8:	d1e5      	bne.n	8002286 <HAL_CAN_Start+0x36>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2200      	movs	r2, #0
 80022be:	625a      	str	r2, [r3, #36]	; 0x24
 80022c0:	2300      	movs	r3, #0
 80022c2:	e007      	b.n	80022d4 <HAL_CAN_Start+0x84>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c8:	2280      	movs	r2, #128	; 0x80
 80022ca:	0312      	lsls	r2, r2, #12
 80022cc:	431a      	orrs	r2, r3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	625a      	str	r2, [r3, #36]	; 0x24
 80022d2:	2301      	movs	r3, #1
 80022d4:	0018      	movs	r0, r3
 80022d6:	46bd      	mov	sp, r7
 80022d8:	b004      	add	sp, #16
 80022da:	bd80      	pop	{r7, pc}

080022dc <HAL_CAN_GetRxMessage>:
 80022dc:	b580      	push	{r7, lr}
 80022de:	b086      	sub	sp, #24
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	60f8      	str	r0, [r7, #12]
 80022e4:	60b9      	str	r1, [r7, #8]
 80022e6:	607a      	str	r2, [r7, #4]
 80022e8:	603b      	str	r3, [r7, #0]
 80022ea:	2017      	movs	r0, #23
 80022ec:	183b      	adds	r3, r7, r0
 80022ee:	68fa      	ldr	r2, [r7, #12]
 80022f0:	2120      	movs	r1, #32
 80022f2:	5c52      	ldrb	r2, [r2, r1]
 80022f4:	701a      	strb	r2, [r3, #0]
 80022f6:	0002      	movs	r2, r0
 80022f8:	18bb      	adds	r3, r7, r2
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d004      	beq.n	800230a <HAL_CAN_GetRxMessage+0x2e>
 8002300:	18bb      	adds	r3, r7, r2
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	2b02      	cmp	r3, #2
 8002306:	d000      	beq.n	800230a <HAL_CAN_GetRxMessage+0x2e>
 8002308:	e0f8      	b.n	80024fc <HAL_CAN_GetRxMessage+0x220>
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d10e      	bne.n	800232e <HAL_CAN_GetRxMessage+0x52>
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	68db      	ldr	r3, [r3, #12]
 8002316:	2203      	movs	r2, #3
 8002318:	4013      	ands	r3, r2
 800231a:	d117      	bne.n	800234c <HAL_CAN_GetRxMessage+0x70>
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002320:	2280      	movs	r2, #128	; 0x80
 8002322:	0392      	lsls	r2, r2, #14
 8002324:	431a      	orrs	r2, r3
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	625a      	str	r2, [r3, #36]	; 0x24
 800232a:	2301      	movs	r3, #1
 800232c:	e0ee      	b.n	800250c <HAL_CAN_GetRxMessage+0x230>
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	691b      	ldr	r3, [r3, #16]
 8002334:	2203      	movs	r2, #3
 8002336:	4013      	ands	r3, r2
 8002338:	d108      	bne.n	800234c <HAL_CAN_GetRxMessage+0x70>
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233e:	2280      	movs	r2, #128	; 0x80
 8002340:	0392      	lsls	r2, r2, #14
 8002342:	431a      	orrs	r2, r3
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	625a      	str	r2, [r3, #36]	; 0x24
 8002348:	2301      	movs	r3, #1
 800234a:	e0df      	b.n	800250c <HAL_CAN_GetRxMessage+0x230>
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	68ba      	ldr	r2, [r7, #8]
 8002352:	321b      	adds	r2, #27
 8002354:	0112      	lsls	r2, r2, #4
 8002356:	58d3      	ldr	r3, [r2, r3]
 8002358:	2204      	movs	r2, #4
 800235a:	401a      	ands	r2, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	609a      	str	r2, [r3, #8]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d10b      	bne.n	8002380 <HAL_CAN_GetRxMessage+0xa4>
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	68ba      	ldr	r2, [r7, #8]
 800236e:	321b      	adds	r2, #27
 8002370:	0112      	lsls	r2, r2, #4
 8002372:	58d3      	ldr	r3, [r2, r3]
 8002374:	0d5b      	lsrs	r3, r3, #21
 8002376:	055b      	lsls	r3, r3, #21
 8002378:	0d5a      	lsrs	r2, r3, #21
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	601a      	str	r2, [r3, #0]
 800237e:	e00a      	b.n	8002396 <HAL_CAN_GetRxMessage+0xba>
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	68ba      	ldr	r2, [r7, #8]
 8002386:	321b      	adds	r2, #27
 8002388:	0112      	lsls	r2, r2, #4
 800238a:	58d3      	ldr	r3, [r2, r3]
 800238c:	08db      	lsrs	r3, r3, #3
 800238e:	00db      	lsls	r3, r3, #3
 8002390:	08da      	lsrs	r2, r3, #3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	605a      	str	r2, [r3, #4]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	68ba      	ldr	r2, [r7, #8]
 800239c:	321b      	adds	r2, #27
 800239e:	0112      	lsls	r2, r2, #4
 80023a0:	58d3      	ldr	r3, [r2, r3]
 80023a2:	2202      	movs	r2, #2
 80023a4:	401a      	ands	r2, r3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	60da      	str	r2, [r3, #12]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	331b      	adds	r3, #27
 80023b2:	011b      	lsls	r3, r3, #4
 80023b4:	18d3      	adds	r3, r2, r3
 80023b6:	3304      	adds	r3, #4
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	220f      	movs	r2, #15
 80023bc:	401a      	ands	r2, r3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	611a      	str	r2, [r3, #16]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	331b      	adds	r3, #27
 80023ca:	011b      	lsls	r3, r3, #4
 80023cc:	18d3      	adds	r3, r2, r3
 80023ce:	3304      	adds	r3, #4
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	0a1b      	lsrs	r3, r3, #8
 80023d4:	22ff      	movs	r2, #255	; 0xff
 80023d6:	401a      	ands	r2, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	619a      	str	r2, [r3, #24]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	331b      	adds	r3, #27
 80023e4:	011b      	lsls	r3, r3, #4
 80023e6:	18d3      	adds	r3, r2, r3
 80023e8:	3304      	adds	r3, #4
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	0c1b      	lsrs	r3, r3, #16
 80023ee:	041b      	lsls	r3, r3, #16
 80023f0:	0c1a      	lsrs	r2, r3, #16
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	615a      	str	r2, [r3, #20]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	6819      	ldr	r1, [r3, #0]
 80023fa:	68ba      	ldr	r2, [r7, #8]
 80023fc:	23dc      	movs	r3, #220	; 0xdc
 80023fe:	005b      	lsls	r3, r3, #1
 8002400:	0112      	lsls	r2, r2, #4
 8002402:	188a      	adds	r2, r1, r2
 8002404:	18d3      	adds	r3, r2, r3
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	b2da      	uxtb	r2, r3
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	701a      	strb	r2, [r3, #0]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	6819      	ldr	r1, [r3, #0]
 8002412:	68ba      	ldr	r2, [r7, #8]
 8002414:	23dc      	movs	r3, #220	; 0xdc
 8002416:	005b      	lsls	r3, r3, #1
 8002418:	0112      	lsls	r2, r2, #4
 800241a:	188a      	adds	r2, r1, r2
 800241c:	18d3      	adds	r3, r2, r3
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	0a1a      	lsrs	r2, r3, #8
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	3301      	adds	r3, #1
 8002426:	b2d2      	uxtb	r2, r2
 8002428:	701a      	strb	r2, [r3, #0]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	6819      	ldr	r1, [r3, #0]
 800242e:	68ba      	ldr	r2, [r7, #8]
 8002430:	23dc      	movs	r3, #220	; 0xdc
 8002432:	005b      	lsls	r3, r3, #1
 8002434:	0112      	lsls	r2, r2, #4
 8002436:	188a      	adds	r2, r1, r2
 8002438:	18d3      	adds	r3, r2, r3
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	0c1a      	lsrs	r2, r3, #16
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	3302      	adds	r3, #2
 8002442:	b2d2      	uxtb	r2, r2
 8002444:	701a      	strb	r2, [r3, #0]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	6819      	ldr	r1, [r3, #0]
 800244a:	68ba      	ldr	r2, [r7, #8]
 800244c:	23dc      	movs	r3, #220	; 0xdc
 800244e:	005b      	lsls	r3, r3, #1
 8002450:	0112      	lsls	r2, r2, #4
 8002452:	188a      	adds	r2, r1, r2
 8002454:	18d3      	adds	r3, r2, r3
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	0e1a      	lsrs	r2, r3, #24
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	3303      	adds	r3, #3
 800245e:	b2d2      	uxtb	r2, r2
 8002460:	701a      	strb	r2, [r3, #0]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	6819      	ldr	r1, [r3, #0]
 8002466:	68ba      	ldr	r2, [r7, #8]
 8002468:	23de      	movs	r3, #222	; 0xde
 800246a:	005b      	lsls	r3, r3, #1
 800246c:	0112      	lsls	r2, r2, #4
 800246e:	188a      	adds	r2, r1, r2
 8002470:	18d3      	adds	r3, r2, r3
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	3304      	adds	r3, #4
 8002478:	b2d2      	uxtb	r2, r2
 800247a:	701a      	strb	r2, [r3, #0]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	6819      	ldr	r1, [r3, #0]
 8002480:	68ba      	ldr	r2, [r7, #8]
 8002482:	23de      	movs	r3, #222	; 0xde
 8002484:	005b      	lsls	r3, r3, #1
 8002486:	0112      	lsls	r2, r2, #4
 8002488:	188a      	adds	r2, r1, r2
 800248a:	18d3      	adds	r3, r2, r3
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	0a1a      	lsrs	r2, r3, #8
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	3305      	adds	r3, #5
 8002494:	b2d2      	uxtb	r2, r2
 8002496:	701a      	strb	r2, [r3, #0]
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	6819      	ldr	r1, [r3, #0]
 800249c:	68ba      	ldr	r2, [r7, #8]
 800249e:	23de      	movs	r3, #222	; 0xde
 80024a0:	005b      	lsls	r3, r3, #1
 80024a2:	0112      	lsls	r2, r2, #4
 80024a4:	188a      	adds	r2, r1, r2
 80024a6:	18d3      	adds	r3, r2, r3
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	0c1a      	lsrs	r2, r3, #16
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	3306      	adds	r3, #6
 80024b0:	b2d2      	uxtb	r2, r2
 80024b2:	701a      	strb	r2, [r3, #0]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	6819      	ldr	r1, [r3, #0]
 80024b8:	68ba      	ldr	r2, [r7, #8]
 80024ba:	23de      	movs	r3, #222	; 0xde
 80024bc:	005b      	lsls	r3, r3, #1
 80024be:	0112      	lsls	r2, r2, #4
 80024c0:	188a      	adds	r2, r1, r2
 80024c2:	18d3      	adds	r3, r2, r3
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	0e1a      	lsrs	r2, r3, #24
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	3307      	adds	r3, #7
 80024cc:	b2d2      	uxtb	r2, r2
 80024ce:	701a      	strb	r2, [r3, #0]
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d108      	bne.n	80024e8 <HAL_CAN_GetRxMessage+0x20c>
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	68da      	ldr	r2, [r3, #12]
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	2120      	movs	r1, #32
 80024e2:	430a      	orrs	r2, r1
 80024e4:	60da      	str	r2, [r3, #12]
 80024e6:	e007      	b.n	80024f8 <HAL_CAN_GetRxMessage+0x21c>
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	691a      	ldr	r2, [r3, #16]
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	2120      	movs	r1, #32
 80024f4:	430a      	orrs	r2, r1
 80024f6:	611a      	str	r2, [r3, #16]
 80024f8:	2300      	movs	r3, #0
 80024fa:	e007      	b.n	800250c <HAL_CAN_GetRxMessage+0x230>
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002500:	2280      	movs	r2, #128	; 0x80
 8002502:	02d2      	lsls	r2, r2, #11
 8002504:	431a      	orrs	r2, r3
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	625a      	str	r2, [r3, #36]	; 0x24
 800250a:	2301      	movs	r3, #1
 800250c:	0018      	movs	r0, r3
 800250e:	46bd      	mov	sp, r7
 8002510:	b006      	add	sp, #24
 8002512:	bd80      	pop	{r7, pc}

08002514 <HAL_CAN_ActivateNotification>:
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	6039      	str	r1, [r7, #0]
 800251e:	200f      	movs	r0, #15
 8002520:	183b      	adds	r3, r7, r0
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	2120      	movs	r1, #32
 8002526:	5c52      	ldrb	r2, [r2, r1]
 8002528:	701a      	strb	r2, [r3, #0]
 800252a:	0002      	movs	r2, r0
 800252c:	18bb      	adds	r3, r7, r2
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	2b01      	cmp	r3, #1
 8002532:	d003      	beq.n	800253c <HAL_CAN_ActivateNotification+0x28>
 8002534:	18bb      	adds	r3, r7, r2
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	2b02      	cmp	r3, #2
 800253a:	d109      	bne.n	8002550 <HAL_CAN_ActivateNotification+0x3c>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	6959      	ldr	r1, [r3, #20]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	683a      	ldr	r2, [r7, #0]
 8002548:	430a      	orrs	r2, r1
 800254a:	615a      	str	r2, [r3, #20]
 800254c:	2300      	movs	r3, #0
 800254e:	e007      	b.n	8002560 <HAL_CAN_ActivateNotification+0x4c>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002554:	2280      	movs	r2, #128	; 0x80
 8002556:	02d2      	lsls	r2, r2, #11
 8002558:	431a      	orrs	r2, r3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	625a      	str	r2, [r3, #36]	; 0x24
 800255e:	2301      	movs	r3, #1
 8002560:	0018      	movs	r0, r3
 8002562:	46bd      	mov	sp, r7
 8002564:	b004      	add	sp, #16
 8002566:	bd80      	pop	{r7, pc}

08002568 <HAL_CAN_IRQHandler>:
 8002568:	b580      	push	{r7, lr}
 800256a:	b08a      	sub	sp, #40	; 0x28
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	2300      	movs	r3, #0
 8002572:	627b      	str	r3, [r7, #36]	; 0x24
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	695b      	ldr	r3, [r3, #20]
 800257a:	623b      	str	r3, [r7, #32]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	61fb      	str	r3, [r7, #28]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	61bb      	str	r3, [r7, #24]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	617b      	str	r3, [r7, #20]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	691b      	ldr	r3, [r3, #16]
 800259a:	613b      	str	r3, [r7, #16]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	699b      	ldr	r3, [r3, #24]
 80025a2:	60fb      	str	r3, [r7, #12]
 80025a4:	6a3b      	ldr	r3, [r7, #32]
 80025a6:	2201      	movs	r2, #1
 80025a8:	4013      	ands	r3, r2
 80025aa:	d100      	bne.n	80025ae <HAL_CAN_IRQHandler+0x46>
 80025ac:	e084      	b.n	80026b8 <HAL_CAN_IRQHandler+0x150>
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	2201      	movs	r2, #1
 80025b2:	4013      	ands	r3, r2
 80025b4:	d024      	beq.n	8002600 <HAL_CAN_IRQHandler+0x98>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	2201      	movs	r2, #1
 80025bc:	609a      	str	r2, [r3, #8]
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	2202      	movs	r2, #2
 80025c2:	4013      	ands	r3, r2
 80025c4:	d004      	beq.n	80025d0 <HAL_CAN_IRQHandler+0x68>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	0018      	movs	r0, r3
 80025ca:	f000 f981 	bl	80028d0 <HAL_CAN_TxMailbox0CompleteCallback>
 80025ce:	e017      	b.n	8002600 <HAL_CAN_IRQHandler+0x98>
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	2204      	movs	r2, #4
 80025d4:	4013      	ands	r3, r2
 80025d6:	d005      	beq.n	80025e4 <HAL_CAN_IRQHandler+0x7c>
 80025d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025da:	2280      	movs	r2, #128	; 0x80
 80025dc:	0112      	lsls	r2, r2, #4
 80025de:	4313      	orrs	r3, r2
 80025e0:	627b      	str	r3, [r7, #36]	; 0x24
 80025e2:	e00d      	b.n	8002600 <HAL_CAN_IRQHandler+0x98>
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	2208      	movs	r2, #8
 80025e8:	4013      	ands	r3, r2
 80025ea:	d005      	beq.n	80025f8 <HAL_CAN_IRQHandler+0x90>
 80025ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ee:	2280      	movs	r2, #128	; 0x80
 80025f0:	0152      	lsls	r2, r2, #5
 80025f2:	4313      	orrs	r3, r2
 80025f4:	627b      	str	r3, [r7, #36]	; 0x24
 80025f6:	e003      	b.n	8002600 <HAL_CAN_IRQHandler+0x98>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	0018      	movs	r0, r3
 80025fc:	f000 f980 	bl	8002900 <HAL_CAN_TxMailbox0AbortCallback>
 8002600:	69ba      	ldr	r2, [r7, #24]
 8002602:	2380      	movs	r3, #128	; 0x80
 8002604:	005b      	lsls	r3, r3, #1
 8002606:	4013      	ands	r3, r2
 8002608:	d028      	beq.n	800265c <HAL_CAN_IRQHandler+0xf4>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	2280      	movs	r2, #128	; 0x80
 8002610:	0052      	lsls	r2, r2, #1
 8002612:	609a      	str	r2, [r3, #8]
 8002614:	69ba      	ldr	r2, [r7, #24]
 8002616:	2380      	movs	r3, #128	; 0x80
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	4013      	ands	r3, r2
 800261c:	d004      	beq.n	8002628 <HAL_CAN_IRQHandler+0xc0>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	0018      	movs	r0, r3
 8002622:	f000 f95d 	bl	80028e0 <HAL_CAN_TxMailbox1CompleteCallback>
 8002626:	e019      	b.n	800265c <HAL_CAN_IRQHandler+0xf4>
 8002628:	69ba      	ldr	r2, [r7, #24]
 800262a:	2380      	movs	r3, #128	; 0x80
 800262c:	00db      	lsls	r3, r3, #3
 800262e:	4013      	ands	r3, r2
 8002630:	d005      	beq.n	800263e <HAL_CAN_IRQHandler+0xd6>
 8002632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002634:	2280      	movs	r2, #128	; 0x80
 8002636:	0192      	lsls	r2, r2, #6
 8002638:	4313      	orrs	r3, r2
 800263a:	627b      	str	r3, [r7, #36]	; 0x24
 800263c:	e00e      	b.n	800265c <HAL_CAN_IRQHandler+0xf4>
 800263e:	69ba      	ldr	r2, [r7, #24]
 8002640:	2380      	movs	r3, #128	; 0x80
 8002642:	011b      	lsls	r3, r3, #4
 8002644:	4013      	ands	r3, r2
 8002646:	d005      	beq.n	8002654 <HAL_CAN_IRQHandler+0xec>
 8002648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264a:	2280      	movs	r2, #128	; 0x80
 800264c:	01d2      	lsls	r2, r2, #7
 800264e:	4313      	orrs	r3, r2
 8002650:	627b      	str	r3, [r7, #36]	; 0x24
 8002652:	e003      	b.n	800265c <HAL_CAN_IRQHandler+0xf4>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	0018      	movs	r0, r3
 8002658:	f000 f95a 	bl	8002910 <HAL_CAN_TxMailbox1AbortCallback>
 800265c:	69ba      	ldr	r2, [r7, #24]
 800265e:	2380      	movs	r3, #128	; 0x80
 8002660:	025b      	lsls	r3, r3, #9
 8002662:	4013      	ands	r3, r2
 8002664:	d028      	beq.n	80026b8 <HAL_CAN_IRQHandler+0x150>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	2280      	movs	r2, #128	; 0x80
 800266c:	0252      	lsls	r2, r2, #9
 800266e:	609a      	str	r2, [r3, #8]
 8002670:	69ba      	ldr	r2, [r7, #24]
 8002672:	2380      	movs	r3, #128	; 0x80
 8002674:	029b      	lsls	r3, r3, #10
 8002676:	4013      	ands	r3, r2
 8002678:	d004      	beq.n	8002684 <HAL_CAN_IRQHandler+0x11c>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	0018      	movs	r0, r3
 800267e:	f000 f937 	bl	80028f0 <HAL_CAN_TxMailbox2CompleteCallback>
 8002682:	e019      	b.n	80026b8 <HAL_CAN_IRQHandler+0x150>
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	2380      	movs	r3, #128	; 0x80
 8002688:	02db      	lsls	r3, r3, #11
 800268a:	4013      	ands	r3, r2
 800268c:	d005      	beq.n	800269a <HAL_CAN_IRQHandler+0x132>
 800268e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002690:	2280      	movs	r2, #128	; 0x80
 8002692:	0212      	lsls	r2, r2, #8
 8002694:	4313      	orrs	r3, r2
 8002696:	627b      	str	r3, [r7, #36]	; 0x24
 8002698:	e00e      	b.n	80026b8 <HAL_CAN_IRQHandler+0x150>
 800269a:	69ba      	ldr	r2, [r7, #24]
 800269c:	2380      	movs	r3, #128	; 0x80
 800269e:	031b      	lsls	r3, r3, #12
 80026a0:	4013      	ands	r3, r2
 80026a2:	d005      	beq.n	80026b0 <HAL_CAN_IRQHandler+0x148>
 80026a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a6:	2280      	movs	r2, #128	; 0x80
 80026a8:	0252      	lsls	r2, r2, #9
 80026aa:	4313      	orrs	r3, r2
 80026ac:	627b      	str	r3, [r7, #36]	; 0x24
 80026ae:	e003      	b.n	80026b8 <HAL_CAN_IRQHandler+0x150>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	0018      	movs	r0, r3
 80026b4:	f000 f934 	bl	8002920 <HAL_CAN_TxMailbox2AbortCallback>
 80026b8:	6a3b      	ldr	r3, [r7, #32]
 80026ba:	2208      	movs	r2, #8
 80026bc:	4013      	ands	r3, r2
 80026be:	d00c      	beq.n	80026da <HAL_CAN_IRQHandler+0x172>
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	2210      	movs	r2, #16
 80026c4:	4013      	ands	r3, r2
 80026c6:	d008      	beq.n	80026da <HAL_CAN_IRQHandler+0x172>
 80026c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ca:	2280      	movs	r2, #128	; 0x80
 80026cc:	0092      	lsls	r2, r2, #2
 80026ce:	4313      	orrs	r3, r2
 80026d0:	627b      	str	r3, [r7, #36]	; 0x24
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	2210      	movs	r2, #16
 80026d8:	60da      	str	r2, [r3, #12]
 80026da:	6a3b      	ldr	r3, [r7, #32]
 80026dc:	2204      	movs	r2, #4
 80026de:	4013      	ands	r3, r2
 80026e0:	d00b      	beq.n	80026fa <HAL_CAN_IRQHandler+0x192>
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	2208      	movs	r2, #8
 80026e6:	4013      	ands	r3, r2
 80026e8:	d007      	beq.n	80026fa <HAL_CAN_IRQHandler+0x192>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	2208      	movs	r2, #8
 80026f0:	60da      	str	r2, [r3, #12]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	0018      	movs	r0, r3
 80026f6:	f000 f91b 	bl	8002930 <HAL_CAN_RxFifo0FullCallback>
 80026fa:	6a3b      	ldr	r3, [r7, #32]
 80026fc:	2202      	movs	r2, #2
 80026fe:	4013      	ands	r3, r2
 8002700:	d009      	beq.n	8002716 <HAL_CAN_IRQHandler+0x1ae>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	2203      	movs	r2, #3
 800270a:	4013      	ands	r3, r2
 800270c:	d003      	beq.n	8002716 <HAL_CAN_IRQHandler+0x1ae>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	0018      	movs	r0, r3
 8002712:	f7fd fe79 	bl	8000408 <HAL_CAN_RxFifo0MsgPendingCallback>
 8002716:	6a3b      	ldr	r3, [r7, #32]
 8002718:	2240      	movs	r2, #64	; 0x40
 800271a:	4013      	ands	r3, r2
 800271c:	d00c      	beq.n	8002738 <HAL_CAN_IRQHandler+0x1d0>
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	2210      	movs	r2, #16
 8002722:	4013      	ands	r3, r2
 8002724:	d008      	beq.n	8002738 <HAL_CAN_IRQHandler+0x1d0>
 8002726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002728:	2280      	movs	r2, #128	; 0x80
 800272a:	00d2      	lsls	r2, r2, #3
 800272c:	4313      	orrs	r3, r2
 800272e:	627b      	str	r3, [r7, #36]	; 0x24
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2210      	movs	r2, #16
 8002736:	611a      	str	r2, [r3, #16]
 8002738:	6a3b      	ldr	r3, [r7, #32]
 800273a:	2220      	movs	r2, #32
 800273c:	4013      	ands	r3, r2
 800273e:	d00b      	beq.n	8002758 <HAL_CAN_IRQHandler+0x1f0>
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	2208      	movs	r2, #8
 8002744:	4013      	ands	r3, r2
 8002746:	d007      	beq.n	8002758 <HAL_CAN_IRQHandler+0x1f0>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2208      	movs	r2, #8
 800274e:	611a      	str	r2, [r3, #16]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	0018      	movs	r0, r3
 8002754:	f000 f8fc 	bl	8002950 <HAL_CAN_RxFifo1FullCallback>
 8002758:	6a3b      	ldr	r3, [r7, #32]
 800275a:	2210      	movs	r2, #16
 800275c:	4013      	ands	r3, r2
 800275e:	d009      	beq.n	8002774 <HAL_CAN_IRQHandler+0x20c>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	691b      	ldr	r3, [r3, #16]
 8002766:	2203      	movs	r2, #3
 8002768:	4013      	ands	r3, r2
 800276a:	d003      	beq.n	8002774 <HAL_CAN_IRQHandler+0x20c>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	0018      	movs	r0, r3
 8002770:	f000 f8e6 	bl	8002940 <HAL_CAN_RxFifo1MsgPendingCallback>
 8002774:	6a3a      	ldr	r2, [r7, #32]
 8002776:	2380      	movs	r3, #128	; 0x80
 8002778:	029b      	lsls	r3, r3, #10
 800277a:	4013      	ands	r3, r2
 800277c:	d00b      	beq.n	8002796 <HAL_CAN_IRQHandler+0x22e>
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	2210      	movs	r2, #16
 8002782:	4013      	ands	r3, r2
 8002784:	d007      	beq.n	8002796 <HAL_CAN_IRQHandler+0x22e>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	2210      	movs	r2, #16
 800278c:	605a      	str	r2, [r3, #4]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	0018      	movs	r0, r3
 8002792:	f000 f8e5 	bl	8002960 <HAL_CAN_SleepCallback>
 8002796:	6a3a      	ldr	r2, [r7, #32]
 8002798:	2380      	movs	r3, #128	; 0x80
 800279a:	025b      	lsls	r3, r3, #9
 800279c:	4013      	ands	r3, r2
 800279e:	d00b      	beq.n	80027b8 <HAL_CAN_IRQHandler+0x250>
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	2208      	movs	r2, #8
 80027a4:	4013      	ands	r3, r2
 80027a6:	d007      	beq.n	80027b8 <HAL_CAN_IRQHandler+0x250>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	2208      	movs	r2, #8
 80027ae:	605a      	str	r2, [r3, #4]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	0018      	movs	r0, r3
 80027b4:	f000 f8dc 	bl	8002970 <HAL_CAN_WakeUpFromRxMsgCallback>
 80027b8:	6a3a      	ldr	r2, [r7, #32]
 80027ba:	2380      	movs	r3, #128	; 0x80
 80027bc:	021b      	lsls	r3, r3, #8
 80027be:	4013      	ands	r3, r2
 80027c0:	d100      	bne.n	80027c4 <HAL_CAN_IRQHandler+0x25c>
 80027c2:	e074      	b.n	80028ae <HAL_CAN_IRQHandler+0x346>
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	2204      	movs	r2, #4
 80027c8:	4013      	ands	r3, r2
 80027ca:	d100      	bne.n	80027ce <HAL_CAN_IRQHandler+0x266>
 80027cc:	e06b      	b.n	80028a6 <HAL_CAN_IRQHandler+0x33e>
 80027ce:	6a3a      	ldr	r2, [r7, #32]
 80027d0:	2380      	movs	r3, #128	; 0x80
 80027d2:	005b      	lsls	r3, r3, #1
 80027d4:	4013      	ands	r3, r2
 80027d6:	d007      	beq.n	80027e8 <HAL_CAN_IRQHandler+0x280>
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2201      	movs	r2, #1
 80027dc:	4013      	ands	r3, r2
 80027de:	d003      	beq.n	80027e8 <HAL_CAN_IRQHandler+0x280>
 80027e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e2:	2201      	movs	r2, #1
 80027e4:	4313      	orrs	r3, r2
 80027e6:	627b      	str	r3, [r7, #36]	; 0x24
 80027e8:	6a3a      	ldr	r2, [r7, #32]
 80027ea:	2380      	movs	r3, #128	; 0x80
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	4013      	ands	r3, r2
 80027f0:	d007      	beq.n	8002802 <HAL_CAN_IRQHandler+0x29a>
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2202      	movs	r2, #2
 80027f6:	4013      	ands	r3, r2
 80027f8:	d003      	beq.n	8002802 <HAL_CAN_IRQHandler+0x29a>
 80027fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fc:	2202      	movs	r2, #2
 80027fe:	4313      	orrs	r3, r2
 8002800:	627b      	str	r3, [r7, #36]	; 0x24
 8002802:	6a3a      	ldr	r2, [r7, #32]
 8002804:	2380      	movs	r3, #128	; 0x80
 8002806:	00db      	lsls	r3, r3, #3
 8002808:	4013      	ands	r3, r2
 800280a:	d007      	beq.n	800281c <HAL_CAN_IRQHandler+0x2b4>
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2204      	movs	r2, #4
 8002810:	4013      	ands	r3, r2
 8002812:	d003      	beq.n	800281c <HAL_CAN_IRQHandler+0x2b4>
 8002814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002816:	2204      	movs	r2, #4
 8002818:	4313      	orrs	r3, r2
 800281a:	627b      	str	r3, [r7, #36]	; 0x24
 800281c:	6a3a      	ldr	r2, [r7, #32]
 800281e:	2380      	movs	r3, #128	; 0x80
 8002820:	011b      	lsls	r3, r3, #4
 8002822:	4013      	ands	r3, r2
 8002824:	d03f      	beq.n	80028a6 <HAL_CAN_IRQHandler+0x33e>
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2270      	movs	r2, #112	; 0x70
 800282a:	4013      	ands	r3, r2
 800282c:	d03b      	beq.n	80028a6 <HAL_CAN_IRQHandler+0x33e>
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2270      	movs	r2, #112	; 0x70
 8002832:	4013      	ands	r3, r2
 8002834:	2b60      	cmp	r3, #96	; 0x60
 8002836:	d027      	beq.n	8002888 <HAL_CAN_IRQHandler+0x320>
 8002838:	d82c      	bhi.n	8002894 <HAL_CAN_IRQHandler+0x32c>
 800283a:	2b50      	cmp	r3, #80	; 0x50
 800283c:	d01f      	beq.n	800287e <HAL_CAN_IRQHandler+0x316>
 800283e:	d829      	bhi.n	8002894 <HAL_CAN_IRQHandler+0x32c>
 8002840:	2b40      	cmp	r3, #64	; 0x40
 8002842:	d017      	beq.n	8002874 <HAL_CAN_IRQHandler+0x30c>
 8002844:	d826      	bhi.n	8002894 <HAL_CAN_IRQHandler+0x32c>
 8002846:	2b30      	cmp	r3, #48	; 0x30
 8002848:	d00f      	beq.n	800286a <HAL_CAN_IRQHandler+0x302>
 800284a:	d823      	bhi.n	8002894 <HAL_CAN_IRQHandler+0x32c>
 800284c:	2b10      	cmp	r3, #16
 800284e:	d002      	beq.n	8002856 <HAL_CAN_IRQHandler+0x2ee>
 8002850:	2b20      	cmp	r3, #32
 8002852:	d005      	beq.n	8002860 <HAL_CAN_IRQHandler+0x2f8>
 8002854:	e01e      	b.n	8002894 <HAL_CAN_IRQHandler+0x32c>
 8002856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002858:	2208      	movs	r2, #8
 800285a:	4313      	orrs	r3, r2
 800285c:	627b      	str	r3, [r7, #36]	; 0x24
 800285e:	e01a      	b.n	8002896 <HAL_CAN_IRQHandler+0x32e>
 8002860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002862:	2210      	movs	r2, #16
 8002864:	4313      	orrs	r3, r2
 8002866:	627b      	str	r3, [r7, #36]	; 0x24
 8002868:	e015      	b.n	8002896 <HAL_CAN_IRQHandler+0x32e>
 800286a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286c:	2220      	movs	r2, #32
 800286e:	4313      	orrs	r3, r2
 8002870:	627b      	str	r3, [r7, #36]	; 0x24
 8002872:	e010      	b.n	8002896 <HAL_CAN_IRQHandler+0x32e>
 8002874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002876:	2240      	movs	r2, #64	; 0x40
 8002878:	4313      	orrs	r3, r2
 800287a:	627b      	str	r3, [r7, #36]	; 0x24
 800287c:	e00b      	b.n	8002896 <HAL_CAN_IRQHandler+0x32e>
 800287e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002880:	2280      	movs	r2, #128	; 0x80
 8002882:	4313      	orrs	r3, r2
 8002884:	627b      	str	r3, [r7, #36]	; 0x24
 8002886:	e006      	b.n	8002896 <HAL_CAN_IRQHandler+0x32e>
 8002888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288a:	2280      	movs	r2, #128	; 0x80
 800288c:	0052      	lsls	r2, r2, #1
 800288e:	4313      	orrs	r3, r2
 8002890:	627b      	str	r3, [r7, #36]	; 0x24
 8002892:	e000      	b.n	8002896 <HAL_CAN_IRQHandler+0x32e>
 8002894:	46c0      	nop			; (mov r8, r8)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	699a      	ldr	r2, [r3, #24]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	2170      	movs	r1, #112	; 0x70
 80028a2:	438a      	bics	r2, r1
 80028a4:	619a      	str	r2, [r3, #24]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	2204      	movs	r2, #4
 80028ac:	605a      	str	r2, [r3, #4]
 80028ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d009      	beq.n	80028c8 <HAL_CAN_IRQHandler+0x360>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ba:	431a      	orrs	r2, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	625a      	str	r2, [r3, #36]	; 0x24
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	0018      	movs	r0, r3
 80028c4:	f000 f85c 	bl	8002980 <HAL_CAN_ErrorCallback>
 80028c8:	46c0      	nop			; (mov r8, r8)
 80028ca:	46bd      	mov	sp, r7
 80028cc:	b00a      	add	sp, #40	; 0x28
 80028ce:	bd80      	pop	{r7, pc}

080028d0 <HAL_CAN_TxMailbox0CompleteCallback>:
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b082      	sub	sp, #8
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	46c0      	nop			; (mov r8, r8)
 80028da:	46bd      	mov	sp, r7
 80028dc:	b002      	add	sp, #8
 80028de:	bd80      	pop	{r7, pc}

080028e0 <HAL_CAN_TxMailbox1CompleteCallback>:
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	46c0      	nop			; (mov r8, r8)
 80028ea:	46bd      	mov	sp, r7
 80028ec:	b002      	add	sp, #8
 80028ee:	bd80      	pop	{r7, pc}

080028f0 <HAL_CAN_TxMailbox2CompleteCallback>:
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b082      	sub	sp, #8
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	46c0      	nop			; (mov r8, r8)
 80028fa:	46bd      	mov	sp, r7
 80028fc:	b002      	add	sp, #8
 80028fe:	bd80      	pop	{r7, pc}

08002900 <HAL_CAN_TxMailbox0AbortCallback>:
 8002900:	b580      	push	{r7, lr}
 8002902:	b082      	sub	sp, #8
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	46c0      	nop			; (mov r8, r8)
 800290a:	46bd      	mov	sp, r7
 800290c:	b002      	add	sp, #8
 800290e:	bd80      	pop	{r7, pc}

08002910 <HAL_CAN_TxMailbox1AbortCallback>:
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	46c0      	nop			; (mov r8, r8)
 800291a:	46bd      	mov	sp, r7
 800291c:	b002      	add	sp, #8
 800291e:	bd80      	pop	{r7, pc}

08002920 <HAL_CAN_TxMailbox2AbortCallback>:
 8002920:	b580      	push	{r7, lr}
 8002922:	b082      	sub	sp, #8
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	46c0      	nop			; (mov r8, r8)
 800292a:	46bd      	mov	sp, r7
 800292c:	b002      	add	sp, #8
 800292e:	bd80      	pop	{r7, pc}

08002930 <HAL_CAN_RxFifo0FullCallback>:
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	46c0      	nop			; (mov r8, r8)
 800293a:	46bd      	mov	sp, r7
 800293c:	b002      	add	sp, #8
 800293e:	bd80      	pop	{r7, pc}

08002940 <HAL_CAN_RxFifo1MsgPendingCallback>:
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	46c0      	nop			; (mov r8, r8)
 800294a:	46bd      	mov	sp, r7
 800294c:	b002      	add	sp, #8
 800294e:	bd80      	pop	{r7, pc}

08002950 <HAL_CAN_RxFifo1FullCallback>:
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	46c0      	nop			; (mov r8, r8)
 800295a:	46bd      	mov	sp, r7
 800295c:	b002      	add	sp, #8
 800295e:	bd80      	pop	{r7, pc}

08002960 <HAL_CAN_SleepCallback>:
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	46c0      	nop			; (mov r8, r8)
 800296a:	46bd      	mov	sp, r7
 800296c:	b002      	add	sp, #8
 800296e:	bd80      	pop	{r7, pc}

08002970 <HAL_CAN_WakeUpFromRxMsgCallback>:
 8002970:	b580      	push	{r7, lr}
 8002972:	b082      	sub	sp, #8
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	46c0      	nop			; (mov r8, r8)
 800297a:	46bd      	mov	sp, r7
 800297c:	b002      	add	sp, #8
 800297e:	bd80      	pop	{r7, pc}

08002980 <HAL_CAN_ErrorCallback>:
 8002980:	b580      	push	{r7, lr}
 8002982:	b082      	sub	sp, #8
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	46c0      	nop			; (mov r8, r8)
 800298a:	46bd      	mov	sp, r7
 800298c:	b002      	add	sp, #8
 800298e:	bd80      	pop	{r7, pc}

08002990 <__NVIC_EnableIRQ>:
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
 8002996:	0002      	movs	r2, r0
 8002998:	1dfb      	adds	r3, r7, #7
 800299a:	701a      	strb	r2, [r3, #0]
 800299c:	1dfb      	adds	r3, r7, #7
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	2b7f      	cmp	r3, #127	; 0x7f
 80029a2:	d809      	bhi.n	80029b8 <__NVIC_EnableIRQ+0x28>
 80029a4:	1dfb      	adds	r3, r7, #7
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	001a      	movs	r2, r3
 80029aa:	231f      	movs	r3, #31
 80029ac:	401a      	ands	r2, r3
 80029ae:	4b04      	ldr	r3, [pc, #16]	; (80029c0 <__NVIC_EnableIRQ+0x30>)
 80029b0:	2101      	movs	r1, #1
 80029b2:	4091      	lsls	r1, r2
 80029b4:	000a      	movs	r2, r1
 80029b6:	601a      	str	r2, [r3, #0]
 80029b8:	46c0      	nop			; (mov r8, r8)
 80029ba:	46bd      	mov	sp, r7
 80029bc:	b002      	add	sp, #8
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	e000e100 	.word	0xe000e100

080029c4 <__NVIC_SetPriority>:
 80029c4:	b590      	push	{r4, r7, lr}
 80029c6:	b083      	sub	sp, #12
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	0002      	movs	r2, r0
 80029cc:	6039      	str	r1, [r7, #0]
 80029ce:	1dfb      	adds	r3, r7, #7
 80029d0:	701a      	strb	r2, [r3, #0]
 80029d2:	1dfb      	adds	r3, r7, #7
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	2b7f      	cmp	r3, #127	; 0x7f
 80029d8:	d828      	bhi.n	8002a2c <__NVIC_SetPriority+0x68>
 80029da:	4a2f      	ldr	r2, [pc, #188]	; (8002a98 <__NVIC_SetPriority+0xd4>)
 80029dc:	1dfb      	adds	r3, r7, #7
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	b25b      	sxtb	r3, r3
 80029e2:	089b      	lsrs	r3, r3, #2
 80029e4:	33c0      	adds	r3, #192	; 0xc0
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	589b      	ldr	r3, [r3, r2]
 80029ea:	1dfa      	adds	r2, r7, #7
 80029ec:	7812      	ldrb	r2, [r2, #0]
 80029ee:	0011      	movs	r1, r2
 80029f0:	2203      	movs	r2, #3
 80029f2:	400a      	ands	r2, r1
 80029f4:	00d2      	lsls	r2, r2, #3
 80029f6:	21ff      	movs	r1, #255	; 0xff
 80029f8:	4091      	lsls	r1, r2
 80029fa:	000a      	movs	r2, r1
 80029fc:	43d2      	mvns	r2, r2
 80029fe:	401a      	ands	r2, r3
 8002a00:	0011      	movs	r1, r2
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	019b      	lsls	r3, r3, #6
 8002a06:	22ff      	movs	r2, #255	; 0xff
 8002a08:	401a      	ands	r2, r3
 8002a0a:	1dfb      	adds	r3, r7, #7
 8002a0c:	781b      	ldrb	r3, [r3, #0]
 8002a0e:	0018      	movs	r0, r3
 8002a10:	2303      	movs	r3, #3
 8002a12:	4003      	ands	r3, r0
 8002a14:	00db      	lsls	r3, r3, #3
 8002a16:	409a      	lsls	r2, r3
 8002a18:	481f      	ldr	r0, [pc, #124]	; (8002a98 <__NVIC_SetPriority+0xd4>)
 8002a1a:	1dfb      	adds	r3, r7, #7
 8002a1c:	781b      	ldrb	r3, [r3, #0]
 8002a1e:	b25b      	sxtb	r3, r3
 8002a20:	089b      	lsrs	r3, r3, #2
 8002a22:	430a      	orrs	r2, r1
 8002a24:	33c0      	adds	r3, #192	; 0xc0
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	501a      	str	r2, [r3, r0]
 8002a2a:	e031      	b.n	8002a90 <__NVIC_SetPriority+0xcc>
 8002a2c:	4a1b      	ldr	r2, [pc, #108]	; (8002a9c <__NVIC_SetPriority+0xd8>)
 8002a2e:	1dfb      	adds	r3, r7, #7
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	0019      	movs	r1, r3
 8002a34:	230f      	movs	r3, #15
 8002a36:	400b      	ands	r3, r1
 8002a38:	3b08      	subs	r3, #8
 8002a3a:	089b      	lsrs	r3, r3, #2
 8002a3c:	3306      	adds	r3, #6
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	18d3      	adds	r3, r2, r3
 8002a42:	3304      	adds	r3, #4
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	1dfa      	adds	r2, r7, #7
 8002a48:	7812      	ldrb	r2, [r2, #0]
 8002a4a:	0011      	movs	r1, r2
 8002a4c:	2203      	movs	r2, #3
 8002a4e:	400a      	ands	r2, r1
 8002a50:	00d2      	lsls	r2, r2, #3
 8002a52:	21ff      	movs	r1, #255	; 0xff
 8002a54:	4091      	lsls	r1, r2
 8002a56:	000a      	movs	r2, r1
 8002a58:	43d2      	mvns	r2, r2
 8002a5a:	401a      	ands	r2, r3
 8002a5c:	0011      	movs	r1, r2
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	019b      	lsls	r3, r3, #6
 8002a62:	22ff      	movs	r2, #255	; 0xff
 8002a64:	401a      	ands	r2, r3
 8002a66:	1dfb      	adds	r3, r7, #7
 8002a68:	781b      	ldrb	r3, [r3, #0]
 8002a6a:	0018      	movs	r0, r3
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	4003      	ands	r3, r0
 8002a70:	00db      	lsls	r3, r3, #3
 8002a72:	409a      	lsls	r2, r3
 8002a74:	4809      	ldr	r0, [pc, #36]	; (8002a9c <__NVIC_SetPriority+0xd8>)
 8002a76:	1dfb      	adds	r3, r7, #7
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	001c      	movs	r4, r3
 8002a7c:	230f      	movs	r3, #15
 8002a7e:	4023      	ands	r3, r4
 8002a80:	3b08      	subs	r3, #8
 8002a82:	089b      	lsrs	r3, r3, #2
 8002a84:	430a      	orrs	r2, r1
 8002a86:	3306      	adds	r3, #6
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	18c3      	adds	r3, r0, r3
 8002a8c:	3304      	adds	r3, #4
 8002a8e:	601a      	str	r2, [r3, #0]
 8002a90:	46c0      	nop			; (mov r8, r8)
 8002a92:	46bd      	mov	sp, r7
 8002a94:	b003      	add	sp, #12
 8002a96:	bd90      	pop	{r4, r7, pc}
 8002a98:	e000e100 	.word	0xe000e100
 8002a9c:	e000ed00 	.word	0xe000ed00

08002aa0 <SysTick_Config>:
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	1e5a      	subs	r2, r3, #1
 8002aac:	2380      	movs	r3, #128	; 0x80
 8002aae:	045b      	lsls	r3, r3, #17
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d301      	bcc.n	8002ab8 <SysTick_Config+0x18>
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e010      	b.n	8002ada <SysTick_Config+0x3a>
 8002ab8:	4b0a      	ldr	r3, [pc, #40]	; (8002ae4 <SysTick_Config+0x44>)
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	3a01      	subs	r2, #1
 8002abe:	605a      	str	r2, [r3, #4]
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	425b      	negs	r3, r3
 8002ac4:	2103      	movs	r1, #3
 8002ac6:	0018      	movs	r0, r3
 8002ac8:	f7ff ff7c 	bl	80029c4 <__NVIC_SetPriority>
 8002acc:	4b05      	ldr	r3, [pc, #20]	; (8002ae4 <SysTick_Config+0x44>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	609a      	str	r2, [r3, #8]
 8002ad2:	4b04      	ldr	r3, [pc, #16]	; (8002ae4 <SysTick_Config+0x44>)
 8002ad4:	2207      	movs	r2, #7
 8002ad6:	601a      	str	r2, [r3, #0]
 8002ad8:	2300      	movs	r3, #0
 8002ada:	0018      	movs	r0, r3
 8002adc:	46bd      	mov	sp, r7
 8002ade:	b002      	add	sp, #8
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	46c0      	nop			; (mov r8, r8)
 8002ae4:	e000e010 	.word	0xe000e010

08002ae8 <HAL_NVIC_SetPriority>:
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	60b9      	str	r1, [r7, #8]
 8002af0:	607a      	str	r2, [r7, #4]
 8002af2:	210f      	movs	r1, #15
 8002af4:	187b      	adds	r3, r7, r1
 8002af6:	1c02      	adds	r2, r0, #0
 8002af8:	701a      	strb	r2, [r3, #0]
 8002afa:	68ba      	ldr	r2, [r7, #8]
 8002afc:	187b      	adds	r3, r7, r1
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	b25b      	sxtb	r3, r3
 8002b02:	0011      	movs	r1, r2
 8002b04:	0018      	movs	r0, r3
 8002b06:	f7ff ff5d 	bl	80029c4 <__NVIC_SetPriority>
 8002b0a:	46c0      	nop			; (mov r8, r8)
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	b004      	add	sp, #16
 8002b10:	bd80      	pop	{r7, pc}

08002b12 <HAL_NVIC_EnableIRQ>:
 8002b12:	b580      	push	{r7, lr}
 8002b14:	b082      	sub	sp, #8
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	0002      	movs	r2, r0
 8002b1a:	1dfb      	adds	r3, r7, #7
 8002b1c:	701a      	strb	r2, [r3, #0]
 8002b1e:	1dfb      	adds	r3, r7, #7
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	b25b      	sxtb	r3, r3
 8002b24:	0018      	movs	r0, r3
 8002b26:	f7ff ff33 	bl	8002990 <__NVIC_EnableIRQ>
 8002b2a:	46c0      	nop			; (mov r8, r8)
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	b002      	add	sp, #8
 8002b30:	bd80      	pop	{r7, pc}

08002b32 <HAL_SYSTICK_Config>:
 8002b32:	b580      	push	{r7, lr}
 8002b34:	b082      	sub	sp, #8
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	6078      	str	r0, [r7, #4]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	0018      	movs	r0, r3
 8002b3e:	f7ff ffaf 	bl	8002aa0 <SysTick_Config>
 8002b42:	0003      	movs	r3, r0
 8002b44:	0018      	movs	r0, r3
 8002b46:	46bd      	mov	sp, r7
 8002b48:	b002      	add	sp, #8
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <HAL_GPIO_Init>:
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b086      	sub	sp, #24
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	6039      	str	r1, [r7, #0]
 8002b56:	2300      	movs	r3, #0
 8002b58:	617b      	str	r3, [r7, #20]
 8002b5a:	e149      	b.n	8002df0 <HAL_GPIO_Init+0x2a4>
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2101      	movs	r1, #1
 8002b62:	697a      	ldr	r2, [r7, #20]
 8002b64:	4091      	lsls	r1, r2
 8002b66:	000a      	movs	r2, r1
 8002b68:	4013      	ands	r3, r2
 8002b6a:	60fb      	str	r3, [r7, #12]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d100      	bne.n	8002b74 <HAL_GPIO_Init+0x28>
 8002b72:	e13a      	b.n	8002dea <HAL_GPIO_Init+0x29e>
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	2203      	movs	r2, #3
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d005      	beq.n	8002b8c <HAL_GPIO_Init+0x40>
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	2203      	movs	r2, #3
 8002b86:	4013      	ands	r3, r2
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	d130      	bne.n	8002bee <HAL_GPIO_Init+0xa2>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	613b      	str	r3, [r7, #16]
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	005b      	lsls	r3, r3, #1
 8002b96:	2203      	movs	r2, #3
 8002b98:	409a      	lsls	r2, r3
 8002b9a:	0013      	movs	r3, r2
 8002b9c:	43da      	mvns	r2, r3
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	613b      	str	r3, [r7, #16]
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	68da      	ldr	r2, [r3, #12]
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	005b      	lsls	r3, r3, #1
 8002bac:	409a      	lsls	r2, r3
 8002bae:	0013      	movs	r3, r2
 8002bb0:	693a      	ldr	r2, [r7, #16]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	613b      	str	r3, [r7, #16]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	693a      	ldr	r2, [r7, #16]
 8002bba:	609a      	str	r2, [r3, #8]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	613b      	str	r3, [r7, #16]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	409a      	lsls	r2, r3
 8002bc8:	0013      	movs	r3, r2
 8002bca:	43da      	mvns	r2, r3
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	4013      	ands	r3, r2
 8002bd0:	613b      	str	r3, [r7, #16]
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	091b      	lsrs	r3, r3, #4
 8002bd8:	2201      	movs	r2, #1
 8002bda:	401a      	ands	r2, r3
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	409a      	lsls	r2, r3
 8002be0:	0013      	movs	r3, r2
 8002be2:	693a      	ldr	r2, [r7, #16]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	613b      	str	r3, [r7, #16]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	693a      	ldr	r2, [r7, #16]
 8002bec:	605a      	str	r2, [r3, #4]
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	2203      	movs	r2, #3
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	2b03      	cmp	r3, #3
 8002bf8:	d017      	beq.n	8002c2a <HAL_GPIO_Init+0xde>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	613b      	str	r3, [r7, #16]
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	005b      	lsls	r3, r3, #1
 8002c04:	2203      	movs	r2, #3
 8002c06:	409a      	lsls	r2, r3
 8002c08:	0013      	movs	r3, r2
 8002c0a:	43da      	mvns	r2, r3
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	4013      	ands	r3, r2
 8002c10:	613b      	str	r3, [r7, #16]
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	689a      	ldr	r2, [r3, #8]
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	005b      	lsls	r3, r3, #1
 8002c1a:	409a      	lsls	r2, r3
 8002c1c:	0013      	movs	r3, r2
 8002c1e:	693a      	ldr	r2, [r7, #16]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	613b      	str	r3, [r7, #16]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	693a      	ldr	r2, [r7, #16]
 8002c28:	60da      	str	r2, [r3, #12]
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	2203      	movs	r2, #3
 8002c30:	4013      	ands	r3, r2
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d123      	bne.n	8002c7e <HAL_GPIO_Init+0x132>
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	08da      	lsrs	r2, r3, #3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	3208      	adds	r2, #8
 8002c3e:	0092      	lsls	r2, r2, #2
 8002c40:	58d3      	ldr	r3, [r2, r3]
 8002c42:	613b      	str	r3, [r7, #16]
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	2207      	movs	r2, #7
 8002c48:	4013      	ands	r3, r2
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	220f      	movs	r2, #15
 8002c4e:	409a      	lsls	r2, r3
 8002c50:	0013      	movs	r3, r2
 8002c52:	43da      	mvns	r2, r3
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	4013      	ands	r3, r2
 8002c58:	613b      	str	r3, [r7, #16]
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	691a      	ldr	r2, [r3, #16]
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	2107      	movs	r1, #7
 8002c62:	400b      	ands	r3, r1
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	409a      	lsls	r2, r3
 8002c68:	0013      	movs	r3, r2
 8002c6a:	693a      	ldr	r2, [r7, #16]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	613b      	str	r3, [r7, #16]
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	08da      	lsrs	r2, r3, #3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	3208      	adds	r2, #8
 8002c78:	0092      	lsls	r2, r2, #2
 8002c7a:	6939      	ldr	r1, [r7, #16]
 8002c7c:	50d1      	str	r1, [r2, r3]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	613b      	str	r3, [r7, #16]
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	005b      	lsls	r3, r3, #1
 8002c88:	2203      	movs	r2, #3
 8002c8a:	409a      	lsls	r2, r3
 8002c8c:	0013      	movs	r3, r2
 8002c8e:	43da      	mvns	r2, r3
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	4013      	ands	r3, r2
 8002c94:	613b      	str	r3, [r7, #16]
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	2203      	movs	r2, #3
 8002c9c:	401a      	ands	r2, r3
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	005b      	lsls	r3, r3, #1
 8002ca2:	409a      	lsls	r2, r3
 8002ca4:	0013      	movs	r3, r2
 8002ca6:	693a      	ldr	r2, [r7, #16]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	613b      	str	r3, [r7, #16]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	693a      	ldr	r2, [r7, #16]
 8002cb0:	601a      	str	r2, [r3, #0]
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	685a      	ldr	r2, [r3, #4]
 8002cb6:	23c0      	movs	r3, #192	; 0xc0
 8002cb8:	029b      	lsls	r3, r3, #10
 8002cba:	4013      	ands	r3, r2
 8002cbc:	d100      	bne.n	8002cc0 <HAL_GPIO_Init+0x174>
 8002cbe:	e094      	b.n	8002dea <HAL_GPIO_Init+0x29e>
 8002cc0:	4b51      	ldr	r3, [pc, #324]	; (8002e08 <HAL_GPIO_Init+0x2bc>)
 8002cc2:	699a      	ldr	r2, [r3, #24]
 8002cc4:	4b50      	ldr	r3, [pc, #320]	; (8002e08 <HAL_GPIO_Init+0x2bc>)
 8002cc6:	2101      	movs	r1, #1
 8002cc8:	430a      	orrs	r2, r1
 8002cca:	619a      	str	r2, [r3, #24]
 8002ccc:	4b4e      	ldr	r3, [pc, #312]	; (8002e08 <HAL_GPIO_Init+0x2bc>)
 8002cce:	699b      	ldr	r3, [r3, #24]
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	60bb      	str	r3, [r7, #8]
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	4a4c      	ldr	r2, [pc, #304]	; (8002e0c <HAL_GPIO_Init+0x2c0>)
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	089b      	lsrs	r3, r3, #2
 8002cde:	3302      	adds	r3, #2
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	589b      	ldr	r3, [r3, r2]
 8002ce4:	613b      	str	r3, [r7, #16]
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	2203      	movs	r2, #3
 8002cea:	4013      	ands	r3, r2
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	220f      	movs	r2, #15
 8002cf0:	409a      	lsls	r2, r3
 8002cf2:	0013      	movs	r3, r2
 8002cf4:	43da      	mvns	r2, r3
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	613b      	str	r3, [r7, #16]
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	2390      	movs	r3, #144	; 0x90
 8002d00:	05db      	lsls	r3, r3, #23
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d00d      	beq.n	8002d22 <HAL_GPIO_Init+0x1d6>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a41      	ldr	r2, [pc, #260]	; (8002e10 <HAL_GPIO_Init+0x2c4>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d007      	beq.n	8002d1e <HAL_GPIO_Init+0x1d2>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4a40      	ldr	r2, [pc, #256]	; (8002e14 <HAL_GPIO_Init+0x2c8>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d101      	bne.n	8002d1a <HAL_GPIO_Init+0x1ce>
 8002d16:	2302      	movs	r3, #2
 8002d18:	e004      	b.n	8002d24 <HAL_GPIO_Init+0x1d8>
 8002d1a:	2305      	movs	r3, #5
 8002d1c:	e002      	b.n	8002d24 <HAL_GPIO_Init+0x1d8>
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e000      	b.n	8002d24 <HAL_GPIO_Init+0x1d8>
 8002d22:	2300      	movs	r3, #0
 8002d24:	697a      	ldr	r2, [r7, #20]
 8002d26:	2103      	movs	r1, #3
 8002d28:	400a      	ands	r2, r1
 8002d2a:	0092      	lsls	r2, r2, #2
 8002d2c:	4093      	lsls	r3, r2
 8002d2e:	693a      	ldr	r2, [r7, #16]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	613b      	str	r3, [r7, #16]
 8002d34:	4935      	ldr	r1, [pc, #212]	; (8002e0c <HAL_GPIO_Init+0x2c0>)
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	089b      	lsrs	r3, r3, #2
 8002d3a:	3302      	adds	r3, #2
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	693a      	ldr	r2, [r7, #16]
 8002d40:	505a      	str	r2, [r3, r1]
 8002d42:	4b35      	ldr	r3, [pc, #212]	; (8002e18 <HAL_GPIO_Init+0x2cc>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	613b      	str	r3, [r7, #16]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	43da      	mvns	r2, r3
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	4013      	ands	r3, r2
 8002d50:	613b      	str	r3, [r7, #16]
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	685a      	ldr	r2, [r3, #4]
 8002d56:	2380      	movs	r3, #128	; 0x80
 8002d58:	025b      	lsls	r3, r3, #9
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	d003      	beq.n	8002d66 <HAL_GPIO_Init+0x21a>
 8002d5e:	693a      	ldr	r2, [r7, #16]
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	613b      	str	r3, [r7, #16]
 8002d66:	4b2c      	ldr	r3, [pc, #176]	; (8002e18 <HAL_GPIO_Init+0x2cc>)
 8002d68:	693a      	ldr	r2, [r7, #16]
 8002d6a:	601a      	str	r2, [r3, #0]
 8002d6c:	4b2a      	ldr	r3, [pc, #168]	; (8002e18 <HAL_GPIO_Init+0x2cc>)
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	613b      	str	r3, [r7, #16]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	43da      	mvns	r2, r3
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	4013      	ands	r3, r2
 8002d7a:	613b      	str	r3, [r7, #16]
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	685a      	ldr	r2, [r3, #4]
 8002d80:	2380      	movs	r3, #128	; 0x80
 8002d82:	029b      	lsls	r3, r3, #10
 8002d84:	4013      	ands	r3, r2
 8002d86:	d003      	beq.n	8002d90 <HAL_GPIO_Init+0x244>
 8002d88:	693a      	ldr	r2, [r7, #16]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	613b      	str	r3, [r7, #16]
 8002d90:	4b21      	ldr	r3, [pc, #132]	; (8002e18 <HAL_GPIO_Init+0x2cc>)
 8002d92:	693a      	ldr	r2, [r7, #16]
 8002d94:	605a      	str	r2, [r3, #4]
 8002d96:	4b20      	ldr	r3, [pc, #128]	; (8002e18 <HAL_GPIO_Init+0x2cc>)
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	613b      	str	r3, [r7, #16]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	43da      	mvns	r2, r3
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	4013      	ands	r3, r2
 8002da4:	613b      	str	r3, [r7, #16]
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	685a      	ldr	r2, [r3, #4]
 8002daa:	2380      	movs	r3, #128	; 0x80
 8002dac:	035b      	lsls	r3, r3, #13
 8002dae:	4013      	ands	r3, r2
 8002db0:	d003      	beq.n	8002dba <HAL_GPIO_Init+0x26e>
 8002db2:	693a      	ldr	r2, [r7, #16]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	613b      	str	r3, [r7, #16]
 8002dba:	4b17      	ldr	r3, [pc, #92]	; (8002e18 <HAL_GPIO_Init+0x2cc>)
 8002dbc:	693a      	ldr	r2, [r7, #16]
 8002dbe:	609a      	str	r2, [r3, #8]
 8002dc0:	4b15      	ldr	r3, [pc, #84]	; (8002e18 <HAL_GPIO_Init+0x2cc>)
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	613b      	str	r3, [r7, #16]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	43da      	mvns	r2, r3
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	4013      	ands	r3, r2
 8002dce:	613b      	str	r3, [r7, #16]
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	685a      	ldr	r2, [r3, #4]
 8002dd4:	2380      	movs	r3, #128	; 0x80
 8002dd6:	039b      	lsls	r3, r3, #14
 8002dd8:	4013      	ands	r3, r2
 8002dda:	d003      	beq.n	8002de4 <HAL_GPIO_Init+0x298>
 8002ddc:	693a      	ldr	r2, [r7, #16]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	4313      	orrs	r3, r2
 8002de2:	613b      	str	r3, [r7, #16]
 8002de4:	4b0c      	ldr	r3, [pc, #48]	; (8002e18 <HAL_GPIO_Init+0x2cc>)
 8002de6:	693a      	ldr	r2, [r7, #16]
 8002de8:	60da      	str	r2, [r3, #12]
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	3301      	adds	r3, #1
 8002dee:	617b      	str	r3, [r7, #20]
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	40da      	lsrs	r2, r3
 8002df8:	1e13      	subs	r3, r2, #0
 8002dfa:	d000      	beq.n	8002dfe <HAL_GPIO_Init+0x2b2>
 8002dfc:	e6ae      	b.n	8002b5c <HAL_GPIO_Init+0x10>
 8002dfe:	46c0      	nop			; (mov r8, r8)
 8002e00:	46c0      	nop			; (mov r8, r8)
 8002e02:	46bd      	mov	sp, r7
 8002e04:	b006      	add	sp, #24
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	40021000 	.word	0x40021000
 8002e0c:	40010000 	.word	0x40010000
 8002e10:	48000400 	.word	0x48000400
 8002e14:	48000800 	.word	0x48000800
 8002e18:	40010400 	.word	0x40010400

08002e1c <HAL_GPIO_WritePin>:
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	0008      	movs	r0, r1
 8002e26:	0011      	movs	r1, r2
 8002e28:	1cbb      	adds	r3, r7, #2
 8002e2a:	1c02      	adds	r2, r0, #0
 8002e2c:	801a      	strh	r2, [r3, #0]
 8002e2e:	1c7b      	adds	r3, r7, #1
 8002e30:	1c0a      	adds	r2, r1, #0
 8002e32:	701a      	strb	r2, [r3, #0]
 8002e34:	1c7b      	adds	r3, r7, #1
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d004      	beq.n	8002e46 <HAL_GPIO_WritePin+0x2a>
 8002e3c:	1cbb      	adds	r3, r7, #2
 8002e3e:	881a      	ldrh	r2, [r3, #0]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	619a      	str	r2, [r3, #24]
 8002e44:	e003      	b.n	8002e4e <HAL_GPIO_WritePin+0x32>
 8002e46:	1cbb      	adds	r3, r7, #2
 8002e48:	881a      	ldrh	r2, [r3, #0]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	629a      	str	r2, [r3, #40]	; 0x28
 8002e4e:	46c0      	nop			; (mov r8, r8)
 8002e50:	46bd      	mov	sp, r7
 8002e52:	b002      	add	sp, #8
 8002e54:	bd80      	pop	{r7, pc}

08002e56 <HAL_GPIO_TogglePin>:
 8002e56:	b580      	push	{r7, lr}
 8002e58:	b084      	sub	sp, #16
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	6078      	str	r0, [r7, #4]
 8002e5e:	000a      	movs	r2, r1
 8002e60:	1cbb      	adds	r3, r7, #2
 8002e62:	801a      	strh	r2, [r3, #0]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	695b      	ldr	r3, [r3, #20]
 8002e68:	60fb      	str	r3, [r7, #12]
 8002e6a:	1cbb      	adds	r3, r7, #2
 8002e6c:	881b      	ldrh	r3, [r3, #0]
 8002e6e:	68fa      	ldr	r2, [r7, #12]
 8002e70:	4013      	ands	r3, r2
 8002e72:	041a      	lsls	r2, r3, #16
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	43db      	mvns	r3, r3
 8002e78:	1cb9      	adds	r1, r7, #2
 8002e7a:	8809      	ldrh	r1, [r1, #0]
 8002e7c:	400b      	ands	r3, r1
 8002e7e:	431a      	orrs	r2, r3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	619a      	str	r2, [r3, #24]
 8002e84:	46c0      	nop			; (mov r8, r8)
 8002e86:	46bd      	mov	sp, r7
 8002e88:	b004      	add	sp, #16
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <HAL_GPIO_EXTI_IRQHandler>:
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	0002      	movs	r2, r0
 8002e94:	1dbb      	adds	r3, r7, #6
 8002e96:	801a      	strh	r2, [r3, #0]
 8002e98:	4b09      	ldr	r3, [pc, #36]	; (8002ec0 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002e9a:	695b      	ldr	r3, [r3, #20]
 8002e9c:	1dba      	adds	r2, r7, #6
 8002e9e:	8812      	ldrh	r2, [r2, #0]
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	d008      	beq.n	8002eb6 <HAL_GPIO_EXTI_IRQHandler+0x2a>
 8002ea4:	4b06      	ldr	r3, [pc, #24]	; (8002ec0 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002ea6:	1dba      	adds	r2, r7, #6
 8002ea8:	8812      	ldrh	r2, [r2, #0]
 8002eaa:	615a      	str	r2, [r3, #20]
 8002eac:	1dbb      	adds	r3, r7, #6
 8002eae:	881b      	ldrh	r3, [r3, #0]
 8002eb0:	0018      	movs	r0, r3
 8002eb2:	f000 f807 	bl	8002ec4 <HAL_GPIO_EXTI_Callback>
 8002eb6:	46c0      	nop			; (mov r8, r8)
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	b002      	add	sp, #8
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	46c0      	nop			; (mov r8, r8)
 8002ec0:	40010400 	.word	0x40010400

08002ec4 <HAL_GPIO_EXTI_Callback>:
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b082      	sub	sp, #8
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	0002      	movs	r2, r0
 8002ecc:	1dbb      	adds	r3, r7, #6
 8002ece:	801a      	strh	r2, [r3, #0]
 8002ed0:	46c0      	nop			; (mov r8, r8)
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	b002      	add	sp, #8
 8002ed6:	bd80      	pop	{r7, pc}

08002ed8 <HAL_I2C_Init>:
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d101      	bne.n	8002eea <HAL_I2C_Init+0x12>
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e082      	b.n	8002ff0 <HAL_I2C_Init+0x118>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2241      	movs	r2, #65	; 0x41
 8002eee:	5c9b      	ldrb	r3, [r3, r2]
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d107      	bne.n	8002f06 <HAL_I2C_Init+0x2e>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2240      	movs	r2, #64	; 0x40
 8002efa:	2100      	movs	r1, #0
 8002efc:	5499      	strb	r1, [r3, r2]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	0018      	movs	r0, r3
 8002f02:	f7fe fdef 	bl	8001ae4 <HAL_I2C_MspInit>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2241      	movs	r2, #65	; 0x41
 8002f0a:	2124      	movs	r1, #36	; 0x24
 8002f0c:	5499      	strb	r1, [r3, r2]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	2101      	movs	r1, #1
 8002f1a:	438a      	bics	r2, r1
 8002f1c:	601a      	str	r2, [r3, #0]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685a      	ldr	r2, [r3, #4]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4934      	ldr	r1, [pc, #208]	; (8002ff8 <HAL_I2C_Init+0x120>)
 8002f28:	400a      	ands	r2, r1
 8002f2a:	611a      	str	r2, [r3, #16]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	689a      	ldr	r2, [r3, #8]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4931      	ldr	r1, [pc, #196]	; (8002ffc <HAL_I2C_Init+0x124>)
 8002f38:	400a      	ands	r2, r1
 8002f3a:	609a      	str	r2, [r3, #8]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d108      	bne.n	8002f56 <HAL_I2C_Init+0x7e>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	689a      	ldr	r2, [r3, #8]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	2180      	movs	r1, #128	; 0x80
 8002f4e:	0209      	lsls	r1, r1, #8
 8002f50:	430a      	orrs	r2, r1
 8002f52:	609a      	str	r2, [r3, #8]
 8002f54:	e007      	b.n	8002f66 <HAL_I2C_Init+0x8e>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	689a      	ldr	r2, [r3, #8]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	2184      	movs	r1, #132	; 0x84
 8002f60:	0209      	lsls	r1, r1, #8
 8002f62:	430a      	orrs	r2, r1
 8002f64:	609a      	str	r2, [r3, #8]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d104      	bne.n	8002f78 <HAL_I2C_Init+0xa0>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	2280      	movs	r2, #128	; 0x80
 8002f74:	0112      	lsls	r2, r2, #4
 8002f76:	605a      	str	r2, [r3, #4]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	685a      	ldr	r2, [r3, #4]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	491f      	ldr	r1, [pc, #124]	; (8003000 <HAL_I2C_Init+0x128>)
 8002f84:	430a      	orrs	r2, r1
 8002f86:	605a      	str	r2, [r3, #4]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	68da      	ldr	r2, [r3, #12]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	491a      	ldr	r1, [pc, #104]	; (8002ffc <HAL_I2C_Init+0x124>)
 8002f94:	400a      	ands	r2, r1
 8002f96:	60da      	str	r2, [r3, #12]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	691a      	ldr	r2, [r3, #16]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	695b      	ldr	r3, [r3, #20]
 8002fa0:	431a      	orrs	r2, r3
 8002fa2:	0011      	movs	r1, r2
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	699b      	ldr	r3, [r3, #24]
 8002fa8:	021a      	lsls	r2, r3, #8
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	430a      	orrs	r2, r1
 8002fb0:	60da      	str	r2, [r3, #12]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	69d9      	ldr	r1, [r3, #28]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6a1a      	ldr	r2, [r3, #32]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	430a      	orrs	r2, r1
 8002fc0:	601a      	str	r2, [r3, #0]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	2101      	movs	r1, #1
 8002fce:	430a      	orrs	r2, r1
 8002fd0:	601a      	str	r2, [r3, #0]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	645a      	str	r2, [r3, #68]	; 0x44
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2241      	movs	r2, #65	; 0x41
 8002fdc:	2120      	movs	r1, #32
 8002fde:	5499      	strb	r1, [r3, r2]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	631a      	str	r2, [r3, #48]	; 0x30
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2242      	movs	r2, #66	; 0x42
 8002fea:	2100      	movs	r1, #0
 8002fec:	5499      	strb	r1, [r3, r2]
 8002fee:	2300      	movs	r3, #0
 8002ff0:	0018      	movs	r0, r3
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	b002      	add	sp, #8
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	f0ffffff 	.word	0xf0ffffff
 8002ffc:	ffff7fff 	.word	0xffff7fff
 8003000:	02008000 	.word	0x02008000

08003004 <HAL_I2C_Mem_Write>:
 8003004:	b590      	push	{r4, r7, lr}
 8003006:	b089      	sub	sp, #36	; 0x24
 8003008:	af02      	add	r7, sp, #8
 800300a:	60f8      	str	r0, [r7, #12]
 800300c:	000c      	movs	r4, r1
 800300e:	0010      	movs	r0, r2
 8003010:	0019      	movs	r1, r3
 8003012:	230a      	movs	r3, #10
 8003014:	18fb      	adds	r3, r7, r3
 8003016:	1c22      	adds	r2, r4, #0
 8003018:	801a      	strh	r2, [r3, #0]
 800301a:	2308      	movs	r3, #8
 800301c:	18fb      	adds	r3, r7, r3
 800301e:	1c02      	adds	r2, r0, #0
 8003020:	801a      	strh	r2, [r3, #0]
 8003022:	1dbb      	adds	r3, r7, #6
 8003024:	1c0a      	adds	r2, r1, #0
 8003026:	801a      	strh	r2, [r3, #0]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2241      	movs	r2, #65	; 0x41
 800302c:	5c9b      	ldrb	r3, [r3, r2]
 800302e:	b2db      	uxtb	r3, r3
 8003030:	2b20      	cmp	r3, #32
 8003032:	d000      	beq.n	8003036 <HAL_I2C_Mem_Write+0x32>
 8003034:	e10c      	b.n	8003250 <HAL_I2C_Mem_Write+0x24c>
 8003036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003038:	2b00      	cmp	r3, #0
 800303a:	d004      	beq.n	8003046 <HAL_I2C_Mem_Write+0x42>
 800303c:	232c      	movs	r3, #44	; 0x2c
 800303e:	18fb      	adds	r3, r7, r3
 8003040:	881b      	ldrh	r3, [r3, #0]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d105      	bne.n	8003052 <HAL_I2C_Mem_Write+0x4e>
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2280      	movs	r2, #128	; 0x80
 800304a:	0092      	lsls	r2, r2, #2
 800304c:	645a      	str	r2, [r3, #68]	; 0x44
 800304e:	2301      	movs	r3, #1
 8003050:	e0ff      	b.n	8003252 <HAL_I2C_Mem_Write+0x24e>
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2240      	movs	r2, #64	; 0x40
 8003056:	5c9b      	ldrb	r3, [r3, r2]
 8003058:	2b01      	cmp	r3, #1
 800305a:	d101      	bne.n	8003060 <HAL_I2C_Mem_Write+0x5c>
 800305c:	2302      	movs	r3, #2
 800305e:	e0f8      	b.n	8003252 <HAL_I2C_Mem_Write+0x24e>
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2240      	movs	r2, #64	; 0x40
 8003064:	2101      	movs	r1, #1
 8003066:	5499      	strb	r1, [r3, r2]
 8003068:	f7fe fed4 	bl	8001e14 <HAL_GetTick>
 800306c:	0003      	movs	r3, r0
 800306e:	617b      	str	r3, [r7, #20]
 8003070:	2380      	movs	r3, #128	; 0x80
 8003072:	0219      	lsls	r1, r3, #8
 8003074:	68f8      	ldr	r0, [r7, #12]
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	9300      	str	r3, [sp, #0]
 800307a:	2319      	movs	r3, #25
 800307c:	2201      	movs	r2, #1
 800307e:	f000 f975 	bl	800336c <I2C_WaitOnFlagUntilTimeout>
 8003082:	1e03      	subs	r3, r0, #0
 8003084:	d001      	beq.n	800308a <HAL_I2C_Mem_Write+0x86>
 8003086:	2301      	movs	r3, #1
 8003088:	e0e3      	b.n	8003252 <HAL_I2C_Mem_Write+0x24e>
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2241      	movs	r2, #65	; 0x41
 800308e:	2121      	movs	r1, #33	; 0x21
 8003090:	5499      	strb	r1, [r3, r2]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2242      	movs	r2, #66	; 0x42
 8003096:	2140      	movs	r1, #64	; 0x40
 8003098:	5499      	strb	r1, [r3, r2]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2200      	movs	r2, #0
 800309e:	645a      	str	r2, [r3, #68]	; 0x44
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030a4:	625a      	str	r2, [r3, #36]	; 0x24
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	222c      	movs	r2, #44	; 0x2c
 80030aa:	18ba      	adds	r2, r7, r2
 80030ac:	8812      	ldrh	r2, [r2, #0]
 80030ae:	855a      	strh	r2, [r3, #42]	; 0x2a
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2200      	movs	r2, #0
 80030b4:	635a      	str	r2, [r3, #52]	; 0x34
 80030b6:	1dbb      	adds	r3, r7, #6
 80030b8:	881c      	ldrh	r4, [r3, #0]
 80030ba:	2308      	movs	r3, #8
 80030bc:	18fb      	adds	r3, r7, r3
 80030be:	881a      	ldrh	r2, [r3, #0]
 80030c0:	230a      	movs	r3, #10
 80030c2:	18fb      	adds	r3, r7, r3
 80030c4:	8819      	ldrh	r1, [r3, #0]
 80030c6:	68f8      	ldr	r0, [r7, #12]
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	9301      	str	r3, [sp, #4]
 80030cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ce:	9300      	str	r3, [sp, #0]
 80030d0:	0023      	movs	r3, r4
 80030d2:	f000 f8c5 	bl	8003260 <I2C_RequestMemoryWrite>
 80030d6:	1e03      	subs	r3, r0, #0
 80030d8:	d005      	beq.n	80030e6 <HAL_I2C_Mem_Write+0xe2>
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2240      	movs	r2, #64	; 0x40
 80030de:	2100      	movs	r1, #0
 80030e0:	5499      	strb	r1, [r3, r2]
 80030e2:	2301      	movs	r3, #1
 80030e4:	e0b5      	b.n	8003252 <HAL_I2C_Mem_Write+0x24e>
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	2bff      	cmp	r3, #255	; 0xff
 80030ee:	d911      	bls.n	8003114 <HAL_I2C_Mem_Write+0x110>
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	22ff      	movs	r2, #255	; 0xff
 80030f4:	851a      	strh	r2, [r3, #40]	; 0x28
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030fa:	b2da      	uxtb	r2, r3
 80030fc:	2380      	movs	r3, #128	; 0x80
 80030fe:	045c      	lsls	r4, r3, #17
 8003100:	230a      	movs	r3, #10
 8003102:	18fb      	adds	r3, r7, r3
 8003104:	8819      	ldrh	r1, [r3, #0]
 8003106:	68f8      	ldr	r0, [r7, #12]
 8003108:	2300      	movs	r3, #0
 800310a:	9300      	str	r3, [sp, #0]
 800310c:	0023      	movs	r3, r4
 800310e:	f000 fa61 	bl	80035d4 <I2C_TransferConfig>
 8003112:	e012      	b.n	800313a <HAL_I2C_Mem_Write+0x136>
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003118:	b29a      	uxth	r2, r3
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	851a      	strh	r2, [r3, #40]	; 0x28
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003122:	b2da      	uxtb	r2, r3
 8003124:	2380      	movs	r3, #128	; 0x80
 8003126:	049c      	lsls	r4, r3, #18
 8003128:	230a      	movs	r3, #10
 800312a:	18fb      	adds	r3, r7, r3
 800312c:	8819      	ldrh	r1, [r3, #0]
 800312e:	68f8      	ldr	r0, [r7, #12]
 8003130:	2300      	movs	r3, #0
 8003132:	9300      	str	r3, [sp, #0]
 8003134:	0023      	movs	r3, r4
 8003136:	f000 fa4d 	bl	80035d4 <I2C_TransferConfig>
 800313a:	697a      	ldr	r2, [r7, #20]
 800313c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	0018      	movs	r0, r3
 8003142:	f000 f952 	bl	80033ea <I2C_WaitOnTXISFlagUntilTimeout>
 8003146:	1e03      	subs	r3, r0, #0
 8003148:	d001      	beq.n	800314e <HAL_I2C_Mem_Write+0x14a>
 800314a:	2301      	movs	r3, #1
 800314c:	e081      	b.n	8003252 <HAL_I2C_Mem_Write+0x24e>
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003152:	781a      	ldrb	r2, [r3, #0]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	629a      	str	r2, [r3, #40]	; 0x28
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315e:	1c5a      	adds	r2, r3, #1
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	625a      	str	r2, [r3, #36]	; 0x24
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003168:	b29b      	uxth	r3, r3
 800316a:	3b01      	subs	r3, #1
 800316c:	b29a      	uxth	r2, r3
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003176:	3b01      	subs	r3, #1
 8003178:	b29a      	uxth	r2, r3
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	851a      	strh	r2, [r3, #40]	; 0x28
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003182:	b29b      	uxth	r3, r3
 8003184:	2b00      	cmp	r3, #0
 8003186:	d03a      	beq.n	80031fe <HAL_I2C_Mem_Write+0x1fa>
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800318c:	2b00      	cmp	r3, #0
 800318e:	d136      	bne.n	80031fe <HAL_I2C_Mem_Write+0x1fa>
 8003190:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003192:	68f8      	ldr	r0, [r7, #12]
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	9300      	str	r3, [sp, #0]
 8003198:	0013      	movs	r3, r2
 800319a:	2200      	movs	r2, #0
 800319c:	2180      	movs	r1, #128	; 0x80
 800319e:	f000 f8e5 	bl	800336c <I2C_WaitOnFlagUntilTimeout>
 80031a2:	1e03      	subs	r3, r0, #0
 80031a4:	d001      	beq.n	80031aa <HAL_I2C_Mem_Write+0x1a6>
 80031a6:	2301      	movs	r3, #1
 80031a8:	e053      	b.n	8003252 <HAL_I2C_Mem_Write+0x24e>
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ae:	b29b      	uxth	r3, r3
 80031b0:	2bff      	cmp	r3, #255	; 0xff
 80031b2:	d911      	bls.n	80031d8 <HAL_I2C_Mem_Write+0x1d4>
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	22ff      	movs	r2, #255	; 0xff
 80031b8:	851a      	strh	r2, [r3, #40]	; 0x28
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031be:	b2da      	uxtb	r2, r3
 80031c0:	2380      	movs	r3, #128	; 0x80
 80031c2:	045c      	lsls	r4, r3, #17
 80031c4:	230a      	movs	r3, #10
 80031c6:	18fb      	adds	r3, r7, r3
 80031c8:	8819      	ldrh	r1, [r3, #0]
 80031ca:	68f8      	ldr	r0, [r7, #12]
 80031cc:	2300      	movs	r3, #0
 80031ce:	9300      	str	r3, [sp, #0]
 80031d0:	0023      	movs	r3, r4
 80031d2:	f000 f9ff 	bl	80035d4 <I2C_TransferConfig>
 80031d6:	e012      	b.n	80031fe <HAL_I2C_Mem_Write+0x1fa>
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031dc:	b29a      	uxth	r2, r3
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	851a      	strh	r2, [r3, #40]	; 0x28
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031e6:	b2da      	uxtb	r2, r3
 80031e8:	2380      	movs	r3, #128	; 0x80
 80031ea:	049c      	lsls	r4, r3, #18
 80031ec:	230a      	movs	r3, #10
 80031ee:	18fb      	adds	r3, r7, r3
 80031f0:	8819      	ldrh	r1, [r3, #0]
 80031f2:	68f8      	ldr	r0, [r7, #12]
 80031f4:	2300      	movs	r3, #0
 80031f6:	9300      	str	r3, [sp, #0]
 80031f8:	0023      	movs	r3, r4
 80031fa:	f000 f9eb 	bl	80035d4 <I2C_TransferConfig>
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003202:	b29b      	uxth	r3, r3
 8003204:	2b00      	cmp	r3, #0
 8003206:	d198      	bne.n	800313a <HAL_I2C_Mem_Write+0x136>
 8003208:	697a      	ldr	r2, [r7, #20]
 800320a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	0018      	movs	r0, r3
 8003210:	f000 f92a 	bl	8003468 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003214:	1e03      	subs	r3, r0, #0
 8003216:	d001      	beq.n	800321c <HAL_I2C_Mem_Write+0x218>
 8003218:	2301      	movs	r3, #1
 800321a:	e01a      	b.n	8003252 <HAL_I2C_Mem_Write+0x24e>
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2220      	movs	r2, #32
 8003222:	61da      	str	r2, [r3, #28]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	685a      	ldr	r2, [r3, #4]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	490b      	ldr	r1, [pc, #44]	; (800325c <HAL_I2C_Mem_Write+0x258>)
 8003230:	400a      	ands	r2, r1
 8003232:	605a      	str	r2, [r3, #4]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2241      	movs	r2, #65	; 0x41
 8003238:	2120      	movs	r1, #32
 800323a:	5499      	strb	r1, [r3, r2]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2242      	movs	r2, #66	; 0x42
 8003240:	2100      	movs	r1, #0
 8003242:	5499      	strb	r1, [r3, r2]
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2240      	movs	r2, #64	; 0x40
 8003248:	2100      	movs	r1, #0
 800324a:	5499      	strb	r1, [r3, r2]
 800324c:	2300      	movs	r3, #0
 800324e:	e000      	b.n	8003252 <HAL_I2C_Mem_Write+0x24e>
 8003250:	2302      	movs	r3, #2
 8003252:	0018      	movs	r0, r3
 8003254:	46bd      	mov	sp, r7
 8003256:	b007      	add	sp, #28
 8003258:	bd90      	pop	{r4, r7, pc}
 800325a:	46c0      	nop			; (mov r8, r8)
 800325c:	fe00e800 	.word	0xfe00e800

08003260 <I2C_RequestMemoryWrite>:
 8003260:	b5b0      	push	{r4, r5, r7, lr}
 8003262:	b086      	sub	sp, #24
 8003264:	af02      	add	r7, sp, #8
 8003266:	60f8      	str	r0, [r7, #12]
 8003268:	000c      	movs	r4, r1
 800326a:	0010      	movs	r0, r2
 800326c:	0019      	movs	r1, r3
 800326e:	250a      	movs	r5, #10
 8003270:	197b      	adds	r3, r7, r5
 8003272:	1c22      	adds	r2, r4, #0
 8003274:	801a      	strh	r2, [r3, #0]
 8003276:	2308      	movs	r3, #8
 8003278:	18fb      	adds	r3, r7, r3
 800327a:	1c02      	adds	r2, r0, #0
 800327c:	801a      	strh	r2, [r3, #0]
 800327e:	1dbb      	adds	r3, r7, #6
 8003280:	1c0a      	adds	r2, r1, #0
 8003282:	801a      	strh	r2, [r3, #0]
 8003284:	1dbb      	adds	r3, r7, #6
 8003286:	881b      	ldrh	r3, [r3, #0]
 8003288:	b2da      	uxtb	r2, r3
 800328a:	2380      	movs	r3, #128	; 0x80
 800328c:	045c      	lsls	r4, r3, #17
 800328e:	197b      	adds	r3, r7, r5
 8003290:	8819      	ldrh	r1, [r3, #0]
 8003292:	68f8      	ldr	r0, [r7, #12]
 8003294:	4b23      	ldr	r3, [pc, #140]	; (8003324 <I2C_RequestMemoryWrite+0xc4>)
 8003296:	9300      	str	r3, [sp, #0]
 8003298:	0023      	movs	r3, r4
 800329a:	f000 f99b 	bl	80035d4 <I2C_TransferConfig>
 800329e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032a0:	6a39      	ldr	r1, [r7, #32]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	0018      	movs	r0, r3
 80032a6:	f000 f8a0 	bl	80033ea <I2C_WaitOnTXISFlagUntilTimeout>
 80032aa:	1e03      	subs	r3, r0, #0
 80032ac:	d001      	beq.n	80032b2 <I2C_RequestMemoryWrite+0x52>
 80032ae:	2301      	movs	r3, #1
 80032b0:	e033      	b.n	800331a <I2C_RequestMemoryWrite+0xba>
 80032b2:	1dbb      	adds	r3, r7, #6
 80032b4:	881b      	ldrh	r3, [r3, #0]
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d107      	bne.n	80032ca <I2C_RequestMemoryWrite+0x6a>
 80032ba:	2308      	movs	r3, #8
 80032bc:	18fb      	adds	r3, r7, r3
 80032be:	881b      	ldrh	r3, [r3, #0]
 80032c0:	b2da      	uxtb	r2, r3
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	629a      	str	r2, [r3, #40]	; 0x28
 80032c8:	e019      	b.n	80032fe <I2C_RequestMemoryWrite+0x9e>
 80032ca:	2308      	movs	r3, #8
 80032cc:	18fb      	adds	r3, r7, r3
 80032ce:	881b      	ldrh	r3, [r3, #0]
 80032d0:	0a1b      	lsrs	r3, r3, #8
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	b2da      	uxtb	r2, r3
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	629a      	str	r2, [r3, #40]	; 0x28
 80032dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032de:	6a39      	ldr	r1, [r7, #32]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	0018      	movs	r0, r3
 80032e4:	f000 f881 	bl	80033ea <I2C_WaitOnTXISFlagUntilTimeout>
 80032e8:	1e03      	subs	r3, r0, #0
 80032ea:	d001      	beq.n	80032f0 <I2C_RequestMemoryWrite+0x90>
 80032ec:	2301      	movs	r3, #1
 80032ee:	e014      	b.n	800331a <I2C_RequestMemoryWrite+0xba>
 80032f0:	2308      	movs	r3, #8
 80032f2:	18fb      	adds	r3, r7, r3
 80032f4:	881b      	ldrh	r3, [r3, #0]
 80032f6:	b2da      	uxtb	r2, r3
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	629a      	str	r2, [r3, #40]	; 0x28
 80032fe:	6a3a      	ldr	r2, [r7, #32]
 8003300:	68f8      	ldr	r0, [r7, #12]
 8003302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003304:	9300      	str	r3, [sp, #0]
 8003306:	0013      	movs	r3, r2
 8003308:	2200      	movs	r2, #0
 800330a:	2180      	movs	r1, #128	; 0x80
 800330c:	f000 f82e 	bl	800336c <I2C_WaitOnFlagUntilTimeout>
 8003310:	1e03      	subs	r3, r0, #0
 8003312:	d001      	beq.n	8003318 <I2C_RequestMemoryWrite+0xb8>
 8003314:	2301      	movs	r3, #1
 8003316:	e000      	b.n	800331a <I2C_RequestMemoryWrite+0xba>
 8003318:	2300      	movs	r3, #0
 800331a:	0018      	movs	r0, r3
 800331c:	46bd      	mov	sp, r7
 800331e:	b004      	add	sp, #16
 8003320:	bdb0      	pop	{r4, r5, r7, pc}
 8003322:	46c0      	nop			; (mov r8, r8)
 8003324:	80002000 	.word	0x80002000

08003328 <I2C_Flush_TXDR>:
 8003328:	b580      	push	{r7, lr}
 800332a:	b082      	sub	sp, #8
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	699b      	ldr	r3, [r3, #24]
 8003336:	2202      	movs	r2, #2
 8003338:	4013      	ands	r3, r2
 800333a:	2b02      	cmp	r3, #2
 800333c:	d103      	bne.n	8003346 <I2C_Flush_TXDR+0x1e>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	2200      	movs	r2, #0
 8003344:	629a      	str	r2, [r3, #40]	; 0x28
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	699b      	ldr	r3, [r3, #24]
 800334c:	2201      	movs	r2, #1
 800334e:	4013      	ands	r3, r2
 8003350:	2b01      	cmp	r3, #1
 8003352:	d007      	beq.n	8003364 <I2C_Flush_TXDR+0x3c>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	699a      	ldr	r2, [r3, #24]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	2101      	movs	r1, #1
 8003360:	430a      	orrs	r2, r1
 8003362:	619a      	str	r2, [r3, #24]
 8003364:	46c0      	nop			; (mov r8, r8)
 8003366:	46bd      	mov	sp, r7
 8003368:	b002      	add	sp, #8
 800336a:	bd80      	pop	{r7, pc}

0800336c <I2C_WaitOnFlagUntilTimeout>:
 800336c:	b580      	push	{r7, lr}
 800336e:	b084      	sub	sp, #16
 8003370:	af00      	add	r7, sp, #0
 8003372:	60f8      	str	r0, [r7, #12]
 8003374:	60b9      	str	r1, [r7, #8]
 8003376:	603b      	str	r3, [r7, #0]
 8003378:	1dfb      	adds	r3, r7, #7
 800337a:	701a      	strb	r2, [r3, #0]
 800337c:	e021      	b.n	80033c2 <I2C_WaitOnFlagUntilTimeout+0x56>
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	3301      	adds	r3, #1
 8003382:	d01e      	beq.n	80033c2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003384:	f7fe fd46 	bl	8001e14 <HAL_GetTick>
 8003388:	0002      	movs	r2, r0
 800338a:	69bb      	ldr	r3, [r7, #24]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	683a      	ldr	r2, [r7, #0]
 8003390:	429a      	cmp	r2, r3
 8003392:	d302      	bcc.n	800339a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d113      	bne.n	80033c2 <I2C_WaitOnFlagUntilTimeout+0x56>
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800339e:	2220      	movs	r2, #32
 80033a0:	431a      	orrs	r2, r3
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	645a      	str	r2, [r3, #68]	; 0x44
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2241      	movs	r2, #65	; 0x41
 80033aa:	2120      	movs	r1, #32
 80033ac:	5499      	strb	r1, [r3, r2]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2242      	movs	r2, #66	; 0x42
 80033b2:	2100      	movs	r1, #0
 80033b4:	5499      	strb	r1, [r3, r2]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2240      	movs	r2, #64	; 0x40
 80033ba:	2100      	movs	r1, #0
 80033bc:	5499      	strb	r1, [r3, r2]
 80033be:	2301      	movs	r3, #1
 80033c0:	e00f      	b.n	80033e2 <I2C_WaitOnFlagUntilTimeout+0x76>
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	699b      	ldr	r3, [r3, #24]
 80033c8:	68ba      	ldr	r2, [r7, #8]
 80033ca:	4013      	ands	r3, r2
 80033cc:	68ba      	ldr	r2, [r7, #8]
 80033ce:	1ad3      	subs	r3, r2, r3
 80033d0:	425a      	negs	r2, r3
 80033d2:	4153      	adcs	r3, r2
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	001a      	movs	r2, r3
 80033d8:	1dfb      	adds	r3, r7, #7
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	429a      	cmp	r2, r3
 80033de:	d0ce      	beq.n	800337e <I2C_WaitOnFlagUntilTimeout+0x12>
 80033e0:	2300      	movs	r3, #0
 80033e2:	0018      	movs	r0, r3
 80033e4:	46bd      	mov	sp, r7
 80033e6:	b004      	add	sp, #16
 80033e8:	bd80      	pop	{r7, pc}

080033ea <I2C_WaitOnTXISFlagUntilTimeout>:
 80033ea:	b580      	push	{r7, lr}
 80033ec:	b084      	sub	sp, #16
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	60f8      	str	r0, [r7, #12]
 80033f2:	60b9      	str	r1, [r7, #8]
 80033f4:	607a      	str	r2, [r7, #4]
 80033f6:	e02b      	b.n	8003450 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	68b9      	ldr	r1, [r7, #8]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	0018      	movs	r0, r3
 8003400:	f000 f86e 	bl	80034e0 <I2C_IsAcknowledgeFailed>
 8003404:	1e03      	subs	r3, r0, #0
 8003406:	d001      	beq.n	800340c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
 8003408:	2301      	movs	r3, #1
 800340a:	e029      	b.n	8003460 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	3301      	adds	r3, #1
 8003410:	d01e      	beq.n	8003450 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
 8003412:	f7fe fcff 	bl	8001e14 <HAL_GetTick>
 8003416:	0002      	movs	r2, r0
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	68ba      	ldr	r2, [r7, #8]
 800341e:	429a      	cmp	r2, r3
 8003420:	d302      	bcc.n	8003428 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d113      	bne.n	8003450 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800342c:	2220      	movs	r2, #32
 800342e:	431a      	orrs	r2, r3
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	645a      	str	r2, [r3, #68]	; 0x44
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2241      	movs	r2, #65	; 0x41
 8003438:	2120      	movs	r1, #32
 800343a:	5499      	strb	r1, [r3, r2]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2242      	movs	r2, #66	; 0x42
 8003440:	2100      	movs	r1, #0
 8003442:	5499      	strb	r1, [r3, r2]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2240      	movs	r2, #64	; 0x40
 8003448:	2100      	movs	r1, #0
 800344a:	5499      	strb	r1, [r3, r2]
 800344c:	2301      	movs	r3, #1
 800344e:	e007      	b.n	8003460 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	699b      	ldr	r3, [r3, #24]
 8003456:	2202      	movs	r2, #2
 8003458:	4013      	ands	r3, r2
 800345a:	2b02      	cmp	r3, #2
 800345c:	d1cc      	bne.n	80033f8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
 800345e:	2300      	movs	r3, #0
 8003460:	0018      	movs	r0, r3
 8003462:	46bd      	mov	sp, r7
 8003464:	b004      	add	sp, #16
 8003466:	bd80      	pop	{r7, pc}

08003468 <I2C_WaitOnSTOPFlagUntilTimeout>:
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	60f8      	str	r0, [r7, #12]
 8003470:	60b9      	str	r1, [r7, #8]
 8003472:	607a      	str	r2, [r7, #4]
 8003474:	e028      	b.n	80034c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	68b9      	ldr	r1, [r7, #8]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	0018      	movs	r0, r3
 800347e:	f000 f82f 	bl	80034e0 <I2C_IsAcknowledgeFailed>
 8003482:	1e03      	subs	r3, r0, #0
 8003484:	d001      	beq.n	800348a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
 8003486:	2301      	movs	r3, #1
 8003488:	e026      	b.n	80034d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
 800348a:	f7fe fcc3 	bl	8001e14 <HAL_GetTick>
 800348e:	0002      	movs	r2, r0
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	68ba      	ldr	r2, [r7, #8]
 8003496:	429a      	cmp	r2, r3
 8003498:	d302      	bcc.n	80034a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d113      	bne.n	80034c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a4:	2220      	movs	r2, #32
 80034a6:	431a      	orrs	r2, r3
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	645a      	str	r2, [r3, #68]	; 0x44
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2241      	movs	r2, #65	; 0x41
 80034b0:	2120      	movs	r1, #32
 80034b2:	5499      	strb	r1, [r3, r2]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2242      	movs	r2, #66	; 0x42
 80034b8:	2100      	movs	r1, #0
 80034ba:	5499      	strb	r1, [r3, r2]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2240      	movs	r2, #64	; 0x40
 80034c0:	2100      	movs	r1, #0
 80034c2:	5499      	strb	r1, [r3, r2]
 80034c4:	2301      	movs	r3, #1
 80034c6:	e007      	b.n	80034d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	699b      	ldr	r3, [r3, #24]
 80034ce:	2220      	movs	r2, #32
 80034d0:	4013      	ands	r3, r2
 80034d2:	2b20      	cmp	r3, #32
 80034d4:	d1cf      	bne.n	8003476 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
 80034d6:	2300      	movs	r3, #0
 80034d8:	0018      	movs	r0, r3
 80034da:	46bd      	mov	sp, r7
 80034dc:	b004      	add	sp, #16
 80034de:	bd80      	pop	{r7, pc}

080034e0 <I2C_IsAcknowledgeFailed>:
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b084      	sub	sp, #16
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	60f8      	str	r0, [r7, #12]
 80034e8:	60b9      	str	r1, [r7, #8]
 80034ea:	607a      	str	r2, [r7, #4]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	699b      	ldr	r3, [r3, #24]
 80034f2:	2210      	movs	r2, #16
 80034f4:	4013      	ands	r3, r2
 80034f6:	2b10      	cmp	r3, #16
 80034f8:	d164      	bne.n	80035c4 <I2C_IsAcknowledgeFailed+0xe4>
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	685a      	ldr	r2, [r3, #4]
 8003500:	2380      	movs	r3, #128	; 0x80
 8003502:	049b      	lsls	r3, r3, #18
 8003504:	401a      	ands	r2, r3
 8003506:	2380      	movs	r3, #128	; 0x80
 8003508:	049b      	lsls	r3, r3, #18
 800350a:	429a      	cmp	r2, r3
 800350c:	d02b      	beq.n	8003566 <I2C_IsAcknowledgeFailed+0x86>
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	685a      	ldr	r2, [r3, #4]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	2180      	movs	r1, #128	; 0x80
 800351a:	01c9      	lsls	r1, r1, #7
 800351c:	430a      	orrs	r2, r1
 800351e:	605a      	str	r2, [r3, #4]
 8003520:	e021      	b.n	8003566 <I2C_IsAcknowledgeFailed+0x86>
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	3301      	adds	r3, #1
 8003526:	d01e      	beq.n	8003566 <I2C_IsAcknowledgeFailed+0x86>
 8003528:	f7fe fc74 	bl	8001e14 <HAL_GetTick>
 800352c:	0002      	movs	r2, r0
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	68ba      	ldr	r2, [r7, #8]
 8003534:	429a      	cmp	r2, r3
 8003536:	d302      	bcc.n	800353e <I2C_IsAcknowledgeFailed+0x5e>
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d113      	bne.n	8003566 <I2C_IsAcknowledgeFailed+0x86>
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003542:	2220      	movs	r2, #32
 8003544:	431a      	orrs	r2, r3
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	645a      	str	r2, [r3, #68]	; 0x44
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2241      	movs	r2, #65	; 0x41
 800354e:	2120      	movs	r1, #32
 8003550:	5499      	strb	r1, [r3, r2]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2242      	movs	r2, #66	; 0x42
 8003556:	2100      	movs	r1, #0
 8003558:	5499      	strb	r1, [r3, r2]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2240      	movs	r2, #64	; 0x40
 800355e:	2100      	movs	r1, #0
 8003560:	5499      	strb	r1, [r3, r2]
 8003562:	2301      	movs	r3, #1
 8003564:	e02f      	b.n	80035c6 <I2C_IsAcknowledgeFailed+0xe6>
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	699b      	ldr	r3, [r3, #24]
 800356c:	2220      	movs	r2, #32
 800356e:	4013      	ands	r3, r2
 8003570:	2b20      	cmp	r3, #32
 8003572:	d1d6      	bne.n	8003522 <I2C_IsAcknowledgeFailed+0x42>
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	2210      	movs	r2, #16
 800357a:	61da      	str	r2, [r3, #28]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	2220      	movs	r2, #32
 8003582:	61da      	str	r2, [r3, #28]
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	0018      	movs	r0, r3
 8003588:	f7ff fece 	bl	8003328 <I2C_Flush_TXDR>
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	685a      	ldr	r2, [r3, #4]
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	490e      	ldr	r1, [pc, #56]	; (80035d0 <I2C_IsAcknowledgeFailed+0xf0>)
 8003598:	400a      	ands	r2, r1
 800359a:	605a      	str	r2, [r3, #4]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a0:	2204      	movs	r2, #4
 80035a2:	431a      	orrs	r2, r3
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	645a      	str	r2, [r3, #68]	; 0x44
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2241      	movs	r2, #65	; 0x41
 80035ac:	2120      	movs	r1, #32
 80035ae:	5499      	strb	r1, [r3, r2]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2242      	movs	r2, #66	; 0x42
 80035b4:	2100      	movs	r1, #0
 80035b6:	5499      	strb	r1, [r3, r2]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2240      	movs	r2, #64	; 0x40
 80035bc:	2100      	movs	r1, #0
 80035be:	5499      	strb	r1, [r3, r2]
 80035c0:	2301      	movs	r3, #1
 80035c2:	e000      	b.n	80035c6 <I2C_IsAcknowledgeFailed+0xe6>
 80035c4:	2300      	movs	r3, #0
 80035c6:	0018      	movs	r0, r3
 80035c8:	46bd      	mov	sp, r7
 80035ca:	b004      	add	sp, #16
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	46c0      	nop			; (mov r8, r8)
 80035d0:	fe00e800 	.word	0xfe00e800

080035d4 <I2C_TransferConfig>:
 80035d4:	b590      	push	{r4, r7, lr}
 80035d6:	b085      	sub	sp, #20
 80035d8:	af00      	add	r7, sp, #0
 80035da:	60f8      	str	r0, [r7, #12]
 80035dc:	0008      	movs	r0, r1
 80035de:	0011      	movs	r1, r2
 80035e0:	607b      	str	r3, [r7, #4]
 80035e2:	240a      	movs	r4, #10
 80035e4:	193b      	adds	r3, r7, r4
 80035e6:	1c02      	adds	r2, r0, #0
 80035e8:	801a      	strh	r2, [r3, #0]
 80035ea:	2009      	movs	r0, #9
 80035ec:	183b      	adds	r3, r7, r0
 80035ee:	1c0a      	adds	r2, r1, #0
 80035f0:	701a      	strb	r2, [r3, #0]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	6a3a      	ldr	r2, [r7, #32]
 80035fa:	0d51      	lsrs	r1, r2, #21
 80035fc:	2280      	movs	r2, #128	; 0x80
 80035fe:	00d2      	lsls	r2, r2, #3
 8003600:	400a      	ands	r2, r1
 8003602:	490e      	ldr	r1, [pc, #56]	; (800363c <I2C_TransferConfig+0x68>)
 8003604:	430a      	orrs	r2, r1
 8003606:	43d2      	mvns	r2, r2
 8003608:	401a      	ands	r2, r3
 800360a:	0011      	movs	r1, r2
 800360c:	193b      	adds	r3, r7, r4
 800360e:	881b      	ldrh	r3, [r3, #0]
 8003610:	059b      	lsls	r3, r3, #22
 8003612:	0d9a      	lsrs	r2, r3, #22
 8003614:	183b      	adds	r3, r7, r0
 8003616:	781b      	ldrb	r3, [r3, #0]
 8003618:	0418      	lsls	r0, r3, #16
 800361a:	23ff      	movs	r3, #255	; 0xff
 800361c:	041b      	lsls	r3, r3, #16
 800361e:	4003      	ands	r3, r0
 8003620:	431a      	orrs	r2, r3
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	431a      	orrs	r2, r3
 8003626:	6a3b      	ldr	r3, [r7, #32]
 8003628:	431a      	orrs	r2, r3
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	430a      	orrs	r2, r1
 8003630:	605a      	str	r2, [r3, #4]
 8003632:	46c0      	nop			; (mov r8, r8)
 8003634:	46bd      	mov	sp, r7
 8003636:	b005      	add	sp, #20
 8003638:	bd90      	pop	{r4, r7, pc}
 800363a:	46c0      	nop			; (mov r8, r8)
 800363c:	03ff63ff 	.word	0x03ff63ff

08003640 <HAL_I2CEx_ConfigAnalogFilter>:
 8003640:	b580      	push	{r7, lr}
 8003642:	b082      	sub	sp, #8
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	6039      	str	r1, [r7, #0]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2241      	movs	r2, #65	; 0x41
 800364e:	5c9b      	ldrb	r3, [r3, r2]
 8003650:	b2db      	uxtb	r3, r3
 8003652:	2b20      	cmp	r3, #32
 8003654:	d138      	bne.n	80036c8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2240      	movs	r2, #64	; 0x40
 800365a:	5c9b      	ldrb	r3, [r3, r2]
 800365c:	2b01      	cmp	r3, #1
 800365e:	d101      	bne.n	8003664 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003660:	2302      	movs	r3, #2
 8003662:	e032      	b.n	80036ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2240      	movs	r2, #64	; 0x40
 8003668:	2101      	movs	r1, #1
 800366a:	5499      	strb	r1, [r3, r2]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2241      	movs	r2, #65	; 0x41
 8003670:	2124      	movs	r1, #36	; 0x24
 8003672:	5499      	strb	r1, [r3, r2]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	2101      	movs	r1, #1
 8003680:	438a      	bics	r2, r1
 8003682:	601a      	str	r2, [r3, #0]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4911      	ldr	r1, [pc, #68]	; (80036d4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003690:	400a      	ands	r2, r1
 8003692:	601a      	str	r2, [r3, #0]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	6819      	ldr	r1, [r3, #0]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	683a      	ldr	r2, [r7, #0]
 80036a0:	430a      	orrs	r2, r1
 80036a2:	601a      	str	r2, [r3, #0]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	2101      	movs	r1, #1
 80036b0:	430a      	orrs	r2, r1
 80036b2:	601a      	str	r2, [r3, #0]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2241      	movs	r2, #65	; 0x41
 80036b8:	2120      	movs	r1, #32
 80036ba:	5499      	strb	r1, [r3, r2]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2240      	movs	r2, #64	; 0x40
 80036c0:	2100      	movs	r1, #0
 80036c2:	5499      	strb	r1, [r3, r2]
 80036c4:	2300      	movs	r3, #0
 80036c6:	e000      	b.n	80036ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80036c8:	2302      	movs	r3, #2
 80036ca:	0018      	movs	r0, r3
 80036cc:	46bd      	mov	sp, r7
 80036ce:	b002      	add	sp, #8
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	46c0      	nop			; (mov r8, r8)
 80036d4:	ffffefff 	.word	0xffffefff

080036d8 <HAL_I2CEx_ConfigDigitalFilter>:
 80036d8:	b580      	push	{r7, lr}
 80036da:	b084      	sub	sp, #16
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	6039      	str	r1, [r7, #0]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2241      	movs	r2, #65	; 0x41
 80036e6:	5c9b      	ldrb	r3, [r3, r2]
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	2b20      	cmp	r3, #32
 80036ec:	d139      	bne.n	8003762 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2240      	movs	r2, #64	; 0x40
 80036f2:	5c9b      	ldrb	r3, [r3, r2]
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d101      	bne.n	80036fc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80036f8:	2302      	movs	r3, #2
 80036fa:	e033      	b.n	8003764 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2240      	movs	r2, #64	; 0x40
 8003700:	2101      	movs	r1, #1
 8003702:	5499      	strb	r1, [r3, r2]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2241      	movs	r2, #65	; 0x41
 8003708:	2124      	movs	r1, #36	; 0x24
 800370a:	5499      	strb	r1, [r3, r2]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	2101      	movs	r1, #1
 8003718:	438a      	bics	r2, r1
 800371a:	601a      	str	r2, [r3, #0]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	60fb      	str	r3, [r7, #12]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	4a11      	ldr	r2, [pc, #68]	; (800376c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003728:	4013      	ands	r3, r2
 800372a:	60fb      	str	r3, [r7, #12]
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	021b      	lsls	r3, r3, #8
 8003730:	68fa      	ldr	r2, [r7, #12]
 8003732:	4313      	orrs	r3, r2
 8003734:	60fb      	str	r3, [r7, #12]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	68fa      	ldr	r2, [r7, #12]
 800373c:	601a      	str	r2, [r3, #0]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	2101      	movs	r1, #1
 800374a:	430a      	orrs	r2, r1
 800374c:	601a      	str	r2, [r3, #0]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2241      	movs	r2, #65	; 0x41
 8003752:	2120      	movs	r1, #32
 8003754:	5499      	strb	r1, [r3, r2]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2240      	movs	r2, #64	; 0x40
 800375a:	2100      	movs	r1, #0
 800375c:	5499      	strb	r1, [r3, r2]
 800375e:	2300      	movs	r3, #0
 8003760:	e000      	b.n	8003764 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003762:	2302      	movs	r3, #2
 8003764:	0018      	movs	r0, r3
 8003766:	46bd      	mov	sp, r7
 8003768:	b004      	add	sp, #16
 800376a:	bd80      	pop	{r7, pc}
 800376c:	fffff0ff 	.word	0xfffff0ff

08003770 <HAL_RCC_OscConfig>:
 8003770:	b580      	push	{r7, lr}
 8003772:	b088      	sub	sp, #32
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d102      	bne.n	8003784 <HAL_RCC_OscConfig+0x14>
 800377e:	2301      	movs	r3, #1
 8003780:	f000 fb76 	bl	8003e70 <HAL_RCC_OscConfig+0x700>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	2201      	movs	r2, #1
 800378a:	4013      	ands	r3, r2
 800378c:	d100      	bne.n	8003790 <HAL_RCC_OscConfig+0x20>
 800378e:	e08e      	b.n	80038ae <HAL_RCC_OscConfig+0x13e>
 8003790:	4bc5      	ldr	r3, [pc, #788]	; (8003aa8 <HAL_RCC_OscConfig+0x338>)
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	220c      	movs	r2, #12
 8003796:	4013      	ands	r3, r2
 8003798:	2b04      	cmp	r3, #4
 800379a:	d00e      	beq.n	80037ba <HAL_RCC_OscConfig+0x4a>
 800379c:	4bc2      	ldr	r3, [pc, #776]	; (8003aa8 <HAL_RCC_OscConfig+0x338>)
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	220c      	movs	r2, #12
 80037a2:	4013      	ands	r3, r2
 80037a4:	2b08      	cmp	r3, #8
 80037a6:	d117      	bne.n	80037d8 <HAL_RCC_OscConfig+0x68>
 80037a8:	4bbf      	ldr	r3, [pc, #764]	; (8003aa8 <HAL_RCC_OscConfig+0x338>)
 80037aa:	685a      	ldr	r2, [r3, #4]
 80037ac:	23c0      	movs	r3, #192	; 0xc0
 80037ae:	025b      	lsls	r3, r3, #9
 80037b0:	401a      	ands	r2, r3
 80037b2:	2380      	movs	r3, #128	; 0x80
 80037b4:	025b      	lsls	r3, r3, #9
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d10e      	bne.n	80037d8 <HAL_RCC_OscConfig+0x68>
 80037ba:	4bbb      	ldr	r3, [pc, #748]	; (8003aa8 <HAL_RCC_OscConfig+0x338>)
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	2380      	movs	r3, #128	; 0x80
 80037c0:	029b      	lsls	r3, r3, #10
 80037c2:	4013      	ands	r3, r2
 80037c4:	d100      	bne.n	80037c8 <HAL_RCC_OscConfig+0x58>
 80037c6:	e071      	b.n	80038ac <HAL_RCC_OscConfig+0x13c>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d000      	beq.n	80037d2 <HAL_RCC_OscConfig+0x62>
 80037d0:	e06c      	b.n	80038ac <HAL_RCC_OscConfig+0x13c>
 80037d2:	2301      	movs	r3, #1
 80037d4:	f000 fb4c 	bl	8003e70 <HAL_RCC_OscConfig+0x700>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d107      	bne.n	80037f0 <HAL_RCC_OscConfig+0x80>
 80037e0:	4bb1      	ldr	r3, [pc, #708]	; (8003aa8 <HAL_RCC_OscConfig+0x338>)
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	4bb0      	ldr	r3, [pc, #704]	; (8003aa8 <HAL_RCC_OscConfig+0x338>)
 80037e6:	2180      	movs	r1, #128	; 0x80
 80037e8:	0249      	lsls	r1, r1, #9
 80037ea:	430a      	orrs	r2, r1
 80037ec:	601a      	str	r2, [r3, #0]
 80037ee:	e02f      	b.n	8003850 <HAL_RCC_OscConfig+0xe0>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d10c      	bne.n	8003812 <HAL_RCC_OscConfig+0xa2>
 80037f8:	4bab      	ldr	r3, [pc, #684]	; (8003aa8 <HAL_RCC_OscConfig+0x338>)
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	4baa      	ldr	r3, [pc, #680]	; (8003aa8 <HAL_RCC_OscConfig+0x338>)
 80037fe:	49ab      	ldr	r1, [pc, #684]	; (8003aac <HAL_RCC_OscConfig+0x33c>)
 8003800:	400a      	ands	r2, r1
 8003802:	601a      	str	r2, [r3, #0]
 8003804:	4ba8      	ldr	r3, [pc, #672]	; (8003aa8 <HAL_RCC_OscConfig+0x338>)
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	4ba7      	ldr	r3, [pc, #668]	; (8003aa8 <HAL_RCC_OscConfig+0x338>)
 800380a:	49a9      	ldr	r1, [pc, #676]	; (8003ab0 <HAL_RCC_OscConfig+0x340>)
 800380c:	400a      	ands	r2, r1
 800380e:	601a      	str	r2, [r3, #0]
 8003810:	e01e      	b.n	8003850 <HAL_RCC_OscConfig+0xe0>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	2b05      	cmp	r3, #5
 8003818:	d10e      	bne.n	8003838 <HAL_RCC_OscConfig+0xc8>
 800381a:	4ba3      	ldr	r3, [pc, #652]	; (8003aa8 <HAL_RCC_OscConfig+0x338>)
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	4ba2      	ldr	r3, [pc, #648]	; (8003aa8 <HAL_RCC_OscConfig+0x338>)
 8003820:	2180      	movs	r1, #128	; 0x80
 8003822:	02c9      	lsls	r1, r1, #11
 8003824:	430a      	orrs	r2, r1
 8003826:	601a      	str	r2, [r3, #0]
 8003828:	4b9f      	ldr	r3, [pc, #636]	; (8003aa8 <HAL_RCC_OscConfig+0x338>)
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	4b9e      	ldr	r3, [pc, #632]	; (8003aa8 <HAL_RCC_OscConfig+0x338>)
 800382e:	2180      	movs	r1, #128	; 0x80
 8003830:	0249      	lsls	r1, r1, #9
 8003832:	430a      	orrs	r2, r1
 8003834:	601a      	str	r2, [r3, #0]
 8003836:	e00b      	b.n	8003850 <HAL_RCC_OscConfig+0xe0>
 8003838:	4b9b      	ldr	r3, [pc, #620]	; (8003aa8 <HAL_RCC_OscConfig+0x338>)
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	4b9a      	ldr	r3, [pc, #616]	; (8003aa8 <HAL_RCC_OscConfig+0x338>)
 800383e:	499b      	ldr	r1, [pc, #620]	; (8003aac <HAL_RCC_OscConfig+0x33c>)
 8003840:	400a      	ands	r2, r1
 8003842:	601a      	str	r2, [r3, #0]
 8003844:	4b98      	ldr	r3, [pc, #608]	; (8003aa8 <HAL_RCC_OscConfig+0x338>)
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	4b97      	ldr	r3, [pc, #604]	; (8003aa8 <HAL_RCC_OscConfig+0x338>)
 800384a:	4999      	ldr	r1, [pc, #612]	; (8003ab0 <HAL_RCC_OscConfig+0x340>)
 800384c:	400a      	ands	r2, r1
 800384e:	601a      	str	r2, [r3, #0]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d014      	beq.n	8003882 <HAL_RCC_OscConfig+0x112>
 8003858:	f7fe fadc 	bl	8001e14 <HAL_GetTick>
 800385c:	0003      	movs	r3, r0
 800385e:	61bb      	str	r3, [r7, #24]
 8003860:	e008      	b.n	8003874 <HAL_RCC_OscConfig+0x104>
 8003862:	f7fe fad7 	bl	8001e14 <HAL_GetTick>
 8003866:	0002      	movs	r2, r0
 8003868:	69bb      	ldr	r3, [r7, #24]
 800386a:	1ad3      	subs	r3, r2, r3
 800386c:	2b64      	cmp	r3, #100	; 0x64
 800386e:	d901      	bls.n	8003874 <HAL_RCC_OscConfig+0x104>
 8003870:	2303      	movs	r3, #3
 8003872:	e2fd      	b.n	8003e70 <HAL_RCC_OscConfig+0x700>
 8003874:	4b8c      	ldr	r3, [pc, #560]	; (8003aa8 <HAL_RCC_OscConfig+0x338>)
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	2380      	movs	r3, #128	; 0x80
 800387a:	029b      	lsls	r3, r3, #10
 800387c:	4013      	ands	r3, r2
 800387e:	d0f0      	beq.n	8003862 <HAL_RCC_OscConfig+0xf2>
 8003880:	e015      	b.n	80038ae <HAL_RCC_OscConfig+0x13e>
 8003882:	f7fe fac7 	bl	8001e14 <HAL_GetTick>
 8003886:	0003      	movs	r3, r0
 8003888:	61bb      	str	r3, [r7, #24]
 800388a:	e008      	b.n	800389e <HAL_RCC_OscConfig+0x12e>
 800388c:	f7fe fac2 	bl	8001e14 <HAL_GetTick>
 8003890:	0002      	movs	r2, r0
 8003892:	69bb      	ldr	r3, [r7, #24]
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	2b64      	cmp	r3, #100	; 0x64
 8003898:	d901      	bls.n	800389e <HAL_RCC_OscConfig+0x12e>
 800389a:	2303      	movs	r3, #3
 800389c:	e2e8      	b.n	8003e70 <HAL_RCC_OscConfig+0x700>
 800389e:	4b82      	ldr	r3, [pc, #520]	; (8003aa8 <HAL_RCC_OscConfig+0x338>)
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	2380      	movs	r3, #128	; 0x80
 80038a4:	029b      	lsls	r3, r3, #10
 80038a6:	4013      	ands	r3, r2
 80038a8:	d1f0      	bne.n	800388c <HAL_RCC_OscConfig+0x11c>
 80038aa:	e000      	b.n	80038ae <HAL_RCC_OscConfig+0x13e>
 80038ac:	46c0      	nop			; (mov r8, r8)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	2202      	movs	r2, #2
 80038b4:	4013      	ands	r3, r2
 80038b6:	d100      	bne.n	80038ba <HAL_RCC_OscConfig+0x14a>
 80038b8:	e06c      	b.n	8003994 <HAL_RCC_OscConfig+0x224>
 80038ba:	4b7b      	ldr	r3, [pc, #492]	; (8003aa8 <HAL_RCC_OscConfig+0x338>)
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	220c      	movs	r2, #12
 80038c0:	4013      	ands	r3, r2
 80038c2:	d00e      	beq.n	80038e2 <HAL_RCC_OscConfig+0x172>
 80038c4:	4b78      	ldr	r3, [pc, #480]	; (8003aa8 <HAL_RCC_OscConfig+0x338>)
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	220c      	movs	r2, #12
 80038ca:	4013      	ands	r3, r2
 80038cc:	2b08      	cmp	r3, #8
 80038ce:	d11f      	bne.n	8003910 <HAL_RCC_OscConfig+0x1a0>
 80038d0:	4b75      	ldr	r3, [pc, #468]	; (8003aa8 <HAL_RCC_OscConfig+0x338>)
 80038d2:	685a      	ldr	r2, [r3, #4]
 80038d4:	23c0      	movs	r3, #192	; 0xc0
 80038d6:	025b      	lsls	r3, r3, #9
 80038d8:	401a      	ands	r2, r3
 80038da:	2380      	movs	r3, #128	; 0x80
 80038dc:	021b      	lsls	r3, r3, #8
 80038de:	429a      	cmp	r2, r3
 80038e0:	d116      	bne.n	8003910 <HAL_RCC_OscConfig+0x1a0>
 80038e2:	4b71      	ldr	r3, [pc, #452]	; (8003aa8 <HAL_RCC_OscConfig+0x338>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	2202      	movs	r2, #2
 80038e8:	4013      	ands	r3, r2
 80038ea:	d005      	beq.n	80038f8 <HAL_RCC_OscConfig+0x188>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d001      	beq.n	80038f8 <HAL_RCC_OscConfig+0x188>
 80038f4:	2301      	movs	r3, #1
 80038f6:	e2bb      	b.n	8003e70 <HAL_RCC_OscConfig+0x700>
 80038f8:	4b6b      	ldr	r3, [pc, #428]	; (8003aa8 <HAL_RCC_OscConfig+0x338>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	22f8      	movs	r2, #248	; 0xf8
 80038fe:	4393      	bics	r3, r2
 8003900:	0019      	movs	r1, r3
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	691b      	ldr	r3, [r3, #16]
 8003906:	00da      	lsls	r2, r3, #3
 8003908:	4b67      	ldr	r3, [pc, #412]	; (8003aa8 <HAL_RCC_OscConfig+0x338>)
 800390a:	430a      	orrs	r2, r1
 800390c:	601a      	str	r2, [r3, #0]
 800390e:	e041      	b.n	8003994 <HAL_RCC_OscConfig+0x224>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d024      	beq.n	8003962 <HAL_RCC_OscConfig+0x1f2>
 8003918:	4b63      	ldr	r3, [pc, #396]	; (8003aa8 <HAL_RCC_OscConfig+0x338>)
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	4b62      	ldr	r3, [pc, #392]	; (8003aa8 <HAL_RCC_OscConfig+0x338>)
 800391e:	2101      	movs	r1, #1
 8003920:	430a      	orrs	r2, r1
 8003922:	601a      	str	r2, [r3, #0]
 8003924:	f7fe fa76 	bl	8001e14 <HAL_GetTick>
 8003928:	0003      	movs	r3, r0
 800392a:	61bb      	str	r3, [r7, #24]
 800392c:	e008      	b.n	8003940 <HAL_RCC_OscConfig+0x1d0>
 800392e:	f7fe fa71 	bl	8001e14 <HAL_GetTick>
 8003932:	0002      	movs	r2, r0
 8003934:	69bb      	ldr	r3, [r7, #24]
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	2b02      	cmp	r3, #2
 800393a:	d901      	bls.n	8003940 <HAL_RCC_OscConfig+0x1d0>
 800393c:	2303      	movs	r3, #3
 800393e:	e297      	b.n	8003e70 <HAL_RCC_OscConfig+0x700>
 8003940:	4b59      	ldr	r3, [pc, #356]	; (8003aa8 <HAL_RCC_OscConfig+0x338>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	2202      	movs	r2, #2
 8003946:	4013      	ands	r3, r2
 8003948:	d0f1      	beq.n	800392e <HAL_RCC_OscConfig+0x1be>
 800394a:	4b57      	ldr	r3, [pc, #348]	; (8003aa8 <HAL_RCC_OscConfig+0x338>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	22f8      	movs	r2, #248	; 0xf8
 8003950:	4393      	bics	r3, r2
 8003952:	0019      	movs	r1, r3
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	691b      	ldr	r3, [r3, #16]
 8003958:	00da      	lsls	r2, r3, #3
 800395a:	4b53      	ldr	r3, [pc, #332]	; (8003aa8 <HAL_RCC_OscConfig+0x338>)
 800395c:	430a      	orrs	r2, r1
 800395e:	601a      	str	r2, [r3, #0]
 8003960:	e018      	b.n	8003994 <HAL_RCC_OscConfig+0x224>
 8003962:	4b51      	ldr	r3, [pc, #324]	; (8003aa8 <HAL_RCC_OscConfig+0x338>)
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	4b50      	ldr	r3, [pc, #320]	; (8003aa8 <HAL_RCC_OscConfig+0x338>)
 8003968:	2101      	movs	r1, #1
 800396a:	438a      	bics	r2, r1
 800396c:	601a      	str	r2, [r3, #0]
 800396e:	f7fe fa51 	bl	8001e14 <HAL_GetTick>
 8003972:	0003      	movs	r3, r0
 8003974:	61bb      	str	r3, [r7, #24]
 8003976:	e008      	b.n	800398a <HAL_RCC_OscConfig+0x21a>
 8003978:	f7fe fa4c 	bl	8001e14 <HAL_GetTick>
 800397c:	0002      	movs	r2, r0
 800397e:	69bb      	ldr	r3, [r7, #24]
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	2b02      	cmp	r3, #2
 8003984:	d901      	bls.n	800398a <HAL_RCC_OscConfig+0x21a>
 8003986:	2303      	movs	r3, #3
 8003988:	e272      	b.n	8003e70 <HAL_RCC_OscConfig+0x700>
 800398a:	4b47      	ldr	r3, [pc, #284]	; (8003aa8 <HAL_RCC_OscConfig+0x338>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	2202      	movs	r2, #2
 8003990:	4013      	ands	r3, r2
 8003992:	d1f1      	bne.n	8003978 <HAL_RCC_OscConfig+0x208>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	2208      	movs	r2, #8
 800399a:	4013      	ands	r3, r2
 800399c:	d036      	beq.n	8003a0c <HAL_RCC_OscConfig+0x29c>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	69db      	ldr	r3, [r3, #28]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d019      	beq.n	80039da <HAL_RCC_OscConfig+0x26a>
 80039a6:	4b40      	ldr	r3, [pc, #256]	; (8003aa8 <HAL_RCC_OscConfig+0x338>)
 80039a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039aa:	4b3f      	ldr	r3, [pc, #252]	; (8003aa8 <HAL_RCC_OscConfig+0x338>)
 80039ac:	2101      	movs	r1, #1
 80039ae:	430a      	orrs	r2, r1
 80039b0:	625a      	str	r2, [r3, #36]	; 0x24
 80039b2:	f7fe fa2f 	bl	8001e14 <HAL_GetTick>
 80039b6:	0003      	movs	r3, r0
 80039b8:	61bb      	str	r3, [r7, #24]
 80039ba:	e008      	b.n	80039ce <HAL_RCC_OscConfig+0x25e>
 80039bc:	f7fe fa2a 	bl	8001e14 <HAL_GetTick>
 80039c0:	0002      	movs	r2, r0
 80039c2:	69bb      	ldr	r3, [r7, #24]
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	2b02      	cmp	r3, #2
 80039c8:	d901      	bls.n	80039ce <HAL_RCC_OscConfig+0x25e>
 80039ca:	2303      	movs	r3, #3
 80039cc:	e250      	b.n	8003e70 <HAL_RCC_OscConfig+0x700>
 80039ce:	4b36      	ldr	r3, [pc, #216]	; (8003aa8 <HAL_RCC_OscConfig+0x338>)
 80039d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d2:	2202      	movs	r2, #2
 80039d4:	4013      	ands	r3, r2
 80039d6:	d0f1      	beq.n	80039bc <HAL_RCC_OscConfig+0x24c>
 80039d8:	e018      	b.n	8003a0c <HAL_RCC_OscConfig+0x29c>
 80039da:	4b33      	ldr	r3, [pc, #204]	; (8003aa8 <HAL_RCC_OscConfig+0x338>)
 80039dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039de:	4b32      	ldr	r3, [pc, #200]	; (8003aa8 <HAL_RCC_OscConfig+0x338>)
 80039e0:	2101      	movs	r1, #1
 80039e2:	438a      	bics	r2, r1
 80039e4:	625a      	str	r2, [r3, #36]	; 0x24
 80039e6:	f7fe fa15 	bl	8001e14 <HAL_GetTick>
 80039ea:	0003      	movs	r3, r0
 80039ec:	61bb      	str	r3, [r7, #24]
 80039ee:	e008      	b.n	8003a02 <HAL_RCC_OscConfig+0x292>
 80039f0:	f7fe fa10 	bl	8001e14 <HAL_GetTick>
 80039f4:	0002      	movs	r2, r0
 80039f6:	69bb      	ldr	r3, [r7, #24]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	2b02      	cmp	r3, #2
 80039fc:	d901      	bls.n	8003a02 <HAL_RCC_OscConfig+0x292>
 80039fe:	2303      	movs	r3, #3
 8003a00:	e236      	b.n	8003e70 <HAL_RCC_OscConfig+0x700>
 8003a02:	4b29      	ldr	r3, [pc, #164]	; (8003aa8 <HAL_RCC_OscConfig+0x338>)
 8003a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a06:	2202      	movs	r2, #2
 8003a08:	4013      	ands	r3, r2
 8003a0a:	d1f1      	bne.n	80039f0 <HAL_RCC_OscConfig+0x280>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	2204      	movs	r2, #4
 8003a12:	4013      	ands	r3, r2
 8003a14:	d100      	bne.n	8003a18 <HAL_RCC_OscConfig+0x2a8>
 8003a16:	e0b5      	b.n	8003b84 <HAL_RCC_OscConfig+0x414>
 8003a18:	201f      	movs	r0, #31
 8003a1a:	183b      	adds	r3, r7, r0
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	701a      	strb	r2, [r3, #0]
 8003a20:	4b21      	ldr	r3, [pc, #132]	; (8003aa8 <HAL_RCC_OscConfig+0x338>)
 8003a22:	69da      	ldr	r2, [r3, #28]
 8003a24:	2380      	movs	r3, #128	; 0x80
 8003a26:	055b      	lsls	r3, r3, #21
 8003a28:	4013      	ands	r3, r2
 8003a2a:	d110      	bne.n	8003a4e <HAL_RCC_OscConfig+0x2de>
 8003a2c:	4b1e      	ldr	r3, [pc, #120]	; (8003aa8 <HAL_RCC_OscConfig+0x338>)
 8003a2e:	69da      	ldr	r2, [r3, #28]
 8003a30:	4b1d      	ldr	r3, [pc, #116]	; (8003aa8 <HAL_RCC_OscConfig+0x338>)
 8003a32:	2180      	movs	r1, #128	; 0x80
 8003a34:	0549      	lsls	r1, r1, #21
 8003a36:	430a      	orrs	r2, r1
 8003a38:	61da      	str	r2, [r3, #28]
 8003a3a:	4b1b      	ldr	r3, [pc, #108]	; (8003aa8 <HAL_RCC_OscConfig+0x338>)
 8003a3c:	69da      	ldr	r2, [r3, #28]
 8003a3e:	2380      	movs	r3, #128	; 0x80
 8003a40:	055b      	lsls	r3, r3, #21
 8003a42:	4013      	ands	r3, r2
 8003a44:	60fb      	str	r3, [r7, #12]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	183b      	adds	r3, r7, r0
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	701a      	strb	r2, [r3, #0]
 8003a4e:	4b19      	ldr	r3, [pc, #100]	; (8003ab4 <HAL_RCC_OscConfig+0x344>)
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	2380      	movs	r3, #128	; 0x80
 8003a54:	005b      	lsls	r3, r3, #1
 8003a56:	4013      	ands	r3, r2
 8003a58:	d11a      	bne.n	8003a90 <HAL_RCC_OscConfig+0x320>
 8003a5a:	4b16      	ldr	r3, [pc, #88]	; (8003ab4 <HAL_RCC_OscConfig+0x344>)
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	4b15      	ldr	r3, [pc, #84]	; (8003ab4 <HAL_RCC_OscConfig+0x344>)
 8003a60:	2180      	movs	r1, #128	; 0x80
 8003a62:	0049      	lsls	r1, r1, #1
 8003a64:	430a      	orrs	r2, r1
 8003a66:	601a      	str	r2, [r3, #0]
 8003a68:	f7fe f9d4 	bl	8001e14 <HAL_GetTick>
 8003a6c:	0003      	movs	r3, r0
 8003a6e:	61bb      	str	r3, [r7, #24]
 8003a70:	e008      	b.n	8003a84 <HAL_RCC_OscConfig+0x314>
 8003a72:	f7fe f9cf 	bl	8001e14 <HAL_GetTick>
 8003a76:	0002      	movs	r2, r0
 8003a78:	69bb      	ldr	r3, [r7, #24]
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	2b64      	cmp	r3, #100	; 0x64
 8003a7e:	d901      	bls.n	8003a84 <HAL_RCC_OscConfig+0x314>
 8003a80:	2303      	movs	r3, #3
 8003a82:	e1f5      	b.n	8003e70 <HAL_RCC_OscConfig+0x700>
 8003a84:	4b0b      	ldr	r3, [pc, #44]	; (8003ab4 <HAL_RCC_OscConfig+0x344>)
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	2380      	movs	r3, #128	; 0x80
 8003a8a:	005b      	lsls	r3, r3, #1
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	d0f0      	beq.n	8003a72 <HAL_RCC_OscConfig+0x302>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d10f      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x348>
 8003a98:	4b03      	ldr	r3, [pc, #12]	; (8003aa8 <HAL_RCC_OscConfig+0x338>)
 8003a9a:	6a1a      	ldr	r2, [r3, #32]
 8003a9c:	4b02      	ldr	r3, [pc, #8]	; (8003aa8 <HAL_RCC_OscConfig+0x338>)
 8003a9e:	2101      	movs	r1, #1
 8003aa0:	430a      	orrs	r2, r1
 8003aa2:	621a      	str	r2, [r3, #32]
 8003aa4:	e036      	b.n	8003b14 <HAL_RCC_OscConfig+0x3a4>
 8003aa6:	46c0      	nop			; (mov r8, r8)
 8003aa8:	40021000 	.word	0x40021000
 8003aac:	fffeffff 	.word	0xfffeffff
 8003ab0:	fffbffff 	.word	0xfffbffff
 8003ab4:	40007000 	.word	0x40007000
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d10c      	bne.n	8003ada <HAL_RCC_OscConfig+0x36a>
 8003ac0:	4bca      	ldr	r3, [pc, #808]	; (8003dec <HAL_RCC_OscConfig+0x67c>)
 8003ac2:	6a1a      	ldr	r2, [r3, #32]
 8003ac4:	4bc9      	ldr	r3, [pc, #804]	; (8003dec <HAL_RCC_OscConfig+0x67c>)
 8003ac6:	2101      	movs	r1, #1
 8003ac8:	438a      	bics	r2, r1
 8003aca:	621a      	str	r2, [r3, #32]
 8003acc:	4bc7      	ldr	r3, [pc, #796]	; (8003dec <HAL_RCC_OscConfig+0x67c>)
 8003ace:	6a1a      	ldr	r2, [r3, #32]
 8003ad0:	4bc6      	ldr	r3, [pc, #792]	; (8003dec <HAL_RCC_OscConfig+0x67c>)
 8003ad2:	2104      	movs	r1, #4
 8003ad4:	438a      	bics	r2, r1
 8003ad6:	621a      	str	r2, [r3, #32]
 8003ad8:	e01c      	b.n	8003b14 <HAL_RCC_OscConfig+0x3a4>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	2b05      	cmp	r3, #5
 8003ae0:	d10c      	bne.n	8003afc <HAL_RCC_OscConfig+0x38c>
 8003ae2:	4bc2      	ldr	r3, [pc, #776]	; (8003dec <HAL_RCC_OscConfig+0x67c>)
 8003ae4:	6a1a      	ldr	r2, [r3, #32]
 8003ae6:	4bc1      	ldr	r3, [pc, #772]	; (8003dec <HAL_RCC_OscConfig+0x67c>)
 8003ae8:	2104      	movs	r1, #4
 8003aea:	430a      	orrs	r2, r1
 8003aec:	621a      	str	r2, [r3, #32]
 8003aee:	4bbf      	ldr	r3, [pc, #764]	; (8003dec <HAL_RCC_OscConfig+0x67c>)
 8003af0:	6a1a      	ldr	r2, [r3, #32]
 8003af2:	4bbe      	ldr	r3, [pc, #760]	; (8003dec <HAL_RCC_OscConfig+0x67c>)
 8003af4:	2101      	movs	r1, #1
 8003af6:	430a      	orrs	r2, r1
 8003af8:	621a      	str	r2, [r3, #32]
 8003afa:	e00b      	b.n	8003b14 <HAL_RCC_OscConfig+0x3a4>
 8003afc:	4bbb      	ldr	r3, [pc, #748]	; (8003dec <HAL_RCC_OscConfig+0x67c>)
 8003afe:	6a1a      	ldr	r2, [r3, #32]
 8003b00:	4bba      	ldr	r3, [pc, #744]	; (8003dec <HAL_RCC_OscConfig+0x67c>)
 8003b02:	2101      	movs	r1, #1
 8003b04:	438a      	bics	r2, r1
 8003b06:	621a      	str	r2, [r3, #32]
 8003b08:	4bb8      	ldr	r3, [pc, #736]	; (8003dec <HAL_RCC_OscConfig+0x67c>)
 8003b0a:	6a1a      	ldr	r2, [r3, #32]
 8003b0c:	4bb7      	ldr	r3, [pc, #732]	; (8003dec <HAL_RCC_OscConfig+0x67c>)
 8003b0e:	2104      	movs	r1, #4
 8003b10:	438a      	bics	r2, r1
 8003b12:	621a      	str	r2, [r3, #32]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d014      	beq.n	8003b46 <HAL_RCC_OscConfig+0x3d6>
 8003b1c:	f7fe f97a 	bl	8001e14 <HAL_GetTick>
 8003b20:	0003      	movs	r3, r0
 8003b22:	61bb      	str	r3, [r7, #24]
 8003b24:	e009      	b.n	8003b3a <HAL_RCC_OscConfig+0x3ca>
 8003b26:	f7fe f975 	bl	8001e14 <HAL_GetTick>
 8003b2a:	0002      	movs	r2, r0
 8003b2c:	69bb      	ldr	r3, [r7, #24]
 8003b2e:	1ad3      	subs	r3, r2, r3
 8003b30:	4aaf      	ldr	r2, [pc, #700]	; (8003df0 <HAL_RCC_OscConfig+0x680>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d901      	bls.n	8003b3a <HAL_RCC_OscConfig+0x3ca>
 8003b36:	2303      	movs	r3, #3
 8003b38:	e19a      	b.n	8003e70 <HAL_RCC_OscConfig+0x700>
 8003b3a:	4bac      	ldr	r3, [pc, #688]	; (8003dec <HAL_RCC_OscConfig+0x67c>)
 8003b3c:	6a1b      	ldr	r3, [r3, #32]
 8003b3e:	2202      	movs	r2, #2
 8003b40:	4013      	ands	r3, r2
 8003b42:	d0f0      	beq.n	8003b26 <HAL_RCC_OscConfig+0x3b6>
 8003b44:	e013      	b.n	8003b6e <HAL_RCC_OscConfig+0x3fe>
 8003b46:	f7fe f965 	bl	8001e14 <HAL_GetTick>
 8003b4a:	0003      	movs	r3, r0
 8003b4c:	61bb      	str	r3, [r7, #24]
 8003b4e:	e009      	b.n	8003b64 <HAL_RCC_OscConfig+0x3f4>
 8003b50:	f7fe f960 	bl	8001e14 <HAL_GetTick>
 8003b54:	0002      	movs	r2, r0
 8003b56:	69bb      	ldr	r3, [r7, #24]
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	4aa5      	ldr	r2, [pc, #660]	; (8003df0 <HAL_RCC_OscConfig+0x680>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d901      	bls.n	8003b64 <HAL_RCC_OscConfig+0x3f4>
 8003b60:	2303      	movs	r3, #3
 8003b62:	e185      	b.n	8003e70 <HAL_RCC_OscConfig+0x700>
 8003b64:	4ba1      	ldr	r3, [pc, #644]	; (8003dec <HAL_RCC_OscConfig+0x67c>)
 8003b66:	6a1b      	ldr	r3, [r3, #32]
 8003b68:	2202      	movs	r2, #2
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	d1f0      	bne.n	8003b50 <HAL_RCC_OscConfig+0x3e0>
 8003b6e:	231f      	movs	r3, #31
 8003b70:	18fb      	adds	r3, r7, r3
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d105      	bne.n	8003b84 <HAL_RCC_OscConfig+0x414>
 8003b78:	4b9c      	ldr	r3, [pc, #624]	; (8003dec <HAL_RCC_OscConfig+0x67c>)
 8003b7a:	69da      	ldr	r2, [r3, #28]
 8003b7c:	4b9b      	ldr	r3, [pc, #620]	; (8003dec <HAL_RCC_OscConfig+0x67c>)
 8003b7e:	499d      	ldr	r1, [pc, #628]	; (8003df4 <HAL_RCC_OscConfig+0x684>)
 8003b80:	400a      	ands	r2, r1
 8003b82:	61da      	str	r2, [r3, #28]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	2210      	movs	r2, #16
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	d063      	beq.n	8003c56 <HAL_RCC_OscConfig+0x4e6>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	695b      	ldr	r3, [r3, #20]
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d12a      	bne.n	8003bec <HAL_RCC_OscConfig+0x47c>
 8003b96:	4b95      	ldr	r3, [pc, #596]	; (8003dec <HAL_RCC_OscConfig+0x67c>)
 8003b98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b9a:	4b94      	ldr	r3, [pc, #592]	; (8003dec <HAL_RCC_OscConfig+0x67c>)
 8003b9c:	2104      	movs	r1, #4
 8003b9e:	430a      	orrs	r2, r1
 8003ba0:	635a      	str	r2, [r3, #52]	; 0x34
 8003ba2:	4b92      	ldr	r3, [pc, #584]	; (8003dec <HAL_RCC_OscConfig+0x67c>)
 8003ba4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ba6:	4b91      	ldr	r3, [pc, #580]	; (8003dec <HAL_RCC_OscConfig+0x67c>)
 8003ba8:	2101      	movs	r1, #1
 8003baa:	430a      	orrs	r2, r1
 8003bac:	635a      	str	r2, [r3, #52]	; 0x34
 8003bae:	f7fe f931 	bl	8001e14 <HAL_GetTick>
 8003bb2:	0003      	movs	r3, r0
 8003bb4:	61bb      	str	r3, [r7, #24]
 8003bb6:	e008      	b.n	8003bca <HAL_RCC_OscConfig+0x45a>
 8003bb8:	f7fe f92c 	bl	8001e14 <HAL_GetTick>
 8003bbc:	0002      	movs	r2, r0
 8003bbe:	69bb      	ldr	r3, [r7, #24]
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	2b02      	cmp	r3, #2
 8003bc4:	d901      	bls.n	8003bca <HAL_RCC_OscConfig+0x45a>
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	e152      	b.n	8003e70 <HAL_RCC_OscConfig+0x700>
 8003bca:	4b88      	ldr	r3, [pc, #544]	; (8003dec <HAL_RCC_OscConfig+0x67c>)
 8003bcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bce:	2202      	movs	r2, #2
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	d0f1      	beq.n	8003bb8 <HAL_RCC_OscConfig+0x448>
 8003bd4:	4b85      	ldr	r3, [pc, #532]	; (8003dec <HAL_RCC_OscConfig+0x67c>)
 8003bd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bd8:	22f8      	movs	r2, #248	; 0xf8
 8003bda:	4393      	bics	r3, r2
 8003bdc:	0019      	movs	r1, r3
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	699b      	ldr	r3, [r3, #24]
 8003be2:	00da      	lsls	r2, r3, #3
 8003be4:	4b81      	ldr	r3, [pc, #516]	; (8003dec <HAL_RCC_OscConfig+0x67c>)
 8003be6:	430a      	orrs	r2, r1
 8003be8:	635a      	str	r2, [r3, #52]	; 0x34
 8003bea:	e034      	b.n	8003c56 <HAL_RCC_OscConfig+0x4e6>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	695b      	ldr	r3, [r3, #20]
 8003bf0:	3305      	adds	r3, #5
 8003bf2:	d111      	bne.n	8003c18 <HAL_RCC_OscConfig+0x4a8>
 8003bf4:	4b7d      	ldr	r3, [pc, #500]	; (8003dec <HAL_RCC_OscConfig+0x67c>)
 8003bf6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bf8:	4b7c      	ldr	r3, [pc, #496]	; (8003dec <HAL_RCC_OscConfig+0x67c>)
 8003bfa:	2104      	movs	r1, #4
 8003bfc:	438a      	bics	r2, r1
 8003bfe:	635a      	str	r2, [r3, #52]	; 0x34
 8003c00:	4b7a      	ldr	r3, [pc, #488]	; (8003dec <HAL_RCC_OscConfig+0x67c>)
 8003c02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c04:	22f8      	movs	r2, #248	; 0xf8
 8003c06:	4393      	bics	r3, r2
 8003c08:	0019      	movs	r1, r3
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	699b      	ldr	r3, [r3, #24]
 8003c0e:	00da      	lsls	r2, r3, #3
 8003c10:	4b76      	ldr	r3, [pc, #472]	; (8003dec <HAL_RCC_OscConfig+0x67c>)
 8003c12:	430a      	orrs	r2, r1
 8003c14:	635a      	str	r2, [r3, #52]	; 0x34
 8003c16:	e01e      	b.n	8003c56 <HAL_RCC_OscConfig+0x4e6>
 8003c18:	4b74      	ldr	r3, [pc, #464]	; (8003dec <HAL_RCC_OscConfig+0x67c>)
 8003c1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c1c:	4b73      	ldr	r3, [pc, #460]	; (8003dec <HAL_RCC_OscConfig+0x67c>)
 8003c1e:	2104      	movs	r1, #4
 8003c20:	430a      	orrs	r2, r1
 8003c22:	635a      	str	r2, [r3, #52]	; 0x34
 8003c24:	4b71      	ldr	r3, [pc, #452]	; (8003dec <HAL_RCC_OscConfig+0x67c>)
 8003c26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c28:	4b70      	ldr	r3, [pc, #448]	; (8003dec <HAL_RCC_OscConfig+0x67c>)
 8003c2a:	2101      	movs	r1, #1
 8003c2c:	438a      	bics	r2, r1
 8003c2e:	635a      	str	r2, [r3, #52]	; 0x34
 8003c30:	f7fe f8f0 	bl	8001e14 <HAL_GetTick>
 8003c34:	0003      	movs	r3, r0
 8003c36:	61bb      	str	r3, [r7, #24]
 8003c38:	e008      	b.n	8003c4c <HAL_RCC_OscConfig+0x4dc>
 8003c3a:	f7fe f8eb 	bl	8001e14 <HAL_GetTick>
 8003c3e:	0002      	movs	r2, r0
 8003c40:	69bb      	ldr	r3, [r7, #24]
 8003c42:	1ad3      	subs	r3, r2, r3
 8003c44:	2b02      	cmp	r3, #2
 8003c46:	d901      	bls.n	8003c4c <HAL_RCC_OscConfig+0x4dc>
 8003c48:	2303      	movs	r3, #3
 8003c4a:	e111      	b.n	8003e70 <HAL_RCC_OscConfig+0x700>
 8003c4c:	4b67      	ldr	r3, [pc, #412]	; (8003dec <HAL_RCC_OscConfig+0x67c>)
 8003c4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c50:	2202      	movs	r2, #2
 8003c52:	4013      	ands	r3, r2
 8003c54:	d1f1      	bne.n	8003c3a <HAL_RCC_OscConfig+0x4ca>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	2220      	movs	r2, #32
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	d05c      	beq.n	8003d1a <HAL_RCC_OscConfig+0x5aa>
 8003c60:	4b62      	ldr	r3, [pc, #392]	; (8003dec <HAL_RCC_OscConfig+0x67c>)
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	220c      	movs	r2, #12
 8003c66:	4013      	ands	r3, r2
 8003c68:	2b0c      	cmp	r3, #12
 8003c6a:	d00e      	beq.n	8003c8a <HAL_RCC_OscConfig+0x51a>
 8003c6c:	4b5f      	ldr	r3, [pc, #380]	; (8003dec <HAL_RCC_OscConfig+0x67c>)
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	220c      	movs	r2, #12
 8003c72:	4013      	ands	r3, r2
 8003c74:	2b08      	cmp	r3, #8
 8003c76:	d114      	bne.n	8003ca2 <HAL_RCC_OscConfig+0x532>
 8003c78:	4b5c      	ldr	r3, [pc, #368]	; (8003dec <HAL_RCC_OscConfig+0x67c>)
 8003c7a:	685a      	ldr	r2, [r3, #4]
 8003c7c:	23c0      	movs	r3, #192	; 0xc0
 8003c7e:	025b      	lsls	r3, r3, #9
 8003c80:	401a      	ands	r2, r3
 8003c82:	23c0      	movs	r3, #192	; 0xc0
 8003c84:	025b      	lsls	r3, r3, #9
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d10b      	bne.n	8003ca2 <HAL_RCC_OscConfig+0x532>
 8003c8a:	4b58      	ldr	r3, [pc, #352]	; (8003dec <HAL_RCC_OscConfig+0x67c>)
 8003c8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c8e:	2380      	movs	r3, #128	; 0x80
 8003c90:	025b      	lsls	r3, r3, #9
 8003c92:	4013      	ands	r3, r2
 8003c94:	d040      	beq.n	8003d18 <HAL_RCC_OscConfig+0x5a8>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a1b      	ldr	r3, [r3, #32]
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d03c      	beq.n	8003d18 <HAL_RCC_OscConfig+0x5a8>
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e0e6      	b.n	8003e70 <HAL_RCC_OscConfig+0x700>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6a1b      	ldr	r3, [r3, #32]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d01b      	beq.n	8003ce2 <HAL_RCC_OscConfig+0x572>
 8003caa:	4b50      	ldr	r3, [pc, #320]	; (8003dec <HAL_RCC_OscConfig+0x67c>)
 8003cac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cae:	4b4f      	ldr	r3, [pc, #316]	; (8003dec <HAL_RCC_OscConfig+0x67c>)
 8003cb0:	2180      	movs	r1, #128	; 0x80
 8003cb2:	0249      	lsls	r1, r1, #9
 8003cb4:	430a      	orrs	r2, r1
 8003cb6:	635a      	str	r2, [r3, #52]	; 0x34
 8003cb8:	f7fe f8ac 	bl	8001e14 <HAL_GetTick>
 8003cbc:	0003      	movs	r3, r0
 8003cbe:	61bb      	str	r3, [r7, #24]
 8003cc0:	e008      	b.n	8003cd4 <HAL_RCC_OscConfig+0x564>
 8003cc2:	f7fe f8a7 	bl	8001e14 <HAL_GetTick>
 8003cc6:	0002      	movs	r2, r0
 8003cc8:	69bb      	ldr	r3, [r7, #24]
 8003cca:	1ad3      	subs	r3, r2, r3
 8003ccc:	2b02      	cmp	r3, #2
 8003cce:	d901      	bls.n	8003cd4 <HAL_RCC_OscConfig+0x564>
 8003cd0:	2303      	movs	r3, #3
 8003cd2:	e0cd      	b.n	8003e70 <HAL_RCC_OscConfig+0x700>
 8003cd4:	4b45      	ldr	r3, [pc, #276]	; (8003dec <HAL_RCC_OscConfig+0x67c>)
 8003cd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cd8:	2380      	movs	r3, #128	; 0x80
 8003cda:	025b      	lsls	r3, r3, #9
 8003cdc:	4013      	ands	r3, r2
 8003cde:	d0f0      	beq.n	8003cc2 <HAL_RCC_OscConfig+0x552>
 8003ce0:	e01b      	b.n	8003d1a <HAL_RCC_OscConfig+0x5aa>
 8003ce2:	4b42      	ldr	r3, [pc, #264]	; (8003dec <HAL_RCC_OscConfig+0x67c>)
 8003ce4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ce6:	4b41      	ldr	r3, [pc, #260]	; (8003dec <HAL_RCC_OscConfig+0x67c>)
 8003ce8:	4943      	ldr	r1, [pc, #268]	; (8003df8 <HAL_RCC_OscConfig+0x688>)
 8003cea:	400a      	ands	r2, r1
 8003cec:	635a      	str	r2, [r3, #52]	; 0x34
 8003cee:	f7fe f891 	bl	8001e14 <HAL_GetTick>
 8003cf2:	0003      	movs	r3, r0
 8003cf4:	61bb      	str	r3, [r7, #24]
 8003cf6:	e008      	b.n	8003d0a <HAL_RCC_OscConfig+0x59a>
 8003cf8:	f7fe f88c 	bl	8001e14 <HAL_GetTick>
 8003cfc:	0002      	movs	r2, r0
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	2b02      	cmp	r3, #2
 8003d04:	d901      	bls.n	8003d0a <HAL_RCC_OscConfig+0x59a>
 8003d06:	2303      	movs	r3, #3
 8003d08:	e0b2      	b.n	8003e70 <HAL_RCC_OscConfig+0x700>
 8003d0a:	4b38      	ldr	r3, [pc, #224]	; (8003dec <HAL_RCC_OscConfig+0x67c>)
 8003d0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d0e:	2380      	movs	r3, #128	; 0x80
 8003d10:	025b      	lsls	r3, r3, #9
 8003d12:	4013      	ands	r3, r2
 8003d14:	d1f0      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x588>
 8003d16:	e000      	b.n	8003d1a <HAL_RCC_OscConfig+0x5aa>
 8003d18:	46c0      	nop			; (mov r8, r8)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d100      	bne.n	8003d24 <HAL_RCC_OscConfig+0x5b4>
 8003d22:	e0a4      	b.n	8003e6e <HAL_RCC_OscConfig+0x6fe>
 8003d24:	4b31      	ldr	r3, [pc, #196]	; (8003dec <HAL_RCC_OscConfig+0x67c>)
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	220c      	movs	r2, #12
 8003d2a:	4013      	ands	r3, r2
 8003d2c:	2b08      	cmp	r3, #8
 8003d2e:	d100      	bne.n	8003d32 <HAL_RCC_OscConfig+0x5c2>
 8003d30:	e078      	b.n	8003e24 <HAL_RCC_OscConfig+0x6b4>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d36:	2b02      	cmp	r3, #2
 8003d38:	d14c      	bne.n	8003dd4 <HAL_RCC_OscConfig+0x664>
 8003d3a:	4b2c      	ldr	r3, [pc, #176]	; (8003dec <HAL_RCC_OscConfig+0x67c>)
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	4b2b      	ldr	r3, [pc, #172]	; (8003dec <HAL_RCC_OscConfig+0x67c>)
 8003d40:	492e      	ldr	r1, [pc, #184]	; (8003dfc <HAL_RCC_OscConfig+0x68c>)
 8003d42:	400a      	ands	r2, r1
 8003d44:	601a      	str	r2, [r3, #0]
 8003d46:	f7fe f865 	bl	8001e14 <HAL_GetTick>
 8003d4a:	0003      	movs	r3, r0
 8003d4c:	61bb      	str	r3, [r7, #24]
 8003d4e:	e008      	b.n	8003d62 <HAL_RCC_OscConfig+0x5f2>
 8003d50:	f7fe f860 	bl	8001e14 <HAL_GetTick>
 8003d54:	0002      	movs	r2, r0
 8003d56:	69bb      	ldr	r3, [r7, #24]
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	d901      	bls.n	8003d62 <HAL_RCC_OscConfig+0x5f2>
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e086      	b.n	8003e70 <HAL_RCC_OscConfig+0x700>
 8003d62:	4b22      	ldr	r3, [pc, #136]	; (8003dec <HAL_RCC_OscConfig+0x67c>)
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	2380      	movs	r3, #128	; 0x80
 8003d68:	049b      	lsls	r3, r3, #18
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	d1f0      	bne.n	8003d50 <HAL_RCC_OscConfig+0x5e0>
 8003d6e:	4b1f      	ldr	r3, [pc, #124]	; (8003dec <HAL_RCC_OscConfig+0x67c>)
 8003d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d72:	220f      	movs	r2, #15
 8003d74:	4393      	bics	r3, r2
 8003d76:	0019      	movs	r1, r3
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d7c:	4b1b      	ldr	r3, [pc, #108]	; (8003dec <HAL_RCC_OscConfig+0x67c>)
 8003d7e:	430a      	orrs	r2, r1
 8003d80:	62da      	str	r2, [r3, #44]	; 0x2c
 8003d82:	4b1a      	ldr	r3, [pc, #104]	; (8003dec <HAL_RCC_OscConfig+0x67c>)
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	4a1e      	ldr	r2, [pc, #120]	; (8003e00 <HAL_RCC_OscConfig+0x690>)
 8003d88:	4013      	ands	r3, r2
 8003d8a:	0019      	movs	r1, r3
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d94:	431a      	orrs	r2, r3
 8003d96:	4b15      	ldr	r3, [pc, #84]	; (8003dec <HAL_RCC_OscConfig+0x67c>)
 8003d98:	430a      	orrs	r2, r1
 8003d9a:	605a      	str	r2, [r3, #4]
 8003d9c:	4b13      	ldr	r3, [pc, #76]	; (8003dec <HAL_RCC_OscConfig+0x67c>)
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	4b12      	ldr	r3, [pc, #72]	; (8003dec <HAL_RCC_OscConfig+0x67c>)
 8003da2:	2180      	movs	r1, #128	; 0x80
 8003da4:	0449      	lsls	r1, r1, #17
 8003da6:	430a      	orrs	r2, r1
 8003da8:	601a      	str	r2, [r3, #0]
 8003daa:	f7fe f833 	bl	8001e14 <HAL_GetTick>
 8003dae:	0003      	movs	r3, r0
 8003db0:	61bb      	str	r3, [r7, #24]
 8003db2:	e008      	b.n	8003dc6 <HAL_RCC_OscConfig+0x656>
 8003db4:	f7fe f82e 	bl	8001e14 <HAL_GetTick>
 8003db8:	0002      	movs	r2, r0
 8003dba:	69bb      	ldr	r3, [r7, #24]
 8003dbc:	1ad3      	subs	r3, r2, r3
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d901      	bls.n	8003dc6 <HAL_RCC_OscConfig+0x656>
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e054      	b.n	8003e70 <HAL_RCC_OscConfig+0x700>
 8003dc6:	4b09      	ldr	r3, [pc, #36]	; (8003dec <HAL_RCC_OscConfig+0x67c>)
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	2380      	movs	r3, #128	; 0x80
 8003dcc:	049b      	lsls	r3, r3, #18
 8003dce:	4013      	ands	r3, r2
 8003dd0:	d0f0      	beq.n	8003db4 <HAL_RCC_OscConfig+0x644>
 8003dd2:	e04c      	b.n	8003e6e <HAL_RCC_OscConfig+0x6fe>
 8003dd4:	4b05      	ldr	r3, [pc, #20]	; (8003dec <HAL_RCC_OscConfig+0x67c>)
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	4b04      	ldr	r3, [pc, #16]	; (8003dec <HAL_RCC_OscConfig+0x67c>)
 8003dda:	4908      	ldr	r1, [pc, #32]	; (8003dfc <HAL_RCC_OscConfig+0x68c>)
 8003ddc:	400a      	ands	r2, r1
 8003dde:	601a      	str	r2, [r3, #0]
 8003de0:	f7fe f818 	bl	8001e14 <HAL_GetTick>
 8003de4:	0003      	movs	r3, r0
 8003de6:	61bb      	str	r3, [r7, #24]
 8003de8:	e015      	b.n	8003e16 <HAL_RCC_OscConfig+0x6a6>
 8003dea:	46c0      	nop			; (mov r8, r8)
 8003dec:	40021000 	.word	0x40021000
 8003df0:	00001388 	.word	0x00001388
 8003df4:	efffffff 	.word	0xefffffff
 8003df8:	fffeffff 	.word	0xfffeffff
 8003dfc:	feffffff 	.word	0xfeffffff
 8003e00:	ffc27fff 	.word	0xffc27fff
 8003e04:	f7fe f806 	bl	8001e14 <HAL_GetTick>
 8003e08:	0002      	movs	r2, r0
 8003e0a:	69bb      	ldr	r3, [r7, #24]
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	2b02      	cmp	r3, #2
 8003e10:	d901      	bls.n	8003e16 <HAL_RCC_OscConfig+0x6a6>
 8003e12:	2303      	movs	r3, #3
 8003e14:	e02c      	b.n	8003e70 <HAL_RCC_OscConfig+0x700>
 8003e16:	4b18      	ldr	r3, [pc, #96]	; (8003e78 <HAL_RCC_OscConfig+0x708>)
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	2380      	movs	r3, #128	; 0x80
 8003e1c:	049b      	lsls	r3, r3, #18
 8003e1e:	4013      	ands	r3, r2
 8003e20:	d1f0      	bne.n	8003e04 <HAL_RCC_OscConfig+0x694>
 8003e22:	e024      	b.n	8003e6e <HAL_RCC_OscConfig+0x6fe>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d101      	bne.n	8003e30 <HAL_RCC_OscConfig+0x6c0>
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e01f      	b.n	8003e70 <HAL_RCC_OscConfig+0x700>
 8003e30:	4b11      	ldr	r3, [pc, #68]	; (8003e78 <HAL_RCC_OscConfig+0x708>)
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	617b      	str	r3, [r7, #20]
 8003e36:	4b10      	ldr	r3, [pc, #64]	; (8003e78 <HAL_RCC_OscConfig+0x708>)
 8003e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e3a:	613b      	str	r3, [r7, #16]
 8003e3c:	697a      	ldr	r2, [r7, #20]
 8003e3e:	23c0      	movs	r3, #192	; 0xc0
 8003e40:	025b      	lsls	r3, r3, #9
 8003e42:	401a      	ands	r2, r3
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d10e      	bne.n	8003e6a <HAL_RCC_OscConfig+0x6fa>
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	220f      	movs	r2, #15
 8003e50:	401a      	ands	r2, r3
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d107      	bne.n	8003e6a <HAL_RCC_OscConfig+0x6fa>
 8003e5a:	697a      	ldr	r2, [r7, #20]
 8003e5c:	23f0      	movs	r3, #240	; 0xf0
 8003e5e:	039b      	lsls	r3, r3, #14
 8003e60:	401a      	ands	r2, r3
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d001      	beq.n	8003e6e <HAL_RCC_OscConfig+0x6fe>
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e000      	b.n	8003e70 <HAL_RCC_OscConfig+0x700>
 8003e6e:	2300      	movs	r3, #0
 8003e70:	0018      	movs	r0, r3
 8003e72:	46bd      	mov	sp, r7
 8003e74:	b008      	add	sp, #32
 8003e76:	bd80      	pop	{r7, pc}
 8003e78:	40021000 	.word	0x40021000

08003e7c <HAL_RCC_ClockConfig>:
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b084      	sub	sp, #16
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	6039      	str	r1, [r7, #0]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d101      	bne.n	8003e90 <HAL_RCC_ClockConfig+0x14>
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e0bf      	b.n	8004010 <HAL_RCC_ClockConfig+0x194>
 8003e90:	4b61      	ldr	r3, [pc, #388]	; (8004018 <HAL_RCC_ClockConfig+0x19c>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	2201      	movs	r2, #1
 8003e96:	4013      	ands	r3, r2
 8003e98:	683a      	ldr	r2, [r7, #0]
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d911      	bls.n	8003ec2 <HAL_RCC_ClockConfig+0x46>
 8003e9e:	4b5e      	ldr	r3, [pc, #376]	; (8004018 <HAL_RCC_ClockConfig+0x19c>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	4393      	bics	r3, r2
 8003ea6:	0019      	movs	r1, r3
 8003ea8:	4b5b      	ldr	r3, [pc, #364]	; (8004018 <HAL_RCC_ClockConfig+0x19c>)
 8003eaa:	683a      	ldr	r2, [r7, #0]
 8003eac:	430a      	orrs	r2, r1
 8003eae:	601a      	str	r2, [r3, #0]
 8003eb0:	4b59      	ldr	r3, [pc, #356]	; (8004018 <HAL_RCC_ClockConfig+0x19c>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	683a      	ldr	r2, [r7, #0]
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d001      	beq.n	8003ec2 <HAL_RCC_ClockConfig+0x46>
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e0a6      	b.n	8004010 <HAL_RCC_ClockConfig+0x194>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	2202      	movs	r2, #2
 8003ec8:	4013      	ands	r3, r2
 8003eca:	d015      	beq.n	8003ef8 <HAL_RCC_ClockConfig+0x7c>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	2204      	movs	r2, #4
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	d006      	beq.n	8003ee4 <HAL_RCC_ClockConfig+0x68>
 8003ed6:	4b51      	ldr	r3, [pc, #324]	; (800401c <HAL_RCC_ClockConfig+0x1a0>)
 8003ed8:	685a      	ldr	r2, [r3, #4]
 8003eda:	4b50      	ldr	r3, [pc, #320]	; (800401c <HAL_RCC_ClockConfig+0x1a0>)
 8003edc:	21e0      	movs	r1, #224	; 0xe0
 8003ede:	00c9      	lsls	r1, r1, #3
 8003ee0:	430a      	orrs	r2, r1
 8003ee2:	605a      	str	r2, [r3, #4]
 8003ee4:	4b4d      	ldr	r3, [pc, #308]	; (800401c <HAL_RCC_ClockConfig+0x1a0>)
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	22f0      	movs	r2, #240	; 0xf0
 8003eea:	4393      	bics	r3, r2
 8003eec:	0019      	movs	r1, r3
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	689a      	ldr	r2, [r3, #8]
 8003ef2:	4b4a      	ldr	r3, [pc, #296]	; (800401c <HAL_RCC_ClockConfig+0x1a0>)
 8003ef4:	430a      	orrs	r2, r1
 8003ef6:	605a      	str	r2, [r3, #4]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	2201      	movs	r2, #1
 8003efe:	4013      	ands	r3, r2
 8003f00:	d04c      	beq.n	8003f9c <HAL_RCC_ClockConfig+0x120>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d107      	bne.n	8003f1a <HAL_RCC_ClockConfig+0x9e>
 8003f0a:	4b44      	ldr	r3, [pc, #272]	; (800401c <HAL_RCC_ClockConfig+0x1a0>)
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	2380      	movs	r3, #128	; 0x80
 8003f10:	029b      	lsls	r3, r3, #10
 8003f12:	4013      	ands	r3, r2
 8003f14:	d120      	bne.n	8003f58 <HAL_RCC_ClockConfig+0xdc>
 8003f16:	2301      	movs	r3, #1
 8003f18:	e07a      	b.n	8004010 <HAL_RCC_ClockConfig+0x194>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	d107      	bne.n	8003f32 <HAL_RCC_ClockConfig+0xb6>
 8003f22:	4b3e      	ldr	r3, [pc, #248]	; (800401c <HAL_RCC_ClockConfig+0x1a0>)
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	2380      	movs	r3, #128	; 0x80
 8003f28:	049b      	lsls	r3, r3, #18
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	d114      	bne.n	8003f58 <HAL_RCC_ClockConfig+0xdc>
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e06e      	b.n	8004010 <HAL_RCC_ClockConfig+0x194>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	2b03      	cmp	r3, #3
 8003f38:	d107      	bne.n	8003f4a <HAL_RCC_ClockConfig+0xce>
 8003f3a:	4b38      	ldr	r3, [pc, #224]	; (800401c <HAL_RCC_ClockConfig+0x1a0>)
 8003f3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f3e:	2380      	movs	r3, #128	; 0x80
 8003f40:	025b      	lsls	r3, r3, #9
 8003f42:	4013      	ands	r3, r2
 8003f44:	d108      	bne.n	8003f58 <HAL_RCC_ClockConfig+0xdc>
 8003f46:	2301      	movs	r3, #1
 8003f48:	e062      	b.n	8004010 <HAL_RCC_ClockConfig+0x194>
 8003f4a:	4b34      	ldr	r3, [pc, #208]	; (800401c <HAL_RCC_ClockConfig+0x1a0>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	2202      	movs	r2, #2
 8003f50:	4013      	ands	r3, r2
 8003f52:	d101      	bne.n	8003f58 <HAL_RCC_ClockConfig+0xdc>
 8003f54:	2301      	movs	r3, #1
 8003f56:	e05b      	b.n	8004010 <HAL_RCC_ClockConfig+0x194>
 8003f58:	4b30      	ldr	r3, [pc, #192]	; (800401c <HAL_RCC_ClockConfig+0x1a0>)
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	2203      	movs	r2, #3
 8003f5e:	4393      	bics	r3, r2
 8003f60:	0019      	movs	r1, r3
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	685a      	ldr	r2, [r3, #4]
 8003f66:	4b2d      	ldr	r3, [pc, #180]	; (800401c <HAL_RCC_ClockConfig+0x1a0>)
 8003f68:	430a      	orrs	r2, r1
 8003f6a:	605a      	str	r2, [r3, #4]
 8003f6c:	f7fd ff52 	bl	8001e14 <HAL_GetTick>
 8003f70:	0003      	movs	r3, r0
 8003f72:	60fb      	str	r3, [r7, #12]
 8003f74:	e009      	b.n	8003f8a <HAL_RCC_ClockConfig+0x10e>
 8003f76:	f7fd ff4d 	bl	8001e14 <HAL_GetTick>
 8003f7a:	0002      	movs	r2, r0
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	1ad3      	subs	r3, r2, r3
 8003f80:	4a27      	ldr	r2, [pc, #156]	; (8004020 <HAL_RCC_ClockConfig+0x1a4>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d901      	bls.n	8003f8a <HAL_RCC_ClockConfig+0x10e>
 8003f86:	2303      	movs	r3, #3
 8003f88:	e042      	b.n	8004010 <HAL_RCC_ClockConfig+0x194>
 8003f8a:	4b24      	ldr	r3, [pc, #144]	; (800401c <HAL_RCC_ClockConfig+0x1a0>)
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	220c      	movs	r2, #12
 8003f90:	401a      	ands	r2, r3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d1ec      	bne.n	8003f76 <HAL_RCC_ClockConfig+0xfa>
 8003f9c:	4b1e      	ldr	r3, [pc, #120]	; (8004018 <HAL_RCC_ClockConfig+0x19c>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	4013      	ands	r3, r2
 8003fa4:	683a      	ldr	r2, [r7, #0]
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d211      	bcs.n	8003fce <HAL_RCC_ClockConfig+0x152>
 8003faa:	4b1b      	ldr	r3, [pc, #108]	; (8004018 <HAL_RCC_ClockConfig+0x19c>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	4393      	bics	r3, r2
 8003fb2:	0019      	movs	r1, r3
 8003fb4:	4b18      	ldr	r3, [pc, #96]	; (8004018 <HAL_RCC_ClockConfig+0x19c>)
 8003fb6:	683a      	ldr	r2, [r7, #0]
 8003fb8:	430a      	orrs	r2, r1
 8003fba:	601a      	str	r2, [r3, #0]
 8003fbc:	4b16      	ldr	r3, [pc, #88]	; (8004018 <HAL_RCC_ClockConfig+0x19c>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	683a      	ldr	r2, [r7, #0]
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d001      	beq.n	8003fce <HAL_RCC_ClockConfig+0x152>
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e020      	b.n	8004010 <HAL_RCC_ClockConfig+0x194>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	2204      	movs	r2, #4
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	d009      	beq.n	8003fec <HAL_RCC_ClockConfig+0x170>
 8003fd8:	4b10      	ldr	r3, [pc, #64]	; (800401c <HAL_RCC_ClockConfig+0x1a0>)
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	4a11      	ldr	r2, [pc, #68]	; (8004024 <HAL_RCC_ClockConfig+0x1a8>)
 8003fde:	4013      	ands	r3, r2
 8003fe0:	0019      	movs	r1, r3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	68da      	ldr	r2, [r3, #12]
 8003fe6:	4b0d      	ldr	r3, [pc, #52]	; (800401c <HAL_RCC_ClockConfig+0x1a0>)
 8003fe8:	430a      	orrs	r2, r1
 8003fea:	605a      	str	r2, [r3, #4]
 8003fec:	f000 f820 	bl	8004030 <HAL_RCC_GetSysClockFreq>
 8003ff0:	0001      	movs	r1, r0
 8003ff2:	4b0a      	ldr	r3, [pc, #40]	; (800401c <HAL_RCC_ClockConfig+0x1a0>)
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	091b      	lsrs	r3, r3, #4
 8003ff8:	220f      	movs	r2, #15
 8003ffa:	4013      	ands	r3, r2
 8003ffc:	4a0a      	ldr	r2, [pc, #40]	; (8004028 <HAL_RCC_ClockConfig+0x1ac>)
 8003ffe:	5cd3      	ldrb	r3, [r2, r3]
 8004000:	000a      	movs	r2, r1
 8004002:	40da      	lsrs	r2, r3
 8004004:	4b09      	ldr	r3, [pc, #36]	; (800402c <HAL_RCC_ClockConfig+0x1b0>)
 8004006:	601a      	str	r2, [r3, #0]
 8004008:	2000      	movs	r0, #0
 800400a:	f7fd febd 	bl	8001d88 <HAL_InitTick>
 800400e:	2300      	movs	r3, #0
 8004010:	0018      	movs	r0, r3
 8004012:	46bd      	mov	sp, r7
 8004014:	b004      	add	sp, #16
 8004016:	bd80      	pop	{r7, pc}
 8004018:	40022000 	.word	0x40022000
 800401c:	40021000 	.word	0x40021000
 8004020:	00001388 	.word	0x00001388
 8004024:	fffff8ff 	.word	0xfffff8ff
 8004028:	08007bc0 	.word	0x08007bc0
 800402c:	2000022c 	.word	0x2000022c

08004030 <HAL_RCC_GetSysClockFreq>:
 8004030:	b590      	push	{r4, r7, lr}
 8004032:	b08f      	sub	sp, #60	; 0x3c
 8004034:	af00      	add	r7, sp, #0
 8004036:	2314      	movs	r3, #20
 8004038:	18fb      	adds	r3, r7, r3
 800403a:	4a38      	ldr	r2, [pc, #224]	; (800411c <HAL_RCC_GetSysClockFreq+0xec>)
 800403c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800403e:	c313      	stmia	r3!, {r0, r1, r4}
 8004040:	6812      	ldr	r2, [r2, #0]
 8004042:	601a      	str	r2, [r3, #0]
 8004044:	1d3b      	adds	r3, r7, #4
 8004046:	4a36      	ldr	r2, [pc, #216]	; (8004120 <HAL_RCC_GetSysClockFreq+0xf0>)
 8004048:	ca13      	ldmia	r2!, {r0, r1, r4}
 800404a:	c313      	stmia	r3!, {r0, r1, r4}
 800404c:	6812      	ldr	r2, [r2, #0]
 800404e:	601a      	str	r2, [r3, #0]
 8004050:	2300      	movs	r3, #0
 8004052:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004054:	2300      	movs	r3, #0
 8004056:	62bb      	str	r3, [r7, #40]	; 0x28
 8004058:	2300      	movs	r3, #0
 800405a:	637b      	str	r3, [r7, #52]	; 0x34
 800405c:	2300      	movs	r3, #0
 800405e:	627b      	str	r3, [r7, #36]	; 0x24
 8004060:	2300      	movs	r3, #0
 8004062:	633b      	str	r3, [r7, #48]	; 0x30
 8004064:	4b2f      	ldr	r3, [pc, #188]	; (8004124 <HAL_RCC_GetSysClockFreq+0xf4>)
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	62fb      	str	r3, [r7, #44]	; 0x2c
 800406a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800406c:	220c      	movs	r2, #12
 800406e:	4013      	ands	r3, r2
 8004070:	2b0c      	cmp	r3, #12
 8004072:	d047      	beq.n	8004104 <HAL_RCC_GetSysClockFreq+0xd4>
 8004074:	d849      	bhi.n	800410a <HAL_RCC_GetSysClockFreq+0xda>
 8004076:	2b04      	cmp	r3, #4
 8004078:	d002      	beq.n	8004080 <HAL_RCC_GetSysClockFreq+0x50>
 800407a:	2b08      	cmp	r3, #8
 800407c:	d003      	beq.n	8004086 <HAL_RCC_GetSysClockFreq+0x56>
 800407e:	e044      	b.n	800410a <HAL_RCC_GetSysClockFreq+0xda>
 8004080:	4b29      	ldr	r3, [pc, #164]	; (8004128 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004082:	633b      	str	r3, [r7, #48]	; 0x30
 8004084:	e044      	b.n	8004110 <HAL_RCC_GetSysClockFreq+0xe0>
 8004086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004088:	0c9b      	lsrs	r3, r3, #18
 800408a:	220f      	movs	r2, #15
 800408c:	4013      	ands	r3, r2
 800408e:	2214      	movs	r2, #20
 8004090:	18ba      	adds	r2, r7, r2
 8004092:	5cd3      	ldrb	r3, [r2, r3]
 8004094:	627b      	str	r3, [r7, #36]	; 0x24
 8004096:	4b23      	ldr	r3, [pc, #140]	; (8004124 <HAL_RCC_GetSysClockFreq+0xf4>)
 8004098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800409a:	220f      	movs	r2, #15
 800409c:	4013      	ands	r3, r2
 800409e:	1d3a      	adds	r2, r7, #4
 80040a0:	5cd3      	ldrb	r3, [r2, r3]
 80040a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80040a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040a6:	23c0      	movs	r3, #192	; 0xc0
 80040a8:	025b      	lsls	r3, r3, #9
 80040aa:	401a      	ands	r2, r3
 80040ac:	2380      	movs	r3, #128	; 0x80
 80040ae:	025b      	lsls	r3, r3, #9
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d109      	bne.n	80040c8 <HAL_RCC_GetSysClockFreq+0x98>
 80040b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80040b6:	481c      	ldr	r0, [pc, #112]	; (8004128 <HAL_RCC_GetSysClockFreq+0xf8>)
 80040b8:	f7fc f830 	bl	800011c <__udivsi3>
 80040bc:	0003      	movs	r3, r0
 80040be:	001a      	movs	r2, r3
 80040c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c2:	4353      	muls	r3, r2
 80040c4:	637b      	str	r3, [r7, #52]	; 0x34
 80040c6:	e01a      	b.n	80040fe <HAL_RCC_GetSysClockFreq+0xce>
 80040c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040ca:	23c0      	movs	r3, #192	; 0xc0
 80040cc:	025b      	lsls	r3, r3, #9
 80040ce:	401a      	ands	r2, r3
 80040d0:	23c0      	movs	r3, #192	; 0xc0
 80040d2:	025b      	lsls	r3, r3, #9
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d109      	bne.n	80040ec <HAL_RCC_GetSysClockFreq+0xbc>
 80040d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80040da:	4814      	ldr	r0, [pc, #80]	; (800412c <HAL_RCC_GetSysClockFreq+0xfc>)
 80040dc:	f7fc f81e 	bl	800011c <__udivsi3>
 80040e0:	0003      	movs	r3, r0
 80040e2:	001a      	movs	r2, r3
 80040e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e6:	4353      	muls	r3, r2
 80040e8:	637b      	str	r3, [r7, #52]	; 0x34
 80040ea:	e008      	b.n	80040fe <HAL_RCC_GetSysClockFreq+0xce>
 80040ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80040ee:	480e      	ldr	r0, [pc, #56]	; (8004128 <HAL_RCC_GetSysClockFreq+0xf8>)
 80040f0:	f7fc f814 	bl	800011c <__udivsi3>
 80040f4:	0003      	movs	r3, r0
 80040f6:	001a      	movs	r2, r3
 80040f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fa:	4353      	muls	r3, r2
 80040fc:	637b      	str	r3, [r7, #52]	; 0x34
 80040fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004100:	633b      	str	r3, [r7, #48]	; 0x30
 8004102:	e005      	b.n	8004110 <HAL_RCC_GetSysClockFreq+0xe0>
 8004104:	4b09      	ldr	r3, [pc, #36]	; (800412c <HAL_RCC_GetSysClockFreq+0xfc>)
 8004106:	633b      	str	r3, [r7, #48]	; 0x30
 8004108:	e002      	b.n	8004110 <HAL_RCC_GetSysClockFreq+0xe0>
 800410a:	4b07      	ldr	r3, [pc, #28]	; (8004128 <HAL_RCC_GetSysClockFreq+0xf8>)
 800410c:	633b      	str	r3, [r7, #48]	; 0x30
 800410e:	46c0      	nop			; (mov r8, r8)
 8004110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004112:	0018      	movs	r0, r3
 8004114:	46bd      	mov	sp, r7
 8004116:	b00f      	add	sp, #60	; 0x3c
 8004118:	bd90      	pop	{r4, r7, pc}
 800411a:	46c0      	nop			; (mov r8, r8)
 800411c:	08005358 	.word	0x08005358
 8004120:	08005368 	.word	0x08005368
 8004124:	40021000 	.word	0x40021000
 8004128:	007a1200 	.word	0x007a1200
 800412c:	02dc6c00 	.word	0x02dc6c00

08004130 <HAL_RCC_GetHCLKFreq>:
 8004130:	b580      	push	{r7, lr}
 8004132:	af00      	add	r7, sp, #0
 8004134:	4b02      	ldr	r3, [pc, #8]	; (8004140 <HAL_RCC_GetHCLKFreq+0x10>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	0018      	movs	r0, r3
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
 800413e:	46c0      	nop			; (mov r8, r8)
 8004140:	2000022c 	.word	0x2000022c

08004144 <HAL_RCC_GetPCLK1Freq>:
 8004144:	b580      	push	{r7, lr}
 8004146:	af00      	add	r7, sp, #0
 8004148:	f7ff fff2 	bl	8004130 <HAL_RCC_GetHCLKFreq>
 800414c:	0001      	movs	r1, r0
 800414e:	4b06      	ldr	r3, [pc, #24]	; (8004168 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	0a1b      	lsrs	r3, r3, #8
 8004154:	2207      	movs	r2, #7
 8004156:	4013      	ands	r3, r2
 8004158:	4a04      	ldr	r2, [pc, #16]	; (800416c <HAL_RCC_GetPCLK1Freq+0x28>)
 800415a:	5cd3      	ldrb	r3, [r2, r3]
 800415c:	40d9      	lsrs	r1, r3
 800415e:	000b      	movs	r3, r1
 8004160:	0018      	movs	r0, r3
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
 8004166:	46c0      	nop			; (mov r8, r8)
 8004168:	40021000 	.word	0x40021000
 800416c:	08007bd0 	.word	0x08007bd0

08004170 <HAL_RCCEx_PeriphCLKConfig>:
 8004170:	b580      	push	{r7, lr}
 8004172:	b086      	sub	sp, #24
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	2300      	movs	r3, #0
 800417a:	613b      	str	r3, [r7, #16]
 800417c:	2300      	movs	r3, #0
 800417e:	60fb      	str	r3, [r7, #12]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	2380      	movs	r3, #128	; 0x80
 8004186:	025b      	lsls	r3, r3, #9
 8004188:	4013      	ands	r3, r2
 800418a:	d100      	bne.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800418c:	e08e      	b.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800418e:	2017      	movs	r0, #23
 8004190:	183b      	adds	r3, r7, r0
 8004192:	2200      	movs	r2, #0
 8004194:	701a      	strb	r2, [r3, #0]
 8004196:	4b67      	ldr	r3, [pc, #412]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004198:	69da      	ldr	r2, [r3, #28]
 800419a:	2380      	movs	r3, #128	; 0x80
 800419c:	055b      	lsls	r3, r3, #21
 800419e:	4013      	ands	r3, r2
 80041a0:	d110      	bne.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x54>
 80041a2:	4b64      	ldr	r3, [pc, #400]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80041a4:	69da      	ldr	r2, [r3, #28]
 80041a6:	4b63      	ldr	r3, [pc, #396]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80041a8:	2180      	movs	r1, #128	; 0x80
 80041aa:	0549      	lsls	r1, r1, #21
 80041ac:	430a      	orrs	r2, r1
 80041ae:	61da      	str	r2, [r3, #28]
 80041b0:	4b60      	ldr	r3, [pc, #384]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80041b2:	69da      	ldr	r2, [r3, #28]
 80041b4:	2380      	movs	r3, #128	; 0x80
 80041b6:	055b      	lsls	r3, r3, #21
 80041b8:	4013      	ands	r3, r2
 80041ba:	60bb      	str	r3, [r7, #8]
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	183b      	adds	r3, r7, r0
 80041c0:	2201      	movs	r2, #1
 80041c2:	701a      	strb	r2, [r3, #0]
 80041c4:	4b5c      	ldr	r3, [pc, #368]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	2380      	movs	r3, #128	; 0x80
 80041ca:	005b      	lsls	r3, r3, #1
 80041cc:	4013      	ands	r3, r2
 80041ce:	d11a      	bne.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x96>
 80041d0:	4b59      	ldr	r3, [pc, #356]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	4b58      	ldr	r3, [pc, #352]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80041d6:	2180      	movs	r1, #128	; 0x80
 80041d8:	0049      	lsls	r1, r1, #1
 80041da:	430a      	orrs	r2, r1
 80041dc:	601a      	str	r2, [r3, #0]
 80041de:	f7fd fe19 	bl	8001e14 <HAL_GetTick>
 80041e2:	0003      	movs	r3, r0
 80041e4:	613b      	str	r3, [r7, #16]
 80041e6:	e008      	b.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x8a>
 80041e8:	f7fd fe14 	bl	8001e14 <HAL_GetTick>
 80041ec:	0002      	movs	r2, r0
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	1ad3      	subs	r3, r2, r3
 80041f2:	2b64      	cmp	r3, #100	; 0x64
 80041f4:	d901      	bls.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x8a>
 80041f6:	2303      	movs	r3, #3
 80041f8:	e097      	b.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x1ba>
 80041fa:	4b4f      	ldr	r3, [pc, #316]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	2380      	movs	r3, #128	; 0x80
 8004200:	005b      	lsls	r3, r3, #1
 8004202:	4013      	ands	r3, r2
 8004204:	d0f0      	beq.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8004206:	4b4b      	ldr	r3, [pc, #300]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004208:	6a1a      	ldr	r2, [r3, #32]
 800420a:	23c0      	movs	r3, #192	; 0xc0
 800420c:	009b      	lsls	r3, r3, #2
 800420e:	4013      	ands	r3, r2
 8004210:	60fb      	str	r3, [r7, #12]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d034      	beq.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	685a      	ldr	r2, [r3, #4]
 800421c:	23c0      	movs	r3, #192	; 0xc0
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	4013      	ands	r3, r2
 8004222:	68fa      	ldr	r2, [r7, #12]
 8004224:	429a      	cmp	r2, r3
 8004226:	d02c      	beq.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8004228:	4b42      	ldr	r3, [pc, #264]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800422a:	6a1b      	ldr	r3, [r3, #32]
 800422c:	4a43      	ldr	r2, [pc, #268]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800422e:	4013      	ands	r3, r2
 8004230:	60fb      	str	r3, [r7, #12]
 8004232:	4b40      	ldr	r3, [pc, #256]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004234:	6a1a      	ldr	r2, [r3, #32]
 8004236:	4b3f      	ldr	r3, [pc, #252]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004238:	2180      	movs	r1, #128	; 0x80
 800423a:	0249      	lsls	r1, r1, #9
 800423c:	430a      	orrs	r2, r1
 800423e:	621a      	str	r2, [r3, #32]
 8004240:	4b3c      	ldr	r3, [pc, #240]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004242:	6a1a      	ldr	r2, [r3, #32]
 8004244:	4b3b      	ldr	r3, [pc, #236]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004246:	493e      	ldr	r1, [pc, #248]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004248:	400a      	ands	r2, r1
 800424a:	621a      	str	r2, [r3, #32]
 800424c:	4b39      	ldr	r3, [pc, #228]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800424e:	68fa      	ldr	r2, [r7, #12]
 8004250:	621a      	str	r2, [r3, #32]
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2201      	movs	r2, #1
 8004256:	4013      	ands	r3, r2
 8004258:	d013      	beq.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x112>
 800425a:	f7fd fddb 	bl	8001e14 <HAL_GetTick>
 800425e:	0003      	movs	r3, r0
 8004260:	613b      	str	r3, [r7, #16]
 8004262:	e009      	b.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x108>
 8004264:	f7fd fdd6 	bl	8001e14 <HAL_GetTick>
 8004268:	0002      	movs	r2, r0
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	1ad3      	subs	r3, r2, r3
 800426e:	4a35      	ldr	r2, [pc, #212]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d901      	bls.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x108>
 8004274:	2303      	movs	r3, #3
 8004276:	e058      	b.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x1ba>
 8004278:	4b2e      	ldr	r3, [pc, #184]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800427a:	6a1b      	ldr	r3, [r3, #32]
 800427c:	2202      	movs	r2, #2
 800427e:	4013      	ands	r3, r2
 8004280:	d0f0      	beq.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004282:	4b2c      	ldr	r3, [pc, #176]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004284:	6a1b      	ldr	r3, [r3, #32]
 8004286:	4a2d      	ldr	r2, [pc, #180]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004288:	4013      	ands	r3, r2
 800428a:	0019      	movs	r1, r3
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	685a      	ldr	r2, [r3, #4]
 8004290:	4b28      	ldr	r3, [pc, #160]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004292:	430a      	orrs	r2, r1
 8004294:	621a      	str	r2, [r3, #32]
 8004296:	2317      	movs	r3, #23
 8004298:	18fb      	adds	r3, r7, r3
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	2b01      	cmp	r3, #1
 800429e:	d105      	bne.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80042a0:	4b24      	ldr	r3, [pc, #144]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80042a2:	69da      	ldr	r2, [r3, #28]
 80042a4:	4b23      	ldr	r3, [pc, #140]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80042a6:	4928      	ldr	r1, [pc, #160]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80042a8:	400a      	ands	r2, r1
 80042aa:	61da      	str	r2, [r3, #28]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	2201      	movs	r2, #1
 80042b2:	4013      	ands	r3, r2
 80042b4:	d009      	beq.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80042b6:	4b1f      	ldr	r3, [pc, #124]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80042b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ba:	2203      	movs	r2, #3
 80042bc:	4393      	bics	r3, r2
 80042be:	0019      	movs	r1, r3
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	689a      	ldr	r2, [r3, #8]
 80042c4:	4b1b      	ldr	r3, [pc, #108]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80042c6:	430a      	orrs	r2, r1
 80042c8:	631a      	str	r2, [r3, #48]	; 0x30
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	2220      	movs	r2, #32
 80042d0:	4013      	ands	r3, r2
 80042d2:	d009      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x178>
 80042d4:	4b17      	ldr	r3, [pc, #92]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80042d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d8:	2210      	movs	r2, #16
 80042da:	4393      	bics	r3, r2
 80042dc:	0019      	movs	r1, r3
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	68da      	ldr	r2, [r3, #12]
 80042e2:	4b14      	ldr	r3, [pc, #80]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80042e4:	430a      	orrs	r2, r1
 80042e6:	631a      	str	r2, [r3, #48]	; 0x30
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	2380      	movs	r3, #128	; 0x80
 80042ee:	029b      	lsls	r3, r3, #10
 80042f0:	4013      	ands	r3, r2
 80042f2:	d009      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80042f4:	4b0f      	ldr	r3, [pc, #60]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80042f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f8:	2280      	movs	r2, #128	; 0x80
 80042fa:	4393      	bics	r3, r2
 80042fc:	0019      	movs	r1, r3
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	695a      	ldr	r2, [r3, #20]
 8004302:	4b0c      	ldr	r3, [pc, #48]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004304:	430a      	orrs	r2, r1
 8004306:	631a      	str	r2, [r3, #48]	; 0x30
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	2380      	movs	r3, #128	; 0x80
 800430e:	00db      	lsls	r3, r3, #3
 8004310:	4013      	ands	r3, r2
 8004312:	d009      	beq.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004314:	4b07      	ldr	r3, [pc, #28]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004318:	2240      	movs	r2, #64	; 0x40
 800431a:	4393      	bics	r3, r2
 800431c:	0019      	movs	r1, r3
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	691a      	ldr	r2, [r3, #16]
 8004322:	4b04      	ldr	r3, [pc, #16]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004324:	430a      	orrs	r2, r1
 8004326:	631a      	str	r2, [r3, #48]	; 0x30
 8004328:	2300      	movs	r3, #0
 800432a:	0018      	movs	r0, r3
 800432c:	46bd      	mov	sp, r7
 800432e:	b006      	add	sp, #24
 8004330:	bd80      	pop	{r7, pc}
 8004332:	46c0      	nop			; (mov r8, r8)
 8004334:	40021000 	.word	0x40021000
 8004338:	40007000 	.word	0x40007000
 800433c:	fffffcff 	.word	0xfffffcff
 8004340:	fffeffff 	.word	0xfffeffff
 8004344:	00001388 	.word	0x00001388
 8004348:	efffffff 	.word	0xefffffff

0800434c <HAL_UART_Init>:
 800434c:	b580      	push	{r7, lr}
 800434e:	b082      	sub	sp, #8
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d101      	bne.n	800435e <HAL_UART_Init+0x12>
 800435a:	2301      	movs	r3, #1
 800435c:	e044      	b.n	80043e8 <HAL_UART_Init+0x9c>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004362:	2b00      	cmp	r3, #0
 8004364:	d107      	bne.n	8004376 <HAL_UART_Init+0x2a>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2274      	movs	r2, #116	; 0x74
 800436a:	2100      	movs	r1, #0
 800436c:	5499      	strb	r1, [r3, r2]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	0018      	movs	r0, r3
 8004372:	f7fd fc05 	bl	8001b80 <HAL_UART_MspInit>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2224      	movs	r2, #36	; 0x24
 800437a:	679a      	str	r2, [r3, #120]	; 0x78
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	2101      	movs	r1, #1
 8004388:	438a      	bics	r2, r1
 800438a:	601a      	str	r2, [r3, #0]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	0018      	movs	r0, r3
 8004390:	f000 f830 	bl	80043f4 <UART_SetConfig>
 8004394:	0003      	movs	r3, r0
 8004396:	2b01      	cmp	r3, #1
 8004398:	d101      	bne.n	800439e <HAL_UART_Init+0x52>
 800439a:	2301      	movs	r3, #1
 800439c:	e024      	b.n	80043e8 <HAL_UART_Init+0x9c>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d003      	beq.n	80043ae <HAL_UART_Init+0x62>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	0018      	movs	r0, r3
 80043aa:	f000 f963 	bl	8004674 <UART_AdvFeatureConfig>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	685a      	ldr	r2, [r3, #4]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	490d      	ldr	r1, [pc, #52]	; (80043f0 <HAL_UART_Init+0xa4>)
 80043ba:	400a      	ands	r2, r1
 80043bc:	605a      	str	r2, [r3, #4]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	689a      	ldr	r2, [r3, #8]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	212a      	movs	r1, #42	; 0x2a
 80043ca:	438a      	bics	r2, r1
 80043cc:	609a      	str	r2, [r3, #8]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	2101      	movs	r1, #1
 80043da:	430a      	orrs	r2, r1
 80043dc:	601a      	str	r2, [r3, #0]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	0018      	movs	r0, r3
 80043e2:	f000 f9fb 	bl	80047dc <UART_CheckIdleState>
 80043e6:	0003      	movs	r3, r0
 80043e8:	0018      	movs	r0, r3
 80043ea:	46bd      	mov	sp, r7
 80043ec:	b002      	add	sp, #8
 80043ee:	bd80      	pop	{r7, pc}
 80043f0:	ffffb7ff 	.word	0xffffb7ff

080043f4 <UART_SetConfig>:
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b088      	sub	sp, #32
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
 80043fc:	231e      	movs	r3, #30
 80043fe:	18fb      	adds	r3, r7, r3
 8004400:	2200      	movs	r2, #0
 8004402:	701a      	strb	r2, [r3, #0]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	689a      	ldr	r2, [r3, #8]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	691b      	ldr	r3, [r3, #16]
 800440c:	431a      	orrs	r2, r3
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	695b      	ldr	r3, [r3, #20]
 8004412:	431a      	orrs	r2, r3
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	69db      	ldr	r3, [r3, #28]
 8004418:	4313      	orrs	r3, r2
 800441a:	617b      	str	r3, [r7, #20]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a8d      	ldr	r2, [pc, #564]	; (8004658 <UART_SetConfig+0x264>)
 8004424:	4013      	ands	r3, r2
 8004426:	0019      	movs	r1, r3
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	697a      	ldr	r2, [r7, #20]
 800442e:	430a      	orrs	r2, r1
 8004430:	601a      	str	r2, [r3, #0]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	4a88      	ldr	r2, [pc, #544]	; (800465c <UART_SetConfig+0x268>)
 800443a:	4013      	ands	r3, r2
 800443c:	0019      	movs	r1, r3
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	68da      	ldr	r2, [r3, #12]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	430a      	orrs	r2, r1
 8004448:	605a      	str	r2, [r3, #4]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	699b      	ldr	r3, [r3, #24]
 800444e:	617b      	str	r3, [r7, #20]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6a1b      	ldr	r3, [r3, #32]
 8004454:	697a      	ldr	r2, [r7, #20]
 8004456:	4313      	orrs	r3, r2
 8004458:	617b      	str	r3, [r7, #20]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	4a7f      	ldr	r2, [pc, #508]	; (8004660 <UART_SetConfig+0x26c>)
 8004462:	4013      	ands	r3, r2
 8004464:	0019      	movs	r1, r3
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	697a      	ldr	r2, [r7, #20]
 800446c:	430a      	orrs	r2, r1
 800446e:	609a      	str	r2, [r3, #8]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a7b      	ldr	r2, [pc, #492]	; (8004664 <UART_SetConfig+0x270>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d127      	bne.n	80044ca <UART_SetConfig+0xd6>
 800447a:	4b7b      	ldr	r3, [pc, #492]	; (8004668 <UART_SetConfig+0x274>)
 800447c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800447e:	2203      	movs	r2, #3
 8004480:	4013      	ands	r3, r2
 8004482:	2b03      	cmp	r3, #3
 8004484:	d00d      	beq.n	80044a2 <UART_SetConfig+0xae>
 8004486:	d81b      	bhi.n	80044c0 <UART_SetConfig+0xcc>
 8004488:	2b02      	cmp	r3, #2
 800448a:	d014      	beq.n	80044b6 <UART_SetConfig+0xc2>
 800448c:	d818      	bhi.n	80044c0 <UART_SetConfig+0xcc>
 800448e:	2b00      	cmp	r3, #0
 8004490:	d002      	beq.n	8004498 <UART_SetConfig+0xa4>
 8004492:	2b01      	cmp	r3, #1
 8004494:	d00a      	beq.n	80044ac <UART_SetConfig+0xb8>
 8004496:	e013      	b.n	80044c0 <UART_SetConfig+0xcc>
 8004498:	231f      	movs	r3, #31
 800449a:	18fb      	adds	r3, r7, r3
 800449c:	2200      	movs	r2, #0
 800449e:	701a      	strb	r2, [r3, #0]
 80044a0:	e021      	b.n	80044e6 <UART_SetConfig+0xf2>
 80044a2:	231f      	movs	r3, #31
 80044a4:	18fb      	adds	r3, r7, r3
 80044a6:	2202      	movs	r2, #2
 80044a8:	701a      	strb	r2, [r3, #0]
 80044aa:	e01c      	b.n	80044e6 <UART_SetConfig+0xf2>
 80044ac:	231f      	movs	r3, #31
 80044ae:	18fb      	adds	r3, r7, r3
 80044b0:	2204      	movs	r2, #4
 80044b2:	701a      	strb	r2, [r3, #0]
 80044b4:	e017      	b.n	80044e6 <UART_SetConfig+0xf2>
 80044b6:	231f      	movs	r3, #31
 80044b8:	18fb      	adds	r3, r7, r3
 80044ba:	2208      	movs	r2, #8
 80044bc:	701a      	strb	r2, [r3, #0]
 80044be:	e012      	b.n	80044e6 <UART_SetConfig+0xf2>
 80044c0:	231f      	movs	r3, #31
 80044c2:	18fb      	adds	r3, r7, r3
 80044c4:	2210      	movs	r2, #16
 80044c6:	701a      	strb	r2, [r3, #0]
 80044c8:	e00d      	b.n	80044e6 <UART_SetConfig+0xf2>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a67      	ldr	r2, [pc, #412]	; (800466c <UART_SetConfig+0x278>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d104      	bne.n	80044de <UART_SetConfig+0xea>
 80044d4:	231f      	movs	r3, #31
 80044d6:	18fb      	adds	r3, r7, r3
 80044d8:	2200      	movs	r2, #0
 80044da:	701a      	strb	r2, [r3, #0]
 80044dc:	e003      	b.n	80044e6 <UART_SetConfig+0xf2>
 80044de:	231f      	movs	r3, #31
 80044e0:	18fb      	adds	r3, r7, r3
 80044e2:	2210      	movs	r2, #16
 80044e4:	701a      	strb	r2, [r3, #0]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	69da      	ldr	r2, [r3, #28]
 80044ea:	2380      	movs	r3, #128	; 0x80
 80044ec:	021b      	lsls	r3, r3, #8
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d15d      	bne.n	80045ae <UART_SetConfig+0x1ba>
 80044f2:	231f      	movs	r3, #31
 80044f4:	18fb      	adds	r3, r7, r3
 80044f6:	781b      	ldrb	r3, [r3, #0]
 80044f8:	2b08      	cmp	r3, #8
 80044fa:	d015      	beq.n	8004528 <UART_SetConfig+0x134>
 80044fc:	dc18      	bgt.n	8004530 <UART_SetConfig+0x13c>
 80044fe:	2b04      	cmp	r3, #4
 8004500:	d00d      	beq.n	800451e <UART_SetConfig+0x12a>
 8004502:	dc15      	bgt.n	8004530 <UART_SetConfig+0x13c>
 8004504:	2b00      	cmp	r3, #0
 8004506:	d002      	beq.n	800450e <UART_SetConfig+0x11a>
 8004508:	2b02      	cmp	r3, #2
 800450a:	d005      	beq.n	8004518 <UART_SetConfig+0x124>
 800450c:	e010      	b.n	8004530 <UART_SetConfig+0x13c>
 800450e:	f7ff fe19 	bl	8004144 <HAL_RCC_GetPCLK1Freq>
 8004512:	0003      	movs	r3, r0
 8004514:	61bb      	str	r3, [r7, #24]
 8004516:	e012      	b.n	800453e <UART_SetConfig+0x14a>
 8004518:	4b55      	ldr	r3, [pc, #340]	; (8004670 <UART_SetConfig+0x27c>)
 800451a:	61bb      	str	r3, [r7, #24]
 800451c:	e00f      	b.n	800453e <UART_SetConfig+0x14a>
 800451e:	f7ff fd87 	bl	8004030 <HAL_RCC_GetSysClockFreq>
 8004522:	0003      	movs	r3, r0
 8004524:	61bb      	str	r3, [r7, #24]
 8004526:	e00a      	b.n	800453e <UART_SetConfig+0x14a>
 8004528:	2380      	movs	r3, #128	; 0x80
 800452a:	021b      	lsls	r3, r3, #8
 800452c:	61bb      	str	r3, [r7, #24]
 800452e:	e006      	b.n	800453e <UART_SetConfig+0x14a>
 8004530:	2300      	movs	r3, #0
 8004532:	61bb      	str	r3, [r7, #24]
 8004534:	231e      	movs	r3, #30
 8004536:	18fb      	adds	r3, r7, r3
 8004538:	2201      	movs	r2, #1
 800453a:	701a      	strb	r2, [r3, #0]
 800453c:	46c0      	nop			; (mov r8, r8)
 800453e:	69bb      	ldr	r3, [r7, #24]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d100      	bne.n	8004546 <UART_SetConfig+0x152>
 8004544:	e07b      	b.n	800463e <UART_SetConfig+0x24a>
 8004546:	69bb      	ldr	r3, [r7, #24]
 8004548:	005a      	lsls	r2, r3, #1
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	085b      	lsrs	r3, r3, #1
 8004550:	18d2      	adds	r2, r2, r3
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	0019      	movs	r1, r3
 8004558:	0010      	movs	r0, r2
 800455a:	f7fb fddf 	bl	800011c <__udivsi3>
 800455e:	0003      	movs	r3, r0
 8004560:	b29b      	uxth	r3, r3
 8004562:	613b      	str	r3, [r7, #16]
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	2b0f      	cmp	r3, #15
 8004568:	d91c      	bls.n	80045a4 <UART_SetConfig+0x1b0>
 800456a:	693a      	ldr	r2, [r7, #16]
 800456c:	2380      	movs	r3, #128	; 0x80
 800456e:	025b      	lsls	r3, r3, #9
 8004570:	429a      	cmp	r2, r3
 8004572:	d217      	bcs.n	80045a4 <UART_SetConfig+0x1b0>
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	b29a      	uxth	r2, r3
 8004578:	200e      	movs	r0, #14
 800457a:	183b      	adds	r3, r7, r0
 800457c:	210f      	movs	r1, #15
 800457e:	438a      	bics	r2, r1
 8004580:	801a      	strh	r2, [r3, #0]
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	085b      	lsrs	r3, r3, #1
 8004586:	b29b      	uxth	r3, r3
 8004588:	2207      	movs	r2, #7
 800458a:	4013      	ands	r3, r2
 800458c:	b299      	uxth	r1, r3
 800458e:	183b      	adds	r3, r7, r0
 8004590:	183a      	adds	r2, r7, r0
 8004592:	8812      	ldrh	r2, [r2, #0]
 8004594:	430a      	orrs	r2, r1
 8004596:	801a      	strh	r2, [r3, #0]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	183a      	adds	r2, r7, r0
 800459e:	8812      	ldrh	r2, [r2, #0]
 80045a0:	60da      	str	r2, [r3, #12]
 80045a2:	e04c      	b.n	800463e <UART_SetConfig+0x24a>
 80045a4:	231e      	movs	r3, #30
 80045a6:	18fb      	adds	r3, r7, r3
 80045a8:	2201      	movs	r2, #1
 80045aa:	701a      	strb	r2, [r3, #0]
 80045ac:	e047      	b.n	800463e <UART_SetConfig+0x24a>
 80045ae:	231f      	movs	r3, #31
 80045b0:	18fb      	adds	r3, r7, r3
 80045b2:	781b      	ldrb	r3, [r3, #0]
 80045b4:	2b08      	cmp	r3, #8
 80045b6:	d015      	beq.n	80045e4 <UART_SetConfig+0x1f0>
 80045b8:	dc18      	bgt.n	80045ec <UART_SetConfig+0x1f8>
 80045ba:	2b04      	cmp	r3, #4
 80045bc:	d00d      	beq.n	80045da <UART_SetConfig+0x1e6>
 80045be:	dc15      	bgt.n	80045ec <UART_SetConfig+0x1f8>
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d002      	beq.n	80045ca <UART_SetConfig+0x1d6>
 80045c4:	2b02      	cmp	r3, #2
 80045c6:	d005      	beq.n	80045d4 <UART_SetConfig+0x1e0>
 80045c8:	e010      	b.n	80045ec <UART_SetConfig+0x1f8>
 80045ca:	f7ff fdbb 	bl	8004144 <HAL_RCC_GetPCLK1Freq>
 80045ce:	0003      	movs	r3, r0
 80045d0:	61bb      	str	r3, [r7, #24]
 80045d2:	e012      	b.n	80045fa <UART_SetConfig+0x206>
 80045d4:	4b26      	ldr	r3, [pc, #152]	; (8004670 <UART_SetConfig+0x27c>)
 80045d6:	61bb      	str	r3, [r7, #24]
 80045d8:	e00f      	b.n	80045fa <UART_SetConfig+0x206>
 80045da:	f7ff fd29 	bl	8004030 <HAL_RCC_GetSysClockFreq>
 80045de:	0003      	movs	r3, r0
 80045e0:	61bb      	str	r3, [r7, #24]
 80045e2:	e00a      	b.n	80045fa <UART_SetConfig+0x206>
 80045e4:	2380      	movs	r3, #128	; 0x80
 80045e6:	021b      	lsls	r3, r3, #8
 80045e8:	61bb      	str	r3, [r7, #24]
 80045ea:	e006      	b.n	80045fa <UART_SetConfig+0x206>
 80045ec:	2300      	movs	r3, #0
 80045ee:	61bb      	str	r3, [r7, #24]
 80045f0:	231e      	movs	r3, #30
 80045f2:	18fb      	adds	r3, r7, r3
 80045f4:	2201      	movs	r2, #1
 80045f6:	701a      	strb	r2, [r3, #0]
 80045f8:	46c0      	nop			; (mov r8, r8)
 80045fa:	69bb      	ldr	r3, [r7, #24]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d01e      	beq.n	800463e <UART_SetConfig+0x24a>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	085a      	lsrs	r2, r3, #1
 8004606:	69bb      	ldr	r3, [r7, #24]
 8004608:	18d2      	adds	r2, r2, r3
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	0019      	movs	r1, r3
 8004610:	0010      	movs	r0, r2
 8004612:	f7fb fd83 	bl	800011c <__udivsi3>
 8004616:	0003      	movs	r3, r0
 8004618:	b29b      	uxth	r3, r3
 800461a:	613b      	str	r3, [r7, #16]
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	2b0f      	cmp	r3, #15
 8004620:	d909      	bls.n	8004636 <UART_SetConfig+0x242>
 8004622:	693a      	ldr	r2, [r7, #16]
 8004624:	2380      	movs	r3, #128	; 0x80
 8004626:	025b      	lsls	r3, r3, #9
 8004628:	429a      	cmp	r2, r3
 800462a:	d204      	bcs.n	8004636 <UART_SetConfig+0x242>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	693a      	ldr	r2, [r7, #16]
 8004632:	60da      	str	r2, [r3, #12]
 8004634:	e003      	b.n	800463e <UART_SetConfig+0x24a>
 8004636:	231e      	movs	r3, #30
 8004638:	18fb      	adds	r3, r7, r3
 800463a:	2201      	movs	r2, #1
 800463c:	701a      	strb	r2, [r3, #0]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	665a      	str	r2, [r3, #100]	; 0x64
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	669a      	str	r2, [r3, #104]	; 0x68
 800464a:	231e      	movs	r3, #30
 800464c:	18fb      	adds	r3, r7, r3
 800464e:	781b      	ldrb	r3, [r3, #0]
 8004650:	0018      	movs	r0, r3
 8004652:	46bd      	mov	sp, r7
 8004654:	b008      	add	sp, #32
 8004656:	bd80      	pop	{r7, pc}
 8004658:	efff69f3 	.word	0xefff69f3
 800465c:	ffffcfff 	.word	0xffffcfff
 8004660:	fffff4ff 	.word	0xfffff4ff
 8004664:	40013800 	.word	0x40013800
 8004668:	40021000 	.word	0x40021000
 800466c:	40004400 	.word	0x40004400
 8004670:	007a1200 	.word	0x007a1200

08004674 <UART_AdvFeatureConfig>:
 8004674:	b580      	push	{r7, lr}
 8004676:	b082      	sub	sp, #8
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004680:	2201      	movs	r2, #1
 8004682:	4013      	ands	r3, r2
 8004684:	d00b      	beq.n	800469e <UART_AdvFeatureConfig+0x2a>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	4a4a      	ldr	r2, [pc, #296]	; (80047b8 <UART_AdvFeatureConfig+0x144>)
 800468e:	4013      	ands	r3, r2
 8004690:	0019      	movs	r1, r3
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	430a      	orrs	r2, r1
 800469c:	605a      	str	r2, [r3, #4]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a2:	2202      	movs	r2, #2
 80046a4:	4013      	ands	r3, r2
 80046a6:	d00b      	beq.n	80046c0 <UART_AdvFeatureConfig+0x4c>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	4a43      	ldr	r2, [pc, #268]	; (80047bc <UART_AdvFeatureConfig+0x148>)
 80046b0:	4013      	ands	r3, r2
 80046b2:	0019      	movs	r1, r3
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	430a      	orrs	r2, r1
 80046be:	605a      	str	r2, [r3, #4]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c4:	2204      	movs	r2, #4
 80046c6:	4013      	ands	r3, r2
 80046c8:	d00b      	beq.n	80046e2 <UART_AdvFeatureConfig+0x6e>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	4a3b      	ldr	r2, [pc, #236]	; (80047c0 <UART_AdvFeatureConfig+0x14c>)
 80046d2:	4013      	ands	r3, r2
 80046d4:	0019      	movs	r1, r3
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	430a      	orrs	r2, r1
 80046e0:	605a      	str	r2, [r3, #4]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e6:	2208      	movs	r2, #8
 80046e8:	4013      	ands	r3, r2
 80046ea:	d00b      	beq.n	8004704 <UART_AdvFeatureConfig+0x90>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	4a34      	ldr	r2, [pc, #208]	; (80047c4 <UART_AdvFeatureConfig+0x150>)
 80046f4:	4013      	ands	r3, r2
 80046f6:	0019      	movs	r1, r3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	430a      	orrs	r2, r1
 8004702:	605a      	str	r2, [r3, #4]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004708:	2210      	movs	r2, #16
 800470a:	4013      	ands	r3, r2
 800470c:	d00b      	beq.n	8004726 <UART_AdvFeatureConfig+0xb2>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	4a2c      	ldr	r2, [pc, #176]	; (80047c8 <UART_AdvFeatureConfig+0x154>)
 8004716:	4013      	ands	r3, r2
 8004718:	0019      	movs	r1, r3
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	430a      	orrs	r2, r1
 8004724:	609a      	str	r2, [r3, #8]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472a:	2220      	movs	r2, #32
 800472c:	4013      	ands	r3, r2
 800472e:	d00b      	beq.n	8004748 <UART_AdvFeatureConfig+0xd4>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	4a25      	ldr	r2, [pc, #148]	; (80047cc <UART_AdvFeatureConfig+0x158>)
 8004738:	4013      	ands	r3, r2
 800473a:	0019      	movs	r1, r3
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	430a      	orrs	r2, r1
 8004746:	609a      	str	r2, [r3, #8]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474c:	2240      	movs	r2, #64	; 0x40
 800474e:	4013      	ands	r3, r2
 8004750:	d01d      	beq.n	800478e <UART_AdvFeatureConfig+0x11a>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	4a1d      	ldr	r2, [pc, #116]	; (80047d0 <UART_AdvFeatureConfig+0x15c>)
 800475a:	4013      	ands	r3, r2
 800475c:	0019      	movs	r1, r3
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	430a      	orrs	r2, r1
 8004768:	605a      	str	r2, [r3, #4]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800476e:	2380      	movs	r3, #128	; 0x80
 8004770:	035b      	lsls	r3, r3, #13
 8004772:	429a      	cmp	r2, r3
 8004774:	d10b      	bne.n	800478e <UART_AdvFeatureConfig+0x11a>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	4a15      	ldr	r2, [pc, #84]	; (80047d4 <UART_AdvFeatureConfig+0x160>)
 800477e:	4013      	ands	r3, r2
 8004780:	0019      	movs	r1, r3
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	430a      	orrs	r2, r1
 800478c:	605a      	str	r2, [r3, #4]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004792:	2280      	movs	r2, #128	; 0x80
 8004794:	4013      	ands	r3, r2
 8004796:	d00b      	beq.n	80047b0 <UART_AdvFeatureConfig+0x13c>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	4a0e      	ldr	r2, [pc, #56]	; (80047d8 <UART_AdvFeatureConfig+0x164>)
 80047a0:	4013      	ands	r3, r2
 80047a2:	0019      	movs	r1, r3
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	430a      	orrs	r2, r1
 80047ae:	605a      	str	r2, [r3, #4]
 80047b0:	46c0      	nop			; (mov r8, r8)
 80047b2:	46bd      	mov	sp, r7
 80047b4:	b002      	add	sp, #8
 80047b6:	bd80      	pop	{r7, pc}
 80047b8:	fffdffff 	.word	0xfffdffff
 80047bc:	fffeffff 	.word	0xfffeffff
 80047c0:	fffbffff 	.word	0xfffbffff
 80047c4:	ffff7fff 	.word	0xffff7fff
 80047c8:	ffffefff 	.word	0xffffefff
 80047cc:	ffffdfff 	.word	0xffffdfff
 80047d0:	ffefffff 	.word	0xffefffff
 80047d4:	ff9fffff 	.word	0xff9fffff
 80047d8:	fff7ffff 	.word	0xfff7ffff

080047dc <UART_CheckIdleState>:
 80047dc:	b580      	push	{r7, lr}
 80047de:	b086      	sub	sp, #24
 80047e0:	af02      	add	r7, sp, #8
 80047e2:	6078      	str	r0, [r7, #4]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2280      	movs	r2, #128	; 0x80
 80047e8:	2100      	movs	r1, #0
 80047ea:	5099      	str	r1, [r3, r2]
 80047ec:	f7fd fb12 	bl	8001e14 <HAL_GetTick>
 80047f0:	0003      	movs	r3, r0
 80047f2:	60fb      	str	r3, [r7, #12]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	2208      	movs	r2, #8
 80047fc:	4013      	ands	r3, r2
 80047fe:	2b08      	cmp	r3, #8
 8004800:	d10c      	bne.n	800481c <UART_CheckIdleState+0x40>
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2280      	movs	r2, #128	; 0x80
 8004806:	0391      	lsls	r1, r2, #14
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	4a17      	ldr	r2, [pc, #92]	; (8004868 <UART_CheckIdleState+0x8c>)
 800480c:	9200      	str	r2, [sp, #0]
 800480e:	2200      	movs	r2, #0
 8004810:	f000 f82c 	bl	800486c <UART_WaitOnFlagUntilTimeout>
 8004814:	1e03      	subs	r3, r0, #0
 8004816:	d001      	beq.n	800481c <UART_CheckIdleState+0x40>
 8004818:	2303      	movs	r3, #3
 800481a:	e021      	b.n	8004860 <UART_CheckIdleState+0x84>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2204      	movs	r2, #4
 8004824:	4013      	ands	r3, r2
 8004826:	2b04      	cmp	r3, #4
 8004828:	d10c      	bne.n	8004844 <UART_CheckIdleState+0x68>
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2280      	movs	r2, #128	; 0x80
 800482e:	03d1      	lsls	r1, r2, #15
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	4a0d      	ldr	r2, [pc, #52]	; (8004868 <UART_CheckIdleState+0x8c>)
 8004834:	9200      	str	r2, [sp, #0]
 8004836:	2200      	movs	r2, #0
 8004838:	f000 f818 	bl	800486c <UART_WaitOnFlagUntilTimeout>
 800483c:	1e03      	subs	r3, r0, #0
 800483e:	d001      	beq.n	8004844 <UART_CheckIdleState+0x68>
 8004840:	2303      	movs	r3, #3
 8004842:	e00d      	b.n	8004860 <UART_CheckIdleState+0x84>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2220      	movs	r2, #32
 8004848:	679a      	str	r2, [r3, #120]	; 0x78
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2220      	movs	r2, #32
 800484e:	67da      	str	r2, [r3, #124]	; 0x7c
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2200      	movs	r2, #0
 8004854:	661a      	str	r2, [r3, #96]	; 0x60
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2274      	movs	r2, #116	; 0x74
 800485a:	2100      	movs	r1, #0
 800485c:	5499      	strb	r1, [r3, r2]
 800485e:	2300      	movs	r3, #0
 8004860:	0018      	movs	r0, r3
 8004862:	46bd      	mov	sp, r7
 8004864:	b004      	add	sp, #16
 8004866:	bd80      	pop	{r7, pc}
 8004868:	01ffffff 	.word	0x01ffffff

0800486c <UART_WaitOnFlagUntilTimeout>:
 800486c:	b580      	push	{r7, lr}
 800486e:	b094      	sub	sp, #80	; 0x50
 8004870:	af00      	add	r7, sp, #0
 8004872:	60f8      	str	r0, [r7, #12]
 8004874:	60b9      	str	r1, [r7, #8]
 8004876:	603b      	str	r3, [r7, #0]
 8004878:	1dfb      	adds	r3, r7, #7
 800487a:	701a      	strb	r2, [r3, #0]
 800487c:	e0a3      	b.n	80049c6 <UART_WaitOnFlagUntilTimeout+0x15a>
 800487e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004880:	3301      	adds	r3, #1
 8004882:	d100      	bne.n	8004886 <UART_WaitOnFlagUntilTimeout+0x1a>
 8004884:	e09f      	b.n	80049c6 <UART_WaitOnFlagUntilTimeout+0x15a>
 8004886:	f7fd fac5 	bl	8001e14 <HAL_GetTick>
 800488a:	0002      	movs	r2, r0
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	1ad3      	subs	r3, r2, r3
 8004890:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004892:	429a      	cmp	r2, r3
 8004894:	d302      	bcc.n	800489c <UART_WaitOnFlagUntilTimeout+0x30>
 8004896:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004898:	2b00      	cmp	r3, #0
 800489a:	d13d      	bne.n	8004918 <UART_WaitOnFlagUntilTimeout+0xac>
 800489c:	f3ef 8310 	mrs	r3, PRIMASK
 80048a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80048a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048a4:	647b      	str	r3, [r7, #68]	; 0x44
 80048a6:	2301      	movs	r3, #1
 80048a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048ac:	f383 8810 	msr	PRIMASK, r3
 80048b0:	46c0      	nop			; (mov r8, r8)
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	494c      	ldr	r1, [pc, #304]	; (80049f0 <UART_WaitOnFlagUntilTimeout+0x184>)
 80048be:	400a      	ands	r2, r1
 80048c0:	601a      	str	r2, [r3, #0]
 80048c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048c4:	633b      	str	r3, [r7, #48]	; 0x30
 80048c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048c8:	f383 8810 	msr	PRIMASK, r3
 80048cc:	46c0      	nop			; (mov r8, r8)
 80048ce:	f3ef 8310 	mrs	r3, PRIMASK
 80048d2:	637b      	str	r3, [r7, #52]	; 0x34
 80048d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048d6:	643b      	str	r3, [r7, #64]	; 0x40
 80048d8:	2301      	movs	r3, #1
 80048da:	63bb      	str	r3, [r7, #56]	; 0x38
 80048dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048de:	f383 8810 	msr	PRIMASK, r3
 80048e2:	46c0      	nop			; (mov r8, r8)
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	689a      	ldr	r2, [r3, #8]
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	2101      	movs	r1, #1
 80048f0:	438a      	bics	r2, r1
 80048f2:	609a      	str	r2, [r3, #8]
 80048f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048fa:	f383 8810 	msr	PRIMASK, r3
 80048fe:	46c0      	nop			; (mov r8, r8)
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2220      	movs	r2, #32
 8004904:	679a      	str	r2, [r3, #120]	; 0x78
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2220      	movs	r2, #32
 800490a:	67da      	str	r2, [r3, #124]	; 0x7c
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2274      	movs	r2, #116	; 0x74
 8004910:	2100      	movs	r1, #0
 8004912:	5499      	strb	r1, [r3, r2]
 8004914:	2303      	movs	r3, #3
 8004916:	e067      	b.n	80049e8 <UART_WaitOnFlagUntilTimeout+0x17c>
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	2204      	movs	r2, #4
 8004920:	4013      	ands	r3, r2
 8004922:	d050      	beq.n	80049c6 <UART_WaitOnFlagUntilTimeout+0x15a>
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	69da      	ldr	r2, [r3, #28]
 800492a:	2380      	movs	r3, #128	; 0x80
 800492c:	011b      	lsls	r3, r3, #4
 800492e:	401a      	ands	r2, r3
 8004930:	2380      	movs	r3, #128	; 0x80
 8004932:	011b      	lsls	r3, r3, #4
 8004934:	429a      	cmp	r2, r3
 8004936:	d146      	bne.n	80049c6 <UART_WaitOnFlagUntilTimeout+0x15a>
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	2280      	movs	r2, #128	; 0x80
 800493e:	0112      	lsls	r2, r2, #4
 8004940:	621a      	str	r2, [r3, #32]
 8004942:	f3ef 8310 	mrs	r3, PRIMASK
 8004946:	613b      	str	r3, [r7, #16]
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800494c:	2301      	movs	r3, #1
 800494e:	617b      	str	r3, [r7, #20]
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	f383 8810 	msr	PRIMASK, r3
 8004956:	46c0      	nop			; (mov r8, r8)
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4923      	ldr	r1, [pc, #140]	; (80049f0 <UART_WaitOnFlagUntilTimeout+0x184>)
 8004964:	400a      	ands	r2, r1
 8004966:	601a      	str	r2, [r3, #0]
 8004968:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800496a:	61bb      	str	r3, [r7, #24]
 800496c:	69bb      	ldr	r3, [r7, #24]
 800496e:	f383 8810 	msr	PRIMASK, r3
 8004972:	46c0      	nop			; (mov r8, r8)
 8004974:	f3ef 8310 	mrs	r3, PRIMASK
 8004978:	61fb      	str	r3, [r7, #28]
 800497a:	69fb      	ldr	r3, [r7, #28]
 800497c:	64bb      	str	r3, [r7, #72]	; 0x48
 800497e:	2301      	movs	r3, #1
 8004980:	623b      	str	r3, [r7, #32]
 8004982:	6a3b      	ldr	r3, [r7, #32]
 8004984:	f383 8810 	msr	PRIMASK, r3
 8004988:	46c0      	nop			; (mov r8, r8)
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	689a      	ldr	r2, [r3, #8]
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	2101      	movs	r1, #1
 8004996:	438a      	bics	r2, r1
 8004998:	609a      	str	r2, [r3, #8]
 800499a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800499c:	627b      	str	r3, [r7, #36]	; 0x24
 800499e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a0:	f383 8810 	msr	PRIMASK, r3
 80049a4:	46c0      	nop			; (mov r8, r8)
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2220      	movs	r2, #32
 80049aa:	679a      	str	r2, [r3, #120]	; 0x78
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2220      	movs	r2, #32
 80049b0:	67da      	str	r2, [r3, #124]	; 0x7c
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2280      	movs	r2, #128	; 0x80
 80049b6:	2120      	movs	r1, #32
 80049b8:	5099      	str	r1, [r3, r2]
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2274      	movs	r2, #116	; 0x74
 80049be:	2100      	movs	r1, #0
 80049c0:	5499      	strb	r1, [r3, r2]
 80049c2:	2303      	movs	r3, #3
 80049c4:	e010      	b.n	80049e8 <UART_WaitOnFlagUntilTimeout+0x17c>
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	69db      	ldr	r3, [r3, #28]
 80049cc:	68ba      	ldr	r2, [r7, #8]
 80049ce:	4013      	ands	r3, r2
 80049d0:	68ba      	ldr	r2, [r7, #8]
 80049d2:	1ad3      	subs	r3, r2, r3
 80049d4:	425a      	negs	r2, r3
 80049d6:	4153      	adcs	r3, r2
 80049d8:	b2db      	uxtb	r3, r3
 80049da:	001a      	movs	r2, r3
 80049dc:	1dfb      	adds	r3, r7, #7
 80049de:	781b      	ldrb	r3, [r3, #0]
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d100      	bne.n	80049e6 <UART_WaitOnFlagUntilTimeout+0x17a>
 80049e4:	e74b      	b.n	800487e <UART_WaitOnFlagUntilTimeout+0x12>
 80049e6:	2300      	movs	r3, #0
 80049e8:	0018      	movs	r0, r3
 80049ea:	46bd      	mov	sp, r7
 80049ec:	b014      	add	sp, #80	; 0x50
 80049ee:	bd80      	pop	{r7, pc}
 80049f0:	fffffe5f 	.word	0xfffffe5f

080049f4 <__errno>:
 80049f4:	4b01      	ldr	r3, [pc, #4]	; (80049fc <__errno+0x8>)
 80049f6:	6818      	ldr	r0, [r3, #0]
 80049f8:	4770      	bx	lr
 80049fa:	46c0      	nop			; (mov r8, r8)
 80049fc:	20000238 	.word	0x20000238

08004a00 <__libc_init_array>:
 8004a00:	b570      	push	{r4, r5, r6, lr}
 8004a02:	2600      	movs	r6, #0
 8004a04:	4d0c      	ldr	r5, [pc, #48]	; (8004a38 <__libc_init_array+0x38>)
 8004a06:	4c0d      	ldr	r4, [pc, #52]	; (8004a3c <__libc_init_array+0x3c>)
 8004a08:	1b64      	subs	r4, r4, r5
 8004a0a:	10a4      	asrs	r4, r4, #2
 8004a0c:	42a6      	cmp	r6, r4
 8004a0e:	d109      	bne.n	8004a24 <__libc_init_array+0x24>
 8004a10:	2600      	movs	r6, #0
 8004a12:	f000 fc5b 	bl	80052cc <_init>
 8004a16:	4d0a      	ldr	r5, [pc, #40]	; (8004a40 <__libc_init_array+0x40>)
 8004a18:	4c0a      	ldr	r4, [pc, #40]	; (8004a44 <__libc_init_array+0x44>)
 8004a1a:	1b64      	subs	r4, r4, r5
 8004a1c:	10a4      	asrs	r4, r4, #2
 8004a1e:	42a6      	cmp	r6, r4
 8004a20:	d105      	bne.n	8004a2e <__libc_init_array+0x2e>
 8004a22:	bd70      	pop	{r4, r5, r6, pc}
 8004a24:	00b3      	lsls	r3, r6, #2
 8004a26:	58eb      	ldr	r3, [r5, r3]
 8004a28:	4798      	blx	r3
 8004a2a:	3601      	adds	r6, #1
 8004a2c:	e7ee      	b.n	8004a0c <__libc_init_array+0xc>
 8004a2e:	00b3      	lsls	r3, r6, #2
 8004a30:	58eb      	ldr	r3, [r5, r3]
 8004a32:	4798      	blx	r3
 8004a34:	3601      	adds	r6, #1
 8004a36:	e7f2      	b.n	8004a1e <__libc_init_array+0x1e>
 8004a38:	08007c0c 	.word	0x08007c0c
 8004a3c:	08007c0c 	.word	0x08007c0c
 8004a40:	08007c0c 	.word	0x08007c0c
 8004a44:	08007c10 	.word	0x08007c10

08004a48 <memcpy>:
 8004a48:	2300      	movs	r3, #0
 8004a4a:	b510      	push	{r4, lr}
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d100      	bne.n	8004a52 <memcpy+0xa>
 8004a50:	bd10      	pop	{r4, pc}
 8004a52:	5ccc      	ldrb	r4, [r1, r3]
 8004a54:	54c4      	strb	r4, [r0, r3]
 8004a56:	3301      	adds	r3, #1
 8004a58:	e7f8      	b.n	8004a4c <memcpy+0x4>

08004a5a <memset>:
 8004a5a:	0003      	movs	r3, r0
 8004a5c:	1882      	adds	r2, r0, r2
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d100      	bne.n	8004a64 <memset+0xa>
 8004a62:	4770      	bx	lr
 8004a64:	7019      	strb	r1, [r3, #0]
 8004a66:	3301      	adds	r3, #1
 8004a68:	e7f9      	b.n	8004a5e <memset+0x4>
	...

08004a6c <sniprintf>:
 8004a6c:	b40c      	push	{r2, r3}
 8004a6e:	b530      	push	{r4, r5, lr}
 8004a70:	4b17      	ldr	r3, [pc, #92]	; (8004ad0 <sniprintf+0x64>)
 8004a72:	000c      	movs	r4, r1
 8004a74:	681d      	ldr	r5, [r3, #0]
 8004a76:	b09d      	sub	sp, #116	; 0x74
 8004a78:	2900      	cmp	r1, #0
 8004a7a:	da08      	bge.n	8004a8e <sniprintf+0x22>
 8004a7c:	238b      	movs	r3, #139	; 0x8b
 8004a7e:	2001      	movs	r0, #1
 8004a80:	602b      	str	r3, [r5, #0]
 8004a82:	4240      	negs	r0, r0
 8004a84:	b01d      	add	sp, #116	; 0x74
 8004a86:	bc30      	pop	{r4, r5}
 8004a88:	bc08      	pop	{r3}
 8004a8a:	b002      	add	sp, #8
 8004a8c:	4718      	bx	r3
 8004a8e:	2382      	movs	r3, #130	; 0x82
 8004a90:	466a      	mov	r2, sp
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	8293      	strh	r3, [r2, #20]
 8004a96:	2300      	movs	r3, #0
 8004a98:	9002      	str	r0, [sp, #8]
 8004a9a:	9006      	str	r0, [sp, #24]
 8004a9c:	4299      	cmp	r1, r3
 8004a9e:	d000      	beq.n	8004aa2 <sniprintf+0x36>
 8004aa0:	1e4b      	subs	r3, r1, #1
 8004aa2:	9304      	str	r3, [sp, #16]
 8004aa4:	9307      	str	r3, [sp, #28]
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	466a      	mov	r2, sp
 8004aaa:	425b      	negs	r3, r3
 8004aac:	82d3      	strh	r3, [r2, #22]
 8004aae:	0028      	movs	r0, r5
 8004ab0:	ab21      	add	r3, sp, #132	; 0x84
 8004ab2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004ab4:	a902      	add	r1, sp, #8
 8004ab6:	9301      	str	r3, [sp, #4]
 8004ab8:	f000 f86e 	bl	8004b98 <_svfiprintf_r>
 8004abc:	1c43      	adds	r3, r0, #1
 8004abe:	da01      	bge.n	8004ac4 <sniprintf+0x58>
 8004ac0:	238b      	movs	r3, #139	; 0x8b
 8004ac2:	602b      	str	r3, [r5, #0]
 8004ac4:	2c00      	cmp	r4, #0
 8004ac6:	d0dd      	beq.n	8004a84 <sniprintf+0x18>
 8004ac8:	2300      	movs	r3, #0
 8004aca:	9a02      	ldr	r2, [sp, #8]
 8004acc:	7013      	strb	r3, [r2, #0]
 8004ace:	e7d9      	b.n	8004a84 <sniprintf+0x18>
 8004ad0:	20000238 	.word	0x20000238

08004ad4 <__ssputs_r>:
 8004ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ad6:	688e      	ldr	r6, [r1, #8]
 8004ad8:	b085      	sub	sp, #20
 8004ada:	0007      	movs	r7, r0
 8004adc:	000c      	movs	r4, r1
 8004ade:	9203      	str	r2, [sp, #12]
 8004ae0:	9301      	str	r3, [sp, #4]
 8004ae2:	429e      	cmp	r6, r3
 8004ae4:	d83c      	bhi.n	8004b60 <__ssputs_r+0x8c>
 8004ae6:	2390      	movs	r3, #144	; 0x90
 8004ae8:	898a      	ldrh	r2, [r1, #12]
 8004aea:	00db      	lsls	r3, r3, #3
 8004aec:	421a      	tst	r2, r3
 8004aee:	d034      	beq.n	8004b5a <__ssputs_r+0x86>
 8004af0:	2503      	movs	r5, #3
 8004af2:	6909      	ldr	r1, [r1, #16]
 8004af4:	6823      	ldr	r3, [r4, #0]
 8004af6:	1a5b      	subs	r3, r3, r1
 8004af8:	9302      	str	r3, [sp, #8]
 8004afa:	6963      	ldr	r3, [r4, #20]
 8004afc:	9802      	ldr	r0, [sp, #8]
 8004afe:	435d      	muls	r5, r3
 8004b00:	0feb      	lsrs	r3, r5, #31
 8004b02:	195d      	adds	r5, r3, r5
 8004b04:	9b01      	ldr	r3, [sp, #4]
 8004b06:	106d      	asrs	r5, r5, #1
 8004b08:	3301      	adds	r3, #1
 8004b0a:	181b      	adds	r3, r3, r0
 8004b0c:	42ab      	cmp	r3, r5
 8004b0e:	d900      	bls.n	8004b12 <__ssputs_r+0x3e>
 8004b10:	001d      	movs	r5, r3
 8004b12:	0553      	lsls	r3, r2, #21
 8004b14:	d532      	bpl.n	8004b7c <__ssputs_r+0xa8>
 8004b16:	0029      	movs	r1, r5
 8004b18:	0038      	movs	r0, r7
 8004b1a:	f000 fb27 	bl	800516c <_malloc_r>
 8004b1e:	1e06      	subs	r6, r0, #0
 8004b20:	d109      	bne.n	8004b36 <__ssputs_r+0x62>
 8004b22:	230c      	movs	r3, #12
 8004b24:	603b      	str	r3, [r7, #0]
 8004b26:	2340      	movs	r3, #64	; 0x40
 8004b28:	2001      	movs	r0, #1
 8004b2a:	89a2      	ldrh	r2, [r4, #12]
 8004b2c:	4240      	negs	r0, r0
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	81a3      	strh	r3, [r4, #12]
 8004b32:	b005      	add	sp, #20
 8004b34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b36:	9a02      	ldr	r2, [sp, #8]
 8004b38:	6921      	ldr	r1, [r4, #16]
 8004b3a:	f7ff ff85 	bl	8004a48 <memcpy>
 8004b3e:	89a3      	ldrh	r3, [r4, #12]
 8004b40:	4a14      	ldr	r2, [pc, #80]	; (8004b94 <__ssputs_r+0xc0>)
 8004b42:	401a      	ands	r2, r3
 8004b44:	2380      	movs	r3, #128	; 0x80
 8004b46:	4313      	orrs	r3, r2
 8004b48:	81a3      	strh	r3, [r4, #12]
 8004b4a:	9b02      	ldr	r3, [sp, #8]
 8004b4c:	6126      	str	r6, [r4, #16]
 8004b4e:	18f6      	adds	r6, r6, r3
 8004b50:	6026      	str	r6, [r4, #0]
 8004b52:	6165      	str	r5, [r4, #20]
 8004b54:	9e01      	ldr	r6, [sp, #4]
 8004b56:	1aed      	subs	r5, r5, r3
 8004b58:	60a5      	str	r5, [r4, #8]
 8004b5a:	9b01      	ldr	r3, [sp, #4]
 8004b5c:	429e      	cmp	r6, r3
 8004b5e:	d900      	bls.n	8004b62 <__ssputs_r+0x8e>
 8004b60:	9e01      	ldr	r6, [sp, #4]
 8004b62:	0032      	movs	r2, r6
 8004b64:	9903      	ldr	r1, [sp, #12]
 8004b66:	6820      	ldr	r0, [r4, #0]
 8004b68:	f000 faa3 	bl	80050b2 <memmove>
 8004b6c:	68a3      	ldr	r3, [r4, #8]
 8004b6e:	2000      	movs	r0, #0
 8004b70:	1b9b      	subs	r3, r3, r6
 8004b72:	60a3      	str	r3, [r4, #8]
 8004b74:	6823      	ldr	r3, [r4, #0]
 8004b76:	199e      	adds	r6, r3, r6
 8004b78:	6026      	str	r6, [r4, #0]
 8004b7a:	e7da      	b.n	8004b32 <__ssputs_r+0x5e>
 8004b7c:	002a      	movs	r2, r5
 8004b7e:	0038      	movs	r0, r7
 8004b80:	f000 fb52 	bl	8005228 <_realloc_r>
 8004b84:	1e06      	subs	r6, r0, #0
 8004b86:	d1e0      	bne.n	8004b4a <__ssputs_r+0x76>
 8004b88:	0038      	movs	r0, r7
 8004b8a:	6921      	ldr	r1, [r4, #16]
 8004b8c:	f000 faa4 	bl	80050d8 <_free_r>
 8004b90:	e7c7      	b.n	8004b22 <__ssputs_r+0x4e>
 8004b92:	46c0      	nop			; (mov r8, r8)
 8004b94:	fffffb7f 	.word	0xfffffb7f

08004b98 <_svfiprintf_r>:
 8004b98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b9a:	b0a1      	sub	sp, #132	; 0x84
 8004b9c:	9003      	str	r0, [sp, #12]
 8004b9e:	001d      	movs	r5, r3
 8004ba0:	898b      	ldrh	r3, [r1, #12]
 8004ba2:	000f      	movs	r7, r1
 8004ba4:	0016      	movs	r6, r2
 8004ba6:	061b      	lsls	r3, r3, #24
 8004ba8:	d511      	bpl.n	8004bce <_svfiprintf_r+0x36>
 8004baa:	690b      	ldr	r3, [r1, #16]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d10e      	bne.n	8004bce <_svfiprintf_r+0x36>
 8004bb0:	2140      	movs	r1, #64	; 0x40
 8004bb2:	f000 fadb 	bl	800516c <_malloc_r>
 8004bb6:	6038      	str	r0, [r7, #0]
 8004bb8:	6138      	str	r0, [r7, #16]
 8004bba:	2800      	cmp	r0, #0
 8004bbc:	d105      	bne.n	8004bca <_svfiprintf_r+0x32>
 8004bbe:	230c      	movs	r3, #12
 8004bc0:	9a03      	ldr	r2, [sp, #12]
 8004bc2:	3801      	subs	r0, #1
 8004bc4:	6013      	str	r3, [r2, #0]
 8004bc6:	b021      	add	sp, #132	; 0x84
 8004bc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004bca:	2340      	movs	r3, #64	; 0x40
 8004bcc:	617b      	str	r3, [r7, #20]
 8004bce:	2300      	movs	r3, #0
 8004bd0:	ac08      	add	r4, sp, #32
 8004bd2:	6163      	str	r3, [r4, #20]
 8004bd4:	3320      	adds	r3, #32
 8004bd6:	7663      	strb	r3, [r4, #25]
 8004bd8:	3310      	adds	r3, #16
 8004bda:	76a3      	strb	r3, [r4, #26]
 8004bdc:	9507      	str	r5, [sp, #28]
 8004bde:	0035      	movs	r5, r6
 8004be0:	782b      	ldrb	r3, [r5, #0]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d001      	beq.n	8004bea <_svfiprintf_r+0x52>
 8004be6:	2b25      	cmp	r3, #37	; 0x25
 8004be8:	d147      	bne.n	8004c7a <_svfiprintf_r+0xe2>
 8004bea:	1bab      	subs	r3, r5, r6
 8004bec:	9305      	str	r3, [sp, #20]
 8004bee:	42b5      	cmp	r5, r6
 8004bf0:	d00c      	beq.n	8004c0c <_svfiprintf_r+0x74>
 8004bf2:	0032      	movs	r2, r6
 8004bf4:	0039      	movs	r1, r7
 8004bf6:	9803      	ldr	r0, [sp, #12]
 8004bf8:	f7ff ff6c 	bl	8004ad4 <__ssputs_r>
 8004bfc:	1c43      	adds	r3, r0, #1
 8004bfe:	d100      	bne.n	8004c02 <_svfiprintf_r+0x6a>
 8004c00:	e0ae      	b.n	8004d60 <_svfiprintf_r+0x1c8>
 8004c02:	6962      	ldr	r2, [r4, #20]
 8004c04:	9b05      	ldr	r3, [sp, #20]
 8004c06:	4694      	mov	ip, r2
 8004c08:	4463      	add	r3, ip
 8004c0a:	6163      	str	r3, [r4, #20]
 8004c0c:	782b      	ldrb	r3, [r5, #0]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d100      	bne.n	8004c14 <_svfiprintf_r+0x7c>
 8004c12:	e0a5      	b.n	8004d60 <_svfiprintf_r+0x1c8>
 8004c14:	2201      	movs	r2, #1
 8004c16:	2300      	movs	r3, #0
 8004c18:	4252      	negs	r2, r2
 8004c1a:	6062      	str	r2, [r4, #4]
 8004c1c:	a904      	add	r1, sp, #16
 8004c1e:	3254      	adds	r2, #84	; 0x54
 8004c20:	1852      	adds	r2, r2, r1
 8004c22:	1c6e      	adds	r6, r5, #1
 8004c24:	6023      	str	r3, [r4, #0]
 8004c26:	60e3      	str	r3, [r4, #12]
 8004c28:	60a3      	str	r3, [r4, #8]
 8004c2a:	7013      	strb	r3, [r2, #0]
 8004c2c:	65a3      	str	r3, [r4, #88]	; 0x58
 8004c2e:	2205      	movs	r2, #5
 8004c30:	7831      	ldrb	r1, [r6, #0]
 8004c32:	4854      	ldr	r0, [pc, #336]	; (8004d84 <_svfiprintf_r+0x1ec>)
 8004c34:	f000 fa32 	bl	800509c <memchr>
 8004c38:	1c75      	adds	r5, r6, #1
 8004c3a:	2800      	cmp	r0, #0
 8004c3c:	d11f      	bne.n	8004c7e <_svfiprintf_r+0xe6>
 8004c3e:	6822      	ldr	r2, [r4, #0]
 8004c40:	06d3      	lsls	r3, r2, #27
 8004c42:	d504      	bpl.n	8004c4e <_svfiprintf_r+0xb6>
 8004c44:	2353      	movs	r3, #83	; 0x53
 8004c46:	a904      	add	r1, sp, #16
 8004c48:	185b      	adds	r3, r3, r1
 8004c4a:	2120      	movs	r1, #32
 8004c4c:	7019      	strb	r1, [r3, #0]
 8004c4e:	0713      	lsls	r3, r2, #28
 8004c50:	d504      	bpl.n	8004c5c <_svfiprintf_r+0xc4>
 8004c52:	2353      	movs	r3, #83	; 0x53
 8004c54:	a904      	add	r1, sp, #16
 8004c56:	185b      	adds	r3, r3, r1
 8004c58:	212b      	movs	r1, #43	; 0x2b
 8004c5a:	7019      	strb	r1, [r3, #0]
 8004c5c:	7833      	ldrb	r3, [r6, #0]
 8004c5e:	2b2a      	cmp	r3, #42	; 0x2a
 8004c60:	d016      	beq.n	8004c90 <_svfiprintf_r+0xf8>
 8004c62:	0035      	movs	r5, r6
 8004c64:	2100      	movs	r1, #0
 8004c66:	200a      	movs	r0, #10
 8004c68:	68e3      	ldr	r3, [r4, #12]
 8004c6a:	782a      	ldrb	r2, [r5, #0]
 8004c6c:	1c6e      	adds	r6, r5, #1
 8004c6e:	3a30      	subs	r2, #48	; 0x30
 8004c70:	2a09      	cmp	r2, #9
 8004c72:	d94e      	bls.n	8004d12 <_svfiprintf_r+0x17a>
 8004c74:	2900      	cmp	r1, #0
 8004c76:	d111      	bne.n	8004c9c <_svfiprintf_r+0x104>
 8004c78:	e017      	b.n	8004caa <_svfiprintf_r+0x112>
 8004c7a:	3501      	adds	r5, #1
 8004c7c:	e7b0      	b.n	8004be0 <_svfiprintf_r+0x48>
 8004c7e:	4b41      	ldr	r3, [pc, #260]	; (8004d84 <_svfiprintf_r+0x1ec>)
 8004c80:	6822      	ldr	r2, [r4, #0]
 8004c82:	1ac0      	subs	r0, r0, r3
 8004c84:	2301      	movs	r3, #1
 8004c86:	4083      	lsls	r3, r0
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	002e      	movs	r6, r5
 8004c8c:	6023      	str	r3, [r4, #0]
 8004c8e:	e7ce      	b.n	8004c2e <_svfiprintf_r+0x96>
 8004c90:	9b07      	ldr	r3, [sp, #28]
 8004c92:	1d19      	adds	r1, r3, #4
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	9107      	str	r1, [sp, #28]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	db01      	blt.n	8004ca0 <_svfiprintf_r+0x108>
 8004c9c:	930b      	str	r3, [sp, #44]	; 0x2c
 8004c9e:	e004      	b.n	8004caa <_svfiprintf_r+0x112>
 8004ca0:	425b      	negs	r3, r3
 8004ca2:	60e3      	str	r3, [r4, #12]
 8004ca4:	2302      	movs	r3, #2
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	6023      	str	r3, [r4, #0]
 8004caa:	782b      	ldrb	r3, [r5, #0]
 8004cac:	2b2e      	cmp	r3, #46	; 0x2e
 8004cae:	d10a      	bne.n	8004cc6 <_svfiprintf_r+0x12e>
 8004cb0:	786b      	ldrb	r3, [r5, #1]
 8004cb2:	2b2a      	cmp	r3, #42	; 0x2a
 8004cb4:	d135      	bne.n	8004d22 <_svfiprintf_r+0x18a>
 8004cb6:	9b07      	ldr	r3, [sp, #28]
 8004cb8:	3502      	adds	r5, #2
 8004cba:	1d1a      	adds	r2, r3, #4
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	9207      	str	r2, [sp, #28]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	db2b      	blt.n	8004d1c <_svfiprintf_r+0x184>
 8004cc4:	9309      	str	r3, [sp, #36]	; 0x24
 8004cc6:	4e30      	ldr	r6, [pc, #192]	; (8004d88 <_svfiprintf_r+0x1f0>)
 8004cc8:	2203      	movs	r2, #3
 8004cca:	0030      	movs	r0, r6
 8004ccc:	7829      	ldrb	r1, [r5, #0]
 8004cce:	f000 f9e5 	bl	800509c <memchr>
 8004cd2:	2800      	cmp	r0, #0
 8004cd4:	d006      	beq.n	8004ce4 <_svfiprintf_r+0x14c>
 8004cd6:	2340      	movs	r3, #64	; 0x40
 8004cd8:	1b80      	subs	r0, r0, r6
 8004cda:	4083      	lsls	r3, r0
 8004cdc:	6822      	ldr	r2, [r4, #0]
 8004cde:	3501      	adds	r5, #1
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	6023      	str	r3, [r4, #0]
 8004ce4:	7829      	ldrb	r1, [r5, #0]
 8004ce6:	2206      	movs	r2, #6
 8004ce8:	4828      	ldr	r0, [pc, #160]	; (8004d8c <_svfiprintf_r+0x1f4>)
 8004cea:	1c6e      	adds	r6, r5, #1
 8004cec:	7621      	strb	r1, [r4, #24]
 8004cee:	f000 f9d5 	bl	800509c <memchr>
 8004cf2:	2800      	cmp	r0, #0
 8004cf4:	d03c      	beq.n	8004d70 <_svfiprintf_r+0x1d8>
 8004cf6:	4b26      	ldr	r3, [pc, #152]	; (8004d90 <_svfiprintf_r+0x1f8>)
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d125      	bne.n	8004d48 <_svfiprintf_r+0x1b0>
 8004cfc:	2207      	movs	r2, #7
 8004cfe:	9b07      	ldr	r3, [sp, #28]
 8004d00:	3307      	adds	r3, #7
 8004d02:	4393      	bics	r3, r2
 8004d04:	3308      	adds	r3, #8
 8004d06:	9307      	str	r3, [sp, #28]
 8004d08:	6963      	ldr	r3, [r4, #20]
 8004d0a:	9a04      	ldr	r2, [sp, #16]
 8004d0c:	189b      	adds	r3, r3, r2
 8004d0e:	6163      	str	r3, [r4, #20]
 8004d10:	e765      	b.n	8004bde <_svfiprintf_r+0x46>
 8004d12:	4343      	muls	r3, r0
 8004d14:	0035      	movs	r5, r6
 8004d16:	2101      	movs	r1, #1
 8004d18:	189b      	adds	r3, r3, r2
 8004d1a:	e7a6      	b.n	8004c6a <_svfiprintf_r+0xd2>
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	425b      	negs	r3, r3
 8004d20:	e7d0      	b.n	8004cc4 <_svfiprintf_r+0x12c>
 8004d22:	2300      	movs	r3, #0
 8004d24:	200a      	movs	r0, #10
 8004d26:	001a      	movs	r2, r3
 8004d28:	3501      	adds	r5, #1
 8004d2a:	6063      	str	r3, [r4, #4]
 8004d2c:	7829      	ldrb	r1, [r5, #0]
 8004d2e:	1c6e      	adds	r6, r5, #1
 8004d30:	3930      	subs	r1, #48	; 0x30
 8004d32:	2909      	cmp	r1, #9
 8004d34:	d903      	bls.n	8004d3e <_svfiprintf_r+0x1a6>
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d0c5      	beq.n	8004cc6 <_svfiprintf_r+0x12e>
 8004d3a:	9209      	str	r2, [sp, #36]	; 0x24
 8004d3c:	e7c3      	b.n	8004cc6 <_svfiprintf_r+0x12e>
 8004d3e:	4342      	muls	r2, r0
 8004d40:	0035      	movs	r5, r6
 8004d42:	2301      	movs	r3, #1
 8004d44:	1852      	adds	r2, r2, r1
 8004d46:	e7f1      	b.n	8004d2c <_svfiprintf_r+0x194>
 8004d48:	ab07      	add	r3, sp, #28
 8004d4a:	9300      	str	r3, [sp, #0]
 8004d4c:	003a      	movs	r2, r7
 8004d4e:	0021      	movs	r1, r4
 8004d50:	4b10      	ldr	r3, [pc, #64]	; (8004d94 <_svfiprintf_r+0x1fc>)
 8004d52:	9803      	ldr	r0, [sp, #12]
 8004d54:	e000      	b.n	8004d58 <_svfiprintf_r+0x1c0>
 8004d56:	bf00      	nop
 8004d58:	9004      	str	r0, [sp, #16]
 8004d5a:	9b04      	ldr	r3, [sp, #16]
 8004d5c:	3301      	adds	r3, #1
 8004d5e:	d1d3      	bne.n	8004d08 <_svfiprintf_r+0x170>
 8004d60:	89bb      	ldrh	r3, [r7, #12]
 8004d62:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004d64:	065b      	lsls	r3, r3, #25
 8004d66:	d400      	bmi.n	8004d6a <_svfiprintf_r+0x1d2>
 8004d68:	e72d      	b.n	8004bc6 <_svfiprintf_r+0x2e>
 8004d6a:	2001      	movs	r0, #1
 8004d6c:	4240      	negs	r0, r0
 8004d6e:	e72a      	b.n	8004bc6 <_svfiprintf_r+0x2e>
 8004d70:	ab07      	add	r3, sp, #28
 8004d72:	9300      	str	r3, [sp, #0]
 8004d74:	003a      	movs	r2, r7
 8004d76:	0021      	movs	r1, r4
 8004d78:	4b06      	ldr	r3, [pc, #24]	; (8004d94 <_svfiprintf_r+0x1fc>)
 8004d7a:	9803      	ldr	r0, [sp, #12]
 8004d7c:	f000 f87c 	bl	8004e78 <_printf_i>
 8004d80:	e7ea      	b.n	8004d58 <_svfiprintf_r+0x1c0>
 8004d82:	46c0      	nop			; (mov r8, r8)
 8004d84:	08007bd8 	.word	0x08007bd8
 8004d88:	08007bde 	.word	0x08007bde
 8004d8c:	08007be2 	.word	0x08007be2
 8004d90:	00000000 	.word	0x00000000
 8004d94:	08004ad5 	.word	0x08004ad5

08004d98 <_printf_common>:
 8004d98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004d9a:	0015      	movs	r5, r2
 8004d9c:	9301      	str	r3, [sp, #4]
 8004d9e:	688a      	ldr	r2, [r1, #8]
 8004da0:	690b      	ldr	r3, [r1, #16]
 8004da2:	000c      	movs	r4, r1
 8004da4:	9000      	str	r0, [sp, #0]
 8004da6:	4293      	cmp	r3, r2
 8004da8:	da00      	bge.n	8004dac <_printf_common+0x14>
 8004daa:	0013      	movs	r3, r2
 8004dac:	0022      	movs	r2, r4
 8004dae:	602b      	str	r3, [r5, #0]
 8004db0:	3243      	adds	r2, #67	; 0x43
 8004db2:	7812      	ldrb	r2, [r2, #0]
 8004db4:	2a00      	cmp	r2, #0
 8004db6:	d001      	beq.n	8004dbc <_printf_common+0x24>
 8004db8:	3301      	adds	r3, #1
 8004dba:	602b      	str	r3, [r5, #0]
 8004dbc:	6823      	ldr	r3, [r4, #0]
 8004dbe:	069b      	lsls	r3, r3, #26
 8004dc0:	d502      	bpl.n	8004dc8 <_printf_common+0x30>
 8004dc2:	682b      	ldr	r3, [r5, #0]
 8004dc4:	3302      	adds	r3, #2
 8004dc6:	602b      	str	r3, [r5, #0]
 8004dc8:	6822      	ldr	r2, [r4, #0]
 8004dca:	2306      	movs	r3, #6
 8004dcc:	0017      	movs	r7, r2
 8004dce:	401f      	ands	r7, r3
 8004dd0:	421a      	tst	r2, r3
 8004dd2:	d027      	beq.n	8004e24 <_printf_common+0x8c>
 8004dd4:	0023      	movs	r3, r4
 8004dd6:	3343      	adds	r3, #67	; 0x43
 8004dd8:	781b      	ldrb	r3, [r3, #0]
 8004dda:	1e5a      	subs	r2, r3, #1
 8004ddc:	4193      	sbcs	r3, r2
 8004dde:	6822      	ldr	r2, [r4, #0]
 8004de0:	0692      	lsls	r2, r2, #26
 8004de2:	d430      	bmi.n	8004e46 <_printf_common+0xae>
 8004de4:	0022      	movs	r2, r4
 8004de6:	9901      	ldr	r1, [sp, #4]
 8004de8:	9800      	ldr	r0, [sp, #0]
 8004dea:	9e08      	ldr	r6, [sp, #32]
 8004dec:	3243      	adds	r2, #67	; 0x43
 8004dee:	47b0      	blx	r6
 8004df0:	1c43      	adds	r3, r0, #1
 8004df2:	d025      	beq.n	8004e40 <_printf_common+0xa8>
 8004df4:	2306      	movs	r3, #6
 8004df6:	6820      	ldr	r0, [r4, #0]
 8004df8:	682a      	ldr	r2, [r5, #0]
 8004dfa:	68e1      	ldr	r1, [r4, #12]
 8004dfc:	2500      	movs	r5, #0
 8004dfe:	4003      	ands	r3, r0
 8004e00:	2b04      	cmp	r3, #4
 8004e02:	d103      	bne.n	8004e0c <_printf_common+0x74>
 8004e04:	1a8d      	subs	r5, r1, r2
 8004e06:	43eb      	mvns	r3, r5
 8004e08:	17db      	asrs	r3, r3, #31
 8004e0a:	401d      	ands	r5, r3
 8004e0c:	68a3      	ldr	r3, [r4, #8]
 8004e0e:	6922      	ldr	r2, [r4, #16]
 8004e10:	4293      	cmp	r3, r2
 8004e12:	dd01      	ble.n	8004e18 <_printf_common+0x80>
 8004e14:	1a9b      	subs	r3, r3, r2
 8004e16:	18ed      	adds	r5, r5, r3
 8004e18:	2700      	movs	r7, #0
 8004e1a:	42bd      	cmp	r5, r7
 8004e1c:	d120      	bne.n	8004e60 <_printf_common+0xc8>
 8004e1e:	2000      	movs	r0, #0
 8004e20:	e010      	b.n	8004e44 <_printf_common+0xac>
 8004e22:	3701      	adds	r7, #1
 8004e24:	68e3      	ldr	r3, [r4, #12]
 8004e26:	682a      	ldr	r2, [r5, #0]
 8004e28:	1a9b      	subs	r3, r3, r2
 8004e2a:	42bb      	cmp	r3, r7
 8004e2c:	ddd2      	ble.n	8004dd4 <_printf_common+0x3c>
 8004e2e:	0022      	movs	r2, r4
 8004e30:	2301      	movs	r3, #1
 8004e32:	9901      	ldr	r1, [sp, #4]
 8004e34:	9800      	ldr	r0, [sp, #0]
 8004e36:	9e08      	ldr	r6, [sp, #32]
 8004e38:	3219      	adds	r2, #25
 8004e3a:	47b0      	blx	r6
 8004e3c:	1c43      	adds	r3, r0, #1
 8004e3e:	d1f0      	bne.n	8004e22 <_printf_common+0x8a>
 8004e40:	2001      	movs	r0, #1
 8004e42:	4240      	negs	r0, r0
 8004e44:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004e46:	2030      	movs	r0, #48	; 0x30
 8004e48:	18e1      	adds	r1, r4, r3
 8004e4a:	3143      	adds	r1, #67	; 0x43
 8004e4c:	7008      	strb	r0, [r1, #0]
 8004e4e:	0021      	movs	r1, r4
 8004e50:	1c5a      	adds	r2, r3, #1
 8004e52:	3145      	adds	r1, #69	; 0x45
 8004e54:	7809      	ldrb	r1, [r1, #0]
 8004e56:	18a2      	adds	r2, r4, r2
 8004e58:	3243      	adds	r2, #67	; 0x43
 8004e5a:	3302      	adds	r3, #2
 8004e5c:	7011      	strb	r1, [r2, #0]
 8004e5e:	e7c1      	b.n	8004de4 <_printf_common+0x4c>
 8004e60:	0022      	movs	r2, r4
 8004e62:	2301      	movs	r3, #1
 8004e64:	9901      	ldr	r1, [sp, #4]
 8004e66:	9800      	ldr	r0, [sp, #0]
 8004e68:	9e08      	ldr	r6, [sp, #32]
 8004e6a:	321a      	adds	r2, #26
 8004e6c:	47b0      	blx	r6
 8004e6e:	1c43      	adds	r3, r0, #1
 8004e70:	d0e6      	beq.n	8004e40 <_printf_common+0xa8>
 8004e72:	3701      	adds	r7, #1
 8004e74:	e7d1      	b.n	8004e1a <_printf_common+0x82>
	...

08004e78 <_printf_i>:
 8004e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e7a:	b08b      	sub	sp, #44	; 0x2c
 8004e7c:	9206      	str	r2, [sp, #24]
 8004e7e:	000a      	movs	r2, r1
 8004e80:	3243      	adds	r2, #67	; 0x43
 8004e82:	9307      	str	r3, [sp, #28]
 8004e84:	9005      	str	r0, [sp, #20]
 8004e86:	9204      	str	r2, [sp, #16]
 8004e88:	7e0a      	ldrb	r2, [r1, #24]
 8004e8a:	000c      	movs	r4, r1
 8004e8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004e8e:	2a78      	cmp	r2, #120	; 0x78
 8004e90:	d806      	bhi.n	8004ea0 <_printf_i+0x28>
 8004e92:	2a62      	cmp	r2, #98	; 0x62
 8004e94:	d808      	bhi.n	8004ea8 <_printf_i+0x30>
 8004e96:	2a00      	cmp	r2, #0
 8004e98:	d100      	bne.n	8004e9c <_printf_i+0x24>
 8004e9a:	e0c0      	b.n	800501e <_printf_i+0x1a6>
 8004e9c:	2a58      	cmp	r2, #88	; 0x58
 8004e9e:	d052      	beq.n	8004f46 <_printf_i+0xce>
 8004ea0:	0026      	movs	r6, r4
 8004ea2:	3642      	adds	r6, #66	; 0x42
 8004ea4:	7032      	strb	r2, [r6, #0]
 8004ea6:	e022      	b.n	8004eee <_printf_i+0x76>
 8004ea8:	0010      	movs	r0, r2
 8004eaa:	3863      	subs	r0, #99	; 0x63
 8004eac:	2815      	cmp	r0, #21
 8004eae:	d8f7      	bhi.n	8004ea0 <_printf_i+0x28>
 8004eb0:	f7fb f92a 	bl	8000108 <__gnu_thumb1_case_shi>
 8004eb4:	001f0016 	.word	0x001f0016
 8004eb8:	fff6fff6 	.word	0xfff6fff6
 8004ebc:	fff6fff6 	.word	0xfff6fff6
 8004ec0:	fff6001f 	.word	0xfff6001f
 8004ec4:	fff6fff6 	.word	0xfff6fff6
 8004ec8:	00a8fff6 	.word	0x00a8fff6
 8004ecc:	009a0036 	.word	0x009a0036
 8004ed0:	fff6fff6 	.word	0xfff6fff6
 8004ed4:	fff600b9 	.word	0xfff600b9
 8004ed8:	fff60036 	.word	0xfff60036
 8004edc:	009efff6 	.word	0x009efff6
 8004ee0:	0026      	movs	r6, r4
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	3642      	adds	r6, #66	; 0x42
 8004ee6:	1d11      	adds	r1, r2, #4
 8004ee8:	6019      	str	r1, [r3, #0]
 8004eea:	6813      	ldr	r3, [r2, #0]
 8004eec:	7033      	strb	r3, [r6, #0]
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e0a7      	b.n	8005042 <_printf_i+0x1ca>
 8004ef2:	6808      	ldr	r0, [r1, #0]
 8004ef4:	6819      	ldr	r1, [r3, #0]
 8004ef6:	1d0a      	adds	r2, r1, #4
 8004ef8:	0605      	lsls	r5, r0, #24
 8004efa:	d50b      	bpl.n	8004f14 <_printf_i+0x9c>
 8004efc:	680d      	ldr	r5, [r1, #0]
 8004efe:	601a      	str	r2, [r3, #0]
 8004f00:	2d00      	cmp	r5, #0
 8004f02:	da03      	bge.n	8004f0c <_printf_i+0x94>
 8004f04:	232d      	movs	r3, #45	; 0x2d
 8004f06:	9a04      	ldr	r2, [sp, #16]
 8004f08:	426d      	negs	r5, r5
 8004f0a:	7013      	strb	r3, [r2, #0]
 8004f0c:	4b61      	ldr	r3, [pc, #388]	; (8005094 <_printf_i+0x21c>)
 8004f0e:	270a      	movs	r7, #10
 8004f10:	9303      	str	r3, [sp, #12]
 8004f12:	e032      	b.n	8004f7a <_printf_i+0x102>
 8004f14:	680d      	ldr	r5, [r1, #0]
 8004f16:	601a      	str	r2, [r3, #0]
 8004f18:	0641      	lsls	r1, r0, #25
 8004f1a:	d5f1      	bpl.n	8004f00 <_printf_i+0x88>
 8004f1c:	b22d      	sxth	r5, r5
 8004f1e:	e7ef      	b.n	8004f00 <_printf_i+0x88>
 8004f20:	680d      	ldr	r5, [r1, #0]
 8004f22:	6819      	ldr	r1, [r3, #0]
 8004f24:	1d08      	adds	r0, r1, #4
 8004f26:	6018      	str	r0, [r3, #0]
 8004f28:	062e      	lsls	r6, r5, #24
 8004f2a:	d501      	bpl.n	8004f30 <_printf_i+0xb8>
 8004f2c:	680d      	ldr	r5, [r1, #0]
 8004f2e:	e003      	b.n	8004f38 <_printf_i+0xc0>
 8004f30:	066d      	lsls	r5, r5, #25
 8004f32:	d5fb      	bpl.n	8004f2c <_printf_i+0xb4>
 8004f34:	680d      	ldr	r5, [r1, #0]
 8004f36:	b2ad      	uxth	r5, r5
 8004f38:	4b56      	ldr	r3, [pc, #344]	; (8005094 <_printf_i+0x21c>)
 8004f3a:	270a      	movs	r7, #10
 8004f3c:	9303      	str	r3, [sp, #12]
 8004f3e:	2a6f      	cmp	r2, #111	; 0x6f
 8004f40:	d117      	bne.n	8004f72 <_printf_i+0xfa>
 8004f42:	2708      	movs	r7, #8
 8004f44:	e015      	b.n	8004f72 <_printf_i+0xfa>
 8004f46:	3145      	adds	r1, #69	; 0x45
 8004f48:	700a      	strb	r2, [r1, #0]
 8004f4a:	4a52      	ldr	r2, [pc, #328]	; (8005094 <_printf_i+0x21c>)
 8004f4c:	9203      	str	r2, [sp, #12]
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	6821      	ldr	r1, [r4, #0]
 8004f52:	ca20      	ldmia	r2!, {r5}
 8004f54:	601a      	str	r2, [r3, #0]
 8004f56:	0608      	lsls	r0, r1, #24
 8004f58:	d550      	bpl.n	8004ffc <_printf_i+0x184>
 8004f5a:	07cb      	lsls	r3, r1, #31
 8004f5c:	d502      	bpl.n	8004f64 <_printf_i+0xec>
 8004f5e:	2320      	movs	r3, #32
 8004f60:	4319      	orrs	r1, r3
 8004f62:	6021      	str	r1, [r4, #0]
 8004f64:	2710      	movs	r7, #16
 8004f66:	2d00      	cmp	r5, #0
 8004f68:	d103      	bne.n	8004f72 <_printf_i+0xfa>
 8004f6a:	2320      	movs	r3, #32
 8004f6c:	6822      	ldr	r2, [r4, #0]
 8004f6e:	439a      	bics	r2, r3
 8004f70:	6022      	str	r2, [r4, #0]
 8004f72:	0023      	movs	r3, r4
 8004f74:	2200      	movs	r2, #0
 8004f76:	3343      	adds	r3, #67	; 0x43
 8004f78:	701a      	strb	r2, [r3, #0]
 8004f7a:	6863      	ldr	r3, [r4, #4]
 8004f7c:	60a3      	str	r3, [r4, #8]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	db03      	blt.n	8004f8a <_printf_i+0x112>
 8004f82:	2204      	movs	r2, #4
 8004f84:	6821      	ldr	r1, [r4, #0]
 8004f86:	4391      	bics	r1, r2
 8004f88:	6021      	str	r1, [r4, #0]
 8004f8a:	2d00      	cmp	r5, #0
 8004f8c:	d102      	bne.n	8004f94 <_printf_i+0x11c>
 8004f8e:	9e04      	ldr	r6, [sp, #16]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d00c      	beq.n	8004fae <_printf_i+0x136>
 8004f94:	9e04      	ldr	r6, [sp, #16]
 8004f96:	0028      	movs	r0, r5
 8004f98:	0039      	movs	r1, r7
 8004f9a:	f7fb f945 	bl	8000228 <__aeabi_uidivmod>
 8004f9e:	9b03      	ldr	r3, [sp, #12]
 8004fa0:	3e01      	subs	r6, #1
 8004fa2:	5c5b      	ldrb	r3, [r3, r1]
 8004fa4:	7033      	strb	r3, [r6, #0]
 8004fa6:	002b      	movs	r3, r5
 8004fa8:	0005      	movs	r5, r0
 8004faa:	429f      	cmp	r7, r3
 8004fac:	d9f3      	bls.n	8004f96 <_printf_i+0x11e>
 8004fae:	2f08      	cmp	r7, #8
 8004fb0:	d109      	bne.n	8004fc6 <_printf_i+0x14e>
 8004fb2:	6823      	ldr	r3, [r4, #0]
 8004fb4:	07db      	lsls	r3, r3, #31
 8004fb6:	d506      	bpl.n	8004fc6 <_printf_i+0x14e>
 8004fb8:	6863      	ldr	r3, [r4, #4]
 8004fba:	6922      	ldr	r2, [r4, #16]
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	dc02      	bgt.n	8004fc6 <_printf_i+0x14e>
 8004fc0:	2330      	movs	r3, #48	; 0x30
 8004fc2:	3e01      	subs	r6, #1
 8004fc4:	7033      	strb	r3, [r6, #0]
 8004fc6:	9b04      	ldr	r3, [sp, #16]
 8004fc8:	1b9b      	subs	r3, r3, r6
 8004fca:	6123      	str	r3, [r4, #16]
 8004fcc:	9b07      	ldr	r3, [sp, #28]
 8004fce:	0021      	movs	r1, r4
 8004fd0:	9300      	str	r3, [sp, #0]
 8004fd2:	9805      	ldr	r0, [sp, #20]
 8004fd4:	9b06      	ldr	r3, [sp, #24]
 8004fd6:	aa09      	add	r2, sp, #36	; 0x24
 8004fd8:	f7ff fede 	bl	8004d98 <_printf_common>
 8004fdc:	1c43      	adds	r3, r0, #1
 8004fde:	d135      	bne.n	800504c <_printf_i+0x1d4>
 8004fe0:	2001      	movs	r0, #1
 8004fe2:	4240      	negs	r0, r0
 8004fe4:	b00b      	add	sp, #44	; 0x2c
 8004fe6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004fe8:	2220      	movs	r2, #32
 8004fea:	6809      	ldr	r1, [r1, #0]
 8004fec:	430a      	orrs	r2, r1
 8004fee:	6022      	str	r2, [r4, #0]
 8004ff0:	0022      	movs	r2, r4
 8004ff2:	2178      	movs	r1, #120	; 0x78
 8004ff4:	3245      	adds	r2, #69	; 0x45
 8004ff6:	7011      	strb	r1, [r2, #0]
 8004ff8:	4a27      	ldr	r2, [pc, #156]	; (8005098 <_printf_i+0x220>)
 8004ffa:	e7a7      	b.n	8004f4c <_printf_i+0xd4>
 8004ffc:	0648      	lsls	r0, r1, #25
 8004ffe:	d5ac      	bpl.n	8004f5a <_printf_i+0xe2>
 8005000:	b2ad      	uxth	r5, r5
 8005002:	e7aa      	b.n	8004f5a <_printf_i+0xe2>
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	680d      	ldr	r5, [r1, #0]
 8005008:	1d10      	adds	r0, r2, #4
 800500a:	6949      	ldr	r1, [r1, #20]
 800500c:	6018      	str	r0, [r3, #0]
 800500e:	6813      	ldr	r3, [r2, #0]
 8005010:	062e      	lsls	r6, r5, #24
 8005012:	d501      	bpl.n	8005018 <_printf_i+0x1a0>
 8005014:	6019      	str	r1, [r3, #0]
 8005016:	e002      	b.n	800501e <_printf_i+0x1a6>
 8005018:	066d      	lsls	r5, r5, #25
 800501a:	d5fb      	bpl.n	8005014 <_printf_i+0x19c>
 800501c:	8019      	strh	r1, [r3, #0]
 800501e:	2300      	movs	r3, #0
 8005020:	9e04      	ldr	r6, [sp, #16]
 8005022:	6123      	str	r3, [r4, #16]
 8005024:	e7d2      	b.n	8004fcc <_printf_i+0x154>
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	1d11      	adds	r1, r2, #4
 800502a:	6019      	str	r1, [r3, #0]
 800502c:	6816      	ldr	r6, [r2, #0]
 800502e:	2100      	movs	r1, #0
 8005030:	0030      	movs	r0, r6
 8005032:	6862      	ldr	r2, [r4, #4]
 8005034:	f000 f832 	bl	800509c <memchr>
 8005038:	2800      	cmp	r0, #0
 800503a:	d001      	beq.n	8005040 <_printf_i+0x1c8>
 800503c:	1b80      	subs	r0, r0, r6
 800503e:	6060      	str	r0, [r4, #4]
 8005040:	6863      	ldr	r3, [r4, #4]
 8005042:	6123      	str	r3, [r4, #16]
 8005044:	2300      	movs	r3, #0
 8005046:	9a04      	ldr	r2, [sp, #16]
 8005048:	7013      	strb	r3, [r2, #0]
 800504a:	e7bf      	b.n	8004fcc <_printf_i+0x154>
 800504c:	6923      	ldr	r3, [r4, #16]
 800504e:	0032      	movs	r2, r6
 8005050:	9906      	ldr	r1, [sp, #24]
 8005052:	9805      	ldr	r0, [sp, #20]
 8005054:	9d07      	ldr	r5, [sp, #28]
 8005056:	47a8      	blx	r5
 8005058:	1c43      	adds	r3, r0, #1
 800505a:	d0c1      	beq.n	8004fe0 <_printf_i+0x168>
 800505c:	6823      	ldr	r3, [r4, #0]
 800505e:	079b      	lsls	r3, r3, #30
 8005060:	d415      	bmi.n	800508e <_printf_i+0x216>
 8005062:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005064:	68e0      	ldr	r0, [r4, #12]
 8005066:	4298      	cmp	r0, r3
 8005068:	dabc      	bge.n	8004fe4 <_printf_i+0x16c>
 800506a:	0018      	movs	r0, r3
 800506c:	e7ba      	b.n	8004fe4 <_printf_i+0x16c>
 800506e:	0022      	movs	r2, r4
 8005070:	2301      	movs	r3, #1
 8005072:	9906      	ldr	r1, [sp, #24]
 8005074:	9805      	ldr	r0, [sp, #20]
 8005076:	9e07      	ldr	r6, [sp, #28]
 8005078:	3219      	adds	r2, #25
 800507a:	47b0      	blx	r6
 800507c:	1c43      	adds	r3, r0, #1
 800507e:	d0af      	beq.n	8004fe0 <_printf_i+0x168>
 8005080:	3501      	adds	r5, #1
 8005082:	68e3      	ldr	r3, [r4, #12]
 8005084:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005086:	1a9b      	subs	r3, r3, r2
 8005088:	42ab      	cmp	r3, r5
 800508a:	dcf0      	bgt.n	800506e <_printf_i+0x1f6>
 800508c:	e7e9      	b.n	8005062 <_printf_i+0x1ea>
 800508e:	2500      	movs	r5, #0
 8005090:	e7f7      	b.n	8005082 <_printf_i+0x20a>
 8005092:	46c0      	nop			; (mov r8, r8)
 8005094:	08007be9 	.word	0x08007be9
 8005098:	08007bfa 	.word	0x08007bfa

0800509c <memchr>:
 800509c:	b2c9      	uxtb	r1, r1
 800509e:	1882      	adds	r2, r0, r2
 80050a0:	4290      	cmp	r0, r2
 80050a2:	d101      	bne.n	80050a8 <memchr+0xc>
 80050a4:	2000      	movs	r0, #0
 80050a6:	4770      	bx	lr
 80050a8:	7803      	ldrb	r3, [r0, #0]
 80050aa:	428b      	cmp	r3, r1
 80050ac:	d0fb      	beq.n	80050a6 <memchr+0xa>
 80050ae:	3001      	adds	r0, #1
 80050b0:	e7f6      	b.n	80050a0 <memchr+0x4>

080050b2 <memmove>:
 80050b2:	b510      	push	{r4, lr}
 80050b4:	4288      	cmp	r0, r1
 80050b6:	d902      	bls.n	80050be <memmove+0xc>
 80050b8:	188b      	adds	r3, r1, r2
 80050ba:	4298      	cmp	r0, r3
 80050bc:	d303      	bcc.n	80050c6 <memmove+0x14>
 80050be:	2300      	movs	r3, #0
 80050c0:	e007      	b.n	80050d2 <memmove+0x20>
 80050c2:	5c8b      	ldrb	r3, [r1, r2]
 80050c4:	5483      	strb	r3, [r0, r2]
 80050c6:	3a01      	subs	r2, #1
 80050c8:	d2fb      	bcs.n	80050c2 <memmove+0x10>
 80050ca:	bd10      	pop	{r4, pc}
 80050cc:	5ccc      	ldrb	r4, [r1, r3]
 80050ce:	54c4      	strb	r4, [r0, r3]
 80050d0:	3301      	adds	r3, #1
 80050d2:	429a      	cmp	r2, r3
 80050d4:	d1fa      	bne.n	80050cc <memmove+0x1a>
 80050d6:	e7f8      	b.n	80050ca <memmove+0x18>

080050d8 <_free_r>:
 80050d8:	b570      	push	{r4, r5, r6, lr}
 80050da:	0005      	movs	r5, r0
 80050dc:	2900      	cmp	r1, #0
 80050de:	d010      	beq.n	8005102 <_free_r+0x2a>
 80050e0:	1f0c      	subs	r4, r1, #4
 80050e2:	6823      	ldr	r3, [r4, #0]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	da00      	bge.n	80050ea <_free_r+0x12>
 80050e8:	18e4      	adds	r4, r4, r3
 80050ea:	0028      	movs	r0, r5
 80050ec:	f000 f8d4 	bl	8005298 <__malloc_lock>
 80050f0:	4a1d      	ldr	r2, [pc, #116]	; (8005168 <_free_r+0x90>)
 80050f2:	6813      	ldr	r3, [r2, #0]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d105      	bne.n	8005104 <_free_r+0x2c>
 80050f8:	6063      	str	r3, [r4, #4]
 80050fa:	6014      	str	r4, [r2, #0]
 80050fc:	0028      	movs	r0, r5
 80050fe:	f000 f8d3 	bl	80052a8 <__malloc_unlock>
 8005102:	bd70      	pop	{r4, r5, r6, pc}
 8005104:	42a3      	cmp	r3, r4
 8005106:	d908      	bls.n	800511a <_free_r+0x42>
 8005108:	6821      	ldr	r1, [r4, #0]
 800510a:	1860      	adds	r0, r4, r1
 800510c:	4283      	cmp	r3, r0
 800510e:	d1f3      	bne.n	80050f8 <_free_r+0x20>
 8005110:	6818      	ldr	r0, [r3, #0]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	1841      	adds	r1, r0, r1
 8005116:	6021      	str	r1, [r4, #0]
 8005118:	e7ee      	b.n	80050f8 <_free_r+0x20>
 800511a:	001a      	movs	r2, r3
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d001      	beq.n	8005126 <_free_r+0x4e>
 8005122:	42a3      	cmp	r3, r4
 8005124:	d9f9      	bls.n	800511a <_free_r+0x42>
 8005126:	6811      	ldr	r1, [r2, #0]
 8005128:	1850      	adds	r0, r2, r1
 800512a:	42a0      	cmp	r0, r4
 800512c:	d10b      	bne.n	8005146 <_free_r+0x6e>
 800512e:	6820      	ldr	r0, [r4, #0]
 8005130:	1809      	adds	r1, r1, r0
 8005132:	1850      	adds	r0, r2, r1
 8005134:	6011      	str	r1, [r2, #0]
 8005136:	4283      	cmp	r3, r0
 8005138:	d1e0      	bne.n	80050fc <_free_r+0x24>
 800513a:	6818      	ldr	r0, [r3, #0]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	1841      	adds	r1, r0, r1
 8005140:	6011      	str	r1, [r2, #0]
 8005142:	6053      	str	r3, [r2, #4]
 8005144:	e7da      	b.n	80050fc <_free_r+0x24>
 8005146:	42a0      	cmp	r0, r4
 8005148:	d902      	bls.n	8005150 <_free_r+0x78>
 800514a:	230c      	movs	r3, #12
 800514c:	602b      	str	r3, [r5, #0]
 800514e:	e7d5      	b.n	80050fc <_free_r+0x24>
 8005150:	6821      	ldr	r1, [r4, #0]
 8005152:	1860      	adds	r0, r4, r1
 8005154:	4283      	cmp	r3, r0
 8005156:	d103      	bne.n	8005160 <_free_r+0x88>
 8005158:	6818      	ldr	r0, [r3, #0]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	1841      	adds	r1, r0, r1
 800515e:	6021      	str	r1, [r4, #0]
 8005160:	6063      	str	r3, [r4, #4]
 8005162:	6054      	str	r4, [r2, #4]
 8005164:	e7ca      	b.n	80050fc <_free_r+0x24>
 8005166:	46c0      	nop			; (mov r8, r8)
 8005168:	20000b0c 	.word	0x20000b0c

0800516c <_malloc_r>:
 800516c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800516e:	2303      	movs	r3, #3
 8005170:	1ccd      	adds	r5, r1, #3
 8005172:	439d      	bics	r5, r3
 8005174:	3508      	adds	r5, #8
 8005176:	0006      	movs	r6, r0
 8005178:	2d0c      	cmp	r5, #12
 800517a:	d21f      	bcs.n	80051bc <_malloc_r+0x50>
 800517c:	250c      	movs	r5, #12
 800517e:	42a9      	cmp	r1, r5
 8005180:	d81e      	bhi.n	80051c0 <_malloc_r+0x54>
 8005182:	0030      	movs	r0, r6
 8005184:	f000 f888 	bl	8005298 <__malloc_lock>
 8005188:	4925      	ldr	r1, [pc, #148]	; (8005220 <_malloc_r+0xb4>)
 800518a:	680a      	ldr	r2, [r1, #0]
 800518c:	0014      	movs	r4, r2
 800518e:	2c00      	cmp	r4, #0
 8005190:	d11a      	bne.n	80051c8 <_malloc_r+0x5c>
 8005192:	4f24      	ldr	r7, [pc, #144]	; (8005224 <_malloc_r+0xb8>)
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d104      	bne.n	80051a4 <_malloc_r+0x38>
 800519a:	0021      	movs	r1, r4
 800519c:	0030      	movs	r0, r6
 800519e:	f000 f869 	bl	8005274 <_sbrk_r>
 80051a2:	6038      	str	r0, [r7, #0]
 80051a4:	0029      	movs	r1, r5
 80051a6:	0030      	movs	r0, r6
 80051a8:	f000 f864 	bl	8005274 <_sbrk_r>
 80051ac:	1c43      	adds	r3, r0, #1
 80051ae:	d12b      	bne.n	8005208 <_malloc_r+0x9c>
 80051b0:	230c      	movs	r3, #12
 80051b2:	0030      	movs	r0, r6
 80051b4:	6033      	str	r3, [r6, #0]
 80051b6:	f000 f877 	bl	80052a8 <__malloc_unlock>
 80051ba:	e003      	b.n	80051c4 <_malloc_r+0x58>
 80051bc:	2d00      	cmp	r5, #0
 80051be:	dade      	bge.n	800517e <_malloc_r+0x12>
 80051c0:	230c      	movs	r3, #12
 80051c2:	6033      	str	r3, [r6, #0]
 80051c4:	2000      	movs	r0, #0
 80051c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051c8:	6823      	ldr	r3, [r4, #0]
 80051ca:	1b5b      	subs	r3, r3, r5
 80051cc:	d419      	bmi.n	8005202 <_malloc_r+0x96>
 80051ce:	2b0b      	cmp	r3, #11
 80051d0:	d903      	bls.n	80051da <_malloc_r+0x6e>
 80051d2:	6023      	str	r3, [r4, #0]
 80051d4:	18e4      	adds	r4, r4, r3
 80051d6:	6025      	str	r5, [r4, #0]
 80051d8:	e003      	b.n	80051e2 <_malloc_r+0x76>
 80051da:	6863      	ldr	r3, [r4, #4]
 80051dc:	42a2      	cmp	r2, r4
 80051de:	d10e      	bne.n	80051fe <_malloc_r+0x92>
 80051e0:	600b      	str	r3, [r1, #0]
 80051e2:	0030      	movs	r0, r6
 80051e4:	f000 f860 	bl	80052a8 <__malloc_unlock>
 80051e8:	0020      	movs	r0, r4
 80051ea:	2207      	movs	r2, #7
 80051ec:	300b      	adds	r0, #11
 80051ee:	1d23      	adds	r3, r4, #4
 80051f0:	4390      	bics	r0, r2
 80051f2:	1ac2      	subs	r2, r0, r3
 80051f4:	4298      	cmp	r0, r3
 80051f6:	d0e6      	beq.n	80051c6 <_malloc_r+0x5a>
 80051f8:	1a1b      	subs	r3, r3, r0
 80051fa:	50a3      	str	r3, [r4, r2]
 80051fc:	e7e3      	b.n	80051c6 <_malloc_r+0x5a>
 80051fe:	6053      	str	r3, [r2, #4]
 8005200:	e7ef      	b.n	80051e2 <_malloc_r+0x76>
 8005202:	0022      	movs	r2, r4
 8005204:	6864      	ldr	r4, [r4, #4]
 8005206:	e7c2      	b.n	800518e <_malloc_r+0x22>
 8005208:	2303      	movs	r3, #3
 800520a:	1cc4      	adds	r4, r0, #3
 800520c:	439c      	bics	r4, r3
 800520e:	42a0      	cmp	r0, r4
 8005210:	d0e1      	beq.n	80051d6 <_malloc_r+0x6a>
 8005212:	1a21      	subs	r1, r4, r0
 8005214:	0030      	movs	r0, r6
 8005216:	f000 f82d 	bl	8005274 <_sbrk_r>
 800521a:	1c43      	adds	r3, r0, #1
 800521c:	d1db      	bne.n	80051d6 <_malloc_r+0x6a>
 800521e:	e7c7      	b.n	80051b0 <_malloc_r+0x44>
 8005220:	20000b0c 	.word	0x20000b0c
 8005224:	20000b10 	.word	0x20000b10

08005228 <_realloc_r>:
 8005228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800522a:	0007      	movs	r7, r0
 800522c:	000d      	movs	r5, r1
 800522e:	0016      	movs	r6, r2
 8005230:	2900      	cmp	r1, #0
 8005232:	d105      	bne.n	8005240 <_realloc_r+0x18>
 8005234:	0011      	movs	r1, r2
 8005236:	f7ff ff99 	bl	800516c <_malloc_r>
 800523a:	0004      	movs	r4, r0
 800523c:	0020      	movs	r0, r4
 800523e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005240:	2a00      	cmp	r2, #0
 8005242:	d103      	bne.n	800524c <_realloc_r+0x24>
 8005244:	f7ff ff48 	bl	80050d8 <_free_r>
 8005248:	0034      	movs	r4, r6
 800524a:	e7f7      	b.n	800523c <_realloc_r+0x14>
 800524c:	f000 f834 	bl	80052b8 <_malloc_usable_size_r>
 8005250:	002c      	movs	r4, r5
 8005252:	42b0      	cmp	r0, r6
 8005254:	d2f2      	bcs.n	800523c <_realloc_r+0x14>
 8005256:	0031      	movs	r1, r6
 8005258:	0038      	movs	r0, r7
 800525a:	f7ff ff87 	bl	800516c <_malloc_r>
 800525e:	1e04      	subs	r4, r0, #0
 8005260:	d0ec      	beq.n	800523c <_realloc_r+0x14>
 8005262:	0029      	movs	r1, r5
 8005264:	0032      	movs	r2, r6
 8005266:	f7ff fbef 	bl	8004a48 <memcpy>
 800526a:	0029      	movs	r1, r5
 800526c:	0038      	movs	r0, r7
 800526e:	f7ff ff33 	bl	80050d8 <_free_r>
 8005272:	e7e3      	b.n	800523c <_realloc_r+0x14>

08005274 <_sbrk_r>:
 8005274:	2300      	movs	r3, #0
 8005276:	b570      	push	{r4, r5, r6, lr}
 8005278:	4d06      	ldr	r5, [pc, #24]	; (8005294 <_sbrk_r+0x20>)
 800527a:	0004      	movs	r4, r0
 800527c:	0008      	movs	r0, r1
 800527e:	602b      	str	r3, [r5, #0]
 8005280:	f7fc fcf0 	bl	8001c64 <_sbrk>
 8005284:	1c43      	adds	r3, r0, #1
 8005286:	d103      	bne.n	8005290 <_sbrk_r+0x1c>
 8005288:	682b      	ldr	r3, [r5, #0]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d000      	beq.n	8005290 <_sbrk_r+0x1c>
 800528e:	6023      	str	r3, [r4, #0]
 8005290:	bd70      	pop	{r4, r5, r6, pc}
 8005292:	46c0      	nop			; (mov r8, r8)
 8005294:	20000c84 	.word	0x20000c84

08005298 <__malloc_lock>:
 8005298:	b510      	push	{r4, lr}
 800529a:	4802      	ldr	r0, [pc, #8]	; (80052a4 <__malloc_lock+0xc>)
 800529c:	f000 f814 	bl	80052c8 <__retarget_lock_acquire_recursive>
 80052a0:	bd10      	pop	{r4, pc}
 80052a2:	46c0      	nop			; (mov r8, r8)
 80052a4:	20000c8c 	.word	0x20000c8c

080052a8 <__malloc_unlock>:
 80052a8:	b510      	push	{r4, lr}
 80052aa:	4802      	ldr	r0, [pc, #8]	; (80052b4 <__malloc_unlock+0xc>)
 80052ac:	f000 f80d 	bl	80052ca <__retarget_lock_release_recursive>
 80052b0:	bd10      	pop	{r4, pc}
 80052b2:	46c0      	nop			; (mov r8, r8)
 80052b4:	20000c8c 	.word	0x20000c8c

080052b8 <_malloc_usable_size_r>:
 80052b8:	1f0b      	subs	r3, r1, #4
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	1f18      	subs	r0, r3, #4
 80052be:	2b00      	cmp	r3, #0
 80052c0:	da01      	bge.n	80052c6 <_malloc_usable_size_r+0xe>
 80052c2:	580b      	ldr	r3, [r1, r0]
 80052c4:	18c0      	adds	r0, r0, r3
 80052c6:	4770      	bx	lr

080052c8 <__retarget_lock_acquire_recursive>:
 80052c8:	4770      	bx	lr

080052ca <__retarget_lock_release_recursive>:
 80052ca:	4770      	bx	lr

080052cc <_init>:
 80052cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052ce:	46c0      	nop			; (mov r8, r8)
 80052d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052d2:	bc08      	pop	{r3}
 80052d4:	469e      	mov	lr, r3
 80052d6:	4770      	bx	lr

080052d8 <_fini>:
 80052d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052da:	46c0      	nop			; (mov r8, r8)
 80052dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052de:	bc08      	pop	{r3}
 80052e0:	469e      	mov	lr, r3
 80052e2:	4770      	bx	lr
