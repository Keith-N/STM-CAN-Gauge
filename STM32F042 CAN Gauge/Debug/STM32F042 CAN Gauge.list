
STM32F042 CAN Gauge.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050d8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002918  08005198  08005198  00015198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ab0  08007ab0  00020274  2**0
                  CONTENTS
  4 .ARM          00000000  08007ab0  08007ab0  00020274  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007ab0  08007ab0  00020274  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ab0  08007ab0  00017ab0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ab4  08007ab4  00017ab4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000274  20000000  08007ab8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000600  20000274  08007d2c  00020274  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000874  08007d2c  00020874  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020274  2**0
                  CONTENTS, READONLY
 12 .debug_info   000103c7  00000000  00000000  0002029c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002242  00000000  00000000  00030663  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c00  00000000  00000000  000328a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b20  00000000  00000000  000334a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019381  00000000  00000000  00033fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000edec  00000000  00000000  0004d349  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e5b1  00000000  00000000  0005c135  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ea6e6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e10  00000000  00000000  000ea73c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000274 	.word	0x20000274
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005180 	.word	0x08005180

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000278 	.word	0x20000278
 8000104:	08005180 	.word	0x08005180

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	; 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	; 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan1){
 8000408:	b580      	push	{r7, lr}
 800040a:	b082      	sub	sp, #8
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
	// Receive CAN message interrupt
	HAL_CAN_GetRxMessage(hcan1, CAN_RX_FIFO0, &rxHeader, canRX);
 8000410:	4b0b      	ldr	r3, [pc, #44]	; (8000440 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8000412:	4a0c      	ldr	r2, [pc, #48]	; (8000444 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8000414:	6878      	ldr	r0, [r7, #4]
 8000416:	2100      	movs	r1, #0
 8000418:	f001 feba 	bl	8002190 <HAL_CAN_GetRxMessage>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 800041c:	4b0a      	ldr	r3, [pc, #40]	; (8000448 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 800041e:	2108      	movs	r1, #8
 8000420:	0018      	movs	r0, r3
 8000422:	f002 fc72 	bl	8002d0a <HAL_GPIO_TogglePin>
	msgRXstatus = 1;
 8000426:	4b09      	ldr	r3, [pc, #36]	; (800044c <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 8000428:	2201      	movs	r2, #1
 800042a:	601a      	str	r2, [r3, #0]
	rxID = rxHeader.StdId;
 800042c:	4b05      	ldr	r3, [pc, #20]	; (8000444 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	001a      	movs	r2, r3
 8000432:	4b07      	ldr	r3, [pc, #28]	; (8000450 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 8000434:	601a      	str	r2, [r3, #0]
}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	46bd      	mov	sp, r7
 800043a:	b002      	add	sp, #8
 800043c:	bd80      	pop	{r7, pc}
 800043e:	46c0      	nop			; (mov r8, r8)
 8000440:	20000290 	.word	0x20000290
 8000444:	200006fc 	.word	0x200006fc
 8000448:	48000400 	.word	0x48000400
 800044c:	200002c4 	.word	0x200002c4
 8000450:	200007ac 	.word	0x200007ac

08000454 <EXTI4_15_IRQHandler>:

void EXTI4_15_IRQHandler(){
 8000454:	b580      	push	{r7, lr}
 8000456:	af00      	add	r7, sp, #0
	// Push button interrupt
	currentMs = HAL_GetTick();
 8000458:	f001 fc36 	bl	8001cc8 <HAL_GetTick>
 800045c:	0003      	movs	r3, r0
 800045e:	001a      	movs	r2, r3
 8000460:	4b0b      	ldr	r3, [pc, #44]	; (8000490 <EXTI4_15_IRQHandler+0x3c>)
 8000462:	601a      	str	r2, [r3, #0]
	 if ((currentMs - lastMs > btnDebounce))
 8000464:	4b0a      	ldr	r3, [pc, #40]	; (8000490 <EXTI4_15_IRQHandler+0x3c>)
 8000466:	681a      	ldr	r2, [r3, #0]
 8000468:	4b0a      	ldr	r3, [pc, #40]	; (8000494 <EXTI4_15_IRQHandler+0x40>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	1ad2      	subs	r2, r2, r3
 800046e:	4b0a      	ldr	r3, [pc, #40]	; (8000498 <EXTI4_15_IRQHandler+0x44>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	429a      	cmp	r2, r3
 8000474:	dd06      	ble.n	8000484 <EXTI4_15_IRQHandler+0x30>
	  {
	    lastMs = currentMs;
 8000476:	4b06      	ldr	r3, [pc, #24]	; (8000490 <EXTI4_15_IRQHandler+0x3c>)
 8000478:	681a      	ldr	r2, [r3, #0]
 800047a:	4b06      	ldr	r3, [pc, #24]	; (8000494 <EXTI4_15_IRQHandler+0x40>)
 800047c:	601a      	str	r2, [r3, #0]
	    btnPress=1;
 800047e:	4b07      	ldr	r3, [pc, #28]	; (800049c <EXTI4_15_IRQHandler+0x48>)
 8000480:	2201      	movs	r2, #1
 8000482:	601a      	str	r2, [r3, #0]
	  }
	 HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8000484:	2010      	movs	r0, #16
 8000486:	f002 fc5b 	bl	8002d40 <HAL_GPIO_EXTI_IRQHandler>
}
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	46bd      	mov	sp, r7
 800048e:	bd80      	pop	{r7, pc}
 8000490:	20000298 	.word	0x20000298
 8000494:	2000029c 	.word	0x2000029c
 8000498:	200001d4 	.word	0x200001d4
 800049c:	200002a0 	.word	0x200002a0

080004a0 <canFilterInit>:

void canFilterInit(int hiID, int loID){
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b082      	sub	sp, #8
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
 80004a8:	6039      	str	r1, [r7, #0]
  	canfilter.FilterBank = 0;
 80004aa:	4b16      	ldr	r3, [pc, #88]	; (8000504 <canFilterInit+0x64>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	615a      	str	r2, [r3, #20]
  	canfilter.FilterMode = CAN_FILTERMODE_IDLIST;
 80004b0:	4b14      	ldr	r3, [pc, #80]	; (8000504 <canFilterInit+0x64>)
 80004b2:	2201      	movs	r2, #1
 80004b4:	619a      	str	r2, [r3, #24]
  	canfilter.FilterFIFOAssignment = CAN_RX_FIFO0;
 80004b6:	4b13      	ldr	r3, [pc, #76]	; (8000504 <canFilterInit+0x64>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	611a      	str	r2, [r3, #16]
  	canfilter.FilterIdHigh = hiID<<5;
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	015b      	lsls	r3, r3, #5
 80004c0:	001a      	movs	r2, r3
 80004c2:	4b10      	ldr	r3, [pc, #64]	; (8000504 <canFilterInit+0x64>)
 80004c4:	601a      	str	r2, [r3, #0]
  	canfilter.FilterIdLow = loID<<5;
 80004c6:	683b      	ldr	r3, [r7, #0]
 80004c8:	015b      	lsls	r3, r3, #5
 80004ca:	001a      	movs	r2, r3
 80004cc:	4b0d      	ldr	r3, [pc, #52]	; (8000504 <canFilterInit+0x64>)
 80004ce:	605a      	str	r2, [r3, #4]
  	canfilter.FilterMaskIdHigh = 0;
 80004d0:	4b0c      	ldr	r3, [pc, #48]	; (8000504 <canFilterInit+0x64>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	609a      	str	r2, [r3, #8]
  	canfilter.FilterMaskIdLow = 0;
 80004d6:	4b0b      	ldr	r3, [pc, #44]	; (8000504 <canFilterInit+0x64>)
 80004d8:	2200      	movs	r2, #0
 80004da:	60da      	str	r2, [r3, #12]
  	canfilter.FilterScale = CAN_FILTERSCALE_32BIT;
 80004dc:	4b09      	ldr	r3, [pc, #36]	; (8000504 <canFilterInit+0x64>)
 80004de:	2201      	movs	r2, #1
 80004e0:	61da      	str	r2, [r3, #28]
  	canfilter.FilterActivation = ENABLE;
 80004e2:	4b08      	ldr	r3, [pc, #32]	; (8000504 <canFilterInit+0x64>)
 80004e4:	2201      	movs	r2, #1
 80004e6:	621a      	str	r2, [r3, #32]
  	canfilter.SlaveStartFilterBank = 1;
 80004e8:	4b06      	ldr	r3, [pc, #24]	; (8000504 <canFilterInit+0x64>)
 80004ea:	2201      	movs	r2, #1
 80004ec:	625a      	str	r2, [r3, #36]	; 0x24
  	HAL_CAN_ConfigFilter(&hcan,&canfilter);
 80004ee:	4a05      	ldr	r2, [pc, #20]	; (8000504 <canFilterInit+0x64>)
 80004f0:	4b05      	ldr	r3, [pc, #20]	; (8000508 <canFilterInit+0x68>)
 80004f2:	0011      	movs	r1, r2
 80004f4:	0018      	movs	r0, r3
 80004f6:	f001 fd13 	bl	8001f20 <HAL_CAN_ConfigFilter>
}
 80004fa:	46c0      	nop			; (mov r8, r8)
 80004fc:	46bd      	mov	sp, r7
 80004fe:	b002      	add	sp, #8
 8000500:	bd80      	pop	{r7, pc}
 8000502:	46c0      	nop			; (mov r8, r8)
 8000504:	20000834 	.word	0x20000834
 8000508:	2000077c 	.word	0x2000077c

0800050c <byte2Data>:

int byte2Data(int b1, int b2){
 800050c:	b580      	push	{r7, lr}
 800050e:	b084      	sub	sp, #16
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
 8000514:	6039      	str	r1, [r7, #0]
	// combine two bytes into a single value
	uint32_t sensorVal = (canRX[b1] << 8)|(canRX[b2]);
 8000516:	4a08      	ldr	r2, [pc, #32]	; (8000538 <byte2Data+0x2c>)
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	18d3      	adds	r3, r2, r3
 800051c:	781b      	ldrb	r3, [r3, #0]
 800051e:	021b      	lsls	r3, r3, #8
 8000520:	4905      	ldr	r1, [pc, #20]	; (8000538 <byte2Data+0x2c>)
 8000522:	683a      	ldr	r2, [r7, #0]
 8000524:	188a      	adds	r2, r1, r2
 8000526:	7812      	ldrb	r2, [r2, #0]
 8000528:	4313      	orrs	r3, r2
 800052a:	60fb      	str	r3, [r7, #12]
	return sensorVal;
 800052c:	68fb      	ldr	r3, [r7, #12]
}
 800052e:	0018      	movs	r0, r3
 8000530:	46bd      	mov	sp, r7
 8000532:	b004      	add	sp, #16
 8000534:	bd80      	pop	{r7, pc}
 8000536:	46c0      	nop			; (mov r8, r8)
 8000538:	20000290 	.word	0x20000290

0800053c <getIntValue>:

int getIntValue(struct rxData* data){
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
	 // Get the integer value
	 // Multiply by the inverse of the scale
	 data->intVal = data->val / data->scale;
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	699a      	ldr	r2, [r3, #24]
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	689b      	ldr	r3, [r3, #8]
 800054c:	0019      	movs	r1, r3
 800054e:	0010      	movs	r0, r2
 8000550:	f7ff fe6e 	bl	8000230 <__divsi3>
 8000554:	0003      	movs	r3, r0
 8000556:	001a      	movs	r2, r3
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	601a      	str	r2, [r3, #0]
	 return data->intVal;
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	681b      	ldr	r3, [r3, #0]
}
 8000560:	0018      	movs	r0, r3
 8000562:	46bd      	mov	sp, r7
 8000564:	b002      	add	sp, #8
 8000566:	bd80      	pop	{r7, pc}

08000568 <getDecValue>:

int getDecValue(struct rxData* data){
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]

	 // Get the decimal value
	 // Subtract the int value from the total
	 // Multiply by the inverse of the scale
	 // Scale and multiply to get number of desired decimal places
	 data->decVal = ((data->val  - (data->intVal*data->scale)) * (data->decScale)/(data->scale));
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	699a      	ldr	r2, [r3, #24]
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	6819      	ldr	r1, [r3, #0]
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	689b      	ldr	r3, [r3, #8]
 800057c:	434b      	muls	r3, r1
 800057e:	1ad2      	subs	r2, r2, r3
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	68db      	ldr	r3, [r3, #12]
 8000584:	435a      	muls	r2, r3
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	689b      	ldr	r3, [r3, #8]
 800058a:	0019      	movs	r1, r3
 800058c:	0010      	movs	r0, r2
 800058e:	f7ff fe4f 	bl	8000230 <__divsi3>
 8000592:	0003      	movs	r3, r0
 8000594:	001a      	movs	r2, r3
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	605a      	str	r2, [r3, #4]
	 return data->decVal;
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	685b      	ldr	r3, [r3, #4]
}
 800059e:	0018      	movs	r0, r3
 80005a0:	46bd      	mov	sp, r7
 80005a2:	b002      	add	sp, #8
 80005a4:	bd80      	pop	{r7, pc}
	...

080005a8 <getData>:

void getData(){
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0


	switch(rxID){
 80005ac:	4b3b      	ldr	r3, [pc, #236]	; (800069c <getData+0xf4>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a3b      	ldr	r2, [pc, #236]	; (80006a0 <getData+0xf8>)
 80005b2:	4694      	mov	ip, r2
 80005b4:	4463      	add	r3, ip
 80005b6:	2b06      	cmp	r3, #6
 80005b8:	d86d      	bhi.n	8000696 <getData+0xee>
 80005ba:	009a      	lsls	r2, r3, #2
 80005bc:	4b39      	ldr	r3, [pc, #228]	; (80006a4 <getData+0xfc>)
 80005be:	18d3      	adds	r3, r2, r3
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	469f      	mov	pc, r3

	case (511):
		// Get test data
		 b[0] = canRX[0];
 80005c4:	4b38      	ldr	r3, [pc, #224]	; (80006a8 <getData+0x100>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	001a      	movs	r2, r3
 80005ca:	4b38      	ldr	r3, [pc, #224]	; (80006ac <getData+0x104>)
 80005cc:	601a      	str	r2, [r3, #0]
		 b[1] = canRX[1];
 80005ce:	4b36      	ldr	r3, [pc, #216]	; (80006a8 <getData+0x100>)
 80005d0:	785b      	ldrb	r3, [r3, #1]
 80005d2:	001a      	movs	r2, r3
 80005d4:	4b35      	ldr	r3, [pc, #212]	; (80006ac <getData+0x104>)
 80005d6:	605a      	str	r2, [r3, #4]
		 b[2] = canRX[2];
 80005d8:	4b33      	ldr	r3, [pc, #204]	; (80006a8 <getData+0x100>)
 80005da:	789b      	ldrb	r3, [r3, #2]
 80005dc:	001a      	movs	r2, r3
 80005de:	4b33      	ldr	r3, [pc, #204]	; (80006ac <getData+0x104>)
 80005e0:	609a      	str	r2, [r3, #8]
		 b[3] = canRX[3];
 80005e2:	4b31      	ldr	r3, [pc, #196]	; (80006a8 <getData+0x100>)
 80005e4:	78db      	ldrb	r3, [r3, #3]
 80005e6:	001a      	movs	r2, r3
 80005e8:	4b30      	ldr	r3, [pc, #192]	; (80006ac <getData+0x104>)
 80005ea:	60da      	str	r2, [r3, #12]
		 b[4] = canRX[4];
 80005ec:	4b2e      	ldr	r3, [pc, #184]	; (80006a8 <getData+0x100>)
 80005ee:	791b      	ldrb	r3, [r3, #4]
 80005f0:	001a      	movs	r2, r3
 80005f2:	4b2e      	ldr	r3, [pc, #184]	; (80006ac <getData+0x104>)
 80005f4:	611a      	str	r2, [r3, #16]
		 b[5] = canRX[5];
 80005f6:	4b2c      	ldr	r3, [pc, #176]	; (80006a8 <getData+0x100>)
 80005f8:	795b      	ldrb	r3, [r3, #5]
 80005fa:	001a      	movs	r2, r3
 80005fc:	4b2b      	ldr	r3, [pc, #172]	; (80006ac <getData+0x104>)
 80005fe:	615a      	str	r2, [r3, #20]
		 b[6] = canRX[6];
 8000600:	4b29      	ldr	r3, [pc, #164]	; (80006a8 <getData+0x100>)
 8000602:	799b      	ldrb	r3, [r3, #6]
 8000604:	001a      	movs	r2, r3
 8000606:	4b29      	ldr	r3, [pc, #164]	; (80006ac <getData+0x104>)
 8000608:	619a      	str	r2, [r3, #24]
		 b[7] = canRX[7];
 800060a:	4b27      	ldr	r3, [pc, #156]	; (80006a8 <getData+0x100>)
 800060c:	79db      	ldrb	r3, [r3, #7]
 800060e:	001a      	movs	r2, r3
 8000610:	4b26      	ldr	r3, [pc, #152]	; (80006ac <getData+0x104>)
 8000612:	61da      	str	r2, [r3, #28]

	case 512 :
		break;
 8000614:	e03f      	b.n	8000696 <getData+0xee>

	case 513 :
		rpm.val = byte2Data(1,0);		//RPM
 8000616:	2100      	movs	r1, #0
 8000618:	2001      	movs	r0, #1
 800061a:	f7ff ff77 	bl	800050c <byte2Data>
 800061e:	0002      	movs	r2, r0
 8000620:	4b23      	ldr	r3, [pc, #140]	; (80006b0 <getData+0x108>)
 8000622:	619a      	str	r2, [r3, #24]
		timing.val = byte2Data(3,2);	//Timing deg
 8000624:	2102      	movs	r1, #2
 8000626:	2003      	movs	r0, #3
 8000628:	f7ff ff70 	bl	800050c <byte2Data>
 800062c:	0002      	movs	r2, r0
 800062e:	4b21      	ldr	r3, [pc, #132]	; (80006b4 <getData+0x10c>)
 8000630:	619a      	str	r2, [r3, #24]
		injDuty.val = byte2Data(4,5);	//Injector Duty %
 8000632:	2105      	movs	r1, #5
 8000634:	2004      	movs	r0, #4
 8000636:	f7ff ff69 	bl	800050c <byte2Data>
 800063a:	0002      	movs	r2, r0
 800063c:	4b1e      	ldr	r3, [pc, #120]	; (80006b8 <getData+0x110>)
 800063e:	619a      	str	r2, [r3, #24]
		break;
 8000640:	e029      	b.n	8000696 <getData+0xee>

	case 514 :
		tps1.val = byte2Data(3,2);		//TPS1 %
 8000642:	2102      	movs	r1, #2
 8000644:	2003      	movs	r0, #3
 8000646:	f7ff ff61 	bl	800050c <byte2Data>
 800064a:	0002      	movs	r2, r0
 800064c:	4b1b      	ldr	r3, [pc, #108]	; (80006bc <getData+0x114>)
 800064e:	619a      	str	r2, [r3, #24]
		break;
 8000650:	e021      	b.n	8000696 <getData+0xee>

	case 515 :
		map.val = byte2Data(1,0);		//MAP kPa
 8000652:	2100      	movs	r1, #0
 8000654:	2001      	movs	r0, #1
 8000656:	f7ff ff59 	bl	800050c <byte2Data>
 800065a:	0002      	movs	r2, r0
 800065c:	4b18      	ldr	r3, [pc, #96]	; (80006c0 <getData+0x118>)
 800065e:	619a      	str	r2, [r3, #24]
		clt.val = canRX[2];				//Coolant Temp C
 8000660:	4b11      	ldr	r3, [pc, #68]	; (80006a8 <getData+0x100>)
 8000662:	789b      	ldrb	r3, [r3, #2]
 8000664:	001a      	movs	r2, r3
 8000666:	4b17      	ldr	r3, [pc, #92]	; (80006c4 <getData+0x11c>)
 8000668:	619a      	str	r2, [r3, #24]
		iat.val = canRX[3];				//Intake Temp C
 800066a:	4b0f      	ldr	r3, [pc, #60]	; (80006a8 <getData+0x100>)
 800066c:	78db      	ldrb	r3, [r3, #3]
 800066e:	001a      	movs	r2, r3
 8000670:	4b15      	ldr	r3, [pc, #84]	; (80006c8 <getData+0x120>)
 8000672:	619a      	str	r2, [r3, #24]
		break;
 8000674:	e00f      	b.n	8000696 <getData+0xee>

	case 516 :
		afr.val = byte2Data(1,0);		//AFR
 8000676:	2100      	movs	r1, #0
 8000678:	2001      	movs	r0, #1
 800067a:	f7ff ff47 	bl	800050c <byte2Data>
 800067e:	0002      	movs	r2, r0
 8000680:	4b12      	ldr	r3, [pc, #72]	; (80006cc <getData+0x124>)
 8000682:	619a      	str	r2, [r3, #24]
		battery.val = byte2Data(7,6);	//Battery V
 8000684:	2106      	movs	r1, #6
 8000686:	2007      	movs	r0, #7
 8000688:	f7ff ff40 	bl	800050c <byte2Data>
 800068c:	0002      	movs	r2, r0
 800068e:	4b10      	ldr	r3, [pc, #64]	; (80006d0 <getData+0x128>)
 8000690:	619a      	str	r2, [r3, #24]
		break;
 8000692:	e000      	b.n	8000696 <getData+0xee>

	case 517 :
		break;
 8000694:	46c0      	nop			; (mov r8, r8)

	}
}
 8000696:	46c0      	nop			; (mov r8, r8)
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	200007ac 	.word	0x200007ac
 80006a0:	fffffe01 	.word	0xfffffe01
 80006a4:	08005234 	.word	0x08005234
 80006a8:	20000290 	.word	0x20000290
 80006ac:	200002a8 	.word	0x200002a8
 80006b0:	20000034 	.word	0x20000034
 80006b4:	20000138 	.word	0x20000138
 80006b8:	2000016c 	.word	0x2000016c
 80006bc:	200000d0 	.word	0x200000d0
 80006c0:	20000104 	.word	0x20000104
 80006c4:	20000068 	.word	0x20000068
 80006c8:	2000009c 	.word	0x2000009c
 80006cc:	20000000 	.word	0x20000000
 80006d0:	200001a0 	.word	0x200001a0

080006d4 <printText>:

void printText( char* text, int X, int Y){
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b084      	sub	sp, #16
 80006d8:	af00      	add	r7, sp, #0
 80006da:	60f8      	str	r0, [r7, #12]
 80006dc:	60b9      	str	r1, [r7, #8]
 80006de:	607a      	str	r2, [r7, #4]
	// Set cursor and print 11x18 text
	ssd1306_SetCursor(X, Y);
 80006e0:	68bb      	ldr	r3, [r7, #8]
 80006e2:	b2db      	uxtb	r3, r3
 80006e4:	687a      	ldr	r2, [r7, #4]
 80006e6:	b2d2      	uxtb	r2, r2
 80006e8:	0011      	movs	r1, r2
 80006ea:	0018      	movs	r0, r3
 80006ec:	f001 f882 	bl	80017f4 <ssd1306_SetCursor>
	ssd1306_WriteString(text, Font_11x18, White);
 80006f0:	4a05      	ldr	r2, [pc, #20]	; (8000708 <printText+0x34>)
 80006f2:	68f8      	ldr	r0, [r7, #12]
 80006f4:	2301      	movs	r3, #1
 80006f6:	6811      	ldr	r1, [r2, #0]
 80006f8:	6852      	ldr	r2, [r2, #4]
 80006fa:	f001 f851 	bl	80017a0 <ssd1306_WriteString>

}
 80006fe:	46c0      	nop			; (mov r8, r8)
 8000700:	46bd      	mov	sp, r7
 8000702:	b004      	add	sp, #16
 8000704:	bd80      	pop	{r7, pc}
 8000706:	46c0      	nop			; (mov r8, r8)
 8000708:	200001f4 	.word	0x200001f4

0800070c <printTextLarge>:

void printTextLarge( char* text, int X, int Y){
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
 8000712:	60f8      	str	r0, [r7, #12]
 8000714:	60b9      	str	r1, [r7, #8]
 8000716:	607a      	str	r2, [r7, #4]
	// Set cursor and print 16x26 text
	ssd1306_SetCursor(X, Y);
 8000718:	68bb      	ldr	r3, [r7, #8]
 800071a:	b2db      	uxtb	r3, r3
 800071c:	687a      	ldr	r2, [r7, #4]
 800071e:	b2d2      	uxtb	r2, r2
 8000720:	0011      	movs	r1, r2
 8000722:	0018      	movs	r0, r3
 8000724:	f001 f866 	bl	80017f4 <ssd1306_SetCursor>
	ssd1306_WriteString(text, Font_11x18, White);
 8000728:	4a05      	ldr	r2, [pc, #20]	; (8000740 <printTextLarge+0x34>)
 800072a:	68f8      	ldr	r0, [r7, #12]
 800072c:	2301      	movs	r3, #1
 800072e:	6811      	ldr	r1, [r2, #0]
 8000730:	6852      	ldr	r2, [r2, #4]
 8000732:	f001 f835 	bl	80017a0 <ssd1306_WriteString>

}
 8000736:	46c0      	nop			; (mov r8, r8)
 8000738:	46bd      	mov	sp, r7
 800073a:	b004      	add	sp, #16
 800073c:	bd80      	pop	{r7, pc}
 800073e:	46c0      	nop			; (mov r8, r8)
 8000740:	200001f4 	.word	0x200001f4

08000744 <printTextSmall>:

void printTextSmall( char* text, int X, int Y){
 8000744:	b580      	push	{r7, lr}
 8000746:	b084      	sub	sp, #16
 8000748:	af00      	add	r7, sp, #0
 800074a:	60f8      	str	r0, [r7, #12]
 800074c:	60b9      	str	r1, [r7, #8]
 800074e:	607a      	str	r2, [r7, #4]
	// Set cursor and print 7x10 text
	ssd1306_SetCursor(X, Y);
 8000750:	68bb      	ldr	r3, [r7, #8]
 8000752:	b2db      	uxtb	r3, r3
 8000754:	687a      	ldr	r2, [r7, #4]
 8000756:	b2d2      	uxtb	r2, r2
 8000758:	0011      	movs	r1, r2
 800075a:	0018      	movs	r0, r3
 800075c:	f001 f84a 	bl	80017f4 <ssd1306_SetCursor>
	ssd1306_WriteString(text, Font_7x10, White);
 8000760:	4a05      	ldr	r2, [pc, #20]	; (8000778 <printTextSmall+0x34>)
 8000762:	68f8      	ldr	r0, [r7, #12]
 8000764:	2301      	movs	r3, #1
 8000766:	6811      	ldr	r1, [r2, #0]
 8000768:	6852      	ldr	r2, [r2, #4]
 800076a:	f001 f819 	bl	80017a0 <ssd1306_WriteString>

}
 800076e:	46c0      	nop			; (mov r8, r8)
 8000770:	46bd      	mov	sp, r7
 8000772:	b004      	add	sp, #16
 8000774:	bd80      	pop	{r7, pc}
 8000776:	46c0      	nop			; (mov r8, r8)
 8000778:	200001ec 	.word	0x200001ec

0800077c <printDataDigitalLarge>:

void printDataDigitalLarge(struct rxData * data, int X, int Y){
 800077c:	b580      	push	{r7, lr}
 800077e:	b086      	sub	sp, #24
 8000780:	af02      	add	r7, sp, #8
 8000782:	60f8      	str	r0, [r7, #12]
 8000784:	60b9      	str	r1, [r7, #8]
 8000786:	607a      	str	r2, [r7, #4]
	// Set cursor x/y location and print the selected data
	// If decimal value is 0 it will not be printed
	// This will print the maximum stored value
	ssd1306_SetCursor(X, Y);
 8000788:	68bb      	ldr	r3, [r7, #8]
 800078a:	b2db      	uxtb	r3, r3
 800078c:	687a      	ldr	r2, [r7, #4]
 800078e:	b2d2      	uxtb	r2, r2
 8000790:	0011      	movs	r1, r2
 8000792:	0018      	movs	r0, r3
 8000794:	f001 f82e 	bl	80017f4 <ssd1306_SetCursor>
	if (data->decVal > 0){
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	685b      	ldr	r3, [r3, #4]
 800079c:	2b00      	cmp	r3, #0
 800079e:	dd12      	ble.n	80007c6 <printDataDigitalLarge+0x4a>
		snprintf(buff, sizeof(buff), "%d.%d", data->intVal,data->decVal);
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	6819      	ldr	r1, [r3, #0]
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	685b      	ldr	r3, [r3, #4]
 80007a8:	4a10      	ldr	r2, [pc, #64]	; (80007ec <printDataDigitalLarge+0x70>)
 80007aa:	4811      	ldr	r0, [pc, #68]	; (80007f0 <printDataDigitalLarge+0x74>)
 80007ac:	9300      	str	r3, [sp, #0]
 80007ae:	000b      	movs	r3, r1
 80007b0:	2110      	movs	r1, #16
 80007b2:	f004 f8b5 	bl	8004920 <sniprintf>
		ssd1306_WriteString(buff, Font_16x26, White);
 80007b6:	4a0f      	ldr	r2, [pc, #60]	; (80007f4 <printDataDigitalLarge+0x78>)
 80007b8:	480d      	ldr	r0, [pc, #52]	; (80007f0 <printDataDigitalLarge+0x74>)
 80007ba:	2301      	movs	r3, #1
 80007bc:	6811      	ldr	r1, [r2, #0]
 80007be:	6852      	ldr	r2, [r2, #4]
 80007c0:	f000 ffee 	bl	80017a0 <ssd1306_WriteString>
	else {
		snprintf(buff, sizeof(buff), "%d", data->intVal);
		ssd1306_WriteString(buff, Font_16x26, White);
	}

}
 80007c4:	e00d      	b.n	80007e2 <printDataDigitalLarge+0x66>
		snprintf(buff, sizeof(buff), "%d", data->intVal);
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	4a0b      	ldr	r2, [pc, #44]	; (80007f8 <printDataDigitalLarge+0x7c>)
 80007cc:	4808      	ldr	r0, [pc, #32]	; (80007f0 <printDataDigitalLarge+0x74>)
 80007ce:	2110      	movs	r1, #16
 80007d0:	f004 f8a6 	bl	8004920 <sniprintf>
		ssd1306_WriteString(buff, Font_16x26, White);
 80007d4:	4a07      	ldr	r2, [pc, #28]	; (80007f4 <printDataDigitalLarge+0x78>)
 80007d6:	4806      	ldr	r0, [pc, #24]	; (80007f0 <printDataDigitalLarge+0x74>)
 80007d8:	2301      	movs	r3, #1
 80007da:	6811      	ldr	r1, [r2, #0]
 80007dc:	6852      	ldr	r2, [r2, #4]
 80007de:	f000 ffdf 	bl	80017a0 <ssd1306_WriteString>
}
 80007e2:	46c0      	nop			; (mov r8, r8)
 80007e4:	46bd      	mov	sp, r7
 80007e6:	b004      	add	sp, #16
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	46c0      	nop			; (mov r8, r8)
 80007ec:	08005198 	.word	0x08005198
 80007f0:	20000768 	.word	0x20000768
 80007f4:	200001fc 	.word	0x200001fc
 80007f8:	080051a0 	.word	0x080051a0

080007fc <printDataMin>:
		ssd1306_WriteString(buff, Font_7x10, White);
	}

}

void printDataMin(struct rxData * data, int X, int Y){
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b086      	sub	sp, #24
 8000800:	af02      	add	r7, sp, #8
 8000802:	60f8      	str	r0, [r7, #12]
 8000804:	60b9      	str	r1, [r7, #8]
 8000806:	607a      	str	r2, [r7, #4]
	// Set cursor x/y location and print the selected data
	// If decimal value is 0 it will not be printed
	// This will print the minimum stored value
	ssd1306_SetCursor(X, Y);
 8000808:	68bb      	ldr	r3, [r7, #8]
 800080a:	b2db      	uxtb	r3, r3
 800080c:	687a      	ldr	r2, [r7, #4]
 800080e:	b2d2      	uxtb	r2, r2
 8000810:	0011      	movs	r1, r2
 8000812:	0018      	movs	r0, r3
 8000814:	f000 ffee 	bl	80017f4 <ssd1306_SetCursor>
	if (data->decMin > 0){
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800081c:	2b00      	cmp	r3, #0
 800081e:	dd12      	ble.n	8000846 <printDataMin+0x4a>
		snprintf(buff, sizeof(buff), "%d.%d", data->intMin,data->decMin);
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	6a19      	ldr	r1, [r3, #32]
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000828:	4a10      	ldr	r2, [pc, #64]	; (800086c <printDataMin+0x70>)
 800082a:	4811      	ldr	r0, [pc, #68]	; (8000870 <printDataMin+0x74>)
 800082c:	9300      	str	r3, [sp, #0]
 800082e:	000b      	movs	r3, r1
 8000830:	2110      	movs	r1, #16
 8000832:	f004 f875 	bl	8004920 <sniprintf>
		ssd1306_WriteString(buff, Font_7x10, White);
 8000836:	4a0f      	ldr	r2, [pc, #60]	; (8000874 <printDataMin+0x78>)
 8000838:	480d      	ldr	r0, [pc, #52]	; (8000870 <printDataMin+0x74>)
 800083a:	2301      	movs	r3, #1
 800083c:	6811      	ldr	r1, [r2, #0]
 800083e:	6852      	ldr	r2, [r2, #4]
 8000840:	f000 ffae 	bl	80017a0 <ssd1306_WriteString>
	else {
		snprintf(buff, sizeof(buff), "%d", data->intMin);
		ssd1306_WriteString(buff, Font_7x10, White);
	}

}
 8000844:	e00d      	b.n	8000862 <printDataMin+0x66>
		snprintf(buff, sizeof(buff), "%d", data->intMin);
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	6a1b      	ldr	r3, [r3, #32]
 800084a:	4a0b      	ldr	r2, [pc, #44]	; (8000878 <printDataMin+0x7c>)
 800084c:	4808      	ldr	r0, [pc, #32]	; (8000870 <printDataMin+0x74>)
 800084e:	2110      	movs	r1, #16
 8000850:	f004 f866 	bl	8004920 <sniprintf>
		ssd1306_WriteString(buff, Font_7x10, White);
 8000854:	4a07      	ldr	r2, [pc, #28]	; (8000874 <printDataMin+0x78>)
 8000856:	4806      	ldr	r0, [pc, #24]	; (8000870 <printDataMin+0x74>)
 8000858:	2301      	movs	r3, #1
 800085a:	6811      	ldr	r1, [r2, #0]
 800085c:	6852      	ldr	r2, [r2, #4]
 800085e:	f000 ff9f 	bl	80017a0 <ssd1306_WriteString>
}
 8000862:	46c0      	nop			; (mov r8, r8)
 8000864:	46bd      	mov	sp, r7
 8000866:	b004      	add	sp, #16
 8000868:	bd80      	pop	{r7, pc}
 800086a:	46c0      	nop			; (mov r8, r8)
 800086c:	08005198 	.word	0x08005198
 8000870:	20000768 	.word	0x20000768
 8000874:	200001ec 	.word	0x200001ec
 8000878:	080051a0 	.word	0x080051a0

0800087c <printDataMax>:

void printDataMax(struct rxData * data, int X, int Y){
 800087c:	b580      	push	{r7, lr}
 800087e:	b086      	sub	sp, #24
 8000880:	af02      	add	r7, sp, #8
 8000882:	60f8      	str	r0, [r7, #12]
 8000884:	60b9      	str	r1, [r7, #8]
 8000886:	607a      	str	r2, [r7, #4]
	// Set cursor x/y location and print the selected data
	// If decimal value is 0 it will not be printed
	// This will print the maximum stored value
	ssd1306_SetCursor(X, Y);
 8000888:	68bb      	ldr	r3, [r7, #8]
 800088a:	b2db      	uxtb	r3, r3
 800088c:	687a      	ldr	r2, [r7, #4]
 800088e:	b2d2      	uxtb	r2, r2
 8000890:	0011      	movs	r1, r2
 8000892:	0018      	movs	r0, r3
 8000894:	f000 ffae 	bl	80017f4 <ssd1306_SetCursor>
	if (data->decMax > 0){
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800089c:	2b00      	cmp	r3, #0
 800089e:	dd12      	ble.n	80008c6 <printDataMax+0x4a>
		snprintf(buff, sizeof(buff), "%d.%d", data->intMax,data->decMax);
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	69d9      	ldr	r1, [r3, #28]
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008a8:	4a10      	ldr	r2, [pc, #64]	; (80008ec <printDataMax+0x70>)
 80008aa:	4811      	ldr	r0, [pc, #68]	; (80008f0 <printDataMax+0x74>)
 80008ac:	9300      	str	r3, [sp, #0]
 80008ae:	000b      	movs	r3, r1
 80008b0:	2110      	movs	r1, #16
 80008b2:	f004 f835 	bl	8004920 <sniprintf>
		ssd1306_WriteString(buff, Font_7x10, White);
 80008b6:	4a0f      	ldr	r2, [pc, #60]	; (80008f4 <printDataMax+0x78>)
 80008b8:	480d      	ldr	r0, [pc, #52]	; (80008f0 <printDataMax+0x74>)
 80008ba:	2301      	movs	r3, #1
 80008bc:	6811      	ldr	r1, [r2, #0]
 80008be:	6852      	ldr	r2, [r2, #4]
 80008c0:	f000 ff6e 	bl	80017a0 <ssd1306_WriteString>
	else {
		snprintf(buff, sizeof(buff), "%d", data->intMax);
		ssd1306_WriteString(buff, Font_7x10, White);
	}

}
 80008c4:	e00d      	b.n	80008e2 <printDataMax+0x66>
		snprintf(buff, sizeof(buff), "%d", data->intMax);
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	69db      	ldr	r3, [r3, #28]
 80008ca:	4a0b      	ldr	r2, [pc, #44]	; (80008f8 <printDataMax+0x7c>)
 80008cc:	4808      	ldr	r0, [pc, #32]	; (80008f0 <printDataMax+0x74>)
 80008ce:	2110      	movs	r1, #16
 80008d0:	f004 f826 	bl	8004920 <sniprintf>
		ssd1306_WriteString(buff, Font_7x10, White);
 80008d4:	4a07      	ldr	r2, [pc, #28]	; (80008f4 <printDataMax+0x78>)
 80008d6:	4806      	ldr	r0, [pc, #24]	; (80008f0 <printDataMax+0x74>)
 80008d8:	2301      	movs	r3, #1
 80008da:	6811      	ldr	r1, [r2, #0]
 80008dc:	6852      	ldr	r2, [r2, #4]
 80008de:	f000 ff5f 	bl	80017a0 <ssd1306_WriteString>
}
 80008e2:	46c0      	nop			; (mov r8, r8)
 80008e4:	46bd      	mov	sp, r7
 80008e6:	b004      	add	sp, #16
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	46c0      	nop			; (mov r8, r8)
 80008ec:	08005198 	.word	0x08005198
 80008f0:	20000768 	.word	0x20000768
 80008f4:	200001ec 	.word	0x200001ec
 80008f8:	080051a0 	.word	0x080051a0

080008fc <printBarGraph>:
	ssd1306_SetCursor(X, Y);
	snprintf(buff, sizeof(buff), "%d", data);
			ssd1306_WriteString(buff, Font_7x10, White);
}

void printBarGraph(int X, int Y, int height, int width, int progress, int boarder){
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b08e      	sub	sp, #56	; 0x38
 8000900:	af00      	add	r7, sp, #0
 8000902:	60f8      	str	r0, [r7, #12]
 8000904:	60b9      	str	r1, [r7, #8]
 8000906:	607a      	str	r2, [r7, #4]
 8000908:	603b      	str	r3, [r7, #0]

	// Draw bar graph
	// setup location, provide a progress percent 0 -> 100, and a boarder spacing for the fill

	ssd1306_SetCursor(X,Y);
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	b2db      	uxtb	r3, r3
 800090e:	68ba      	ldr	r2, [r7, #8]
 8000910:	b2d2      	uxtb	r2, r2
 8000912:	0011      	movs	r1, r2
 8000914:	0018      	movs	r0, r3
 8000916:	f000 ff6d 	bl	80017f4 <ssd1306_SetCursor>

	//Draw boarder
	// Top
	for (int x = X; x<(X + width); x++){
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	637b      	str	r3, [r7, #52]	; 0x34
 800091e:	e00c      	b.n	800093a <printBarGraph+0x3e>
		int y = Y;
 8000920:	68bb      	ldr	r3, [r7, #8]
 8000922:	613b      	str	r3, [r7, #16]
		ssd1306_DrawPixel(x,y,White);
 8000924:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000926:	b2db      	uxtb	r3, r3
 8000928:	693a      	ldr	r2, [r7, #16]
 800092a:	b2d1      	uxtb	r1, r2
 800092c:	2201      	movs	r2, #1
 800092e:	0018      	movs	r0, r3
 8000930:	f000 fe22 	bl	8001578 <ssd1306_DrawPixel>
	for (int x = X; x<(X + width); x++){
 8000934:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000936:	3301      	adds	r3, #1
 8000938:	637b      	str	r3, [r7, #52]	; 0x34
 800093a:	68fa      	ldr	r2, [r7, #12]
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	18d3      	adds	r3, r2, r3
 8000940:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000942:	429a      	cmp	r2, r3
 8000944:	dbec      	blt.n	8000920 <printBarGraph+0x24>
	}
	// Bottom
	for (int x =X; x<(X + width); x++){
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	633b      	str	r3, [r7, #48]	; 0x30
 800094a:	e00e      	b.n	800096a <printBarGraph+0x6e>
		int y = Y + height;
 800094c:	68ba      	ldr	r2, [r7, #8]
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	18d3      	adds	r3, r2, r3
 8000952:	617b      	str	r3, [r7, #20]
		ssd1306_DrawPixel(x,y,White);
 8000954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000956:	b2db      	uxtb	r3, r3
 8000958:	697a      	ldr	r2, [r7, #20]
 800095a:	b2d1      	uxtb	r1, r2
 800095c:	2201      	movs	r2, #1
 800095e:	0018      	movs	r0, r3
 8000960:	f000 fe0a 	bl	8001578 <ssd1306_DrawPixel>
	for (int x =X; x<(X + width); x++){
 8000964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000966:	3301      	adds	r3, #1
 8000968:	633b      	str	r3, [r7, #48]	; 0x30
 800096a:	68fa      	ldr	r2, [r7, #12]
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	18d3      	adds	r3, r2, r3
 8000970:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000972:	429a      	cmp	r2, r3
 8000974:	dbea      	blt.n	800094c <printBarGraph+0x50>
	}
	// Left
	for (int y = Y; y< (Y + height); y++){
 8000976:	68bb      	ldr	r3, [r7, #8]
 8000978:	62fb      	str	r3, [r7, #44]	; 0x2c
 800097a:	e00c      	b.n	8000996 <printBarGraph+0x9a>
		int x = X;
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	61bb      	str	r3, [r7, #24]
		ssd1306_DrawPixel(x,y,White);
 8000980:	69bb      	ldr	r3, [r7, #24]
 8000982:	b2db      	uxtb	r3, r3
 8000984:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000986:	b2d1      	uxtb	r1, r2
 8000988:	2201      	movs	r2, #1
 800098a:	0018      	movs	r0, r3
 800098c:	f000 fdf4 	bl	8001578 <ssd1306_DrawPixel>
	for (int y = Y; y< (Y + height); y++){
 8000990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000992:	3301      	adds	r3, #1
 8000994:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000996:	68ba      	ldr	r2, [r7, #8]
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	18d3      	adds	r3, r2, r3
 800099c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800099e:	429a      	cmp	r2, r3
 80009a0:	dbec      	blt.n	800097c <printBarGraph+0x80>
	}
	// Right
	for (int y = Y; y<(Y + height); y++){
 80009a2:	68bb      	ldr	r3, [r7, #8]
 80009a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80009a6:	e00e      	b.n	80009c6 <printBarGraph+0xca>
		int x = X + width;
 80009a8:	68fa      	ldr	r2, [r7, #12]
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	18d3      	adds	r3, r2, r3
 80009ae:	61fb      	str	r3, [r7, #28]
		ssd1306_DrawPixel(x,y,White);
 80009b0:	69fb      	ldr	r3, [r7, #28]
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80009b6:	b2d1      	uxtb	r1, r2
 80009b8:	2201      	movs	r2, #1
 80009ba:	0018      	movs	r0, r3
 80009bc:	f000 fddc 	bl	8001578 <ssd1306_DrawPixel>
	for (int y = Y; y<(Y + height); y++){
 80009c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009c2:	3301      	adds	r3, #1
 80009c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80009c6:	68ba      	ldr	r2, [r7, #8]
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	18d3      	adds	r3, r2, r3
 80009cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80009ce:	429a      	cmp	r2, r3
 80009d0:	dbea      	blt.n	80009a8 <printBarGraph+0xac>
	}

	// Draw Fill
	for (int y = (Y+boarder); y<((Y + height)-boarder); y++){
 80009d2:	68ba      	ldr	r2, [r7, #8]
 80009d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80009d6:	18d3      	adds	r3, r2, r3
 80009d8:	627b      	str	r3, [r7, #36]	; 0x24
 80009da:	e022      	b.n	8000a22 <printBarGraph+0x126>
		for (int x = (X+boarder) ; x< (((X + width)-boarder)*progress/100); x++){
 80009dc:	68fa      	ldr	r2, [r7, #12]
 80009de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80009e0:	18d3      	adds	r3, r2, r3
 80009e2:	623b      	str	r3, [r7, #32]
 80009e4:	e00a      	b.n	80009fc <printBarGraph+0x100>
			ssd1306_DrawPixel(x,y,White);
 80009e6:	6a3b      	ldr	r3, [r7, #32]
 80009e8:	b2db      	uxtb	r3, r3
 80009ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009ec:	b2d1      	uxtb	r1, r2
 80009ee:	2201      	movs	r2, #1
 80009f0:	0018      	movs	r0, r3
 80009f2:	f000 fdc1 	bl	8001578 <ssd1306_DrawPixel>
		for (int x = (X+boarder) ; x< (((X + width)-boarder)*progress/100); x++){
 80009f6:	6a3b      	ldr	r3, [r7, #32]
 80009f8:	3301      	adds	r3, #1
 80009fa:	623b      	str	r3, [r7, #32]
 80009fc:	68fa      	ldr	r2, [r7, #12]
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	18d2      	adds	r2, r2, r3
 8000a02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000a04:	1ad3      	subs	r3, r2, r3
 8000a06:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000a08:	4353      	muls	r3, r2
 8000a0a:	2164      	movs	r1, #100	; 0x64
 8000a0c:	0018      	movs	r0, r3
 8000a0e:	f7ff fc0f 	bl	8000230 <__divsi3>
 8000a12:	0003      	movs	r3, r0
 8000a14:	001a      	movs	r2, r3
 8000a16:	6a3b      	ldr	r3, [r7, #32]
 8000a18:	4293      	cmp	r3, r2
 8000a1a:	dbe4      	blt.n	80009e6 <printBarGraph+0xea>
	for (int y = (Y+boarder); y<((Y + height)-boarder); y++){
 8000a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a1e:	3301      	adds	r3, #1
 8000a20:	627b      	str	r3, [r7, #36]	; 0x24
 8000a22:	68ba      	ldr	r2, [r7, #8]
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	18d2      	adds	r2, r2, r3
 8000a28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000a2a:	1ad3      	subs	r3, r2, r3
 8000a2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a2e:	429a      	cmp	r2, r3
 8000a30:	dbd4      	blt.n	80009dc <printBarGraph+0xe0>
		}
	}
}
 8000a32:	46c0      	nop			; (mov r8, r8)
 8000a34:	46c0      	nop			; (mov r8, r8)
 8000a36:	46bd      	mov	sp, r7
 8000a38:	b00e      	add	sp, #56	; 0x38
 8000a3a:	bd80      	pop	{r7, pc}

08000a3c <printBarMinMax>:

void printBarMinMax(int X, int Y, int height, int width, int min, int max){
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b088      	sub	sp, #32
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	60f8      	str	r0, [r7, #12]
 8000a44:	60b9      	str	r1, [r7, #8]
 8000a46:	607a      	str	r2, [r7, #4]
 8000a48:	603b      	str	r3, [r7, #0]

	// Setup x location to draw max marker then draw a vertical line
	// width should be the same as the bar graph, but height can vary to extend beyond the bar graph boarder
	int x = (X+width)*max/100;
 8000a4a:	68fa      	ldr	r2, [r7, #12]
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	18d3      	adds	r3, r2, r3
 8000a50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000a52:	4353      	muls	r3, r2
 8000a54:	2164      	movs	r1, #100	; 0x64
 8000a56:	0018      	movs	r0, r3
 8000a58:	f7ff fbea 	bl	8000230 <__divsi3>
 8000a5c:	0003      	movs	r3, r0
 8000a5e:	617b      	str	r3, [r7, #20]
	for (int y = (Y- height); y< (Y + height); y++){
 8000a60:	68ba      	ldr	r2, [r7, #8]
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	1ad3      	subs	r3, r2, r3
 8000a66:	61fb      	str	r3, [r7, #28]
 8000a68:	e00a      	b.n	8000a80 <printBarMinMax+0x44>
		ssd1306_DrawPixel(x,y,White);
 8000a6a:	697b      	ldr	r3, [r7, #20]
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	69fa      	ldr	r2, [r7, #28]
 8000a70:	b2d1      	uxtb	r1, r2
 8000a72:	2201      	movs	r2, #1
 8000a74:	0018      	movs	r0, r3
 8000a76:	f000 fd7f 	bl	8001578 <ssd1306_DrawPixel>
	for (int y = (Y- height); y< (Y + height); y++){
 8000a7a:	69fb      	ldr	r3, [r7, #28]
 8000a7c:	3301      	adds	r3, #1
 8000a7e:	61fb      	str	r3, [r7, #28]
 8000a80:	68ba      	ldr	r2, [r7, #8]
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	18d3      	adds	r3, r2, r3
 8000a86:	69fa      	ldr	r2, [r7, #28]
 8000a88:	429a      	cmp	r2, r3
 8000a8a:	dbee      	blt.n	8000a6a <printBarMinMax+0x2e>
	}

	// Setup x location to draw min marker then draw a vertical line
	x = (X+width)*min/100;
 8000a8c:	68fa      	ldr	r2, [r7, #12]
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	18d3      	adds	r3, r2, r3
 8000a92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000a94:	4353      	muls	r3, r2
 8000a96:	2164      	movs	r1, #100	; 0x64
 8000a98:	0018      	movs	r0, r3
 8000a9a:	f7ff fbc9 	bl	8000230 <__divsi3>
 8000a9e:	0003      	movs	r3, r0
 8000aa0:	617b      	str	r3, [r7, #20]
	for  (int y = (Y-height); y< (Y + height); y++){
 8000aa2:	68ba      	ldr	r2, [r7, #8]
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	1ad3      	subs	r3, r2, r3
 8000aa8:	61bb      	str	r3, [r7, #24]
 8000aaa:	e00a      	b.n	8000ac2 <printBarMinMax+0x86>
			ssd1306_DrawPixel(x,y,White);
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	b2db      	uxtb	r3, r3
 8000ab0:	69ba      	ldr	r2, [r7, #24]
 8000ab2:	b2d1      	uxtb	r1, r2
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	0018      	movs	r0, r3
 8000ab8:	f000 fd5e 	bl	8001578 <ssd1306_DrawPixel>
	for  (int y = (Y-height); y< (Y + height); y++){
 8000abc:	69bb      	ldr	r3, [r7, #24]
 8000abe:	3301      	adds	r3, #1
 8000ac0:	61bb      	str	r3, [r7, #24]
 8000ac2:	68ba      	ldr	r2, [r7, #8]
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	18d3      	adds	r3, r2, r3
 8000ac8:	69ba      	ldr	r2, [r7, #24]
 8000aca:	429a      	cmp	r2, r3
 8000acc:	dbee      	blt.n	8000aac <printBarMinMax+0x70>
		}
}
 8000ace:	46c0      	nop			; (mov r8, r8)
 8000ad0:	46c0      	nop			; (mov r8, r8)
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	b008      	add	sp, #32
 8000ad6:	bd80      	pop	{r7, pc}

08000ad8 <getPercent>:

int getPercent(struct rxData *data){
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b084      	sub	sp, #16
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
	// This returns a percentage of the current value vs the set limits for the data

	// Offset current and max values by min, then divide by the max to get the percentage
	int p = ((data->val-(data->min*data->scale))*100);
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	699a      	ldr	r2, [r3, #24]
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	6959      	ldr	r1, [r3, #20]
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	689b      	ldr	r3, [r3, #8]
 8000aec:	434b      	muls	r3, r1
 8000aee:	1ad3      	subs	r3, r2, r3
 8000af0:	2264      	movs	r2, #100	; 0x64
 8000af2:	4353      	muls	r3, r2
 8000af4:	60fb      	str	r3, [r7, #12]
	p = p / ((data->max - data->min)*data->scale);
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	691a      	ldr	r2, [r3, #16]
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	695b      	ldr	r3, [r3, #20]
 8000afe:	1ad2      	subs	r2, r2, r3
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	689b      	ldr	r3, [r3, #8]
 8000b04:	4353      	muls	r3, r2
 8000b06:	0019      	movs	r1, r3
 8000b08:	68f8      	ldr	r0, [r7, #12]
 8000b0a:	f7ff fb91 	bl	8000230 <__divsi3>
 8000b0e:	0003      	movs	r3, r0
 8000b10:	60fb      	str	r3, [r7, #12]

	// Limit percentage to 0 -> 100
	if (p > 100){
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	2b64      	cmp	r3, #100	; 0x64
 8000b16:	dd01      	ble.n	8000b1c <getPercent+0x44>
		p = 100;
 8000b18:	2364      	movs	r3, #100	; 0x64
 8000b1a:	60fb      	str	r3, [r7, #12]
	}
	if (p < 0){
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	da01      	bge.n	8000b26 <getPercent+0x4e>
		p = 0;
 8000b22:	2300      	movs	r3, #0
 8000b24:	60fb      	str	r3, [r7, #12]
	}

	return p;
 8000b26:	68fb      	ldr	r3, [r7, #12]
}
 8000b28:	0018      	movs	r0, r3
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	b004      	add	sp, #16
 8000b2e:	bd80      	pop	{r7, pc}

08000b30 <getMinMax>:

void getMinMax(struct rxData *data){
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b084      	sub	sp, #16
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
	// This stores the current minimum value and updates if necessary

	// Using the set time interval, set the current min/max so that the current value is the new min/max
	int currentTime = HAL_GetTick();
 8000b38:	f001 f8c6 	bl	8001cc8 <HAL_GetTick>
 8000b3c:	0003      	movs	r3, r0
 8000b3e:	60fb      	str	r3, [r7, #12]
	 if (((currentTime - lastTimeMin) > timerMinMax)){
 8000b40:	4b35      	ldr	r3, [pc, #212]	; (8000c18 <getMinMax+0xe8>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	68fa      	ldr	r2, [r7, #12]
 8000b46:	1ad2      	subs	r2, r2, r3
 8000b48:	4b34      	ldr	r3, [pc, #208]	; (8000c1c <getMinMax+0xec>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	dd08      	ble.n	8000b62 <getMinMax+0x32>
		lastTimeMin = currentTime;
 8000b50:	4b31      	ldr	r3, [pc, #196]	; (8000c18 <getMinMax+0xe8>)
 8000b52:	68fa      	ldr	r2, [r7, #12]
 8000b54:	601a      	str	r2, [r3, #0]
		data->valMin = 0xFFFF;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	4a31      	ldr	r2, [pc, #196]	; (8000c20 <getMinMax+0xf0>)
 8000b5a:	62da      	str	r2, [r3, #44]	; 0x2c
		data->valMax = 0;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	2200      	movs	r2, #0
 8000b60:	631a      	str	r2, [r3, #48]	; 0x30
	}

	 // Update min/max if current value is exceeded
	if (data->val < data->valMin){
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	699a      	ldr	r2, [r3, #24]
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b6a:	429a      	cmp	r2, r3
 8000b6c:	da24      	bge.n	8000bb8 <getMinMax+0x88>
		data->valMin = data->val;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	699a      	ldr	r2, [r3, #24]
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	62da      	str	r2, [r3, #44]	; 0x2c
		data->intMin = data->val / data->scale;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	699a      	ldr	r2, [r3, #24]
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	689b      	ldr	r3, [r3, #8]
 8000b7e:	0019      	movs	r1, r3
 8000b80:	0010      	movs	r0, r2
 8000b82:	f7ff fb55 	bl	8000230 <__divsi3>
 8000b86:	0003      	movs	r3, r0
 8000b88:	001a      	movs	r2, r3
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	621a      	str	r2, [r3, #32]
		data->decMin = ((data->val  - (data->intVal*data->scale)) * (data->decScale)/(data->scale));
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	699a      	ldr	r2, [r3, #24]
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	6819      	ldr	r1, [r3, #0]
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	689b      	ldr	r3, [r3, #8]
 8000b9a:	434b      	muls	r3, r1
 8000b9c:	1ad2      	subs	r2, r2, r3
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	68db      	ldr	r3, [r3, #12]
 8000ba2:	435a      	muls	r2, r3
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	689b      	ldr	r3, [r3, #8]
 8000ba8:	0019      	movs	r1, r3
 8000baa:	0010      	movs	r0, r2
 8000bac:	f7ff fb40 	bl	8000230 <__divsi3>
 8000bb0:	0003      	movs	r3, r0
 8000bb2:	001a      	movs	r2, r3
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	629a      	str	r2, [r3, #40]	; 0x28
	}

	// Update min/max if current value is exceeded
	if (data->val > data->valMax){
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	699a      	ldr	r2, [r3, #24]
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc0:	429a      	cmp	r2, r3
 8000bc2:	dd24      	ble.n	8000c0e <getMinMax+0xde>
		data->valMax = data->val;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	699a      	ldr	r2, [r3, #24]
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	631a      	str	r2, [r3, #48]	; 0x30
		data->intMax = data->val / data->scale;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	699a      	ldr	r2, [r3, #24]
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	689b      	ldr	r3, [r3, #8]
 8000bd4:	0019      	movs	r1, r3
 8000bd6:	0010      	movs	r0, r2
 8000bd8:	f7ff fb2a 	bl	8000230 <__divsi3>
 8000bdc:	0003      	movs	r3, r0
 8000bde:	001a      	movs	r2, r3
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	61da      	str	r2, [r3, #28]
		data->decMax = ((data->val  - (data->intVal*data->scale)) * (data->decScale)/(data->scale));
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	699a      	ldr	r2, [r3, #24]
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	6819      	ldr	r1, [r3, #0]
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	689b      	ldr	r3, [r3, #8]
 8000bf0:	434b      	muls	r3, r1
 8000bf2:	1ad2      	subs	r2, r2, r3
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	68db      	ldr	r3, [r3, #12]
 8000bf8:	435a      	muls	r2, r3
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	689b      	ldr	r3, [r3, #8]
 8000bfe:	0019      	movs	r1, r3
 8000c00:	0010      	movs	r0, r2
 8000c02:	f7ff fb15 	bl	8000230 <__divsi3>
 8000c06:	0003      	movs	r3, r0
 8000c08:	001a      	movs	r2, r3
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	625a      	str	r2, [r3, #36]	; 0x24
	}
}
 8000c0e:	46c0      	nop			; (mov r8, r8)
 8000c10:	46bd      	mov	sp, r7
 8000c12:	b004      	add	sp, #16
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	46c0      	nop			; (mov r8, r8)
 8000c18:	200007a8 	.word	0x200007a8
 8000c1c:	200001e4 	.word	0x200001e4
 8000c20:	0000ffff 	.word	0x0000ffff

08000c24 <printStartup>:

void printStartup(){
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0

	ssd1306_Fill(Black);
 8000c28:	2000      	movs	r0, #0
 8000c2a:	f000 fc4f 	bl	80014cc <ssd1306_Fill>
	printText("CAN 500k",5,05);
 8000c2e:	4b0b      	ldr	r3, [pc, #44]	; (8000c5c <printStartup+0x38>)
 8000c30:	2205      	movs	r2, #5
 8000c32:	2105      	movs	r1, #5
 8000c34:	0018      	movs	r0, r3
 8000c36:	f7ff fd4d 	bl	80006d4 <printText>
	printText("Base ID 512 ",5,25);
 8000c3a:	4b09      	ldr	r3, [pc, #36]	; (8000c60 <printStartup+0x3c>)
 8000c3c:	2219      	movs	r2, #25
 8000c3e:	2105      	movs	r1, #5
 8000c40:	0018      	movs	r0, r3
 8000c42:	f7ff fd47 	bl	80006d4 <printText>
	printText("Waiting ...",5,45);
 8000c46:	4b07      	ldr	r3, [pc, #28]	; (8000c64 <printStartup+0x40>)
 8000c48:	222d      	movs	r2, #45	; 0x2d
 8000c4a:	2105      	movs	r1, #5
 8000c4c:	0018      	movs	r0, r3
 8000c4e:	f7ff fd41 	bl	80006d4 <printText>
	ssd1306_UpdateScreen();
 8000c52:	f000 fc5f 	bl	8001514 <ssd1306_UpdateScreen>

}
 8000c56:	46c0      	nop			; (mov r8, r8)
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	080051a4 	.word	0x080051a4
 8000c60:	080051b0 	.word	0x080051b0
 8000c64:	080051c0 	.word	0x080051c0

08000c68 <getPercentMinMax>:


void getPercentMinMax(int p, int *min, int *max){
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b086      	sub	sp, #24
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	60f8      	str	r0, [r7, #12]
 8000c70:	60b9      	str	r1, [r7, #8]
 8000c72:	607a      	str	r2, [r7, #4]
	// This stores the current minimum percent value and updates if necessary

	// Using the set time interval, set the current min/max so that the current value is the new min/max
	int currentTime = HAL_GetTick();
 8000c74:	f001 f828 	bl	8001cc8 <HAL_GetTick>
 8000c78:	0003      	movs	r3, r0
 8000c7a:	617b      	str	r3, [r7, #20]
	if (((currentTime - lastTimeMinP) > timerMinMax)){
 8000c7c:	4b12      	ldr	r3, [pc, #72]	; (8000cc8 <getPercentMinMax+0x60>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	697a      	ldr	r2, [r7, #20]
 8000c82:	1ad2      	subs	r2, r2, r3
 8000c84:	4b11      	ldr	r3, [pc, #68]	; (8000ccc <getPercentMinMax+0x64>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	429a      	cmp	r2, r3
 8000c8a:	dd08      	ble.n	8000c9e <getPercentMinMax+0x36>
		 lastTimeMinP = currentTime;
 8000c8c:	4b0e      	ldr	r3, [pc, #56]	; (8000cc8 <getPercentMinMax+0x60>)
 8000c8e:	697a      	ldr	r2, [r7, #20]
 8000c90:	601a      	str	r2, [r3, #0]
		 *min = 999;
 8000c92:	68bb      	ldr	r3, [r7, #8]
 8000c94:	4a0e      	ldr	r2, [pc, #56]	; (8000cd0 <getPercentMinMax+0x68>)
 8000c96:	601a      	str	r2, [r3, #0]
		 *max = 0;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
	}
	// Update min/max if current value is exceeded
	if (p < *min){
 8000c9e:	68bb      	ldr	r3, [r7, #8]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	68fa      	ldr	r2, [r7, #12]
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	da02      	bge.n	8000cae <getPercentMinMax+0x46>
		*min = p;
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	68fa      	ldr	r2, [r7, #12]
 8000cac:	601a      	str	r2, [r3, #0]
	}
	if (p > *max){
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	68fa      	ldr	r2, [r7, #12]
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	dd02      	ble.n	8000cbe <getPercentMinMax+0x56>
		*max = p;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	68fa      	ldr	r2, [r7, #12]
 8000cbc:	601a      	str	r2, [r3, #0]
		}

}
 8000cbe:	46c0      	nop			; (mov r8, r8)
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	b006      	add	sp, #24
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	46c0      	nop			; (mov r8, r8)
 8000cc8:	200006f4 	.word	0x200006f4
 8000ccc:	200001e4 	.word	0x200001e4
 8000cd0:	000003e7 	.word	0x000003e7

08000cd4 <updateGauge>:




void updateGauge(int gaugePrint){
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b084      	sub	sp, #16
 8000cd8:	af02      	add	r7, sp, #8
 8000cda:	6078      	str	r0, [r7, #4]

	//Setup CAN filter with address for desired data
	//Print specified data to the display

	ssd1306_Fill(Black);
 8000cdc:	2000      	movs	r0, #0
 8000cde:	f000 fbf5 	bl	80014cc <ssd1306_Fill>
	switch (gaugePrint){
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	2b03      	cmp	r3, #3
 8000ce6:	d100      	bne.n	8000cea <updateGauge+0x16>
 8000ce8:	e094      	b.n	8000e14 <updateGauge+0x140>
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	2b03      	cmp	r3, #3
 8000cee:	dd00      	ble.n	8000cf2 <updateGauge+0x1e>
 8000cf0:	e0df      	b.n	8000eb2 <updateGauge+0x1de>
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	2b02      	cmp	r3, #2
 8000cf6:	d073      	beq.n	8000de0 <updateGauge+0x10c>
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	2b02      	cmp	r3, #2
 8000cfc:	dd00      	ble.n	8000d00 <updateGauge+0x2c>
 8000cfe:	e0d8      	b.n	8000eb2 <updateGauge+0x1de>
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d003      	beq.n	8000d0e <updateGauge+0x3a>
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	2b01      	cmp	r3, #1
 8000d0a:	d01a      	beq.n	8000d42 <updateGauge+0x6e>
 8000d0c:	e0d1      	b.n	8000eb2 <updateGauge+0x1de>

	case 0 : // Basic AFR
		currentFilter = 4;
 8000d0e:	4b7b      	ldr	r3, [pc, #492]	; (8000efc <updateGauge+0x228>)
 8000d10:	2204      	movs	r2, #4
 8000d12:	601a      	str	r2, [r3, #0]
		getIntValue(&afr);
 8000d14:	4b7a      	ldr	r3, [pc, #488]	; (8000f00 <updateGauge+0x22c>)
 8000d16:	0018      	movs	r0, r3
 8000d18:	f7ff fc10 	bl	800053c <getIntValue>
		getDecValue(&afr);
 8000d1c:	4b78      	ldr	r3, [pc, #480]	; (8000f00 <updateGauge+0x22c>)
 8000d1e:	0018      	movs	r0, r3
 8000d20:	f7ff fc22 	bl	8000568 <getDecValue>
		printText("AFR",5,2);
 8000d24:	4b77      	ldr	r3, [pc, #476]	; (8000f04 <updateGauge+0x230>)
 8000d26:	2202      	movs	r2, #2
 8000d28:	2105      	movs	r1, #5
 8000d2a:	0018      	movs	r0, r3
 8000d2c:	f7ff fcd2 	bl	80006d4 <printText>
		printDataDigitalLarge(&afr,5,30);
 8000d30:	4b73      	ldr	r3, [pc, #460]	; (8000f00 <updateGauge+0x22c>)
 8000d32:	221e      	movs	r2, #30
 8000d34:	2105      	movs	r1, #5
 8000d36:	0018      	movs	r0, r3
 8000d38:	f7ff fd20 	bl	800077c <printDataDigitalLarge>
		ssd1306_UpdateScreen();
 8000d3c:	f000 fbea 	bl	8001514 <ssd1306_UpdateScreen>
		break;
 8000d40:	e0d7      	b.n	8000ef2 <updateGauge+0x21e>

	case 1 : // AFR with bar graph and min/max
		currentFilter = 4;
 8000d42:	4b6e      	ldr	r3, [pc, #440]	; (8000efc <updateGauge+0x228>)
 8000d44:	2204      	movs	r2, #4
 8000d46:	601a      	str	r2, [r3, #0]
		getIntValue(&afr);
 8000d48:	4b6d      	ldr	r3, [pc, #436]	; (8000f00 <updateGauge+0x22c>)
 8000d4a:	0018      	movs	r0, r3
 8000d4c:	f7ff fbf6 	bl	800053c <getIntValue>
		getDecValue(&afr);
 8000d50:	4b6b      	ldr	r3, [pc, #428]	; (8000f00 <updateGauge+0x22c>)
 8000d52:	0018      	movs	r0, r3
 8000d54:	f7ff fc08 	bl	8000568 <getDecValue>
		getMinMax(&afr);
 8000d58:	4b69      	ldr	r3, [pc, #420]	; (8000f00 <updateGauge+0x22c>)
 8000d5a:	0018      	movs	r0, r3
 8000d5c:	f7ff fee8 	bl	8000b30 <getMinMax>
		p = getPercent(&afr);
 8000d60:	4b67      	ldr	r3, [pc, #412]	; (8000f00 <updateGauge+0x22c>)
 8000d62:	0018      	movs	r0, r3
 8000d64:	f7ff feb8 	bl	8000ad8 <getPercent>
 8000d68:	0002      	movs	r2, r0
 8000d6a:	4b67      	ldr	r3, [pc, #412]	; (8000f08 <updateGauge+0x234>)
 8000d6c:	601a      	str	r2, [r3, #0]
		getPercentMinMax(p,&pMin,&pMax);
 8000d6e:	4b66      	ldr	r3, [pc, #408]	; (8000f08 <updateGauge+0x234>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4a66      	ldr	r2, [pc, #408]	; (8000f0c <updateGauge+0x238>)
 8000d74:	4966      	ldr	r1, [pc, #408]	; (8000f10 <updateGauge+0x23c>)
 8000d76:	0018      	movs	r0, r3
 8000d78:	f7ff ff76 	bl	8000c68 <getPercentMinMax>
		printBarGraph(5,0,10,120,p,2);
 8000d7c:	4b62      	ldr	r3, [pc, #392]	; (8000f08 <updateGauge+0x234>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	2202      	movs	r2, #2
 8000d82:	9201      	str	r2, [sp, #4]
 8000d84:	9300      	str	r3, [sp, #0]
 8000d86:	2378      	movs	r3, #120	; 0x78
 8000d88:	220a      	movs	r2, #10
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	2005      	movs	r0, #5
 8000d8e:	f7ff fdb5 	bl	80008fc <printBarGraph>
		printBarMinMax(5,0,20,120,pMin,pMax);
 8000d92:	4b5f      	ldr	r3, [pc, #380]	; (8000f10 <updateGauge+0x23c>)
 8000d94:	681a      	ldr	r2, [r3, #0]
 8000d96:	4b5d      	ldr	r3, [pc, #372]	; (8000f0c <updateGauge+0x238>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	9301      	str	r3, [sp, #4]
 8000d9c:	9200      	str	r2, [sp, #0]
 8000d9e:	2378      	movs	r3, #120	; 0x78
 8000da0:	2214      	movs	r2, #20
 8000da2:	2100      	movs	r1, #0
 8000da4:	2005      	movs	r0, #5
 8000da6:	f7ff fe49 	bl	8000a3c <printBarMinMax>
		printTextSmall("AFR",2,45);
 8000daa:	4b56      	ldr	r3, [pc, #344]	; (8000f04 <updateGauge+0x230>)
 8000dac:	222d      	movs	r2, #45	; 0x2d
 8000dae:	2102      	movs	r1, #2
 8000db0:	0018      	movs	r0, r3
 8000db2:	f7ff fcc7 	bl	8000744 <printTextSmall>
		printDataMin(&afr,2,25);
 8000db6:	4b52      	ldr	r3, [pc, #328]	; (8000f00 <updateGauge+0x22c>)
 8000db8:	2219      	movs	r2, #25
 8000dba:	2102      	movs	r1, #2
 8000dbc:	0018      	movs	r0, r3
 8000dbe:	f7ff fd1d 	bl	80007fc <printDataMin>
		printDataMax(&afr,2,35);
 8000dc2:	4b4f      	ldr	r3, [pc, #316]	; (8000f00 <updateGauge+0x22c>)
 8000dc4:	2223      	movs	r2, #35	; 0x23
 8000dc6:	2102      	movs	r1, #2
 8000dc8:	0018      	movs	r0, r3
 8000dca:	f7ff fd57 	bl	800087c <printDataMax>

		printDataDigitalLarge(&afr,40,30);
 8000dce:	4b4c      	ldr	r3, [pc, #304]	; (8000f00 <updateGauge+0x22c>)
 8000dd0:	221e      	movs	r2, #30
 8000dd2:	2128      	movs	r1, #40	; 0x28
 8000dd4:	0018      	movs	r0, r3
 8000dd6:	f7ff fcd1 	bl	800077c <printDataDigitalLarge>
		ssd1306_UpdateScreen();
 8000dda:	f000 fb9b 	bl	8001514 <ssd1306_UpdateScreen>
		break;
 8000dde:	e088      	b.n	8000ef2 <updateGauge+0x21e>


	case 2 : // Basic RPM
		currentFilter = 1;
 8000de0:	4b46      	ldr	r3, [pc, #280]	; (8000efc <updateGauge+0x228>)
 8000de2:	2201      	movs	r2, #1
 8000de4:	601a      	str	r2, [r3, #0]
		getIntValue(&rpm);
 8000de6:	4b4b      	ldr	r3, [pc, #300]	; (8000f14 <updateGauge+0x240>)
 8000de8:	0018      	movs	r0, r3
 8000dea:	f7ff fba7 	bl	800053c <getIntValue>
		getDecValue(&rpm);
 8000dee:	4b49      	ldr	r3, [pc, #292]	; (8000f14 <updateGauge+0x240>)
 8000df0:	0018      	movs	r0, r3
 8000df2:	f7ff fbb9 	bl	8000568 <getDecValue>
		printText("RPM",5,2);
 8000df6:	4b48      	ldr	r3, [pc, #288]	; (8000f18 <updateGauge+0x244>)
 8000df8:	2202      	movs	r2, #2
 8000dfa:	2105      	movs	r1, #5
 8000dfc:	0018      	movs	r0, r3
 8000dfe:	f7ff fc69 	bl	80006d4 <printText>
		printDataDigitalLarge(&rpm,5,30);
 8000e02:	4b44      	ldr	r3, [pc, #272]	; (8000f14 <updateGauge+0x240>)
 8000e04:	221e      	movs	r2, #30
 8000e06:	2105      	movs	r1, #5
 8000e08:	0018      	movs	r0, r3
 8000e0a:	f7ff fcb7 	bl	800077c <printDataDigitalLarge>
		ssd1306_UpdateScreen();
 8000e0e:	f000 fb81 	bl	8001514 <ssd1306_UpdateScreen>
		break;
 8000e12:	e06e      	b.n	8000ef2 <updateGauge+0x21e>

	case 3 :
		currentFilter = 1;
 8000e14:	4b39      	ldr	r3, [pc, #228]	; (8000efc <updateGauge+0x228>)
 8000e16:	2201      	movs	r2, #1
 8000e18:	601a      	str	r2, [r3, #0]
		getIntValue(&rpm);
 8000e1a:	4b3e      	ldr	r3, [pc, #248]	; (8000f14 <updateGauge+0x240>)
 8000e1c:	0018      	movs	r0, r3
 8000e1e:	f7ff fb8d 	bl	800053c <getIntValue>
		getDecValue(&rpm);
 8000e22:	4b3c      	ldr	r3, [pc, #240]	; (8000f14 <updateGauge+0x240>)
 8000e24:	0018      	movs	r0, r3
 8000e26:	f7ff fb9f 	bl	8000568 <getDecValue>
		getMinMax(&rpm);
 8000e2a:	4b3a      	ldr	r3, [pc, #232]	; (8000f14 <updateGauge+0x240>)
 8000e2c:	0018      	movs	r0, r3
 8000e2e:	f7ff fe7f 	bl	8000b30 <getMinMax>
		p = getPercent(&rpm);
 8000e32:	4b38      	ldr	r3, [pc, #224]	; (8000f14 <updateGauge+0x240>)
 8000e34:	0018      	movs	r0, r3
 8000e36:	f7ff fe4f 	bl	8000ad8 <getPercent>
 8000e3a:	0002      	movs	r2, r0
 8000e3c:	4b32      	ldr	r3, [pc, #200]	; (8000f08 <updateGauge+0x234>)
 8000e3e:	601a      	str	r2, [r3, #0]
		getPercentMinMax(p,&pMin,&pMax);
 8000e40:	4b31      	ldr	r3, [pc, #196]	; (8000f08 <updateGauge+0x234>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a31      	ldr	r2, [pc, #196]	; (8000f0c <updateGauge+0x238>)
 8000e46:	4932      	ldr	r1, [pc, #200]	; (8000f10 <updateGauge+0x23c>)
 8000e48:	0018      	movs	r0, r3
 8000e4a:	f7ff ff0d 	bl	8000c68 <getPercentMinMax>

		printBarGraph(5,0,10,120,p,2);
 8000e4e:	4b2e      	ldr	r3, [pc, #184]	; (8000f08 <updateGauge+0x234>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	2202      	movs	r2, #2
 8000e54:	9201      	str	r2, [sp, #4]
 8000e56:	9300      	str	r3, [sp, #0]
 8000e58:	2378      	movs	r3, #120	; 0x78
 8000e5a:	220a      	movs	r2, #10
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	2005      	movs	r0, #5
 8000e60:	f7ff fd4c 	bl	80008fc <printBarGraph>
		printBarMinMax(5,0,20,120,pMin,pMax);
 8000e64:	4b2a      	ldr	r3, [pc, #168]	; (8000f10 <updateGauge+0x23c>)
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	4b28      	ldr	r3, [pc, #160]	; (8000f0c <updateGauge+0x238>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	9301      	str	r3, [sp, #4]
 8000e6e:	9200      	str	r2, [sp, #0]
 8000e70:	2378      	movs	r3, #120	; 0x78
 8000e72:	2214      	movs	r2, #20
 8000e74:	2100      	movs	r1, #0
 8000e76:	2005      	movs	r0, #5
 8000e78:	f7ff fde0 	bl	8000a3c <printBarMinMax>
		printTextSmall("RPM",2,45);
 8000e7c:	4b26      	ldr	r3, [pc, #152]	; (8000f18 <updateGauge+0x244>)
 8000e7e:	222d      	movs	r2, #45	; 0x2d
 8000e80:	2102      	movs	r1, #2
 8000e82:	0018      	movs	r0, r3
 8000e84:	f7ff fc5e 	bl	8000744 <printTextSmall>
		printDataMin(&rpm,2,25);
 8000e88:	4b22      	ldr	r3, [pc, #136]	; (8000f14 <updateGauge+0x240>)
 8000e8a:	2219      	movs	r2, #25
 8000e8c:	2102      	movs	r1, #2
 8000e8e:	0018      	movs	r0, r3
 8000e90:	f7ff fcb4 	bl	80007fc <printDataMin>
		printDataMax(&rpm,2,35);
 8000e94:	4b1f      	ldr	r3, [pc, #124]	; (8000f14 <updateGauge+0x240>)
 8000e96:	2223      	movs	r2, #35	; 0x23
 8000e98:	2102      	movs	r1, #2
 8000e9a:	0018      	movs	r0, r3
 8000e9c:	f7ff fcee 	bl	800087c <printDataMax>
		printDataDigitalLarge(&rpm,40,30);
 8000ea0:	4b1c      	ldr	r3, [pc, #112]	; (8000f14 <updateGauge+0x240>)
 8000ea2:	221e      	movs	r2, #30
 8000ea4:	2128      	movs	r1, #40	; 0x28
 8000ea6:	0018      	movs	r0, r3
 8000ea8:	f7ff fc68 	bl	800077c <printDataDigitalLarge>
		ssd1306_UpdateScreen();
 8000eac:	f000 fb32 	bl	8001514 <ssd1306_UpdateScreen>
		break;
 8000eb0:	e01f      	b.n	8000ef2 <updateGauge+0x21e>



	default : // If no gauge is available print something
		ssd1306_SetCursor(5, 30);
 8000eb2:	211e      	movs	r1, #30
 8000eb4:	2005      	movs	r0, #5
 8000eb6:	f000 fc9d 	bl	80017f4 <ssd1306_SetCursor>
		ssd1306_WriteString("No Data", Font_11x18, White);
 8000eba:	4a18      	ldr	r2, [pc, #96]	; (8000f1c <updateGauge+0x248>)
 8000ebc:	4818      	ldr	r0, [pc, #96]	; (8000f20 <updateGauge+0x24c>)
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	6811      	ldr	r1, [r2, #0]
 8000ec2:	6852      	ldr	r2, [r2, #4]
 8000ec4:	f000 fc6c 	bl	80017a0 <ssd1306_WriteString>
		ssd1306_SetCursor(5, 0);
 8000ec8:	2100      	movs	r1, #0
 8000eca:	2005      	movs	r0, #5
 8000ecc:	f000 fc92 	bl	80017f4 <ssd1306_SetCursor>
		snprintf(buff, sizeof(buff), "%d", currentGauge);
 8000ed0:	4b14      	ldr	r3, [pc, #80]	; (8000f24 <updateGauge+0x250>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a14      	ldr	r2, [pc, #80]	; (8000f28 <updateGauge+0x254>)
 8000ed6:	4815      	ldr	r0, [pc, #84]	; (8000f2c <updateGauge+0x258>)
 8000ed8:	2110      	movs	r1, #16
 8000eda:	f003 fd21 	bl	8004920 <sniprintf>
		ssd1306_WriteString(buff, Font_11x18, White);
 8000ede:	4a0f      	ldr	r2, [pc, #60]	; (8000f1c <updateGauge+0x248>)
 8000ee0:	4812      	ldr	r0, [pc, #72]	; (8000f2c <updateGauge+0x258>)
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	6811      	ldr	r1, [r2, #0]
 8000ee6:	6852      	ldr	r2, [r2, #4]
 8000ee8:	f000 fc5a 	bl	80017a0 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8000eec:	f000 fb12 	bl	8001514 <ssd1306_UpdateScreen>
		break;
 8000ef0:	46c0      	nop			; (mov r8, r8)


	}
}
 8000ef2:	46c0      	nop			; (mov r8, r8)
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	b002      	add	sp, #8
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	46c0      	nop			; (mov r8, r8)
 8000efc:	200001dc 	.word	0x200001dc
 8000f00:	20000000 	.word	0x20000000
 8000f04:	080051cc 	.word	0x080051cc
 8000f08:	200006f8 	.word	0x200006f8
 8000f0c:	200002c8 	.word	0x200002c8
 8000f10:	200001e0 	.word	0x200001e0
 8000f14:	20000034 	.word	0x20000034
 8000f18:	080051d0 	.word	0x080051d0
 8000f1c:	200001f4 	.word	0x200001f4
 8000f20:	080051d4 	.word	0x080051d4
 8000f24:	200002a4 	.word	0x200002a4
 8000f28:	080051a0 	.word	0x080051a0
 8000f2c:	20000768 	.word	0x20000768

08000f30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f34:	f000 fe6e 	bl	8001c14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f38:	f000 f8b0 	bl	800109c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f3c:	f000 f9ae 	bl	800129c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f40:	f000 f97c 	bl	800123c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000f44:	f000 f93a 	bl	80011bc <MX_I2C1_Init>
  MX_CAN_Init();
 8000f48:	f000 f900 	bl	800114c <MX_CAN_Init>
  /* USER CODE BEGIN 2 */

	// Setup CAN
	canFilterInit(filterID[currentFilter], filterID[currentFilter]);
 8000f4c:	4b43      	ldr	r3, [pc, #268]	; (800105c <main+0x12c>)
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	4b43      	ldr	r3, [pc, #268]	; (8001060 <main+0x130>)
 8000f52:	0092      	lsls	r2, r2, #2
 8000f54:	58d0      	ldr	r0, [r2, r3]
 8000f56:	4b41      	ldr	r3, [pc, #260]	; (800105c <main+0x12c>)
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	4b41      	ldr	r3, [pc, #260]	; (8001060 <main+0x130>)
 8000f5c:	0092      	lsls	r2, r2, #2
 8000f5e:	58d3      	ldr	r3, [r2, r3]
 8000f60:	0019      	movs	r1, r3
 8000f62:	f7ff fa9d 	bl	80004a0 <canFilterInit>
	HAL_CAN_Start(&hcan);
 8000f66:	4b3f      	ldr	r3, [pc, #252]	; (8001064 <main+0x134>)
 8000f68:	0018      	movs	r0, r3
 8000f6a:	f001 f8cb 	bl	8002104 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan,CAN_IT_RX_FIFO0_MSG_PENDING);
 8000f6e:	4b3d      	ldr	r3, [pc, #244]	; (8001064 <main+0x134>)
 8000f70:	2102      	movs	r1, #2
 8000f72:	0018      	movs	r0, r3
 8000f74:	f001 fa28 	bl	80023c8 <HAL_CAN_ActivateNotification>

	// Initialize Display and clear
	ssd1306_Init();
 8000f78:	f000 fa3c 	bl	80013f4 <ssd1306_Init>
	printStartup();
 8000f7c:	f7ff fe52 	bl	8000c24 <printStartup>

    /* USER CODE BEGIN 3 */

	// Print current gauge to display

	 if (lastCanMessage > 0 && ((HAL_GetTick() - lastCanMessage) > canWaitTime)){
 8000f80:	4b39      	ldr	r3, [pc, #228]	; (8001068 <main+0x138>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	dd20      	ble.n	8000fca <main+0x9a>
 8000f88:	f000 fe9e 	bl	8001cc8 <HAL_GetTick>
 8000f8c:	0002      	movs	r2, r0
 8000f8e:	4b36      	ldr	r3, [pc, #216]	; (8001068 <main+0x138>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	1ad2      	subs	r2, r2, r3
 8000f94:	4b35      	ldr	r3, [pc, #212]	; (800106c <main+0x13c>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	d916      	bls.n	8000fca <main+0x9a>
		 	ssd1306_Fill(Black);
 8000f9c:	2000      	movs	r0, #0
 8000f9e:	f000 fa95 	bl	80014cc <ssd1306_Fill>
		 	printTextLarge("Lost CAN",5,5);
 8000fa2:	4b33      	ldr	r3, [pc, #204]	; (8001070 <main+0x140>)
 8000fa4:	2205      	movs	r2, #5
 8000fa6:	2105      	movs	r1, #5
 8000fa8:	0018      	movs	r0, r3
 8000faa:	f7ff fbaf 	bl	800070c <printTextLarge>
		 	printTextLarge("Connection",5,20);
 8000fae:	4b31      	ldr	r3, [pc, #196]	; (8001074 <main+0x144>)
 8000fb0:	2214      	movs	r2, #20
 8000fb2:	2105      	movs	r1, #5
 8000fb4:	0018      	movs	r0, r3
 8000fb6:	f7ff fba9 	bl	800070c <printTextLarge>
		 	printTextLarge("!!!!!!!",20,40);
 8000fba:	4b2f      	ldr	r3, [pc, #188]	; (8001078 <main+0x148>)
 8000fbc:	2228      	movs	r2, #40	; 0x28
 8000fbe:	2114      	movs	r1, #20
 8000fc0:	0018      	movs	r0, r3
 8000fc2:	f7ff fba3 	bl	800070c <printTextLarge>
		 	ssd1306_UpdateScreen();
 8000fc6:	f000 faa5 	bl	8001514 <ssd1306_UpdateScreen>
	 }

	// Get data from received CAN message
	 if (msgRXstatus == 1){
 8000fca:	4b2c      	ldr	r3, [pc, #176]	; (800107c <main+0x14c>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d10f      	bne.n	8000ff2 <main+0xc2>
		 getData();
 8000fd2:	f7ff fae9 	bl	80005a8 <getData>
		 msgRXstatus = 0;
 8000fd6:	4b29      	ldr	r3, [pc, #164]	; (800107c <main+0x14c>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
		 updateGauge(currentGauge);
 8000fdc:	4b28      	ldr	r3, [pc, #160]	; (8001080 <main+0x150>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	0018      	movs	r0, r3
 8000fe2:	f7ff fe77 	bl	8000cd4 <updateGauge>
		 lastCanMessage = HAL_GetTick();
 8000fe6:	f000 fe6f 	bl	8001cc8 <HAL_GetTick>
 8000fea:	0003      	movs	r3, r0
 8000fec:	001a      	movs	r2, r3
 8000fee:	4b1e      	ldr	r3, [pc, #120]	; (8001068 <main+0x138>)
 8000ff0:	601a      	str	r2, [r3, #0]
	 }

	 // Cycle gauges if the button was pressed
	 if (btnPress == 1){
 8000ff2:	4b24      	ldr	r3, [pc, #144]	; (8001084 <main+0x154>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	d1c2      	bne.n	8000f80 <main+0x50>

		 btnPress = 0;
 8000ffa:	4b22      	ldr	r3, [pc, #136]	; (8001084 <main+0x154>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]
		 // Reset min/max on gauge change
		 lastTimeMax=0;
 8001000:	4b21      	ldr	r3, [pc, #132]	; (8001088 <main+0x158>)
 8001002:	2200      	movs	r2, #0
 8001004:	601a      	str	r2, [r3, #0]
		 lastTimeMin=0;
 8001006:	4b21      	ldr	r3, [pc, #132]	; (800108c <main+0x15c>)
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
		 lastTimeMaxP=0;
 800100c:	4b20      	ldr	r3, [pc, #128]	; (8001090 <main+0x160>)
 800100e:	2200      	movs	r2, #0
 8001010:	601a      	str	r2, [r3, #0]
		 lastTimeMinP=0;
 8001012:	4b20      	ldr	r3, [pc, #128]	; (8001094 <main+0x164>)
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]

		 currentGauge++;
 8001018:	4b19      	ldr	r3, [pc, #100]	; (8001080 <main+0x150>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	1c5a      	adds	r2, r3, #1
 800101e:	4b18      	ldr	r3, [pc, #96]	; (8001080 <main+0x150>)
 8001020:	601a      	str	r2, [r3, #0]
		 if (currentGauge > totalNumGauge){
 8001022:	4b17      	ldr	r3, [pc, #92]	; (8001080 <main+0x150>)
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	4b1c      	ldr	r3, [pc, #112]	; (8001098 <main+0x168>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	429a      	cmp	r2, r3
 800102c:	dd02      	ble.n	8001034 <main+0x104>
			 currentGauge = 0;
 800102e:	4b14      	ldr	r3, [pc, #80]	; (8001080 <main+0x150>)
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
		 }
		 updateGauge(currentGauge);
 8001034:	4b12      	ldr	r3, [pc, #72]	; (8001080 <main+0x150>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	0018      	movs	r0, r3
 800103a:	f7ff fe4b 	bl	8000cd4 <updateGauge>
		 canFilterInit(filterID[currentFilter], filterID[currentFilter]);
 800103e:	4b07      	ldr	r3, [pc, #28]	; (800105c <main+0x12c>)
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	4b07      	ldr	r3, [pc, #28]	; (8001060 <main+0x130>)
 8001044:	0092      	lsls	r2, r2, #2
 8001046:	58d0      	ldr	r0, [r2, r3]
 8001048:	4b04      	ldr	r3, [pc, #16]	; (800105c <main+0x12c>)
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	4b04      	ldr	r3, [pc, #16]	; (8001060 <main+0x130>)
 800104e:	0092      	lsls	r2, r2, #2
 8001050:	58d3      	ldr	r3, [r2, r3]
 8001052:	0019      	movs	r1, r3
 8001054:	f7ff fa24 	bl	80004a0 <canFilterInit>
	 if (lastCanMessage > 0 && ((HAL_GetTick() - lastCanMessage) > canWaitTime)){
 8001058:	e792      	b.n	8000f80 <main+0x50>
 800105a:	46c0      	nop			; (mov r8, r8)
 800105c:	200001dc 	.word	0x200001dc
 8001060:	0800521c 	.word	0x0800521c
 8001064:	2000077c 	.word	0x2000077c
 8001068:	200002cc 	.word	0x200002cc
 800106c:	200001e8 	.word	0x200001e8
 8001070:	080051dc 	.word	0x080051dc
 8001074:	080051e8 	.word	0x080051e8
 8001078:	080051f4 	.word	0x080051f4
 800107c:	200002c4 	.word	0x200002c4
 8001080:	200002a4 	.word	0x200002a4
 8001084:	200002a0 	.word	0x200002a0
 8001088:	20000778 	.word	0x20000778
 800108c:	200007a8 	.word	0x200007a8
 8001090:	200007a4 	.word	0x200007a4
 8001094:	200006f4 	.word	0x200006f4
 8001098:	200001d8 	.word	0x200001d8

0800109c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800109c:	b590      	push	{r4, r7, lr}
 800109e:	b099      	sub	sp, #100	; 0x64
 80010a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010a2:	242c      	movs	r4, #44	; 0x2c
 80010a4:	193b      	adds	r3, r7, r4
 80010a6:	0018      	movs	r0, r3
 80010a8:	2334      	movs	r3, #52	; 0x34
 80010aa:	001a      	movs	r2, r3
 80010ac:	2100      	movs	r1, #0
 80010ae:	f003 fc2e 	bl	800490e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010b2:	231c      	movs	r3, #28
 80010b4:	18fb      	adds	r3, r7, r3
 80010b6:	0018      	movs	r0, r3
 80010b8:	2310      	movs	r3, #16
 80010ba:	001a      	movs	r2, r3
 80010bc:	2100      	movs	r1, #0
 80010be:	f003 fc26 	bl	800490e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010c2:	1d3b      	adds	r3, r7, #4
 80010c4:	0018      	movs	r0, r3
 80010c6:	2318      	movs	r3, #24
 80010c8:	001a      	movs	r2, r3
 80010ca:	2100      	movs	r1, #0
 80010cc:	f003 fc1f 	bl	800490e <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010d0:	0021      	movs	r1, r4
 80010d2:	187b      	adds	r3, r7, r1
 80010d4:	2202      	movs	r2, #2
 80010d6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010d8:	187b      	adds	r3, r7, r1
 80010da:	2201      	movs	r2, #1
 80010dc:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010de:	187b      	adds	r3, r7, r1
 80010e0:	2210      	movs	r2, #16
 80010e2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80010e4:	187b      	adds	r3, r7, r1
 80010e6:	2200      	movs	r2, #0
 80010e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010ea:	187b      	adds	r3, r7, r1
 80010ec:	0018      	movs	r0, r3
 80010ee:	f002 fa99 	bl	8003624 <HAL_RCC_OscConfig>
 80010f2:	1e03      	subs	r3, r0, #0
 80010f4:	d001      	beq.n	80010fa <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80010f6:	f000 f93f 	bl	8001378 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010fa:	211c      	movs	r1, #28
 80010fc:	187b      	adds	r3, r7, r1
 80010fe:	2207      	movs	r2, #7
 8001100:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001102:	187b      	adds	r3, r7, r1
 8001104:	2200      	movs	r2, #0
 8001106:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001108:	187b      	adds	r3, r7, r1
 800110a:	2200      	movs	r2, #0
 800110c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800110e:	187b      	adds	r3, r7, r1
 8001110:	2200      	movs	r2, #0
 8001112:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001114:	187b      	adds	r3, r7, r1
 8001116:	2100      	movs	r1, #0
 8001118:	0018      	movs	r0, r3
 800111a:	f002 fe09 	bl	8003d30 <HAL_RCC_ClockConfig>
 800111e:	1e03      	subs	r3, r0, #0
 8001120:	d001      	beq.n	8001126 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001122:	f000 f929 	bl	8001378 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001126:	1d3b      	adds	r3, r7, #4
 8001128:	2220      	movs	r2, #32
 800112a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800112c:	1d3b      	adds	r3, r7, #4
 800112e:	2200      	movs	r2, #0
 8001130:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001132:	1d3b      	adds	r3, r7, #4
 8001134:	0018      	movs	r0, r3
 8001136:	f002 ff75 	bl	8004024 <HAL_RCCEx_PeriphCLKConfig>
 800113a:	1e03      	subs	r3, r0, #0
 800113c:	d001      	beq.n	8001142 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800113e:	f000 f91b 	bl	8001378 <Error_Handler>
  }
}
 8001142:	46c0      	nop			; (mov r8, r8)
 8001144:	46bd      	mov	sp, r7
 8001146:	b019      	add	sp, #100	; 0x64
 8001148:	bd90      	pop	{r4, r7, pc}
	...

0800114c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8001150:	4b18      	ldr	r3, [pc, #96]	; (80011b4 <MX_CAN_Init+0x68>)
 8001152:	4a19      	ldr	r2, [pc, #100]	; (80011b8 <MX_CAN_Init+0x6c>)
 8001154:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 2;
 8001156:	4b17      	ldr	r3, [pc, #92]	; (80011b4 <MX_CAN_Init+0x68>)
 8001158:	2202      	movs	r2, #2
 800115a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800115c:	4b15      	ldr	r3, [pc, #84]	; (80011b4 <MX_CAN_Init+0x68>)
 800115e:	2200      	movs	r2, #0
 8001160:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001162:	4b14      	ldr	r3, [pc, #80]	; (80011b4 <MX_CAN_Init+0x68>)
 8001164:	2200      	movs	r2, #0
 8001166:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_3TQ;
 8001168:	4b12      	ldr	r3, [pc, #72]	; (80011b4 <MX_CAN_Init+0x68>)
 800116a:	2280      	movs	r2, #128	; 0x80
 800116c:	0292      	lsls	r2, r2, #10
 800116e:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 8001170:	4b10      	ldr	r3, [pc, #64]	; (80011b4 <MX_CAN_Init+0x68>)
 8001172:	22c0      	movs	r2, #192	; 0xc0
 8001174:	0392      	lsls	r2, r2, #14
 8001176:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001178:	4b0e      	ldr	r3, [pc, #56]	; (80011b4 <MX_CAN_Init+0x68>)
 800117a:	2200      	movs	r2, #0
 800117c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800117e:	4b0d      	ldr	r3, [pc, #52]	; (80011b4 <MX_CAN_Init+0x68>)
 8001180:	2200      	movs	r2, #0
 8001182:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001184:	4b0b      	ldr	r3, [pc, #44]	; (80011b4 <MX_CAN_Init+0x68>)
 8001186:	2200      	movs	r2, #0
 8001188:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800118a:	4b0a      	ldr	r3, [pc, #40]	; (80011b4 <MX_CAN_Init+0x68>)
 800118c:	2200      	movs	r2, #0
 800118e:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001190:	4b08      	ldr	r3, [pc, #32]	; (80011b4 <MX_CAN_Init+0x68>)
 8001192:	2200      	movs	r2, #0
 8001194:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001196:	4b07      	ldr	r3, [pc, #28]	; (80011b4 <MX_CAN_Init+0x68>)
 8001198:	2200      	movs	r2, #0
 800119a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800119c:	4b05      	ldr	r3, [pc, #20]	; (80011b4 <MX_CAN_Init+0x68>)
 800119e:	0018      	movs	r0, r3
 80011a0:	f000 fdc0 	bl	8001d24 <HAL_CAN_Init>
 80011a4:	1e03      	subs	r3, r0, #0
 80011a6:	d001      	beq.n	80011ac <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80011a8:	f000 f8e6 	bl	8001378 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80011ac:	46c0      	nop			; (mov r8, r8)
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	46c0      	nop			; (mov r8, r8)
 80011b4:	2000077c 	.word	0x2000077c
 80011b8:	40006400 	.word	0x40006400

080011bc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011c0:	4b1b      	ldr	r3, [pc, #108]	; (8001230 <MX_I2C1_Init+0x74>)
 80011c2:	4a1c      	ldr	r2, [pc, #112]	; (8001234 <MX_I2C1_Init+0x78>)
 80011c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 80011c6:	4b1a      	ldr	r3, [pc, #104]	; (8001230 <MX_I2C1_Init+0x74>)
 80011c8:	4a1b      	ldr	r2, [pc, #108]	; (8001238 <MX_I2C1_Init+0x7c>)
 80011ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80011cc:	4b18      	ldr	r3, [pc, #96]	; (8001230 <MX_I2C1_Init+0x74>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011d2:	4b17      	ldr	r3, [pc, #92]	; (8001230 <MX_I2C1_Init+0x74>)
 80011d4:	2201      	movs	r2, #1
 80011d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011d8:	4b15      	ldr	r3, [pc, #84]	; (8001230 <MX_I2C1_Init+0x74>)
 80011da:	2200      	movs	r2, #0
 80011dc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80011de:	4b14      	ldr	r3, [pc, #80]	; (8001230 <MX_I2C1_Init+0x74>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011e4:	4b12      	ldr	r3, [pc, #72]	; (8001230 <MX_I2C1_Init+0x74>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011ea:	4b11      	ldr	r3, [pc, #68]	; (8001230 <MX_I2C1_Init+0x74>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011f0:	4b0f      	ldr	r3, [pc, #60]	; (8001230 <MX_I2C1_Init+0x74>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011f6:	4b0e      	ldr	r3, [pc, #56]	; (8001230 <MX_I2C1_Init+0x74>)
 80011f8:	0018      	movs	r0, r3
 80011fa:	f001 fdc7 	bl	8002d8c <HAL_I2C_Init>
 80011fe:	1e03      	subs	r3, r0, #0
 8001200:	d001      	beq.n	8001206 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001202:	f000 f8b9 	bl	8001378 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001206:	4b0a      	ldr	r3, [pc, #40]	; (8001230 <MX_I2C1_Init+0x74>)
 8001208:	2100      	movs	r1, #0
 800120a:	0018      	movs	r0, r3
 800120c:	f002 f972 	bl	80034f4 <HAL_I2CEx_ConfigAnalogFilter>
 8001210:	1e03      	subs	r3, r0, #0
 8001212:	d001      	beq.n	8001218 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001214:	f000 f8b0 	bl	8001378 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001218:	4b05      	ldr	r3, [pc, #20]	; (8001230 <MX_I2C1_Init+0x74>)
 800121a:	2100      	movs	r1, #0
 800121c:	0018      	movs	r0, r3
 800121e:	f002 f9b5 	bl	800358c <HAL_I2CEx_ConfigDigitalFilter>
 8001222:	1e03      	subs	r3, r0, #0
 8001224:	d001      	beq.n	800122a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001226:	f000 f8a7 	bl	8001378 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800122a:	46c0      	nop			; (mov r8, r8)
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	2000071c 	.word	0x2000071c
 8001234:	40005400 	.word	0x40005400
 8001238:	0000020b 	.word	0x0000020b

0800123c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001240:	4b14      	ldr	r3, [pc, #80]	; (8001294 <MX_USART2_UART_Init+0x58>)
 8001242:	4a15      	ldr	r2, [pc, #84]	; (8001298 <MX_USART2_UART_Init+0x5c>)
 8001244:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8001246:	4b13      	ldr	r3, [pc, #76]	; (8001294 <MX_USART2_UART_Init+0x58>)
 8001248:	2296      	movs	r2, #150	; 0x96
 800124a:	0212      	lsls	r2, r2, #8
 800124c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800124e:	4b11      	ldr	r3, [pc, #68]	; (8001294 <MX_USART2_UART_Init+0x58>)
 8001250:	2200      	movs	r2, #0
 8001252:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001254:	4b0f      	ldr	r3, [pc, #60]	; (8001294 <MX_USART2_UART_Init+0x58>)
 8001256:	2200      	movs	r2, #0
 8001258:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800125a:	4b0e      	ldr	r3, [pc, #56]	; (8001294 <MX_USART2_UART_Init+0x58>)
 800125c:	2200      	movs	r2, #0
 800125e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001260:	4b0c      	ldr	r3, [pc, #48]	; (8001294 <MX_USART2_UART_Init+0x58>)
 8001262:	220c      	movs	r2, #12
 8001264:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001266:	4b0b      	ldr	r3, [pc, #44]	; (8001294 <MX_USART2_UART_Init+0x58>)
 8001268:	2200      	movs	r2, #0
 800126a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800126c:	4b09      	ldr	r3, [pc, #36]	; (8001294 <MX_USART2_UART_Init+0x58>)
 800126e:	2200      	movs	r2, #0
 8001270:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001272:	4b08      	ldr	r3, [pc, #32]	; (8001294 <MX_USART2_UART_Init+0x58>)
 8001274:	2200      	movs	r2, #0
 8001276:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001278:	4b06      	ldr	r3, [pc, #24]	; (8001294 <MX_USART2_UART_Init+0x58>)
 800127a:	2200      	movs	r2, #0
 800127c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800127e:	4b05      	ldr	r3, [pc, #20]	; (8001294 <MX_USART2_UART_Init+0x58>)
 8001280:	0018      	movs	r0, r3
 8001282:	f002 ffbd 	bl	8004200 <HAL_UART_Init>
 8001286:	1e03      	subs	r3, r0, #0
 8001288:	d001      	beq.n	800128e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800128a:	f000 f875 	bl	8001378 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800128e:	46c0      	nop			; (mov r8, r8)
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	200007b0 	.word	0x200007b0
 8001298:	40004400 	.word	0x40004400

0800129c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800129c:	b590      	push	{r4, r7, lr}
 800129e:	b089      	sub	sp, #36	; 0x24
 80012a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a2:	240c      	movs	r4, #12
 80012a4:	193b      	adds	r3, r7, r4
 80012a6:	0018      	movs	r0, r3
 80012a8:	2314      	movs	r3, #20
 80012aa:	001a      	movs	r2, r3
 80012ac:	2100      	movs	r1, #0
 80012ae:	f003 fb2e 	bl	800490e <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012b2:	4b2f      	ldr	r3, [pc, #188]	; (8001370 <MX_GPIO_Init+0xd4>)
 80012b4:	695a      	ldr	r2, [r3, #20]
 80012b6:	4b2e      	ldr	r3, [pc, #184]	; (8001370 <MX_GPIO_Init+0xd4>)
 80012b8:	2180      	movs	r1, #128	; 0x80
 80012ba:	03c9      	lsls	r1, r1, #15
 80012bc:	430a      	orrs	r2, r1
 80012be:	615a      	str	r2, [r3, #20]
 80012c0:	4b2b      	ldr	r3, [pc, #172]	; (8001370 <MX_GPIO_Init+0xd4>)
 80012c2:	695a      	ldr	r2, [r3, #20]
 80012c4:	2380      	movs	r3, #128	; 0x80
 80012c6:	03db      	lsls	r3, r3, #15
 80012c8:	4013      	ands	r3, r2
 80012ca:	60bb      	str	r3, [r7, #8]
 80012cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ce:	4b28      	ldr	r3, [pc, #160]	; (8001370 <MX_GPIO_Init+0xd4>)
 80012d0:	695a      	ldr	r2, [r3, #20]
 80012d2:	4b27      	ldr	r3, [pc, #156]	; (8001370 <MX_GPIO_Init+0xd4>)
 80012d4:	2180      	movs	r1, #128	; 0x80
 80012d6:	0289      	lsls	r1, r1, #10
 80012d8:	430a      	orrs	r2, r1
 80012da:	615a      	str	r2, [r3, #20]
 80012dc:	4b24      	ldr	r3, [pc, #144]	; (8001370 <MX_GPIO_Init+0xd4>)
 80012de:	695a      	ldr	r2, [r3, #20]
 80012e0:	2380      	movs	r3, #128	; 0x80
 80012e2:	029b      	lsls	r3, r3, #10
 80012e4:	4013      	ands	r3, r2
 80012e6:	607b      	str	r3, [r7, #4]
 80012e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ea:	4b21      	ldr	r3, [pc, #132]	; (8001370 <MX_GPIO_Init+0xd4>)
 80012ec:	695a      	ldr	r2, [r3, #20]
 80012ee:	4b20      	ldr	r3, [pc, #128]	; (8001370 <MX_GPIO_Init+0xd4>)
 80012f0:	2180      	movs	r1, #128	; 0x80
 80012f2:	02c9      	lsls	r1, r1, #11
 80012f4:	430a      	orrs	r2, r1
 80012f6:	615a      	str	r2, [r3, #20]
 80012f8:	4b1d      	ldr	r3, [pc, #116]	; (8001370 <MX_GPIO_Init+0xd4>)
 80012fa:	695a      	ldr	r2, [r3, #20]
 80012fc:	2380      	movs	r3, #128	; 0x80
 80012fe:	02db      	lsls	r3, r3, #11
 8001300:	4013      	ands	r3, r2
 8001302:	603b      	str	r3, [r7, #0]
 8001304:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001306:	4b1b      	ldr	r3, [pc, #108]	; (8001374 <MX_GPIO_Init+0xd8>)
 8001308:	2200      	movs	r2, #0
 800130a:	2108      	movs	r1, #8
 800130c:	0018      	movs	r0, r3
 800130e:	f001 fcdf 	bl	8002cd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001312:	193b      	adds	r3, r7, r4
 8001314:	2208      	movs	r2, #8
 8001316:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001318:	193b      	adds	r3, r7, r4
 800131a:	2201      	movs	r2, #1
 800131c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131e:	193b      	adds	r3, r7, r4
 8001320:	2200      	movs	r2, #0
 8001322:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001324:	193b      	adds	r3, r7, r4
 8001326:	2200      	movs	r2, #0
 8001328:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800132a:	193b      	adds	r3, r7, r4
 800132c:	4a11      	ldr	r2, [pc, #68]	; (8001374 <MX_GPIO_Init+0xd8>)
 800132e:	0019      	movs	r1, r3
 8001330:	0010      	movs	r0, r2
 8001332:	f001 fb65 	bl	8002a00 <HAL_GPIO_Init>

  /*Configure GPIO pin : button_Pin */
  GPIO_InitStruct.Pin = button_Pin;
 8001336:	0021      	movs	r1, r4
 8001338:	187b      	adds	r3, r7, r1
 800133a:	2210      	movs	r2, #16
 800133c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800133e:	187b      	adds	r3, r7, r1
 8001340:	2284      	movs	r2, #132	; 0x84
 8001342:	0392      	lsls	r2, r2, #14
 8001344:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001346:	187b      	adds	r3, r7, r1
 8001348:	2201      	movs	r2, #1
 800134a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(button_GPIO_Port, &GPIO_InitStruct);
 800134c:	187b      	adds	r3, r7, r1
 800134e:	4a09      	ldr	r2, [pc, #36]	; (8001374 <MX_GPIO_Init+0xd8>)
 8001350:	0019      	movs	r1, r3
 8001352:	0010      	movs	r0, r2
 8001354:	f001 fb54 	bl	8002a00 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8001358:	2200      	movs	r2, #0
 800135a:	2100      	movs	r1, #0
 800135c:	2007      	movs	r0, #7
 800135e:	f001 fb1d 	bl	800299c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8001362:	2007      	movs	r0, #7
 8001364:	f001 fb2f 	bl	80029c6 <HAL_NVIC_EnableIRQ>

}
 8001368:	46c0      	nop			; (mov r8, r8)
 800136a:	46bd      	mov	sp, r7
 800136c:	b009      	add	sp, #36	; 0x24
 800136e:	bd90      	pop	{r4, r7, pc}
 8001370:	40021000 	.word	0x40021000
 8001374:	48000400 	.word	0x48000400

08001378 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800137c:	b672      	cpsid	i
}
 800137e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001380:	e7fe      	b.n	8001380 <Error_Handler+0x8>

08001382 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001382:	b580      	push	{r7, lr}
 8001384:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001386:	46c0      	nop			; (mov r8, r8)
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}

0800138c <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 800138c:	b580      	push	{r7, lr}
 800138e:	b086      	sub	sp, #24
 8001390:	af04      	add	r7, sp, #16
 8001392:	0002      	movs	r2, r0
 8001394:	1dfb      	adds	r3, r7, #7
 8001396:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001398:	4808      	ldr	r0, [pc, #32]	; (80013bc <ssd1306_WriteCommand+0x30>)
 800139a:	2301      	movs	r3, #1
 800139c:	425b      	negs	r3, r3
 800139e:	9302      	str	r3, [sp, #8]
 80013a0:	2301      	movs	r3, #1
 80013a2:	9301      	str	r3, [sp, #4]
 80013a4:	1dfb      	adds	r3, r7, #7
 80013a6:	9300      	str	r3, [sp, #0]
 80013a8:	2301      	movs	r3, #1
 80013aa:	2200      	movs	r2, #0
 80013ac:	2178      	movs	r1, #120	; 0x78
 80013ae:	f001 fd83 	bl	8002eb8 <HAL_I2C_Mem_Write>
}
 80013b2:	46c0      	nop			; (mov r8, r8)
 80013b4:	46bd      	mov	sp, r7
 80013b6:	b002      	add	sp, #8
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	46c0      	nop			; (mov r8, r8)
 80013bc:	2000071c 	.word	0x2000071c

080013c0 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b086      	sub	sp, #24
 80013c4:	af04      	add	r7, sp, #16
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	b29b      	uxth	r3, r3
 80013ce:	4808      	ldr	r0, [pc, #32]	; (80013f0 <ssd1306_WriteData+0x30>)
 80013d0:	2201      	movs	r2, #1
 80013d2:	4252      	negs	r2, r2
 80013d4:	9202      	str	r2, [sp, #8]
 80013d6:	9301      	str	r3, [sp, #4]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	9300      	str	r3, [sp, #0]
 80013dc:	2301      	movs	r3, #1
 80013de:	2240      	movs	r2, #64	; 0x40
 80013e0:	2178      	movs	r1, #120	; 0x78
 80013e2:	f001 fd69 	bl	8002eb8 <HAL_I2C_Mem_Write>
}
 80013e6:	46c0      	nop			; (mov r8, r8)
 80013e8:	46bd      	mov	sp, r7
 80013ea:	b002      	add	sp, #8
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	46c0      	nop			; (mov r8, r8)
 80013f0:	2000071c 	.word	0x2000071c

080013f4 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80013f8:	f7ff ffc3 	bl	8001382 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80013fc:	2064      	movs	r0, #100	; 0x64
 80013fe:	f000 fc6d 	bl	8001cdc <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001402:	2000      	movs	r0, #0
 8001404:	f000 fa28 	bl	8001858 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001408:	2020      	movs	r0, #32
 800140a:	f7ff ffbf 	bl	800138c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800140e:	2010      	movs	r0, #16
 8001410:	f7ff ffbc 	bl	800138c <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001414:	20b0      	movs	r0, #176	; 0xb0
 8001416:	f7ff ffb9 	bl	800138c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror verticallys
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800141a:	20c8      	movs	r0, #200	; 0xc8
 800141c:	f7ff ffb6 	bl	800138c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001420:	2000      	movs	r0, #0
 8001422:	f7ff ffb3 	bl	800138c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001426:	2010      	movs	r0, #16
 8001428:	f7ff ffb0 	bl	800138c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 800142c:	2040      	movs	r0, #64	; 0x40
 800142e:	f7ff ffad 	bl	800138c <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001432:	20ff      	movs	r0, #255	; 0xff
 8001434:	f000 f9f8 	bl	8001828 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001438:	20a1      	movs	r0, #161	; 0xa1
 800143a:	f7ff ffa7 	bl	800138c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800143e:	20a6      	movs	r0, #166	; 0xa6
 8001440:	f7ff ffa4 	bl	800138c <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001444:	20a8      	movs	r0, #168	; 0xa8
 8001446:	f7ff ffa1 	bl	800138c <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800144a:	203f      	movs	r0, #63	; 0x3f
 800144c:	f7ff ff9e 	bl	800138c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001450:	20a4      	movs	r0, #164	; 0xa4
 8001452:	f7ff ff9b 	bl	800138c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001456:	20d3      	movs	r0, #211	; 0xd3
 8001458:	f7ff ff98 	bl	800138c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x0); //-not offset
 800145c:	2000      	movs	r0, #0
 800145e:	f7ff ff95 	bl	800138c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001462:	20d5      	movs	r0, #213	; 0xd5
 8001464:	f7ff ff92 	bl	800138c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //--set divide ratio
 8001468:	2010      	movs	r0, #16
 800146a:	f7ff ff8f 	bl	800138c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800146e:	20d9      	movs	r0, #217	; 0xd9
 8001470:	f7ff ff8c 	bl	800138c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001474:	2022      	movs	r0, #34	; 0x22
 8001476:	f7ff ff89 	bl	800138c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800147a:	20da      	movs	r0, #218	; 0xda
 800147c:	f7ff ff86 	bl	800138c <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001480:	2012      	movs	r0, #18
 8001482:	f7ff ff83 	bl	800138c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001486:	20db      	movs	r0, #219	; 0xdb
 8001488:	f7ff ff80 	bl	800138c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVccs
 800148c:	2020      	movs	r0, #32
 800148e:	f7ff ff7d 	bl	800138c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001492:	208d      	movs	r0, #141	; 0x8d
 8001494:	f7ff ff7a 	bl	800138c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001498:	2014      	movs	r0, #20
 800149a:	f7ff ff77 	bl	800138c <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800149e:	2001      	movs	r0, #1
 80014a0:	f000 f9da 	bl	8001858 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80014a4:	2000      	movs	r0, #0
 80014a6:	f000 f811 	bl	80014cc <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80014aa:	f000 f833 	bl	8001514 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80014ae:	4b06      	ldr	r3, [pc, #24]	; (80014c8 <ssd1306_Init+0xd4>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80014b4:	4b04      	ldr	r3, [pc, #16]	; (80014c8 <ssd1306_Init+0xd4>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80014ba:	4b03      	ldr	r3, [pc, #12]	; (80014c8 <ssd1306_Init+0xd4>)
 80014bc:	2201      	movs	r2, #1
 80014be:	715a      	strb	r2, [r3, #5]
}
 80014c0:	46c0      	nop			; (mov r8, r8)
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	46c0      	nop			; (mov r8, r8)
 80014c8:	200006e0 	.word	0x200006e0

080014cc <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	0002      	movs	r2, r0
 80014d4:	1dfb      	adds	r3, r7, #7
 80014d6:	701a      	strb	r2, [r3, #0]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80014d8:	2300      	movs	r3, #0
 80014da:	60fb      	str	r3, [r7, #12]
 80014dc:	e00e      	b.n	80014fc <ssd1306_Fill+0x30>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80014de:	1dfb      	adds	r3, r7, #7
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d101      	bne.n	80014ea <ssd1306_Fill+0x1e>
 80014e6:	2100      	movs	r1, #0
 80014e8:	e000      	b.n	80014ec <ssd1306_Fill+0x20>
 80014ea:	21ff      	movs	r1, #255	; 0xff
 80014ec:	4a08      	ldr	r2, [pc, #32]	; (8001510 <ssd1306_Fill+0x44>)
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	18d3      	adds	r3, r2, r3
 80014f2:	1c0a      	adds	r2, r1, #0
 80014f4:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	3301      	adds	r3, #1
 80014fa:	60fb      	str	r3, [r7, #12]
 80014fc:	68fa      	ldr	r2, [r7, #12]
 80014fe:	2382      	movs	r3, #130	; 0x82
 8001500:	00db      	lsls	r3, r3, #3
 8001502:	429a      	cmp	r2, r3
 8001504:	d3eb      	bcc.n	80014de <ssd1306_Fill+0x12>
    }
}
 8001506:	46c0      	nop			; (mov r8, r8)
 8001508:	46c0      	nop			; (mov r8, r8)
 800150a:	46bd      	mov	sp, r7
 800150c:	b004      	add	sp, #16
 800150e:	bd80      	pop	{r7, pc}
 8001510:	200002d0 	.word	0x200002d0

08001514 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800151a:	1dfb      	adds	r3, r7, #7
 800151c:	2200      	movs	r2, #0
 800151e:	701a      	strb	r2, [r3, #0]
 8001520:	e01e      	b.n	8001560 <ssd1306_UpdateScreen+0x4c>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001522:	1dfb      	adds	r3, r7, #7
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	3b50      	subs	r3, #80	; 0x50
 8001528:	b2db      	uxtb	r3, r3
 800152a:	0018      	movs	r0, r3
 800152c:	f7ff ff2e 	bl	800138c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 8001530:	2000      	movs	r0, #0
 8001532:	f7ff ff2b 	bl	800138c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 8001536:	2010      	movs	r0, #16
 8001538:	f7ff ff28 	bl	800138c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 800153c:	1dfb      	adds	r3, r7, #7
 800153e:	781a      	ldrb	r2, [r3, #0]
 8001540:	0013      	movs	r3, r2
 8001542:	019b      	lsls	r3, r3, #6
 8001544:	189b      	adds	r3, r3, r2
 8001546:	005b      	lsls	r3, r3, #1
 8001548:	001a      	movs	r2, r3
 800154a:	4b0a      	ldr	r3, [pc, #40]	; (8001574 <ssd1306_UpdateScreen+0x60>)
 800154c:	18d3      	adds	r3, r2, r3
 800154e:	2182      	movs	r1, #130	; 0x82
 8001550:	0018      	movs	r0, r3
 8001552:	f7ff ff35 	bl	80013c0 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001556:	1dfb      	adds	r3, r7, #7
 8001558:	781a      	ldrb	r2, [r3, #0]
 800155a:	1dfb      	adds	r3, r7, #7
 800155c:	3201      	adds	r2, #1
 800155e:	701a      	strb	r2, [r3, #0]
 8001560:	1dfb      	adds	r3, r7, #7
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	2b07      	cmp	r3, #7
 8001566:	d9dc      	bls.n	8001522 <ssd1306_UpdateScreen+0xe>
    }
}
 8001568:	46c0      	nop			; (mov r8, r8)
 800156a:	46c0      	nop			; (mov r8, r8)
 800156c:	46bd      	mov	sp, r7
 800156e:	b002      	add	sp, #8
 8001570:	bd80      	pop	{r7, pc}
 8001572:	46c0      	nop			; (mov r8, r8)
 8001574:	200002d0 	.word	0x200002d0

08001578 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001578:	b590      	push	{r4, r7, lr}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	0004      	movs	r4, r0
 8001580:	0008      	movs	r0, r1
 8001582:	0011      	movs	r1, r2
 8001584:	1dfb      	adds	r3, r7, #7
 8001586:	1c22      	adds	r2, r4, #0
 8001588:	701a      	strb	r2, [r3, #0]
 800158a:	1dbb      	adds	r3, r7, #6
 800158c:	1c02      	adds	r2, r0, #0
 800158e:	701a      	strb	r2, [r3, #0]
 8001590:	1d7b      	adds	r3, r7, #5
 8001592:	1c0a      	adds	r2, r1, #0
 8001594:	701a      	strb	r2, [r3, #0]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001596:	1dfb      	adds	r3, r7, #7
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	2b81      	cmp	r3, #129	; 0x81
 800159c:	d85e      	bhi.n	800165c <ssd1306_DrawPixel+0xe4>
 800159e:	1dbb      	adds	r3, r7, #6
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	2b3f      	cmp	r3, #63	; 0x3f
 80015a4:	d85a      	bhi.n	800165c <ssd1306_DrawPixel+0xe4>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 80015a6:	4b2f      	ldr	r3, [pc, #188]	; (8001664 <ssd1306_DrawPixel+0xec>)
 80015a8:	791b      	ldrb	r3, [r3, #4]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d006      	beq.n	80015bc <ssd1306_DrawPixel+0x44>
        color = (SSD1306_COLOR)!color;
 80015ae:	1d7b      	adds	r3, r7, #5
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	425a      	negs	r2, r3
 80015b4:	4153      	adcs	r3, r2
 80015b6:	b2da      	uxtb	r2, r3
 80015b8:	1d7b      	adds	r3, r7, #5
 80015ba:	701a      	strb	r2, [r3, #0]
    }
    
    // Draw in the right color
    if(color == White) {
 80015bc:	1d7b      	adds	r3, r7, #5
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d124      	bne.n	800160e <ssd1306_DrawPixel+0x96>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80015c4:	1dfb      	adds	r3, r7, #7
 80015c6:	781a      	ldrb	r2, [r3, #0]
 80015c8:	1dbb      	adds	r3, r7, #6
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	08db      	lsrs	r3, r3, #3
 80015ce:	b2d8      	uxtb	r0, r3
 80015d0:	0001      	movs	r1, r0
 80015d2:	000b      	movs	r3, r1
 80015d4:	019b      	lsls	r3, r3, #6
 80015d6:	185b      	adds	r3, r3, r1
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	18d3      	adds	r3, r2, r3
 80015dc:	4a22      	ldr	r2, [pc, #136]	; (8001668 <ssd1306_DrawPixel+0xf0>)
 80015de:	5cd3      	ldrb	r3, [r2, r3]
 80015e0:	b25a      	sxtb	r2, r3
 80015e2:	1dbb      	adds	r3, r7, #6
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	2107      	movs	r1, #7
 80015e8:	400b      	ands	r3, r1
 80015ea:	2101      	movs	r1, #1
 80015ec:	4099      	lsls	r1, r3
 80015ee:	000b      	movs	r3, r1
 80015f0:	b25b      	sxtb	r3, r3
 80015f2:	4313      	orrs	r3, r2
 80015f4:	b25c      	sxtb	r4, r3
 80015f6:	1dfb      	adds	r3, r7, #7
 80015f8:	781a      	ldrb	r2, [r3, #0]
 80015fa:	0001      	movs	r1, r0
 80015fc:	000b      	movs	r3, r1
 80015fe:	019b      	lsls	r3, r3, #6
 8001600:	185b      	adds	r3, r3, r1
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	18d3      	adds	r3, r2, r3
 8001606:	b2e1      	uxtb	r1, r4
 8001608:	4a17      	ldr	r2, [pc, #92]	; (8001668 <ssd1306_DrawPixel+0xf0>)
 800160a:	54d1      	strb	r1, [r2, r3]
 800160c:	e027      	b.n	800165e <ssd1306_DrawPixel+0xe6>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800160e:	1dfb      	adds	r3, r7, #7
 8001610:	781a      	ldrb	r2, [r3, #0]
 8001612:	1dbb      	adds	r3, r7, #6
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	08db      	lsrs	r3, r3, #3
 8001618:	b2d8      	uxtb	r0, r3
 800161a:	0001      	movs	r1, r0
 800161c:	000b      	movs	r3, r1
 800161e:	019b      	lsls	r3, r3, #6
 8001620:	185b      	adds	r3, r3, r1
 8001622:	005b      	lsls	r3, r3, #1
 8001624:	18d3      	adds	r3, r2, r3
 8001626:	4a10      	ldr	r2, [pc, #64]	; (8001668 <ssd1306_DrawPixel+0xf0>)
 8001628:	5cd3      	ldrb	r3, [r2, r3]
 800162a:	b25b      	sxtb	r3, r3
 800162c:	1dba      	adds	r2, r7, #6
 800162e:	7812      	ldrb	r2, [r2, #0]
 8001630:	2107      	movs	r1, #7
 8001632:	400a      	ands	r2, r1
 8001634:	2101      	movs	r1, #1
 8001636:	4091      	lsls	r1, r2
 8001638:	000a      	movs	r2, r1
 800163a:	b252      	sxtb	r2, r2
 800163c:	43d2      	mvns	r2, r2
 800163e:	b252      	sxtb	r2, r2
 8001640:	4013      	ands	r3, r2
 8001642:	b25c      	sxtb	r4, r3
 8001644:	1dfb      	adds	r3, r7, #7
 8001646:	781a      	ldrb	r2, [r3, #0]
 8001648:	0001      	movs	r1, r0
 800164a:	000b      	movs	r3, r1
 800164c:	019b      	lsls	r3, r3, #6
 800164e:	185b      	adds	r3, r3, r1
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	18d3      	adds	r3, r2, r3
 8001654:	b2e1      	uxtb	r1, r4
 8001656:	4a04      	ldr	r2, [pc, #16]	; (8001668 <ssd1306_DrawPixel+0xf0>)
 8001658:	54d1      	strb	r1, [r2, r3]
 800165a:	e000      	b.n	800165e <ssd1306_DrawPixel+0xe6>
        return;
 800165c:	46c0      	nop			; (mov r8, r8)
    }
}
 800165e:	46bd      	mov	sp, r7
 8001660:	b003      	add	sp, #12
 8001662:	bd90      	pop	{r4, r7, pc}
 8001664:	200006e0 	.word	0x200006e0
 8001668:	200002d0 	.word	0x200002d0

0800166c <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 800166c:	b590      	push	{r4, r7, lr}
 800166e:	b089      	sub	sp, #36	; 0x24
 8001670:	af00      	add	r7, sp, #0
 8001672:	0004      	movs	r4, r0
 8001674:	1d38      	adds	r0, r7, #4
 8001676:	6001      	str	r1, [r0, #0]
 8001678:	6042      	str	r2, [r0, #4]
 800167a:	0019      	movs	r1, r3
 800167c:	200f      	movs	r0, #15
 800167e:	183b      	adds	r3, r7, r0
 8001680:	1c22      	adds	r2, r4, #0
 8001682:	701a      	strb	r2, [r3, #0]
 8001684:	230e      	movs	r3, #14
 8001686:	18fb      	adds	r3, r7, r3
 8001688:	1c0a      	adds	r2, r1, #0
 800168a:	701a      	strb	r2, [r3, #0]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 800168c:	183b      	adds	r3, r7, r0
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	2b1f      	cmp	r3, #31
 8001692:	d903      	bls.n	800169c <ssd1306_WriteChar+0x30>
 8001694:	183b      	adds	r3, r7, r0
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	2b7e      	cmp	r3, #126	; 0x7e
 800169a:	d901      	bls.n	80016a0 <ssd1306_WriteChar+0x34>
        return 0;
 800169c:	2300      	movs	r3, #0
 800169e:	e078      	b.n	8001792 <ssd1306_WriteChar+0x126>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80016a0:	4b3e      	ldr	r3, [pc, #248]	; (800179c <ssd1306_WriteChar+0x130>)
 80016a2:	881b      	ldrh	r3, [r3, #0]
 80016a4:	001a      	movs	r2, r3
 80016a6:	1d3b      	adds	r3, r7, #4
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	18d3      	adds	r3, r2, r3
 80016ac:	2b82      	cmp	r3, #130	; 0x82
 80016ae:	dc07      	bgt.n	80016c0 <ssd1306_WriteChar+0x54>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80016b0:	4b3a      	ldr	r3, [pc, #232]	; (800179c <ssd1306_WriteChar+0x130>)
 80016b2:	885b      	ldrh	r3, [r3, #2]
 80016b4:	001a      	movs	r2, r3
 80016b6:	1d3b      	adds	r3, r7, #4
 80016b8:	785b      	ldrb	r3, [r3, #1]
 80016ba:	18d3      	adds	r3, r2, r3
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80016bc:	2b40      	cmp	r3, #64	; 0x40
 80016be:	dd01      	ble.n	80016c4 <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 80016c0:	2300      	movs	r3, #0
 80016c2:	e066      	b.n	8001792 <ssd1306_WriteChar+0x126>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80016c4:	2300      	movs	r3, #0
 80016c6:	61fb      	str	r3, [r7, #28]
 80016c8:	e051      	b.n	800176e <ssd1306_WriteChar+0x102>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80016ca:	1d3b      	adds	r3, r7, #4
 80016cc:	685a      	ldr	r2, [r3, #4]
 80016ce:	230f      	movs	r3, #15
 80016d0:	18fb      	adds	r3, r7, r3
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	3b20      	subs	r3, #32
 80016d6:	1d39      	adds	r1, r7, #4
 80016d8:	7849      	ldrb	r1, [r1, #1]
 80016da:	434b      	muls	r3, r1
 80016dc:	0019      	movs	r1, r3
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	18cb      	adds	r3, r1, r3
 80016e2:	005b      	lsls	r3, r3, #1
 80016e4:	18d3      	adds	r3, r2, r3
 80016e6:	881b      	ldrh	r3, [r3, #0]
 80016e8:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 80016ea:	2300      	movs	r3, #0
 80016ec:	61bb      	str	r3, [r7, #24]
 80016ee:	e035      	b.n	800175c <ssd1306_WriteChar+0xf0>
            if((b << j) & 0x8000)  {
 80016f0:	697a      	ldr	r2, [r7, #20]
 80016f2:	69bb      	ldr	r3, [r7, #24]
 80016f4:	409a      	lsls	r2, r3
 80016f6:	2380      	movs	r3, #128	; 0x80
 80016f8:	021b      	lsls	r3, r3, #8
 80016fa:	4013      	ands	r3, r2
 80016fc:	d014      	beq.n	8001728 <ssd1306_WriteChar+0xbc>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80016fe:	4b27      	ldr	r3, [pc, #156]	; (800179c <ssd1306_WriteChar+0x130>)
 8001700:	881b      	ldrh	r3, [r3, #0]
 8001702:	b2da      	uxtb	r2, r3
 8001704:	69bb      	ldr	r3, [r7, #24]
 8001706:	b2db      	uxtb	r3, r3
 8001708:	18d3      	adds	r3, r2, r3
 800170a:	b2d8      	uxtb	r0, r3
 800170c:	4b23      	ldr	r3, [pc, #140]	; (800179c <ssd1306_WriteChar+0x130>)
 800170e:	885b      	ldrh	r3, [r3, #2]
 8001710:	b2da      	uxtb	r2, r3
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	b2db      	uxtb	r3, r3
 8001716:	18d3      	adds	r3, r2, r3
 8001718:	b2d9      	uxtb	r1, r3
 800171a:	230e      	movs	r3, #14
 800171c:	18fb      	adds	r3, r7, r3
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	001a      	movs	r2, r3
 8001722:	f7ff ff29 	bl	8001578 <ssd1306_DrawPixel>
 8001726:	e016      	b.n	8001756 <ssd1306_WriteChar+0xea>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001728:	4b1c      	ldr	r3, [pc, #112]	; (800179c <ssd1306_WriteChar+0x130>)
 800172a:	881b      	ldrh	r3, [r3, #0]
 800172c:	b2da      	uxtb	r2, r3
 800172e:	69bb      	ldr	r3, [r7, #24]
 8001730:	b2db      	uxtb	r3, r3
 8001732:	18d3      	adds	r3, r2, r3
 8001734:	b2d8      	uxtb	r0, r3
 8001736:	4b19      	ldr	r3, [pc, #100]	; (800179c <ssd1306_WriteChar+0x130>)
 8001738:	885b      	ldrh	r3, [r3, #2]
 800173a:	b2da      	uxtb	r2, r3
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	b2db      	uxtb	r3, r3
 8001740:	18d3      	adds	r3, r2, r3
 8001742:	b2d9      	uxtb	r1, r3
 8001744:	230e      	movs	r3, #14
 8001746:	18fb      	adds	r3, r7, r3
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	425a      	negs	r2, r3
 800174c:	4153      	adcs	r3, r2
 800174e:	b2db      	uxtb	r3, r3
 8001750:	001a      	movs	r2, r3
 8001752:	f7ff ff11 	bl	8001578 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8001756:	69bb      	ldr	r3, [r7, #24]
 8001758:	3301      	adds	r3, #1
 800175a:	61bb      	str	r3, [r7, #24]
 800175c:	1d3b      	adds	r3, r7, #4
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	001a      	movs	r2, r3
 8001762:	69bb      	ldr	r3, [r7, #24]
 8001764:	4293      	cmp	r3, r2
 8001766:	d3c3      	bcc.n	80016f0 <ssd1306_WriteChar+0x84>
    for(i = 0; i < Font.FontHeight; i++) {
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	3301      	adds	r3, #1
 800176c:	61fb      	str	r3, [r7, #28]
 800176e:	1d3b      	adds	r3, r7, #4
 8001770:	785b      	ldrb	r3, [r3, #1]
 8001772:	001a      	movs	r2, r3
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	4293      	cmp	r3, r2
 8001778:	d3a7      	bcc.n	80016ca <ssd1306_WriteChar+0x5e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 800177a:	4b08      	ldr	r3, [pc, #32]	; (800179c <ssd1306_WriteChar+0x130>)
 800177c:	881a      	ldrh	r2, [r3, #0]
 800177e:	1d3b      	adds	r3, r7, #4
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	b29b      	uxth	r3, r3
 8001784:	18d3      	adds	r3, r2, r3
 8001786:	b29a      	uxth	r2, r3
 8001788:	4b04      	ldr	r3, [pc, #16]	; (800179c <ssd1306_WriteChar+0x130>)
 800178a:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 800178c:	230f      	movs	r3, #15
 800178e:	18fb      	adds	r3, r7, r3
 8001790:	781b      	ldrb	r3, [r3, #0]
}
 8001792:	0018      	movs	r0, r3
 8001794:	46bd      	mov	sp, r7
 8001796:	b009      	add	sp, #36	; 0x24
 8001798:	bd90      	pop	{r4, r7, pc}
 800179a:	46c0      	nop			; (mov r8, r8)
 800179c:	200006e0 	.word	0x200006e0

080017a0 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	60f8      	str	r0, [r7, #12]
 80017a8:	1d38      	adds	r0, r7, #4
 80017aa:	6001      	str	r1, [r0, #0]
 80017ac:	6042      	str	r2, [r0, #4]
 80017ae:	001a      	movs	r2, r3
 80017b0:	1cfb      	adds	r3, r7, #3
 80017b2:	701a      	strb	r2, [r3, #0]
    // Write until null-byte
    while (*str) {
 80017b4:	e014      	b.n	80017e0 <ssd1306_WriteString+0x40>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	7818      	ldrb	r0, [r3, #0]
 80017ba:	1cfb      	adds	r3, r7, #3
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	1d3a      	adds	r2, r7, #4
 80017c0:	6811      	ldr	r1, [r2, #0]
 80017c2:	6852      	ldr	r2, [r2, #4]
 80017c4:	f7ff ff52 	bl	800166c <ssd1306_WriteChar>
 80017c8:	0003      	movs	r3, r0
 80017ca:	001a      	movs	r2, r3
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d002      	beq.n	80017da <ssd1306_WriteString+0x3a>
            // Char could not be written
            return *str;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	e008      	b.n	80017ec <ssd1306_WriteString+0x4c>
        }
        
        // Next char
        str++;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	3301      	adds	r3, #1
 80017de:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d1e6      	bne.n	80017b6 <ssd1306_WriteString+0x16>
    }
    
    // Everything ok
    return *str;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	781b      	ldrb	r3, [r3, #0]
}
 80017ec:	0018      	movs	r0, r3
 80017ee:	46bd      	mov	sp, r7
 80017f0:	b004      	add	sp, #16
 80017f2:	bd80      	pop	{r7, pc}

080017f4 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	0002      	movs	r2, r0
 80017fc:	1dfb      	adds	r3, r7, #7
 80017fe:	701a      	strb	r2, [r3, #0]
 8001800:	1dbb      	adds	r3, r7, #6
 8001802:	1c0a      	adds	r2, r1, #0
 8001804:	701a      	strb	r2, [r3, #0]
    SSD1306.CurrentX = x;
 8001806:	1dfb      	adds	r3, r7, #7
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	b29a      	uxth	r2, r3
 800180c:	4b05      	ldr	r3, [pc, #20]	; (8001824 <ssd1306_SetCursor+0x30>)
 800180e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001810:	1dbb      	adds	r3, r7, #6
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	b29a      	uxth	r2, r3
 8001816:	4b03      	ldr	r3, [pc, #12]	; (8001824 <ssd1306_SetCursor+0x30>)
 8001818:	805a      	strh	r2, [r3, #2]
}
 800181a:	46c0      	nop			; (mov r8, r8)
 800181c:	46bd      	mov	sp, r7
 800181e:	b002      	add	sp, #8
 8001820:	bd80      	pop	{r7, pc}
 8001822:	46c0      	nop			; (mov r8, r8)
 8001824:	200006e0 	.word	0x200006e0

08001828 <ssd1306_SetContrast>:
  ssd1306_Line(x1,y2,x1,y1,color);

  return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	0002      	movs	r2, r0
 8001830:	1dfb      	adds	r3, r7, #7
 8001832:	701a      	strb	r2, [r3, #0]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001834:	210f      	movs	r1, #15
 8001836:	187b      	adds	r3, r7, r1
 8001838:	2281      	movs	r2, #129	; 0x81
 800183a:	701a      	strb	r2, [r3, #0]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800183c:	187b      	adds	r3, r7, r1
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	0018      	movs	r0, r3
 8001842:	f7ff fda3 	bl	800138c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001846:	1dfb      	adds	r3, r7, #7
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	0018      	movs	r0, r3
 800184c:	f7ff fd9e 	bl	800138c <ssd1306_WriteCommand>
}
 8001850:	46c0      	nop			; (mov r8, r8)
 8001852:	46bd      	mov	sp, r7
 8001854:	b004      	add	sp, #16
 8001856:	bd80      	pop	{r7, pc}

08001858 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	0002      	movs	r2, r0
 8001860:	1dfb      	adds	r3, r7, #7
 8001862:	701a      	strb	r2, [r3, #0]
    uint8_t value;
    if (on) {
 8001864:	1dfb      	adds	r3, r7, #7
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d007      	beq.n	800187c <ssd1306_SetDisplayOn+0x24>
        value = 0xAF;   // Display on
 800186c:	230f      	movs	r3, #15
 800186e:	18fb      	adds	r3, r7, r3
 8001870:	22af      	movs	r2, #175	; 0xaf
 8001872:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 1;
 8001874:	4b0a      	ldr	r3, [pc, #40]	; (80018a0 <ssd1306_SetDisplayOn+0x48>)
 8001876:	2201      	movs	r2, #1
 8001878:	719a      	strb	r2, [r3, #6]
 800187a:	e006      	b.n	800188a <ssd1306_SetDisplayOn+0x32>
    } else {
        value = 0xAE;   // Display off
 800187c:	230f      	movs	r3, #15
 800187e:	18fb      	adds	r3, r7, r3
 8001880:	22ae      	movs	r2, #174	; 0xae
 8001882:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 0;
 8001884:	4b06      	ldr	r3, [pc, #24]	; (80018a0 <ssd1306_SetDisplayOn+0x48>)
 8001886:	2200      	movs	r2, #0
 8001888:	719a      	strb	r2, [r3, #6]
    }
    ssd1306_WriteCommand(value);
 800188a:	230f      	movs	r3, #15
 800188c:	18fb      	adds	r3, r7, r3
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	0018      	movs	r0, r3
 8001892:	f7ff fd7b 	bl	800138c <ssd1306_WriteCommand>
}
 8001896:	46c0      	nop			; (mov r8, r8)
 8001898:	46bd      	mov	sp, r7
 800189a:	b004      	add	sp, #16
 800189c:	bd80      	pop	{r7, pc}
 800189e:	46c0      	nop			; (mov r8, r8)
 80018a0:	200006e0 	.word	0x200006e0

080018a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018aa:	4b0f      	ldr	r3, [pc, #60]	; (80018e8 <HAL_MspInit+0x44>)
 80018ac:	699a      	ldr	r2, [r3, #24]
 80018ae:	4b0e      	ldr	r3, [pc, #56]	; (80018e8 <HAL_MspInit+0x44>)
 80018b0:	2101      	movs	r1, #1
 80018b2:	430a      	orrs	r2, r1
 80018b4:	619a      	str	r2, [r3, #24]
 80018b6:	4b0c      	ldr	r3, [pc, #48]	; (80018e8 <HAL_MspInit+0x44>)
 80018b8:	699b      	ldr	r3, [r3, #24]
 80018ba:	2201      	movs	r2, #1
 80018bc:	4013      	ands	r3, r2
 80018be:	607b      	str	r3, [r7, #4]
 80018c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018c2:	4b09      	ldr	r3, [pc, #36]	; (80018e8 <HAL_MspInit+0x44>)
 80018c4:	69da      	ldr	r2, [r3, #28]
 80018c6:	4b08      	ldr	r3, [pc, #32]	; (80018e8 <HAL_MspInit+0x44>)
 80018c8:	2180      	movs	r1, #128	; 0x80
 80018ca:	0549      	lsls	r1, r1, #21
 80018cc:	430a      	orrs	r2, r1
 80018ce:	61da      	str	r2, [r3, #28]
 80018d0:	4b05      	ldr	r3, [pc, #20]	; (80018e8 <HAL_MspInit+0x44>)
 80018d2:	69da      	ldr	r2, [r3, #28]
 80018d4:	2380      	movs	r3, #128	; 0x80
 80018d6:	055b      	lsls	r3, r3, #21
 80018d8:	4013      	ands	r3, r2
 80018da:	603b      	str	r3, [r7, #0]
 80018dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018de:	46c0      	nop			; (mov r8, r8)
 80018e0:	46bd      	mov	sp, r7
 80018e2:	b002      	add	sp, #8
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	46c0      	nop			; (mov r8, r8)
 80018e8:	40021000 	.word	0x40021000

080018ec <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80018ec:	b590      	push	{r4, r7, lr}
 80018ee:	b08b      	sub	sp, #44	; 0x2c
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f4:	2414      	movs	r4, #20
 80018f6:	193b      	adds	r3, r7, r4
 80018f8:	0018      	movs	r0, r3
 80018fa:	2314      	movs	r3, #20
 80018fc:	001a      	movs	r2, r3
 80018fe:	2100      	movs	r1, #0
 8001900:	f003 f805 	bl	800490e <memset>
  if(hcan->Instance==CAN)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a21      	ldr	r2, [pc, #132]	; (8001990 <HAL_CAN_MspInit+0xa4>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d13b      	bne.n	8001986 <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800190e:	4b21      	ldr	r3, [pc, #132]	; (8001994 <HAL_CAN_MspInit+0xa8>)
 8001910:	69da      	ldr	r2, [r3, #28]
 8001912:	4b20      	ldr	r3, [pc, #128]	; (8001994 <HAL_CAN_MspInit+0xa8>)
 8001914:	2180      	movs	r1, #128	; 0x80
 8001916:	0489      	lsls	r1, r1, #18
 8001918:	430a      	orrs	r2, r1
 800191a:	61da      	str	r2, [r3, #28]
 800191c:	4b1d      	ldr	r3, [pc, #116]	; (8001994 <HAL_CAN_MspInit+0xa8>)
 800191e:	69da      	ldr	r2, [r3, #28]
 8001920:	2380      	movs	r3, #128	; 0x80
 8001922:	049b      	lsls	r3, r3, #18
 8001924:	4013      	ands	r3, r2
 8001926:	613b      	str	r3, [r7, #16]
 8001928:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800192a:	4b1a      	ldr	r3, [pc, #104]	; (8001994 <HAL_CAN_MspInit+0xa8>)
 800192c:	695a      	ldr	r2, [r3, #20]
 800192e:	4b19      	ldr	r3, [pc, #100]	; (8001994 <HAL_CAN_MspInit+0xa8>)
 8001930:	2180      	movs	r1, #128	; 0x80
 8001932:	0289      	lsls	r1, r1, #10
 8001934:	430a      	orrs	r2, r1
 8001936:	615a      	str	r2, [r3, #20]
 8001938:	4b16      	ldr	r3, [pc, #88]	; (8001994 <HAL_CAN_MspInit+0xa8>)
 800193a:	695a      	ldr	r2, [r3, #20]
 800193c:	2380      	movs	r3, #128	; 0x80
 800193e:	029b      	lsls	r3, r3, #10
 8001940:	4013      	ands	r3, r2
 8001942:	60fb      	str	r3, [r7, #12]
 8001944:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001946:	193b      	adds	r3, r7, r4
 8001948:	22c0      	movs	r2, #192	; 0xc0
 800194a:	0152      	lsls	r2, r2, #5
 800194c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800194e:	0021      	movs	r1, r4
 8001950:	187b      	adds	r3, r7, r1
 8001952:	2202      	movs	r2, #2
 8001954:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001956:	187b      	adds	r3, r7, r1
 8001958:	2200      	movs	r2, #0
 800195a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800195c:	187b      	adds	r3, r7, r1
 800195e:	2203      	movs	r2, #3
 8001960:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 8001962:	187b      	adds	r3, r7, r1
 8001964:	2204      	movs	r2, #4
 8001966:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001968:	187a      	adds	r2, r7, r1
 800196a:	2390      	movs	r3, #144	; 0x90
 800196c:	05db      	lsls	r3, r3, #23
 800196e:	0011      	movs	r1, r2
 8001970:	0018      	movs	r0, r3
 8001972:	f001 f845 	bl	8002a00 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CEC_CAN_IRQn, 0, 0);
 8001976:	2200      	movs	r2, #0
 8001978:	2100      	movs	r1, #0
 800197a:	201e      	movs	r0, #30
 800197c:	f001 f80e 	bl	800299c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_CAN_IRQn);
 8001980:	201e      	movs	r0, #30
 8001982:	f001 f820 	bl	80029c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8001986:	46c0      	nop			; (mov r8, r8)
 8001988:	46bd      	mov	sp, r7
 800198a:	b00b      	add	sp, #44	; 0x2c
 800198c:	bd90      	pop	{r4, r7, pc}
 800198e:	46c0      	nop			; (mov r8, r8)
 8001990:	40006400 	.word	0x40006400
 8001994:	40021000 	.word	0x40021000

08001998 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001998:	b590      	push	{r4, r7, lr}
 800199a:	b08b      	sub	sp, #44	; 0x2c
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a0:	2414      	movs	r4, #20
 80019a2:	193b      	adds	r3, r7, r4
 80019a4:	0018      	movs	r0, r3
 80019a6:	2314      	movs	r3, #20
 80019a8:	001a      	movs	r2, r3
 80019aa:	2100      	movs	r1, #0
 80019ac:	f002 ffaf 	bl	800490e <memset>
  if(hi2c->Instance==I2C1)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a1d      	ldr	r2, [pc, #116]	; (8001a2c <HAL_I2C_MspInit+0x94>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d133      	bne.n	8001a22 <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ba:	4b1d      	ldr	r3, [pc, #116]	; (8001a30 <HAL_I2C_MspInit+0x98>)
 80019bc:	695a      	ldr	r2, [r3, #20]
 80019be:	4b1c      	ldr	r3, [pc, #112]	; (8001a30 <HAL_I2C_MspInit+0x98>)
 80019c0:	2180      	movs	r1, #128	; 0x80
 80019c2:	0289      	lsls	r1, r1, #10
 80019c4:	430a      	orrs	r2, r1
 80019c6:	615a      	str	r2, [r3, #20]
 80019c8:	4b19      	ldr	r3, [pc, #100]	; (8001a30 <HAL_I2C_MspInit+0x98>)
 80019ca:	695a      	ldr	r2, [r3, #20]
 80019cc:	2380      	movs	r3, #128	; 0x80
 80019ce:	029b      	lsls	r3, r3, #10
 80019d0:	4013      	ands	r3, r2
 80019d2:	613b      	str	r3, [r7, #16]
 80019d4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80019d6:	193b      	adds	r3, r7, r4
 80019d8:	22c0      	movs	r2, #192	; 0xc0
 80019da:	00d2      	lsls	r2, r2, #3
 80019dc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019de:	0021      	movs	r1, r4
 80019e0:	187b      	adds	r3, r7, r1
 80019e2:	2212      	movs	r2, #18
 80019e4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e6:	187b      	adds	r3, r7, r1
 80019e8:	2200      	movs	r2, #0
 80019ea:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019ec:	187b      	adds	r3, r7, r1
 80019ee:	2203      	movs	r2, #3
 80019f0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80019f2:	187b      	adds	r3, r7, r1
 80019f4:	2204      	movs	r2, #4
 80019f6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f8:	187a      	adds	r2, r7, r1
 80019fa:	2390      	movs	r3, #144	; 0x90
 80019fc:	05db      	lsls	r3, r3, #23
 80019fe:	0011      	movs	r1, r2
 8001a00:	0018      	movs	r0, r3
 8001a02:	f000 fffd 	bl	8002a00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a06:	4b0a      	ldr	r3, [pc, #40]	; (8001a30 <HAL_I2C_MspInit+0x98>)
 8001a08:	69da      	ldr	r2, [r3, #28]
 8001a0a:	4b09      	ldr	r3, [pc, #36]	; (8001a30 <HAL_I2C_MspInit+0x98>)
 8001a0c:	2180      	movs	r1, #128	; 0x80
 8001a0e:	0389      	lsls	r1, r1, #14
 8001a10:	430a      	orrs	r2, r1
 8001a12:	61da      	str	r2, [r3, #28]
 8001a14:	4b06      	ldr	r3, [pc, #24]	; (8001a30 <HAL_I2C_MspInit+0x98>)
 8001a16:	69da      	ldr	r2, [r3, #28]
 8001a18:	2380      	movs	r3, #128	; 0x80
 8001a1a:	039b      	lsls	r3, r3, #14
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	60fb      	str	r3, [r7, #12]
 8001a20:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001a22:	46c0      	nop			; (mov r8, r8)
 8001a24:	46bd      	mov	sp, r7
 8001a26:	b00b      	add	sp, #44	; 0x2c
 8001a28:	bd90      	pop	{r4, r7, pc}
 8001a2a:	46c0      	nop			; (mov r8, r8)
 8001a2c:	40005400 	.word	0x40005400
 8001a30:	40021000 	.word	0x40021000

08001a34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a34:	b590      	push	{r4, r7, lr}
 8001a36:	b08b      	sub	sp, #44	; 0x2c
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a3c:	2414      	movs	r4, #20
 8001a3e:	193b      	adds	r3, r7, r4
 8001a40:	0018      	movs	r0, r3
 8001a42:	2314      	movs	r3, #20
 8001a44:	001a      	movs	r2, r3
 8001a46:	2100      	movs	r1, #0
 8001a48:	f002 ff61 	bl	800490e <memset>
  if(huart->Instance==USART2)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a1c      	ldr	r2, [pc, #112]	; (8001ac4 <HAL_UART_MspInit+0x90>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d132      	bne.n	8001abc <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a56:	4b1c      	ldr	r3, [pc, #112]	; (8001ac8 <HAL_UART_MspInit+0x94>)
 8001a58:	69da      	ldr	r2, [r3, #28]
 8001a5a:	4b1b      	ldr	r3, [pc, #108]	; (8001ac8 <HAL_UART_MspInit+0x94>)
 8001a5c:	2180      	movs	r1, #128	; 0x80
 8001a5e:	0289      	lsls	r1, r1, #10
 8001a60:	430a      	orrs	r2, r1
 8001a62:	61da      	str	r2, [r3, #28]
 8001a64:	4b18      	ldr	r3, [pc, #96]	; (8001ac8 <HAL_UART_MspInit+0x94>)
 8001a66:	69da      	ldr	r2, [r3, #28]
 8001a68:	2380      	movs	r3, #128	; 0x80
 8001a6a:	029b      	lsls	r3, r3, #10
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	613b      	str	r3, [r7, #16]
 8001a70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a72:	4b15      	ldr	r3, [pc, #84]	; (8001ac8 <HAL_UART_MspInit+0x94>)
 8001a74:	695a      	ldr	r2, [r3, #20]
 8001a76:	4b14      	ldr	r3, [pc, #80]	; (8001ac8 <HAL_UART_MspInit+0x94>)
 8001a78:	2180      	movs	r1, #128	; 0x80
 8001a7a:	0289      	lsls	r1, r1, #10
 8001a7c:	430a      	orrs	r2, r1
 8001a7e:	615a      	str	r2, [r3, #20]
 8001a80:	4b11      	ldr	r3, [pc, #68]	; (8001ac8 <HAL_UART_MspInit+0x94>)
 8001a82:	695a      	ldr	r2, [r3, #20]
 8001a84:	2380      	movs	r3, #128	; 0x80
 8001a86:	029b      	lsls	r3, r3, #10
 8001a88:	4013      	ands	r3, r2
 8001a8a:	60fb      	str	r3, [r7, #12]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8001a8e:	0021      	movs	r1, r4
 8001a90:	187b      	adds	r3, r7, r1
 8001a92:	4a0e      	ldr	r2, [pc, #56]	; (8001acc <HAL_UART_MspInit+0x98>)
 8001a94:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a96:	187b      	adds	r3, r7, r1
 8001a98:	2202      	movs	r2, #2
 8001a9a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9c:	187b      	adds	r3, r7, r1
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001aa2:	187b      	adds	r3, r7, r1
 8001aa4:	2203      	movs	r2, #3
 8001aa6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001aa8:	187b      	adds	r3, r7, r1
 8001aaa:	2201      	movs	r2, #1
 8001aac:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aae:	187a      	adds	r2, r7, r1
 8001ab0:	2390      	movs	r3, #144	; 0x90
 8001ab2:	05db      	lsls	r3, r3, #23
 8001ab4:	0011      	movs	r1, r2
 8001ab6:	0018      	movs	r0, r3
 8001ab8:	f000 ffa2 	bl	8002a00 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001abc:	46c0      	nop			; (mov r8, r8)
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	b00b      	add	sp, #44	; 0x2c
 8001ac2:	bd90      	pop	{r4, r7, pc}
 8001ac4:	40004400 	.word	0x40004400
 8001ac8:	40021000 	.word	0x40021000
 8001acc:	00008004 	.word	0x00008004

08001ad0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ad4:	e7fe      	b.n	8001ad4 <NMI_Handler+0x4>

08001ad6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ada:	e7fe      	b.n	8001ada <HardFault_Handler+0x4>

08001adc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001ae0:	46c0      	nop			; (mov r8, r8)
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001aea:	46c0      	nop			; (mov r8, r8)
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001af4:	f000 f8d6 	bl	8001ca4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001af8:	46c0      	nop			; (mov r8, r8)
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
	...

08001b00 <CEC_CAN_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC and CAN global interrupts / HDMI-CEC wake-up interrupt through EXTI line 27.
  */
void CEC_CAN_IRQHandler(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_CAN_IRQn 0 */

  /* USER CODE END CEC_CAN_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001b04:	4b03      	ldr	r3, [pc, #12]	; (8001b14 <CEC_CAN_IRQHandler+0x14>)
 8001b06:	0018      	movs	r0, r3
 8001b08:	f000 fc88 	bl	800241c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CEC_CAN_IRQn 1 */

  /* USER CODE END CEC_CAN_IRQn 1 */
}
 8001b0c:	46c0      	nop			; (mov r8, r8)
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	46c0      	nop			; (mov r8, r8)
 8001b14:	2000077c 	.word	0x2000077c

08001b18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b086      	sub	sp, #24
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b20:	4a14      	ldr	r2, [pc, #80]	; (8001b74 <_sbrk+0x5c>)
 8001b22:	4b15      	ldr	r3, [pc, #84]	; (8001b78 <_sbrk+0x60>)
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b2c:	4b13      	ldr	r3, [pc, #76]	; (8001b7c <_sbrk+0x64>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d102      	bne.n	8001b3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b34:	4b11      	ldr	r3, [pc, #68]	; (8001b7c <_sbrk+0x64>)
 8001b36:	4a12      	ldr	r2, [pc, #72]	; (8001b80 <_sbrk+0x68>)
 8001b38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b3a:	4b10      	ldr	r3, [pc, #64]	; (8001b7c <_sbrk+0x64>)
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	18d3      	adds	r3, r2, r3
 8001b42:	693a      	ldr	r2, [r7, #16]
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d207      	bcs.n	8001b58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b48:	f002 feae 	bl	80048a8 <__errno>
 8001b4c:	0003      	movs	r3, r0
 8001b4e:	220c      	movs	r2, #12
 8001b50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b52:	2301      	movs	r3, #1
 8001b54:	425b      	negs	r3, r3
 8001b56:	e009      	b.n	8001b6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b58:	4b08      	ldr	r3, [pc, #32]	; (8001b7c <_sbrk+0x64>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b5e:	4b07      	ldr	r3, [pc, #28]	; (8001b7c <_sbrk+0x64>)
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	18d2      	adds	r2, r2, r3
 8001b66:	4b05      	ldr	r3, [pc, #20]	; (8001b7c <_sbrk+0x64>)
 8001b68:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
}
 8001b6c:	0018      	movs	r0, r3
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	b006      	add	sp, #24
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	20001800 	.word	0x20001800
 8001b78:	00000400 	.word	0x00000400
 8001b7c:	200006e8 	.word	0x200006e8
 8001b80:	20000878 	.word	0x20000878

08001b84 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001b88:	46c0      	nop			; (mov r8, r8)
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
	...

08001b90 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001b90:	4813      	ldr	r0, [pc, #76]	; (8001be0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001b92:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8001b94:	4813      	ldr	r0, [pc, #76]	; (8001be4 <LoopForever+0x6>)
    LDR R1, [R0]
 8001b96:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8001b98:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8001b9a:	4a13      	ldr	r2, [pc, #76]	; (8001be8 <LoopForever+0xa>)
    CMP R1, R2
 8001b9c:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8001b9e:	d105      	bne.n	8001bac <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8001ba0:	4812      	ldr	r0, [pc, #72]	; (8001bec <LoopForever+0xe>)
    LDR R1,=0x00000001
 8001ba2:	4913      	ldr	r1, [pc, #76]	; (8001bf0 <LoopForever+0x12>)
    STR R1, [R0]
 8001ba4:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8001ba6:	4813      	ldr	r0, [pc, #76]	; (8001bf4 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8001ba8:	4913      	ldr	r1, [pc, #76]	; (8001bf8 <LoopForever+0x1a>)
    STR R1, [R0]
 8001baa:	6001      	str	r1, [r0, #0]

08001bac <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bac:	4813      	ldr	r0, [pc, #76]	; (8001bfc <LoopForever+0x1e>)
  ldr r1, =_edata
 8001bae:	4914      	ldr	r1, [pc, #80]	; (8001c00 <LoopForever+0x22>)
  ldr r2, =_sidata
 8001bb0:	4a14      	ldr	r2, [pc, #80]	; (8001c04 <LoopForever+0x26>)
  movs r3, #0
 8001bb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bb4:	e002      	b.n	8001bbc <LoopCopyDataInit>

08001bb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bba:	3304      	adds	r3, #4

08001bbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bc0:	d3f9      	bcc.n	8001bb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bc2:	4a11      	ldr	r2, [pc, #68]	; (8001c08 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8001bc4:	4c11      	ldr	r4, [pc, #68]	; (8001c0c <LoopForever+0x2e>)
  movs r3, #0
 8001bc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bc8:	e001      	b.n	8001bce <LoopFillZerobss>

08001bca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bcc:	3204      	adds	r2, #4

08001bce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bd0:	d3fb      	bcc.n	8001bca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001bd2:	f7ff ffd7 	bl	8001b84 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001bd6:	f002 fe6d 	bl	80048b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001bda:	f7ff f9a9 	bl	8000f30 <main>

08001bde <LoopForever>:

LoopForever:
    b LoopForever
 8001bde:	e7fe      	b.n	8001bde <LoopForever>
  ldr   r0, =_estack
 8001be0:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8001be4:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8001be8:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8001bec:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8001bf0:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8001bf4:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8001bf8:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8001bfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c00:	20000274 	.word	0x20000274
  ldr r2, =_sidata
 8001c04:	08007ab8 	.word	0x08007ab8
  ldr r2, =_sbss
 8001c08:	20000274 	.word	0x20000274
  ldr r4, =_ebss
 8001c0c:	20000874 	.word	0x20000874

08001c10 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c10:	e7fe      	b.n	8001c10 <ADC1_IRQHandler>
	...

08001c14 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c18:	4b07      	ldr	r3, [pc, #28]	; (8001c38 <HAL_Init+0x24>)
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	4b06      	ldr	r3, [pc, #24]	; (8001c38 <HAL_Init+0x24>)
 8001c1e:	2110      	movs	r1, #16
 8001c20:	430a      	orrs	r2, r1
 8001c22:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001c24:	2000      	movs	r0, #0
 8001c26:	f000 f809 	bl	8001c3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c2a:	f7ff fe3b 	bl	80018a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c2e:	2300      	movs	r3, #0
}
 8001c30:	0018      	movs	r0, r3
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	46c0      	nop			; (mov r8, r8)
 8001c38:	40022000 	.word	0x40022000

08001c3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c3c:	b590      	push	{r4, r7, lr}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c44:	4b14      	ldr	r3, [pc, #80]	; (8001c98 <HAL_InitTick+0x5c>)
 8001c46:	681c      	ldr	r4, [r3, #0]
 8001c48:	4b14      	ldr	r3, [pc, #80]	; (8001c9c <HAL_InitTick+0x60>)
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	0019      	movs	r1, r3
 8001c4e:	23fa      	movs	r3, #250	; 0xfa
 8001c50:	0098      	lsls	r0, r3, #2
 8001c52:	f7fe fa63 	bl	800011c <__udivsi3>
 8001c56:	0003      	movs	r3, r0
 8001c58:	0019      	movs	r1, r3
 8001c5a:	0020      	movs	r0, r4
 8001c5c:	f7fe fa5e 	bl	800011c <__udivsi3>
 8001c60:	0003      	movs	r3, r0
 8001c62:	0018      	movs	r0, r3
 8001c64:	f000 febf 	bl	80029e6 <HAL_SYSTICK_Config>
 8001c68:	1e03      	subs	r3, r0, #0
 8001c6a:	d001      	beq.n	8001c70 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e00f      	b.n	8001c90 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2b03      	cmp	r3, #3
 8001c74:	d80b      	bhi.n	8001c8e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c76:	6879      	ldr	r1, [r7, #4]
 8001c78:	2301      	movs	r3, #1
 8001c7a:	425b      	negs	r3, r3
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	0018      	movs	r0, r3
 8001c80:	f000 fe8c 	bl	800299c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c84:	4b06      	ldr	r3, [pc, #24]	; (8001ca0 <HAL_InitTick+0x64>)
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	e000      	b.n	8001c90 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
}
 8001c90:	0018      	movs	r0, r3
 8001c92:	46bd      	mov	sp, r7
 8001c94:	b003      	add	sp, #12
 8001c96:	bd90      	pop	{r4, r7, pc}
 8001c98:	20000204 	.word	0x20000204
 8001c9c:	2000020c 	.word	0x2000020c
 8001ca0:	20000208 	.word	0x20000208

08001ca4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ca8:	4b05      	ldr	r3, [pc, #20]	; (8001cc0 <HAL_IncTick+0x1c>)
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	001a      	movs	r2, r3
 8001cae:	4b05      	ldr	r3, [pc, #20]	; (8001cc4 <HAL_IncTick+0x20>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	18d2      	adds	r2, r2, r3
 8001cb4:	4b03      	ldr	r3, [pc, #12]	; (8001cc4 <HAL_IncTick+0x20>)
 8001cb6:	601a      	str	r2, [r3, #0]
}
 8001cb8:	46c0      	nop			; (mov r8, r8)
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	46c0      	nop			; (mov r8, r8)
 8001cc0:	2000020c 	.word	0x2000020c
 8001cc4:	20000860 	.word	0x20000860

08001cc8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
  return uwTick;
 8001ccc:	4b02      	ldr	r3, [pc, #8]	; (8001cd8 <HAL_GetTick+0x10>)
 8001cce:	681b      	ldr	r3, [r3, #0]
}
 8001cd0:	0018      	movs	r0, r3
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	46c0      	nop			; (mov r8, r8)
 8001cd8:	20000860 	.word	0x20000860

08001cdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b084      	sub	sp, #16
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ce4:	f7ff fff0 	bl	8001cc8 <HAL_GetTick>
 8001ce8:	0003      	movs	r3, r0
 8001cea:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	d005      	beq.n	8001d02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cf6:	4b0a      	ldr	r3, [pc, #40]	; (8001d20 <HAL_Delay+0x44>)
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	001a      	movs	r2, r3
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	189b      	adds	r3, r3, r2
 8001d00:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001d02:	46c0      	nop			; (mov r8, r8)
 8001d04:	f7ff ffe0 	bl	8001cc8 <HAL_GetTick>
 8001d08:	0002      	movs	r2, r0
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	68fa      	ldr	r2, [r7, #12]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d8f7      	bhi.n	8001d04 <HAL_Delay+0x28>
  {
  }
}
 8001d14:	46c0      	nop			; (mov r8, r8)
 8001d16:	46c0      	nop			; (mov r8, r8)
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	b004      	add	sp, #16
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	46c0      	nop			; (mov r8, r8)
 8001d20:	2000020c 	.word	0x2000020c

08001d24 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d101      	bne.n	8001d36 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e0f0      	b.n	8001f18 <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2220      	movs	r2, #32
 8001d3a:	5c9b      	ldrb	r3, [r3, r2]
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d103      	bne.n	8001d4a <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	0018      	movs	r0, r3
 8001d46:	f7ff fdd1 	bl	80018ec <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	2101      	movs	r1, #1
 8001d56:	430a      	orrs	r2, r1
 8001d58:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d5a:	f7ff ffb5 	bl	8001cc8 <HAL_GetTick>
 8001d5e:	0003      	movs	r3, r0
 8001d60:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001d62:	e013      	b.n	8001d8c <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d64:	f7ff ffb0 	bl	8001cc8 <HAL_GetTick>
 8001d68:	0002      	movs	r2, r0
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	2b0a      	cmp	r3, #10
 8001d70:	d90c      	bls.n	8001d8c <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d76:	2280      	movs	r2, #128	; 0x80
 8001d78:	0292      	lsls	r2, r2, #10
 8001d7a:	431a      	orrs	r2, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2220      	movs	r2, #32
 8001d84:	2105      	movs	r1, #5
 8001d86:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e0c5      	b.n	8001f18 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	2201      	movs	r2, #1
 8001d94:	4013      	ands	r3, r2
 8001d96:	d0e5      	beq.n	8001d64 <HAL_CAN_Init+0x40>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	2102      	movs	r1, #2
 8001da4:	438a      	bics	r2, r1
 8001da6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001da8:	f7ff ff8e 	bl	8001cc8 <HAL_GetTick>
 8001dac:	0003      	movs	r3, r0
 8001dae:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001db0:	e013      	b.n	8001dda <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001db2:	f7ff ff89 	bl	8001cc8 <HAL_GetTick>
 8001db6:	0002      	movs	r2, r0
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	2b0a      	cmp	r3, #10
 8001dbe:	d90c      	bls.n	8001dda <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc4:	2280      	movs	r2, #128	; 0x80
 8001dc6:	0292      	lsls	r2, r2, #10
 8001dc8:	431a      	orrs	r2, r3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2220      	movs	r2, #32
 8001dd2:	2105      	movs	r1, #5
 8001dd4:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e09e      	b.n	8001f18 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	2202      	movs	r2, #2
 8001de2:	4013      	ands	r3, r2
 8001de4:	d1e5      	bne.n	8001db2 <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	7e1b      	ldrb	r3, [r3, #24]
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d108      	bne.n	8001e00 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	2180      	movs	r1, #128	; 0x80
 8001dfa:	430a      	orrs	r2, r1
 8001dfc:	601a      	str	r2, [r3, #0]
 8001dfe:	e007      	b.n	8001e10 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	2180      	movs	r1, #128	; 0x80
 8001e0c:	438a      	bics	r2, r1
 8001e0e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	7e5b      	ldrb	r3, [r3, #25]
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d108      	bne.n	8001e2a <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	2140      	movs	r1, #64	; 0x40
 8001e24:	430a      	orrs	r2, r1
 8001e26:	601a      	str	r2, [r3, #0]
 8001e28:	e007      	b.n	8001e3a <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	2140      	movs	r1, #64	; 0x40
 8001e36:	438a      	bics	r2, r1
 8001e38:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	7e9b      	ldrb	r3, [r3, #26]
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d108      	bne.n	8001e54 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2120      	movs	r1, #32
 8001e4e:	430a      	orrs	r2, r1
 8001e50:	601a      	str	r2, [r3, #0]
 8001e52:	e007      	b.n	8001e64 <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	2120      	movs	r1, #32
 8001e60:	438a      	bics	r2, r1
 8001e62:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	7edb      	ldrb	r3, [r3, #27]
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d108      	bne.n	8001e7e <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	2110      	movs	r1, #16
 8001e78:	438a      	bics	r2, r1
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	e007      	b.n	8001e8e <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	2110      	movs	r1, #16
 8001e8a:	430a      	orrs	r2, r1
 8001e8c:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	7f1b      	ldrb	r3, [r3, #28]
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d108      	bne.n	8001ea8 <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	2108      	movs	r1, #8
 8001ea2:	430a      	orrs	r2, r1
 8001ea4:	601a      	str	r2, [r3, #0]
 8001ea6:	e007      	b.n	8001eb8 <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	2108      	movs	r1, #8
 8001eb4:	438a      	bics	r2, r1
 8001eb6:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	7f5b      	ldrb	r3, [r3, #29]
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d108      	bne.n	8001ed2 <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	2104      	movs	r1, #4
 8001ecc:	430a      	orrs	r2, r1
 8001ece:	601a      	str	r2, [r3, #0]
 8001ed0:	e007      	b.n	8001ee2 <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2104      	movs	r1, #4
 8001ede:	438a      	bics	r2, r1
 8001ee0:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	689a      	ldr	r2, [r3, #8]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	68db      	ldr	r3, [r3, #12]
 8001eea:	431a      	orrs	r2, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	691b      	ldr	r3, [r3, #16]
 8001ef0:	431a      	orrs	r2, r3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	695b      	ldr	r3, [r3, #20]
 8001ef6:	431a      	orrs	r2, r3
 8001ef8:	0011      	movs	r1, r2
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	1e5a      	subs	r2, r3, #1
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	430a      	orrs	r2, r1
 8001f06:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2220      	movs	r2, #32
 8001f12:	2101      	movs	r1, #1
 8001f14:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001f16:	2300      	movs	r3, #0
}
 8001f18:	0018      	movs	r0, r3
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	b004      	add	sp, #16
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b086      	sub	sp, #24
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001f30:	2013      	movs	r0, #19
 8001f32:	183b      	adds	r3, r7, r0
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	2120      	movs	r1, #32
 8001f38:	5c52      	ldrb	r2, [r2, r1]
 8001f3a:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8001f3c:	0002      	movs	r2, r0
 8001f3e:	18bb      	adds	r3, r7, r2
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d004      	beq.n	8001f50 <HAL_CAN_ConfigFilter+0x30>
 8001f46:	18bb      	adds	r3, r7, r2
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d000      	beq.n	8001f50 <HAL_CAN_ConfigFilter+0x30>
 8001f4e:	e0cd      	b.n	80020ec <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001f50:	697a      	ldr	r2, [r7, #20]
 8001f52:	2380      	movs	r3, #128	; 0x80
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	58d3      	ldr	r3, [r2, r3]
 8001f58:	2201      	movs	r2, #1
 8001f5a:	431a      	orrs	r2, r3
 8001f5c:	0011      	movs	r1, r2
 8001f5e:	697a      	ldr	r2, [r7, #20]
 8001f60:	2380      	movs	r3, #128	; 0x80
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	695b      	ldr	r3, [r3, #20]
 8001f6a:	221f      	movs	r2, #31
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	2201      	movs	r2, #1
 8001f70:	409a      	lsls	r2, r3
 8001f72:	0013      	movs	r3, r2
 8001f74:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001f76:	697a      	ldr	r2, [r7, #20]
 8001f78:	2387      	movs	r3, #135	; 0x87
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	58d3      	ldr	r3, [r2, r3]
 8001f7e:	68fa      	ldr	r2, [r7, #12]
 8001f80:	43d2      	mvns	r2, r2
 8001f82:	401a      	ands	r2, r3
 8001f84:	0011      	movs	r1, r2
 8001f86:	697a      	ldr	r2, [r7, #20]
 8001f88:	2387      	movs	r3, #135	; 0x87
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	69db      	ldr	r3, [r3, #28]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d129      	bne.n	8001fea <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001f96:	697a      	ldr	r2, [r7, #20]
 8001f98:	2383      	movs	r3, #131	; 0x83
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	58d3      	ldr	r3, [r2, r3]
 8001f9e:	68fa      	ldr	r2, [r7, #12]
 8001fa0:	43d2      	mvns	r2, r2
 8001fa2:	401a      	ands	r2, r3
 8001fa4:	0011      	movs	r1, r2
 8001fa6:	697a      	ldr	r2, [r7, #20]
 8001fa8:	2383      	movs	r3, #131	; 0x83
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	041b      	lsls	r3, r3, #16
 8001fba:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001fc0:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	3248      	adds	r2, #72	; 0x48
 8001fc6:	00d2      	lsls	r2, r2, #3
 8001fc8:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	041b      	lsls	r3, r3, #16
 8001fd6:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001fdc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001fde:	6979      	ldr	r1, [r7, #20]
 8001fe0:	3348      	adds	r3, #72	; 0x48
 8001fe2:	00db      	lsls	r3, r3, #3
 8001fe4:	18cb      	adds	r3, r1, r3
 8001fe6:	3304      	adds	r3, #4
 8001fe8:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	69db      	ldr	r3, [r3, #28]
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d128      	bne.n	8002044 <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001ff2:	697a      	ldr	r2, [r7, #20]
 8001ff4:	2383      	movs	r3, #131	; 0x83
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	58d2      	ldr	r2, [r2, r3]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	431a      	orrs	r2, r3
 8001ffe:	0011      	movs	r1, r2
 8002000:	697a      	ldr	r2, [r7, #20]
 8002002:	2383      	movs	r3, #131	; 0x83
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	041b      	lsls	r3, r3, #16
 8002014:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800201a:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	3248      	adds	r2, #72	; 0x48
 8002020:	00d2      	lsls	r2, r2, #3
 8002022:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	68db      	ldr	r3, [r3, #12]
 800202e:	041b      	lsls	r3, r3, #16
 8002030:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002036:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002038:	6979      	ldr	r1, [r7, #20]
 800203a:	3348      	adds	r3, #72	; 0x48
 800203c:	00db      	lsls	r3, r3, #3
 800203e:	18cb      	adds	r3, r1, r3
 8002040:	3304      	adds	r3, #4
 8002042:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	699b      	ldr	r3, [r3, #24]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d10c      	bne.n	8002066 <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800204c:	697a      	ldr	r2, [r7, #20]
 800204e:	2381      	movs	r3, #129	; 0x81
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	58d3      	ldr	r3, [r2, r3]
 8002054:	68fa      	ldr	r2, [r7, #12]
 8002056:	43d2      	mvns	r2, r2
 8002058:	401a      	ands	r2, r3
 800205a:	0011      	movs	r1, r2
 800205c:	697a      	ldr	r2, [r7, #20]
 800205e:	2381      	movs	r3, #129	; 0x81
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	50d1      	str	r1, [r2, r3]
 8002064:	e00a      	b.n	800207c <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002066:	697a      	ldr	r2, [r7, #20]
 8002068:	2381      	movs	r3, #129	; 0x81
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	58d2      	ldr	r2, [r2, r3]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	431a      	orrs	r2, r3
 8002072:	0011      	movs	r1, r2
 8002074:	697a      	ldr	r2, [r7, #20]
 8002076:	2381      	movs	r3, #129	; 0x81
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	691b      	ldr	r3, [r3, #16]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d10c      	bne.n	800209e <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002084:	697a      	ldr	r2, [r7, #20]
 8002086:	2385      	movs	r3, #133	; 0x85
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	58d3      	ldr	r3, [r2, r3]
 800208c:	68fa      	ldr	r2, [r7, #12]
 800208e:	43d2      	mvns	r2, r2
 8002090:	401a      	ands	r2, r3
 8002092:	0011      	movs	r1, r2
 8002094:	697a      	ldr	r2, [r7, #20]
 8002096:	2385      	movs	r3, #133	; 0x85
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	50d1      	str	r1, [r2, r3]
 800209c:	e00a      	b.n	80020b4 <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800209e:	697a      	ldr	r2, [r7, #20]
 80020a0:	2385      	movs	r3, #133	; 0x85
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	58d2      	ldr	r2, [r2, r3]
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	431a      	orrs	r2, r3
 80020aa:	0011      	movs	r1, r2
 80020ac:	697a      	ldr	r2, [r7, #20]
 80020ae:	2385      	movs	r3, #133	; 0x85
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	6a1b      	ldr	r3, [r3, #32]
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d10a      	bne.n	80020d2 <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80020bc:	697a      	ldr	r2, [r7, #20]
 80020be:	2387      	movs	r3, #135	; 0x87
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	58d2      	ldr	r2, [r2, r3]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	431a      	orrs	r2, r3
 80020c8:	0011      	movs	r1, r2
 80020ca:	697a      	ldr	r2, [r7, #20]
 80020cc:	2387      	movs	r3, #135	; 0x87
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80020d2:	697a      	ldr	r2, [r7, #20]
 80020d4:	2380      	movs	r3, #128	; 0x80
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	58d3      	ldr	r3, [r2, r3]
 80020da:	2201      	movs	r2, #1
 80020dc:	4393      	bics	r3, r2
 80020de:	0019      	movs	r1, r3
 80020e0:	697a      	ldr	r2, [r7, #20]
 80020e2:	2380      	movs	r3, #128	; 0x80
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 80020e8:	2300      	movs	r3, #0
 80020ea:	e007      	b.n	80020fc <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f0:	2280      	movs	r2, #128	; 0x80
 80020f2:	02d2      	lsls	r2, r2, #11
 80020f4:	431a      	orrs	r2, r3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
  }
}
 80020fc:	0018      	movs	r0, r3
 80020fe:	46bd      	mov	sp, r7
 8002100:	b006      	add	sp, #24
 8002102:	bd80      	pop	{r7, pc}

08002104 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2220      	movs	r2, #32
 8002110:	5c9b      	ldrb	r3, [r3, r2]
 8002112:	b2db      	uxtb	r3, r3
 8002114:	2b01      	cmp	r3, #1
 8002116:	d12f      	bne.n	8002178 <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2220      	movs	r2, #32
 800211c:	2102      	movs	r1, #2
 800211e:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	2101      	movs	r1, #1
 800212c:	438a      	bics	r2, r1
 800212e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002130:	f7ff fdca 	bl	8001cc8 <HAL_GetTick>
 8002134:	0003      	movs	r3, r0
 8002136:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002138:	e013      	b.n	8002162 <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800213a:	f7ff fdc5 	bl	8001cc8 <HAL_GetTick>
 800213e:	0002      	movs	r2, r0
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	2b0a      	cmp	r3, #10
 8002146:	d90c      	bls.n	8002162 <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214c:	2280      	movs	r2, #128	; 0x80
 800214e:	0292      	lsls	r2, r2, #10
 8002150:	431a      	orrs	r2, r3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2220      	movs	r2, #32
 800215a:	2105      	movs	r1, #5
 800215c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e012      	b.n	8002188 <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	2201      	movs	r2, #1
 800216a:	4013      	ands	r3, r2
 800216c:	d1e5      	bne.n	800213a <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002174:	2300      	movs	r3, #0
 8002176:	e007      	b.n	8002188 <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217c:	2280      	movs	r2, #128	; 0x80
 800217e:	0312      	lsls	r2, r2, #12
 8002180:	431a      	orrs	r2, r3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
  }
}
 8002188:	0018      	movs	r0, r3
 800218a:	46bd      	mov	sp, r7
 800218c:	b004      	add	sp, #16
 800218e:	bd80      	pop	{r7, pc}

08002190 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b086      	sub	sp, #24
 8002194:	af00      	add	r7, sp, #0
 8002196:	60f8      	str	r0, [r7, #12]
 8002198:	60b9      	str	r1, [r7, #8]
 800219a:	607a      	str	r2, [r7, #4]
 800219c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800219e:	2017      	movs	r0, #23
 80021a0:	183b      	adds	r3, r7, r0
 80021a2:	68fa      	ldr	r2, [r7, #12]
 80021a4:	2120      	movs	r1, #32
 80021a6:	5c52      	ldrb	r2, [r2, r1]
 80021a8:	701a      	strb	r2, [r3, #0]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80021aa:	0002      	movs	r2, r0
 80021ac:	18bb      	adds	r3, r7, r2
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d004      	beq.n	80021be <HAL_CAN_GetRxMessage+0x2e>
 80021b4:	18bb      	adds	r3, r7, r2
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	d000      	beq.n	80021be <HAL_CAN_GetRxMessage+0x2e>
 80021bc:	e0f8      	b.n	80023b0 <HAL_CAN_GetRxMessage+0x220>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d10e      	bne.n	80021e2 <HAL_CAN_GetRxMessage+0x52>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	2203      	movs	r2, #3
 80021cc:	4013      	ands	r3, r2
 80021ce:	d117      	bne.n	8002200 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d4:	2280      	movs	r2, #128	; 0x80
 80021d6:	0392      	lsls	r2, r2, #14
 80021d8:	431a      	orrs	r2, r3
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e0ee      	b.n	80023c0 <HAL_CAN_GetRxMessage+0x230>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	691b      	ldr	r3, [r3, #16]
 80021e8:	2203      	movs	r2, #3
 80021ea:	4013      	ands	r3, r2
 80021ec:	d108      	bne.n	8002200 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f2:	2280      	movs	r2, #128	; 0x80
 80021f4:	0392      	lsls	r2, r2, #14
 80021f6:	431a      	orrs	r2, r3
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e0df      	b.n	80023c0 <HAL_CAN_GetRxMessage+0x230>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	68ba      	ldr	r2, [r7, #8]
 8002206:	321b      	adds	r2, #27
 8002208:	0112      	lsls	r2, r2, #4
 800220a:	58d3      	ldr	r3, [r2, r3]
 800220c:	2204      	movs	r2, #4
 800220e:	401a      	ands	r2, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d10b      	bne.n	8002234 <HAL_CAN_GetRxMessage+0xa4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	68ba      	ldr	r2, [r7, #8]
 8002222:	321b      	adds	r2, #27
 8002224:	0112      	lsls	r2, r2, #4
 8002226:	58d3      	ldr	r3, [r2, r3]
 8002228:	0d5b      	lsrs	r3, r3, #21
 800222a:	055b      	lsls	r3, r3, #21
 800222c:	0d5a      	lsrs	r2, r3, #21
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	601a      	str	r2, [r3, #0]
 8002232:	e00a      	b.n	800224a <HAL_CAN_GetRxMessage+0xba>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	68ba      	ldr	r2, [r7, #8]
 800223a:	321b      	adds	r2, #27
 800223c:	0112      	lsls	r2, r2, #4
 800223e:	58d3      	ldr	r3, [r2, r3]
 8002240:	08db      	lsrs	r3, r3, #3
 8002242:	00db      	lsls	r3, r3, #3
 8002244:	08da      	lsrs	r2, r3, #3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	68ba      	ldr	r2, [r7, #8]
 8002250:	321b      	adds	r2, #27
 8002252:	0112      	lsls	r2, r2, #4
 8002254:	58d3      	ldr	r3, [r2, r3]
 8002256:	2202      	movs	r2, #2
 8002258:	401a      	ands	r2, r3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	331b      	adds	r3, #27
 8002266:	011b      	lsls	r3, r3, #4
 8002268:	18d3      	adds	r3, r2, r3
 800226a:	3304      	adds	r3, #4
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	220f      	movs	r2, #15
 8002270:	401a      	ands	r2, r3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	331b      	adds	r3, #27
 800227e:	011b      	lsls	r3, r3, #4
 8002280:	18d3      	adds	r3, r2, r3
 8002282:	3304      	adds	r3, #4
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	0a1b      	lsrs	r3, r3, #8
 8002288:	22ff      	movs	r2, #255	; 0xff
 800228a:	401a      	ands	r2, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	331b      	adds	r3, #27
 8002298:	011b      	lsls	r3, r3, #4
 800229a:	18d3      	adds	r3, r2, r3
 800229c:	3304      	adds	r3, #4
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	0c1b      	lsrs	r3, r3, #16
 80022a2:	041b      	lsls	r3, r3, #16
 80022a4:	0c1a      	lsrs	r2, r3, #16
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	6819      	ldr	r1, [r3, #0]
 80022ae:	68ba      	ldr	r2, [r7, #8]
 80022b0:	23dc      	movs	r3, #220	; 0xdc
 80022b2:	005b      	lsls	r3, r3, #1
 80022b4:	0112      	lsls	r2, r2, #4
 80022b6:	188a      	adds	r2, r1, r2
 80022b8:	18d3      	adds	r3, r2, r3
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	b2da      	uxtb	r2, r3
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	6819      	ldr	r1, [r3, #0]
 80022c6:	68ba      	ldr	r2, [r7, #8]
 80022c8:	23dc      	movs	r3, #220	; 0xdc
 80022ca:	005b      	lsls	r3, r3, #1
 80022cc:	0112      	lsls	r2, r2, #4
 80022ce:	188a      	adds	r2, r1, r2
 80022d0:	18d3      	adds	r3, r2, r3
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	0a1a      	lsrs	r2, r3, #8
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	3301      	adds	r3, #1
 80022da:	b2d2      	uxtb	r2, r2
 80022dc:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	6819      	ldr	r1, [r3, #0]
 80022e2:	68ba      	ldr	r2, [r7, #8]
 80022e4:	23dc      	movs	r3, #220	; 0xdc
 80022e6:	005b      	lsls	r3, r3, #1
 80022e8:	0112      	lsls	r2, r2, #4
 80022ea:	188a      	adds	r2, r1, r2
 80022ec:	18d3      	adds	r3, r2, r3
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	0c1a      	lsrs	r2, r3, #16
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	3302      	adds	r3, #2
 80022f6:	b2d2      	uxtb	r2, r2
 80022f8:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	6819      	ldr	r1, [r3, #0]
 80022fe:	68ba      	ldr	r2, [r7, #8]
 8002300:	23dc      	movs	r3, #220	; 0xdc
 8002302:	005b      	lsls	r3, r3, #1
 8002304:	0112      	lsls	r2, r2, #4
 8002306:	188a      	adds	r2, r1, r2
 8002308:	18d3      	adds	r3, r2, r3
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	0e1a      	lsrs	r2, r3, #24
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	3303      	adds	r3, #3
 8002312:	b2d2      	uxtb	r2, r2
 8002314:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	6819      	ldr	r1, [r3, #0]
 800231a:	68ba      	ldr	r2, [r7, #8]
 800231c:	23de      	movs	r3, #222	; 0xde
 800231e:	005b      	lsls	r3, r3, #1
 8002320:	0112      	lsls	r2, r2, #4
 8002322:	188a      	adds	r2, r1, r2
 8002324:	18d3      	adds	r3, r2, r3
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	3304      	adds	r3, #4
 800232c:	b2d2      	uxtb	r2, r2
 800232e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	6819      	ldr	r1, [r3, #0]
 8002334:	68ba      	ldr	r2, [r7, #8]
 8002336:	23de      	movs	r3, #222	; 0xde
 8002338:	005b      	lsls	r3, r3, #1
 800233a:	0112      	lsls	r2, r2, #4
 800233c:	188a      	adds	r2, r1, r2
 800233e:	18d3      	adds	r3, r2, r3
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	0a1a      	lsrs	r2, r3, #8
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	3305      	adds	r3, #5
 8002348:	b2d2      	uxtb	r2, r2
 800234a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	6819      	ldr	r1, [r3, #0]
 8002350:	68ba      	ldr	r2, [r7, #8]
 8002352:	23de      	movs	r3, #222	; 0xde
 8002354:	005b      	lsls	r3, r3, #1
 8002356:	0112      	lsls	r2, r2, #4
 8002358:	188a      	adds	r2, r1, r2
 800235a:	18d3      	adds	r3, r2, r3
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	0c1a      	lsrs	r2, r3, #16
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	3306      	adds	r3, #6
 8002364:	b2d2      	uxtb	r2, r2
 8002366:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	6819      	ldr	r1, [r3, #0]
 800236c:	68ba      	ldr	r2, [r7, #8]
 800236e:	23de      	movs	r3, #222	; 0xde
 8002370:	005b      	lsls	r3, r3, #1
 8002372:	0112      	lsls	r2, r2, #4
 8002374:	188a      	adds	r2, r1, r2
 8002376:	18d3      	adds	r3, r2, r3
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	0e1a      	lsrs	r2, r3, #24
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	3307      	adds	r3, #7
 8002380:	b2d2      	uxtb	r2, r2
 8002382:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d108      	bne.n	800239c <HAL_CAN_GetRxMessage+0x20c>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	68da      	ldr	r2, [r3, #12]
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	2120      	movs	r1, #32
 8002396:	430a      	orrs	r2, r1
 8002398:	60da      	str	r2, [r3, #12]
 800239a:	e007      	b.n	80023ac <HAL_CAN_GetRxMessage+0x21c>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	691a      	ldr	r2, [r3, #16]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	2120      	movs	r1, #32
 80023a8:	430a      	orrs	r2, r1
 80023aa:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80023ac:	2300      	movs	r3, #0
 80023ae:	e007      	b.n	80023c0 <HAL_CAN_GetRxMessage+0x230>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b4:	2280      	movs	r2, #128	; 0x80
 80023b6:	02d2      	lsls	r2, r2, #11
 80023b8:	431a      	orrs	r2, r3
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
  }
}
 80023c0:	0018      	movs	r0, r3
 80023c2:	46bd      	mov	sp, r7
 80023c4:	b006      	add	sp, #24
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80023d2:	200f      	movs	r0, #15
 80023d4:	183b      	adds	r3, r7, r0
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	2120      	movs	r1, #32
 80023da:	5c52      	ldrb	r2, [r2, r1]
 80023dc:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80023de:	0002      	movs	r2, r0
 80023e0:	18bb      	adds	r3, r7, r2
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d003      	beq.n	80023f0 <HAL_CAN_ActivateNotification+0x28>
 80023e8:	18bb      	adds	r3, r7, r2
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	2b02      	cmp	r3, #2
 80023ee:	d109      	bne.n	8002404 <HAL_CAN_ActivateNotification+0x3c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	6959      	ldr	r1, [r3, #20]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	683a      	ldr	r2, [r7, #0]
 80023fc:	430a      	orrs	r2, r1
 80023fe:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002400:	2300      	movs	r3, #0
 8002402:	e007      	b.n	8002414 <HAL_CAN_ActivateNotification+0x4c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002408:	2280      	movs	r2, #128	; 0x80
 800240a:	02d2      	lsls	r2, r2, #11
 800240c:	431a      	orrs	r2, r3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
  }
}
 8002414:	0018      	movs	r0, r3
 8002416:	46bd      	mov	sp, r7
 8002418:	b004      	add	sp, #16
 800241a:	bd80      	pop	{r7, pc}

0800241c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b08a      	sub	sp, #40	; 0x28
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002424:	2300      	movs	r3, #0
 8002426:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	695b      	ldr	r3, [r3, #20]
 800242e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	691b      	ldr	r3, [r3, #16]
 800244e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	699b      	ldr	r3, [r3, #24]
 8002456:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002458:	6a3b      	ldr	r3, [r7, #32]
 800245a:	2201      	movs	r2, #1
 800245c:	4013      	ands	r3, r2
 800245e:	d100      	bne.n	8002462 <HAL_CAN_IRQHandler+0x46>
 8002460:	e084      	b.n	800256c <HAL_CAN_IRQHandler+0x150>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002462:	69bb      	ldr	r3, [r7, #24]
 8002464:	2201      	movs	r2, #1
 8002466:	4013      	ands	r3, r2
 8002468:	d024      	beq.n	80024b4 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	2201      	movs	r2, #1
 8002470:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	2202      	movs	r2, #2
 8002476:	4013      	ands	r3, r2
 8002478:	d004      	beq.n	8002484 <HAL_CAN_IRQHandler+0x68>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	0018      	movs	r0, r3
 800247e:	f000 f981 	bl	8002784 <HAL_CAN_TxMailbox0CompleteCallback>
 8002482:	e017      	b.n	80024b4 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	2204      	movs	r2, #4
 8002488:	4013      	ands	r3, r2
 800248a:	d005      	beq.n	8002498 <HAL_CAN_IRQHandler+0x7c>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800248c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248e:	2280      	movs	r2, #128	; 0x80
 8002490:	0112      	lsls	r2, r2, #4
 8002492:	4313      	orrs	r3, r2
 8002494:	627b      	str	r3, [r7, #36]	; 0x24
 8002496:	e00d      	b.n	80024b4 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	2208      	movs	r2, #8
 800249c:	4013      	ands	r3, r2
 800249e:	d005      	beq.n	80024ac <HAL_CAN_IRQHandler+0x90>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80024a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a2:	2280      	movs	r2, #128	; 0x80
 80024a4:	0152      	lsls	r2, r2, #5
 80024a6:	4313      	orrs	r3, r2
 80024a8:	627b      	str	r3, [r7, #36]	; 0x24
 80024aa:	e003      	b.n	80024b4 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	0018      	movs	r0, r3
 80024b0:	f000 f980 	bl	80027b4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80024b4:	69ba      	ldr	r2, [r7, #24]
 80024b6:	2380      	movs	r3, #128	; 0x80
 80024b8:	005b      	lsls	r3, r3, #1
 80024ba:	4013      	ands	r3, r2
 80024bc:	d028      	beq.n	8002510 <HAL_CAN_IRQHandler+0xf4>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	2280      	movs	r2, #128	; 0x80
 80024c4:	0052      	lsls	r2, r2, #1
 80024c6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80024c8:	69ba      	ldr	r2, [r7, #24]
 80024ca:	2380      	movs	r3, #128	; 0x80
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	4013      	ands	r3, r2
 80024d0:	d004      	beq.n	80024dc <HAL_CAN_IRQHandler+0xc0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	0018      	movs	r0, r3
 80024d6:	f000 f95d 	bl	8002794 <HAL_CAN_TxMailbox1CompleteCallback>
 80024da:	e019      	b.n	8002510 <HAL_CAN_IRQHandler+0xf4>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80024dc:	69ba      	ldr	r2, [r7, #24]
 80024de:	2380      	movs	r3, #128	; 0x80
 80024e0:	00db      	lsls	r3, r3, #3
 80024e2:	4013      	ands	r3, r2
 80024e4:	d005      	beq.n	80024f2 <HAL_CAN_IRQHandler+0xd6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80024e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e8:	2280      	movs	r2, #128	; 0x80
 80024ea:	0192      	lsls	r2, r2, #6
 80024ec:	4313      	orrs	r3, r2
 80024ee:	627b      	str	r3, [r7, #36]	; 0x24
 80024f0:	e00e      	b.n	8002510 <HAL_CAN_IRQHandler+0xf4>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80024f2:	69ba      	ldr	r2, [r7, #24]
 80024f4:	2380      	movs	r3, #128	; 0x80
 80024f6:	011b      	lsls	r3, r3, #4
 80024f8:	4013      	ands	r3, r2
 80024fa:	d005      	beq.n	8002508 <HAL_CAN_IRQHandler+0xec>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80024fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fe:	2280      	movs	r2, #128	; 0x80
 8002500:	01d2      	lsls	r2, r2, #7
 8002502:	4313      	orrs	r3, r2
 8002504:	627b      	str	r3, [r7, #36]	; 0x24
 8002506:	e003      	b.n	8002510 <HAL_CAN_IRQHandler+0xf4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	0018      	movs	r0, r3
 800250c:	f000 f95a 	bl	80027c4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	2380      	movs	r3, #128	; 0x80
 8002514:	025b      	lsls	r3, r3, #9
 8002516:	4013      	ands	r3, r2
 8002518:	d028      	beq.n	800256c <HAL_CAN_IRQHandler+0x150>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	2280      	movs	r2, #128	; 0x80
 8002520:	0252      	lsls	r2, r2, #9
 8002522:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	2380      	movs	r3, #128	; 0x80
 8002528:	029b      	lsls	r3, r3, #10
 800252a:	4013      	ands	r3, r2
 800252c:	d004      	beq.n	8002538 <HAL_CAN_IRQHandler+0x11c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	0018      	movs	r0, r3
 8002532:	f000 f937 	bl	80027a4 <HAL_CAN_TxMailbox2CompleteCallback>
 8002536:	e019      	b.n	800256c <HAL_CAN_IRQHandler+0x150>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	2380      	movs	r3, #128	; 0x80
 800253c:	02db      	lsls	r3, r3, #11
 800253e:	4013      	ands	r3, r2
 8002540:	d005      	beq.n	800254e <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002544:	2280      	movs	r2, #128	; 0x80
 8002546:	0212      	lsls	r2, r2, #8
 8002548:	4313      	orrs	r3, r2
 800254a:	627b      	str	r3, [r7, #36]	; 0x24
 800254c:	e00e      	b.n	800256c <HAL_CAN_IRQHandler+0x150>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800254e:	69ba      	ldr	r2, [r7, #24]
 8002550:	2380      	movs	r3, #128	; 0x80
 8002552:	031b      	lsls	r3, r3, #12
 8002554:	4013      	ands	r3, r2
 8002556:	d005      	beq.n	8002564 <HAL_CAN_IRQHandler+0x148>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255a:	2280      	movs	r2, #128	; 0x80
 800255c:	0252      	lsls	r2, r2, #9
 800255e:	4313      	orrs	r3, r2
 8002560:	627b      	str	r3, [r7, #36]	; 0x24
 8002562:	e003      	b.n	800256c <HAL_CAN_IRQHandler+0x150>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	0018      	movs	r0, r3
 8002568:	f000 f934 	bl	80027d4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800256c:	6a3b      	ldr	r3, [r7, #32]
 800256e:	2208      	movs	r2, #8
 8002570:	4013      	ands	r3, r2
 8002572:	d00c      	beq.n	800258e <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	2210      	movs	r2, #16
 8002578:	4013      	ands	r3, r2
 800257a:	d008      	beq.n	800258e <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800257c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257e:	2280      	movs	r2, #128	; 0x80
 8002580:	0092      	lsls	r2, r2, #2
 8002582:	4313      	orrs	r3, r2
 8002584:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	2210      	movs	r2, #16
 800258c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800258e:	6a3b      	ldr	r3, [r7, #32]
 8002590:	2204      	movs	r2, #4
 8002592:	4013      	ands	r3, r2
 8002594:	d00b      	beq.n	80025ae <HAL_CAN_IRQHandler+0x192>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	2208      	movs	r2, #8
 800259a:	4013      	ands	r3, r2
 800259c:	d007      	beq.n	80025ae <HAL_CAN_IRQHandler+0x192>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	2208      	movs	r2, #8
 80025a4:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	0018      	movs	r0, r3
 80025aa:	f000 f91b 	bl	80027e4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80025ae:	6a3b      	ldr	r3, [r7, #32]
 80025b0:	2202      	movs	r2, #2
 80025b2:	4013      	ands	r3, r2
 80025b4:	d009      	beq.n	80025ca <HAL_CAN_IRQHandler+0x1ae>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	2203      	movs	r2, #3
 80025be:	4013      	ands	r3, r2
 80025c0:	d003      	beq.n	80025ca <HAL_CAN_IRQHandler+0x1ae>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	0018      	movs	r0, r3
 80025c6:	f7fd ff1f 	bl	8000408 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80025ca:	6a3b      	ldr	r3, [r7, #32]
 80025cc:	2240      	movs	r2, #64	; 0x40
 80025ce:	4013      	ands	r3, r2
 80025d0:	d00c      	beq.n	80025ec <HAL_CAN_IRQHandler+0x1d0>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	2210      	movs	r2, #16
 80025d6:	4013      	ands	r3, r2
 80025d8:	d008      	beq.n	80025ec <HAL_CAN_IRQHandler+0x1d0>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80025da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025dc:	2280      	movs	r2, #128	; 0x80
 80025de:	00d2      	lsls	r2, r2, #3
 80025e0:	4313      	orrs	r3, r2
 80025e2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2210      	movs	r2, #16
 80025ea:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80025ec:	6a3b      	ldr	r3, [r7, #32]
 80025ee:	2220      	movs	r2, #32
 80025f0:	4013      	ands	r3, r2
 80025f2:	d00b      	beq.n	800260c <HAL_CAN_IRQHandler+0x1f0>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	2208      	movs	r2, #8
 80025f8:	4013      	ands	r3, r2
 80025fa:	d007      	beq.n	800260c <HAL_CAN_IRQHandler+0x1f0>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2208      	movs	r2, #8
 8002602:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	0018      	movs	r0, r3
 8002608:	f000 f8fc 	bl	8002804 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800260c:	6a3b      	ldr	r3, [r7, #32]
 800260e:	2210      	movs	r2, #16
 8002610:	4013      	ands	r3, r2
 8002612:	d009      	beq.n	8002628 <HAL_CAN_IRQHandler+0x20c>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	691b      	ldr	r3, [r3, #16]
 800261a:	2203      	movs	r2, #3
 800261c:	4013      	ands	r3, r2
 800261e:	d003      	beq.n	8002628 <HAL_CAN_IRQHandler+0x20c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	0018      	movs	r0, r3
 8002624:	f000 f8e6 	bl	80027f4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002628:	6a3a      	ldr	r2, [r7, #32]
 800262a:	2380      	movs	r3, #128	; 0x80
 800262c:	029b      	lsls	r3, r3, #10
 800262e:	4013      	ands	r3, r2
 8002630:	d00b      	beq.n	800264a <HAL_CAN_IRQHandler+0x22e>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	2210      	movs	r2, #16
 8002636:	4013      	ands	r3, r2
 8002638:	d007      	beq.n	800264a <HAL_CAN_IRQHandler+0x22e>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2210      	movs	r2, #16
 8002640:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	0018      	movs	r0, r3
 8002646:	f000 f8e5 	bl	8002814 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800264a:	6a3a      	ldr	r2, [r7, #32]
 800264c:	2380      	movs	r3, #128	; 0x80
 800264e:	025b      	lsls	r3, r3, #9
 8002650:	4013      	ands	r3, r2
 8002652:	d00b      	beq.n	800266c <HAL_CAN_IRQHandler+0x250>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	2208      	movs	r2, #8
 8002658:	4013      	ands	r3, r2
 800265a:	d007      	beq.n	800266c <HAL_CAN_IRQHandler+0x250>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	2208      	movs	r2, #8
 8002662:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	0018      	movs	r0, r3
 8002668:	f000 f8dc 	bl	8002824 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800266c:	6a3a      	ldr	r2, [r7, #32]
 800266e:	2380      	movs	r3, #128	; 0x80
 8002670:	021b      	lsls	r3, r3, #8
 8002672:	4013      	ands	r3, r2
 8002674:	d100      	bne.n	8002678 <HAL_CAN_IRQHandler+0x25c>
 8002676:	e074      	b.n	8002762 <HAL_CAN_IRQHandler+0x346>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	2204      	movs	r2, #4
 800267c:	4013      	ands	r3, r2
 800267e:	d100      	bne.n	8002682 <HAL_CAN_IRQHandler+0x266>
 8002680:	e06b      	b.n	800275a <HAL_CAN_IRQHandler+0x33e>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002682:	6a3a      	ldr	r2, [r7, #32]
 8002684:	2380      	movs	r3, #128	; 0x80
 8002686:	005b      	lsls	r3, r3, #1
 8002688:	4013      	ands	r3, r2
 800268a:	d007      	beq.n	800269c <HAL_CAN_IRQHandler+0x280>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2201      	movs	r2, #1
 8002690:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002692:	d003      	beq.n	800269c <HAL_CAN_IRQHandler+0x280>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002696:	2201      	movs	r2, #1
 8002698:	4313      	orrs	r3, r2
 800269a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800269c:	6a3a      	ldr	r2, [r7, #32]
 800269e:	2380      	movs	r3, #128	; 0x80
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	4013      	ands	r3, r2
 80026a4:	d007      	beq.n	80026b6 <HAL_CAN_IRQHandler+0x29a>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2202      	movs	r2, #2
 80026aa:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80026ac:	d003      	beq.n	80026b6 <HAL_CAN_IRQHandler+0x29a>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80026ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b0:	2202      	movs	r2, #2
 80026b2:	4313      	orrs	r3, r2
 80026b4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80026b6:	6a3a      	ldr	r2, [r7, #32]
 80026b8:	2380      	movs	r3, #128	; 0x80
 80026ba:	00db      	lsls	r3, r3, #3
 80026bc:	4013      	ands	r3, r2
 80026be:	d007      	beq.n	80026d0 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2204      	movs	r2, #4
 80026c4:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80026c6:	d003      	beq.n	80026d0 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80026c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ca:	2204      	movs	r2, #4
 80026cc:	4313      	orrs	r3, r2
 80026ce:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80026d0:	6a3a      	ldr	r2, [r7, #32]
 80026d2:	2380      	movs	r3, #128	; 0x80
 80026d4:	011b      	lsls	r3, r3, #4
 80026d6:	4013      	ands	r3, r2
 80026d8:	d03f      	beq.n	800275a <HAL_CAN_IRQHandler+0x33e>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2270      	movs	r2, #112	; 0x70
 80026de:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80026e0:	d03b      	beq.n	800275a <HAL_CAN_IRQHandler+0x33e>
      {
        switch (esrflags & CAN_ESR_LEC)
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2270      	movs	r2, #112	; 0x70
 80026e6:	4013      	ands	r3, r2
 80026e8:	2b60      	cmp	r3, #96	; 0x60
 80026ea:	d027      	beq.n	800273c <HAL_CAN_IRQHandler+0x320>
 80026ec:	d82c      	bhi.n	8002748 <HAL_CAN_IRQHandler+0x32c>
 80026ee:	2b50      	cmp	r3, #80	; 0x50
 80026f0:	d01f      	beq.n	8002732 <HAL_CAN_IRQHandler+0x316>
 80026f2:	d829      	bhi.n	8002748 <HAL_CAN_IRQHandler+0x32c>
 80026f4:	2b40      	cmp	r3, #64	; 0x40
 80026f6:	d017      	beq.n	8002728 <HAL_CAN_IRQHandler+0x30c>
 80026f8:	d826      	bhi.n	8002748 <HAL_CAN_IRQHandler+0x32c>
 80026fa:	2b30      	cmp	r3, #48	; 0x30
 80026fc:	d00f      	beq.n	800271e <HAL_CAN_IRQHandler+0x302>
 80026fe:	d823      	bhi.n	8002748 <HAL_CAN_IRQHandler+0x32c>
 8002700:	2b10      	cmp	r3, #16
 8002702:	d002      	beq.n	800270a <HAL_CAN_IRQHandler+0x2ee>
 8002704:	2b20      	cmp	r3, #32
 8002706:	d005      	beq.n	8002714 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002708:	e01e      	b.n	8002748 <HAL_CAN_IRQHandler+0x32c>
            errorcode |= HAL_CAN_ERROR_STF;
 800270a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270c:	2208      	movs	r2, #8
 800270e:	4313      	orrs	r3, r2
 8002710:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002712:	e01a      	b.n	800274a <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002716:	2210      	movs	r2, #16
 8002718:	4313      	orrs	r3, r2
 800271a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800271c:	e015      	b.n	800274a <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_ACK;
 800271e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002720:	2220      	movs	r2, #32
 8002722:	4313      	orrs	r3, r2
 8002724:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002726:	e010      	b.n	800274a <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BR;
 8002728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272a:	2240      	movs	r2, #64	; 0x40
 800272c:	4313      	orrs	r3, r2
 800272e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002730:	e00b      	b.n	800274a <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BD;
 8002732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002734:	2280      	movs	r2, #128	; 0x80
 8002736:	4313      	orrs	r3, r2
 8002738:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800273a:	e006      	b.n	800274a <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_CRC;
 800273c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273e:	2280      	movs	r2, #128	; 0x80
 8002740:	0052      	lsls	r2, r2, #1
 8002742:	4313      	orrs	r3, r2
 8002744:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002746:	e000      	b.n	800274a <HAL_CAN_IRQHandler+0x32e>
            break;
 8002748:	46c0      	nop			; (mov r8, r8)
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	699a      	ldr	r2, [r3, #24]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	2170      	movs	r1, #112	; 0x70
 8002756:	438a      	bics	r2, r1
 8002758:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	2204      	movs	r2, #4
 8002760:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002764:	2b00      	cmp	r3, #0
 8002766:	d009      	beq.n	800277c <HAL_CAN_IRQHandler+0x360>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800276c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276e:	431a      	orrs	r2, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	0018      	movs	r0, r3
 8002778:	f000 f85c 	bl	8002834 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800277c:	46c0      	nop			; (mov r8, r8)
 800277e:	46bd      	mov	sp, r7
 8002780:	b00a      	add	sp, #40	; 0x28
 8002782:	bd80      	pop	{r7, pc}

08002784 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800278c:	46c0      	nop			; (mov r8, r8)
 800278e:	46bd      	mov	sp, r7
 8002790:	b002      	add	sp, #8
 8002792:	bd80      	pop	{r7, pc}

08002794 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800279c:	46c0      	nop			; (mov r8, r8)
 800279e:	46bd      	mov	sp, r7
 80027a0:	b002      	add	sp, #8
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80027ac:	46c0      	nop			; (mov r8, r8)
 80027ae:	46bd      	mov	sp, r7
 80027b0:	b002      	add	sp, #8
 80027b2:	bd80      	pop	{r7, pc}

080027b4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80027bc:	46c0      	nop			; (mov r8, r8)
 80027be:	46bd      	mov	sp, r7
 80027c0:	b002      	add	sp, #8
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80027cc:	46c0      	nop			; (mov r8, r8)
 80027ce:	46bd      	mov	sp, r7
 80027d0:	b002      	add	sp, #8
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80027dc:	46c0      	nop			; (mov r8, r8)
 80027de:	46bd      	mov	sp, r7
 80027e0:	b002      	add	sp, #8
 80027e2:	bd80      	pop	{r7, pc}

080027e4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80027ec:	46c0      	nop			; (mov r8, r8)
 80027ee:	46bd      	mov	sp, r7
 80027f0:	b002      	add	sp, #8
 80027f2:	bd80      	pop	{r7, pc}

080027f4 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80027fc:	46c0      	nop			; (mov r8, r8)
 80027fe:	46bd      	mov	sp, r7
 8002800:	b002      	add	sp, #8
 8002802:	bd80      	pop	{r7, pc}

08002804 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800280c:	46c0      	nop			; (mov r8, r8)
 800280e:	46bd      	mov	sp, r7
 8002810:	b002      	add	sp, #8
 8002812:	bd80      	pop	{r7, pc}

08002814 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800281c:	46c0      	nop			; (mov r8, r8)
 800281e:	46bd      	mov	sp, r7
 8002820:	b002      	add	sp, #8
 8002822:	bd80      	pop	{r7, pc}

08002824 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800282c:	46c0      	nop			; (mov r8, r8)
 800282e:	46bd      	mov	sp, r7
 8002830:	b002      	add	sp, #8
 8002832:	bd80      	pop	{r7, pc}

08002834 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800283c:	46c0      	nop			; (mov r8, r8)
 800283e:	46bd      	mov	sp, r7
 8002840:	b002      	add	sp, #8
 8002842:	bd80      	pop	{r7, pc}

08002844 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
 800284a:	0002      	movs	r2, r0
 800284c:	1dfb      	adds	r3, r7, #7
 800284e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002850:	1dfb      	adds	r3, r7, #7
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	2b7f      	cmp	r3, #127	; 0x7f
 8002856:	d809      	bhi.n	800286c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002858:	1dfb      	adds	r3, r7, #7
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	001a      	movs	r2, r3
 800285e:	231f      	movs	r3, #31
 8002860:	401a      	ands	r2, r3
 8002862:	4b04      	ldr	r3, [pc, #16]	; (8002874 <__NVIC_EnableIRQ+0x30>)
 8002864:	2101      	movs	r1, #1
 8002866:	4091      	lsls	r1, r2
 8002868:	000a      	movs	r2, r1
 800286a:	601a      	str	r2, [r3, #0]
  }
}
 800286c:	46c0      	nop			; (mov r8, r8)
 800286e:	46bd      	mov	sp, r7
 8002870:	b002      	add	sp, #8
 8002872:	bd80      	pop	{r7, pc}
 8002874:	e000e100 	.word	0xe000e100

08002878 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002878:	b590      	push	{r4, r7, lr}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	0002      	movs	r2, r0
 8002880:	6039      	str	r1, [r7, #0]
 8002882:	1dfb      	adds	r3, r7, #7
 8002884:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002886:	1dfb      	adds	r3, r7, #7
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	2b7f      	cmp	r3, #127	; 0x7f
 800288c:	d828      	bhi.n	80028e0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800288e:	4a2f      	ldr	r2, [pc, #188]	; (800294c <__NVIC_SetPriority+0xd4>)
 8002890:	1dfb      	adds	r3, r7, #7
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	b25b      	sxtb	r3, r3
 8002896:	089b      	lsrs	r3, r3, #2
 8002898:	33c0      	adds	r3, #192	; 0xc0
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	589b      	ldr	r3, [r3, r2]
 800289e:	1dfa      	adds	r2, r7, #7
 80028a0:	7812      	ldrb	r2, [r2, #0]
 80028a2:	0011      	movs	r1, r2
 80028a4:	2203      	movs	r2, #3
 80028a6:	400a      	ands	r2, r1
 80028a8:	00d2      	lsls	r2, r2, #3
 80028aa:	21ff      	movs	r1, #255	; 0xff
 80028ac:	4091      	lsls	r1, r2
 80028ae:	000a      	movs	r2, r1
 80028b0:	43d2      	mvns	r2, r2
 80028b2:	401a      	ands	r2, r3
 80028b4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	019b      	lsls	r3, r3, #6
 80028ba:	22ff      	movs	r2, #255	; 0xff
 80028bc:	401a      	ands	r2, r3
 80028be:	1dfb      	adds	r3, r7, #7
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	0018      	movs	r0, r3
 80028c4:	2303      	movs	r3, #3
 80028c6:	4003      	ands	r3, r0
 80028c8:	00db      	lsls	r3, r3, #3
 80028ca:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80028cc:	481f      	ldr	r0, [pc, #124]	; (800294c <__NVIC_SetPriority+0xd4>)
 80028ce:	1dfb      	adds	r3, r7, #7
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	b25b      	sxtb	r3, r3
 80028d4:	089b      	lsrs	r3, r3, #2
 80028d6:	430a      	orrs	r2, r1
 80028d8:	33c0      	adds	r3, #192	; 0xc0
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80028de:	e031      	b.n	8002944 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80028e0:	4a1b      	ldr	r2, [pc, #108]	; (8002950 <__NVIC_SetPriority+0xd8>)
 80028e2:	1dfb      	adds	r3, r7, #7
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	0019      	movs	r1, r3
 80028e8:	230f      	movs	r3, #15
 80028ea:	400b      	ands	r3, r1
 80028ec:	3b08      	subs	r3, #8
 80028ee:	089b      	lsrs	r3, r3, #2
 80028f0:	3306      	adds	r3, #6
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	18d3      	adds	r3, r2, r3
 80028f6:	3304      	adds	r3, #4
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	1dfa      	adds	r2, r7, #7
 80028fc:	7812      	ldrb	r2, [r2, #0]
 80028fe:	0011      	movs	r1, r2
 8002900:	2203      	movs	r2, #3
 8002902:	400a      	ands	r2, r1
 8002904:	00d2      	lsls	r2, r2, #3
 8002906:	21ff      	movs	r1, #255	; 0xff
 8002908:	4091      	lsls	r1, r2
 800290a:	000a      	movs	r2, r1
 800290c:	43d2      	mvns	r2, r2
 800290e:	401a      	ands	r2, r3
 8002910:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	019b      	lsls	r3, r3, #6
 8002916:	22ff      	movs	r2, #255	; 0xff
 8002918:	401a      	ands	r2, r3
 800291a:	1dfb      	adds	r3, r7, #7
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	0018      	movs	r0, r3
 8002920:	2303      	movs	r3, #3
 8002922:	4003      	ands	r3, r0
 8002924:	00db      	lsls	r3, r3, #3
 8002926:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002928:	4809      	ldr	r0, [pc, #36]	; (8002950 <__NVIC_SetPriority+0xd8>)
 800292a:	1dfb      	adds	r3, r7, #7
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	001c      	movs	r4, r3
 8002930:	230f      	movs	r3, #15
 8002932:	4023      	ands	r3, r4
 8002934:	3b08      	subs	r3, #8
 8002936:	089b      	lsrs	r3, r3, #2
 8002938:	430a      	orrs	r2, r1
 800293a:	3306      	adds	r3, #6
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	18c3      	adds	r3, r0, r3
 8002940:	3304      	adds	r3, #4
 8002942:	601a      	str	r2, [r3, #0]
}
 8002944:	46c0      	nop			; (mov r8, r8)
 8002946:	46bd      	mov	sp, r7
 8002948:	b003      	add	sp, #12
 800294a:	bd90      	pop	{r4, r7, pc}
 800294c:	e000e100 	.word	0xe000e100
 8002950:	e000ed00 	.word	0xe000ed00

08002954 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	1e5a      	subs	r2, r3, #1
 8002960:	2380      	movs	r3, #128	; 0x80
 8002962:	045b      	lsls	r3, r3, #17
 8002964:	429a      	cmp	r2, r3
 8002966:	d301      	bcc.n	800296c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002968:	2301      	movs	r3, #1
 800296a:	e010      	b.n	800298e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800296c:	4b0a      	ldr	r3, [pc, #40]	; (8002998 <SysTick_Config+0x44>)
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	3a01      	subs	r2, #1
 8002972:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002974:	2301      	movs	r3, #1
 8002976:	425b      	negs	r3, r3
 8002978:	2103      	movs	r1, #3
 800297a:	0018      	movs	r0, r3
 800297c:	f7ff ff7c 	bl	8002878 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002980:	4b05      	ldr	r3, [pc, #20]	; (8002998 <SysTick_Config+0x44>)
 8002982:	2200      	movs	r2, #0
 8002984:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002986:	4b04      	ldr	r3, [pc, #16]	; (8002998 <SysTick_Config+0x44>)
 8002988:	2207      	movs	r2, #7
 800298a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800298c:	2300      	movs	r3, #0
}
 800298e:	0018      	movs	r0, r3
 8002990:	46bd      	mov	sp, r7
 8002992:	b002      	add	sp, #8
 8002994:	bd80      	pop	{r7, pc}
 8002996:	46c0      	nop			; (mov r8, r8)
 8002998:	e000e010 	.word	0xe000e010

0800299c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	60b9      	str	r1, [r7, #8]
 80029a4:	607a      	str	r2, [r7, #4]
 80029a6:	210f      	movs	r1, #15
 80029a8:	187b      	adds	r3, r7, r1
 80029aa:	1c02      	adds	r2, r0, #0
 80029ac:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80029ae:	68ba      	ldr	r2, [r7, #8]
 80029b0:	187b      	adds	r3, r7, r1
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	b25b      	sxtb	r3, r3
 80029b6:	0011      	movs	r1, r2
 80029b8:	0018      	movs	r0, r3
 80029ba:	f7ff ff5d 	bl	8002878 <__NVIC_SetPriority>
}
 80029be:	46c0      	nop			; (mov r8, r8)
 80029c0:	46bd      	mov	sp, r7
 80029c2:	b004      	add	sp, #16
 80029c4:	bd80      	pop	{r7, pc}

080029c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029c6:	b580      	push	{r7, lr}
 80029c8:	b082      	sub	sp, #8
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	0002      	movs	r2, r0
 80029ce:	1dfb      	adds	r3, r7, #7
 80029d0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029d2:	1dfb      	adds	r3, r7, #7
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	b25b      	sxtb	r3, r3
 80029d8:	0018      	movs	r0, r3
 80029da:	f7ff ff33 	bl	8002844 <__NVIC_EnableIRQ>
}
 80029de:	46c0      	nop			; (mov r8, r8)
 80029e0:	46bd      	mov	sp, r7
 80029e2:	b002      	add	sp, #8
 80029e4:	bd80      	pop	{r7, pc}

080029e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029e6:	b580      	push	{r7, lr}
 80029e8:	b082      	sub	sp, #8
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	0018      	movs	r0, r3
 80029f2:	f7ff ffaf 	bl	8002954 <SysTick_Config>
 80029f6:	0003      	movs	r3, r0
}
 80029f8:	0018      	movs	r0, r3
 80029fa:	46bd      	mov	sp, r7
 80029fc:	b002      	add	sp, #8
 80029fe:	bd80      	pop	{r7, pc}

08002a00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b086      	sub	sp, #24
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a0e:	e149      	b.n	8002ca4 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	2101      	movs	r1, #1
 8002a16:	697a      	ldr	r2, [r7, #20]
 8002a18:	4091      	lsls	r1, r2
 8002a1a:	000a      	movs	r2, r1
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d100      	bne.n	8002a28 <HAL_GPIO_Init+0x28>
 8002a26:	e13a      	b.n	8002c9e <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	2203      	movs	r2, #3
 8002a2e:	4013      	ands	r3, r2
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d005      	beq.n	8002a40 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	2203      	movs	r2, #3
 8002a3a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d130      	bne.n	8002aa2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	005b      	lsls	r3, r3, #1
 8002a4a:	2203      	movs	r2, #3
 8002a4c:	409a      	lsls	r2, r3
 8002a4e:	0013      	movs	r3, r2
 8002a50:	43da      	mvns	r2, r3
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	4013      	ands	r3, r2
 8002a56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	68da      	ldr	r2, [r3, #12]
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	005b      	lsls	r3, r3, #1
 8002a60:	409a      	lsls	r2, r3
 8002a62:	0013      	movs	r3, r2
 8002a64:	693a      	ldr	r2, [r7, #16]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	693a      	ldr	r2, [r7, #16]
 8002a6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a76:	2201      	movs	r2, #1
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	409a      	lsls	r2, r3
 8002a7c:	0013      	movs	r3, r2
 8002a7e:	43da      	mvns	r2, r3
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	4013      	ands	r3, r2
 8002a84:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	091b      	lsrs	r3, r3, #4
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	401a      	ands	r2, r3
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	409a      	lsls	r2, r3
 8002a94:	0013      	movs	r3, r2
 8002a96:	693a      	ldr	r2, [r7, #16]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	693a      	ldr	r2, [r7, #16]
 8002aa0:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	2203      	movs	r2, #3
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	2b03      	cmp	r3, #3
 8002aac:	d017      	beq.n	8002ade <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	005b      	lsls	r3, r3, #1
 8002ab8:	2203      	movs	r2, #3
 8002aba:	409a      	lsls	r2, r3
 8002abc:	0013      	movs	r3, r2
 8002abe:	43da      	mvns	r2, r3
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	689a      	ldr	r2, [r3, #8]
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	005b      	lsls	r3, r3, #1
 8002ace:	409a      	lsls	r2, r3
 8002ad0:	0013      	movs	r3, r2
 8002ad2:	693a      	ldr	r2, [r7, #16]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	693a      	ldr	r2, [r7, #16]
 8002adc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	2203      	movs	r2, #3
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d123      	bne.n	8002b32 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	08da      	lsrs	r2, r3, #3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	3208      	adds	r2, #8
 8002af2:	0092      	lsls	r2, r2, #2
 8002af4:	58d3      	ldr	r3, [r2, r3]
 8002af6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	2207      	movs	r2, #7
 8002afc:	4013      	ands	r3, r2
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	220f      	movs	r2, #15
 8002b02:	409a      	lsls	r2, r3
 8002b04:	0013      	movs	r3, r2
 8002b06:	43da      	mvns	r2, r3
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	691a      	ldr	r2, [r3, #16]
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	2107      	movs	r1, #7
 8002b16:	400b      	ands	r3, r1
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	409a      	lsls	r2, r3
 8002b1c:	0013      	movs	r3, r2
 8002b1e:	693a      	ldr	r2, [r7, #16]
 8002b20:	4313      	orrs	r3, r2
 8002b22:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	08da      	lsrs	r2, r3, #3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	3208      	adds	r2, #8
 8002b2c:	0092      	lsls	r2, r2, #2
 8002b2e:	6939      	ldr	r1, [r7, #16]
 8002b30:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	005b      	lsls	r3, r3, #1
 8002b3c:	2203      	movs	r2, #3
 8002b3e:	409a      	lsls	r2, r3
 8002b40:	0013      	movs	r3, r2
 8002b42:	43da      	mvns	r2, r3
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	4013      	ands	r3, r2
 8002b48:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	2203      	movs	r2, #3
 8002b50:	401a      	ands	r2, r3
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	005b      	lsls	r3, r3, #1
 8002b56:	409a      	lsls	r2, r3
 8002b58:	0013      	movs	r3, r2
 8002b5a:	693a      	ldr	r2, [r7, #16]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	693a      	ldr	r2, [r7, #16]
 8002b64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	685a      	ldr	r2, [r3, #4]
 8002b6a:	23c0      	movs	r3, #192	; 0xc0
 8002b6c:	029b      	lsls	r3, r3, #10
 8002b6e:	4013      	ands	r3, r2
 8002b70:	d100      	bne.n	8002b74 <HAL_GPIO_Init+0x174>
 8002b72:	e094      	b.n	8002c9e <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b74:	4b51      	ldr	r3, [pc, #324]	; (8002cbc <HAL_GPIO_Init+0x2bc>)
 8002b76:	699a      	ldr	r2, [r3, #24]
 8002b78:	4b50      	ldr	r3, [pc, #320]	; (8002cbc <HAL_GPIO_Init+0x2bc>)
 8002b7a:	2101      	movs	r1, #1
 8002b7c:	430a      	orrs	r2, r1
 8002b7e:	619a      	str	r2, [r3, #24]
 8002b80:	4b4e      	ldr	r3, [pc, #312]	; (8002cbc <HAL_GPIO_Init+0x2bc>)
 8002b82:	699b      	ldr	r3, [r3, #24]
 8002b84:	2201      	movs	r2, #1
 8002b86:	4013      	ands	r3, r2
 8002b88:	60bb      	str	r3, [r7, #8]
 8002b8a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002b8c:	4a4c      	ldr	r2, [pc, #304]	; (8002cc0 <HAL_GPIO_Init+0x2c0>)
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	089b      	lsrs	r3, r3, #2
 8002b92:	3302      	adds	r3, #2
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	589b      	ldr	r3, [r3, r2]
 8002b98:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	2203      	movs	r2, #3
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	220f      	movs	r2, #15
 8002ba4:	409a      	lsls	r2, r3
 8002ba6:	0013      	movs	r3, r2
 8002ba8:	43da      	mvns	r2, r3
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	4013      	ands	r3, r2
 8002bae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	2390      	movs	r3, #144	; 0x90
 8002bb4:	05db      	lsls	r3, r3, #23
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d00d      	beq.n	8002bd6 <HAL_GPIO_Init+0x1d6>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4a41      	ldr	r2, [pc, #260]	; (8002cc4 <HAL_GPIO_Init+0x2c4>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d007      	beq.n	8002bd2 <HAL_GPIO_Init+0x1d2>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a40      	ldr	r2, [pc, #256]	; (8002cc8 <HAL_GPIO_Init+0x2c8>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d101      	bne.n	8002bce <HAL_GPIO_Init+0x1ce>
 8002bca:	2302      	movs	r3, #2
 8002bcc:	e004      	b.n	8002bd8 <HAL_GPIO_Init+0x1d8>
 8002bce:	2305      	movs	r3, #5
 8002bd0:	e002      	b.n	8002bd8 <HAL_GPIO_Init+0x1d8>
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e000      	b.n	8002bd8 <HAL_GPIO_Init+0x1d8>
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	697a      	ldr	r2, [r7, #20]
 8002bda:	2103      	movs	r1, #3
 8002bdc:	400a      	ands	r2, r1
 8002bde:	0092      	lsls	r2, r2, #2
 8002be0:	4093      	lsls	r3, r2
 8002be2:	693a      	ldr	r2, [r7, #16]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002be8:	4935      	ldr	r1, [pc, #212]	; (8002cc0 <HAL_GPIO_Init+0x2c0>)
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	089b      	lsrs	r3, r3, #2
 8002bee:	3302      	adds	r3, #2
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	693a      	ldr	r2, [r7, #16]
 8002bf4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bf6:	4b35      	ldr	r3, [pc, #212]	; (8002ccc <HAL_GPIO_Init+0x2cc>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	43da      	mvns	r2, r3
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	4013      	ands	r3, r2
 8002c04:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	685a      	ldr	r2, [r3, #4]
 8002c0a:	2380      	movs	r3, #128	; 0x80
 8002c0c:	025b      	lsls	r3, r3, #9
 8002c0e:	4013      	ands	r3, r2
 8002c10:	d003      	beq.n	8002c1a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8002c12:	693a      	ldr	r2, [r7, #16]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002c1a:	4b2c      	ldr	r3, [pc, #176]	; (8002ccc <HAL_GPIO_Init+0x2cc>)
 8002c1c:	693a      	ldr	r2, [r7, #16]
 8002c1e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002c20:	4b2a      	ldr	r3, [pc, #168]	; (8002ccc <HAL_GPIO_Init+0x2cc>)
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	43da      	mvns	r2, r3
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	685a      	ldr	r2, [r3, #4]
 8002c34:	2380      	movs	r3, #128	; 0x80
 8002c36:	029b      	lsls	r3, r3, #10
 8002c38:	4013      	ands	r3, r2
 8002c3a:	d003      	beq.n	8002c44 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8002c3c:	693a      	ldr	r2, [r7, #16]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002c44:	4b21      	ldr	r3, [pc, #132]	; (8002ccc <HAL_GPIO_Init+0x2cc>)
 8002c46:	693a      	ldr	r2, [r7, #16]
 8002c48:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c4a:	4b20      	ldr	r3, [pc, #128]	; (8002ccc <HAL_GPIO_Init+0x2cc>)
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	43da      	mvns	r2, r3
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	4013      	ands	r3, r2
 8002c58:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	685a      	ldr	r2, [r3, #4]
 8002c5e:	2380      	movs	r3, #128	; 0x80
 8002c60:	035b      	lsls	r3, r3, #13
 8002c62:	4013      	ands	r3, r2
 8002c64:	d003      	beq.n	8002c6e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8002c66:	693a      	ldr	r2, [r7, #16]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002c6e:	4b17      	ldr	r3, [pc, #92]	; (8002ccc <HAL_GPIO_Init+0x2cc>)
 8002c70:	693a      	ldr	r2, [r7, #16]
 8002c72:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002c74:	4b15      	ldr	r3, [pc, #84]	; (8002ccc <HAL_GPIO_Init+0x2cc>)
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	43da      	mvns	r2, r3
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	4013      	ands	r3, r2
 8002c82:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	685a      	ldr	r2, [r3, #4]
 8002c88:	2380      	movs	r3, #128	; 0x80
 8002c8a:	039b      	lsls	r3, r3, #14
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	d003      	beq.n	8002c98 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8002c90:	693a      	ldr	r2, [r7, #16]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002c98:	4b0c      	ldr	r3, [pc, #48]	; (8002ccc <HAL_GPIO_Init+0x2cc>)
 8002c9a:	693a      	ldr	r2, [r7, #16]
 8002c9c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	3301      	adds	r3, #1
 8002ca2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	40da      	lsrs	r2, r3
 8002cac:	1e13      	subs	r3, r2, #0
 8002cae:	d000      	beq.n	8002cb2 <HAL_GPIO_Init+0x2b2>
 8002cb0:	e6ae      	b.n	8002a10 <HAL_GPIO_Init+0x10>
  } 
}
 8002cb2:	46c0      	nop			; (mov r8, r8)
 8002cb4:	46c0      	nop			; (mov r8, r8)
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	b006      	add	sp, #24
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	40021000 	.word	0x40021000
 8002cc0:	40010000 	.word	0x40010000
 8002cc4:	48000400 	.word	0x48000400
 8002cc8:	48000800 	.word	0x48000800
 8002ccc:	40010400 	.word	0x40010400

08002cd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	0008      	movs	r0, r1
 8002cda:	0011      	movs	r1, r2
 8002cdc:	1cbb      	adds	r3, r7, #2
 8002cde:	1c02      	adds	r2, r0, #0
 8002ce0:	801a      	strh	r2, [r3, #0]
 8002ce2:	1c7b      	adds	r3, r7, #1
 8002ce4:	1c0a      	adds	r2, r1, #0
 8002ce6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ce8:	1c7b      	adds	r3, r7, #1
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d004      	beq.n	8002cfa <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002cf0:	1cbb      	adds	r3, r7, #2
 8002cf2:	881a      	ldrh	r2, [r3, #0]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002cf8:	e003      	b.n	8002d02 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002cfa:	1cbb      	adds	r3, r7, #2
 8002cfc:	881a      	ldrh	r2, [r3, #0]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002d02:	46c0      	nop			; (mov r8, r8)
 8002d04:	46bd      	mov	sp, r7
 8002d06:	b002      	add	sp, #8
 8002d08:	bd80      	pop	{r7, pc}

08002d0a <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d0a:	b580      	push	{r7, lr}
 8002d0c:	b084      	sub	sp, #16
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
 8002d12:	000a      	movs	r2, r1
 8002d14:	1cbb      	adds	r3, r7, #2
 8002d16:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	695b      	ldr	r3, [r3, #20]
 8002d1c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002d1e:	1cbb      	adds	r3, r7, #2
 8002d20:	881b      	ldrh	r3, [r3, #0]
 8002d22:	68fa      	ldr	r2, [r7, #12]
 8002d24:	4013      	ands	r3, r2
 8002d26:	041a      	lsls	r2, r3, #16
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	43db      	mvns	r3, r3
 8002d2c:	1cb9      	adds	r1, r7, #2
 8002d2e:	8809      	ldrh	r1, [r1, #0]
 8002d30:	400b      	ands	r3, r1
 8002d32:	431a      	orrs	r2, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	619a      	str	r2, [r3, #24]
}
 8002d38:	46c0      	nop			; (mov r8, r8)
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	b004      	add	sp, #16
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	0002      	movs	r2, r0
 8002d48:	1dbb      	adds	r3, r7, #6
 8002d4a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002d4c:	4b09      	ldr	r3, [pc, #36]	; (8002d74 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002d4e:	695b      	ldr	r3, [r3, #20]
 8002d50:	1dba      	adds	r2, r7, #6
 8002d52:	8812      	ldrh	r2, [r2, #0]
 8002d54:	4013      	ands	r3, r2
 8002d56:	d008      	beq.n	8002d6a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002d58:	4b06      	ldr	r3, [pc, #24]	; (8002d74 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002d5a:	1dba      	adds	r2, r7, #6
 8002d5c:	8812      	ldrh	r2, [r2, #0]
 8002d5e:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002d60:	1dbb      	adds	r3, r7, #6
 8002d62:	881b      	ldrh	r3, [r3, #0]
 8002d64:	0018      	movs	r0, r3
 8002d66:	f000 f807 	bl	8002d78 <HAL_GPIO_EXTI_Callback>
  }
}
 8002d6a:	46c0      	nop			; (mov r8, r8)
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	b002      	add	sp, #8
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	46c0      	nop			; (mov r8, r8)
 8002d74:	40010400 	.word	0x40010400

08002d78 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b082      	sub	sp, #8
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	0002      	movs	r2, r0
 8002d80:	1dbb      	adds	r3, r7, #6
 8002d82:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 8002d84:	46c0      	nop			; (mov r8, r8)
 8002d86:	46bd      	mov	sp, r7
 8002d88:	b002      	add	sp, #8
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b082      	sub	sp, #8
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d101      	bne.n	8002d9e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e082      	b.n	8002ea4 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2241      	movs	r2, #65	; 0x41
 8002da2:	5c9b      	ldrb	r3, [r3, r2]
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d107      	bne.n	8002dba <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2240      	movs	r2, #64	; 0x40
 8002dae:	2100      	movs	r1, #0
 8002db0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	0018      	movs	r0, r3
 8002db6:	f7fe fdef 	bl	8001998 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2241      	movs	r2, #65	; 0x41
 8002dbe:	2124      	movs	r1, #36	; 0x24
 8002dc0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	2101      	movs	r1, #1
 8002dce:	438a      	bics	r2, r1
 8002dd0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	685a      	ldr	r2, [r3, #4]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4934      	ldr	r1, [pc, #208]	; (8002eac <HAL_I2C_Init+0x120>)
 8002ddc:	400a      	ands	r2, r1
 8002dde:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	689a      	ldr	r2, [r3, #8]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4931      	ldr	r1, [pc, #196]	; (8002eb0 <HAL_I2C_Init+0x124>)
 8002dec:	400a      	ands	r2, r1
 8002dee:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d108      	bne.n	8002e0a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	689a      	ldr	r2, [r3, #8]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	2180      	movs	r1, #128	; 0x80
 8002e02:	0209      	lsls	r1, r1, #8
 8002e04:	430a      	orrs	r2, r1
 8002e06:	609a      	str	r2, [r3, #8]
 8002e08:	e007      	b.n	8002e1a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	689a      	ldr	r2, [r3, #8]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	2184      	movs	r1, #132	; 0x84
 8002e14:	0209      	lsls	r1, r1, #8
 8002e16:	430a      	orrs	r2, r1
 8002e18:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d104      	bne.n	8002e2c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	2280      	movs	r2, #128	; 0x80
 8002e28:	0112      	lsls	r2, r2, #4
 8002e2a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	685a      	ldr	r2, [r3, #4]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	491f      	ldr	r1, [pc, #124]	; (8002eb4 <HAL_I2C_Init+0x128>)
 8002e38:	430a      	orrs	r2, r1
 8002e3a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	68da      	ldr	r2, [r3, #12]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	491a      	ldr	r1, [pc, #104]	; (8002eb0 <HAL_I2C_Init+0x124>)
 8002e48:	400a      	ands	r2, r1
 8002e4a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	691a      	ldr	r2, [r3, #16]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	695b      	ldr	r3, [r3, #20]
 8002e54:	431a      	orrs	r2, r3
 8002e56:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	699b      	ldr	r3, [r3, #24]
 8002e5c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	430a      	orrs	r2, r1
 8002e64:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	69d9      	ldr	r1, [r3, #28]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6a1a      	ldr	r2, [r3, #32]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	430a      	orrs	r2, r1
 8002e74:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2101      	movs	r1, #1
 8002e82:	430a      	orrs	r2, r1
 8002e84:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2241      	movs	r2, #65	; 0x41
 8002e90:	2120      	movs	r1, #32
 8002e92:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2242      	movs	r2, #66	; 0x42
 8002e9e:	2100      	movs	r1, #0
 8002ea0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ea2:	2300      	movs	r3, #0
}
 8002ea4:	0018      	movs	r0, r3
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	b002      	add	sp, #8
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	f0ffffff 	.word	0xf0ffffff
 8002eb0:	ffff7fff 	.word	0xffff7fff
 8002eb4:	02008000 	.word	0x02008000

08002eb8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002eb8:	b590      	push	{r4, r7, lr}
 8002eba:	b089      	sub	sp, #36	; 0x24
 8002ebc:	af02      	add	r7, sp, #8
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	000c      	movs	r4, r1
 8002ec2:	0010      	movs	r0, r2
 8002ec4:	0019      	movs	r1, r3
 8002ec6:	230a      	movs	r3, #10
 8002ec8:	18fb      	adds	r3, r7, r3
 8002eca:	1c22      	adds	r2, r4, #0
 8002ecc:	801a      	strh	r2, [r3, #0]
 8002ece:	2308      	movs	r3, #8
 8002ed0:	18fb      	adds	r3, r7, r3
 8002ed2:	1c02      	adds	r2, r0, #0
 8002ed4:	801a      	strh	r2, [r3, #0]
 8002ed6:	1dbb      	adds	r3, r7, #6
 8002ed8:	1c0a      	adds	r2, r1, #0
 8002eda:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2241      	movs	r2, #65	; 0x41
 8002ee0:	5c9b      	ldrb	r3, [r3, r2]
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	2b20      	cmp	r3, #32
 8002ee6:	d000      	beq.n	8002eea <HAL_I2C_Mem_Write+0x32>
 8002ee8:	e10c      	b.n	8003104 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d004      	beq.n	8002efa <HAL_I2C_Mem_Write+0x42>
 8002ef0:	232c      	movs	r3, #44	; 0x2c
 8002ef2:	18fb      	adds	r3, r7, r3
 8002ef4:	881b      	ldrh	r3, [r3, #0]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d105      	bne.n	8002f06 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2280      	movs	r2, #128	; 0x80
 8002efe:	0092      	lsls	r2, r2, #2
 8002f00:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e0ff      	b.n	8003106 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2240      	movs	r2, #64	; 0x40
 8002f0a:	5c9b      	ldrb	r3, [r3, r2]
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d101      	bne.n	8002f14 <HAL_I2C_Mem_Write+0x5c>
 8002f10:	2302      	movs	r3, #2
 8002f12:	e0f8      	b.n	8003106 <HAL_I2C_Mem_Write+0x24e>
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2240      	movs	r2, #64	; 0x40
 8002f18:	2101      	movs	r1, #1
 8002f1a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002f1c:	f7fe fed4 	bl	8001cc8 <HAL_GetTick>
 8002f20:	0003      	movs	r3, r0
 8002f22:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002f24:	2380      	movs	r3, #128	; 0x80
 8002f26:	0219      	lsls	r1, r3, #8
 8002f28:	68f8      	ldr	r0, [r7, #12]
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	9300      	str	r3, [sp, #0]
 8002f2e:	2319      	movs	r3, #25
 8002f30:	2201      	movs	r2, #1
 8002f32:	f000 f975 	bl	8003220 <I2C_WaitOnFlagUntilTimeout>
 8002f36:	1e03      	subs	r3, r0, #0
 8002f38:	d001      	beq.n	8002f3e <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e0e3      	b.n	8003106 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2241      	movs	r2, #65	; 0x41
 8002f42:	2121      	movs	r1, #33	; 0x21
 8002f44:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2242      	movs	r2, #66	; 0x42
 8002f4a:	2140      	movs	r1, #64	; 0x40
 8002f4c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2200      	movs	r2, #0
 8002f52:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f58:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	222c      	movs	r2, #44	; 0x2c
 8002f5e:	18ba      	adds	r2, r7, r2
 8002f60:	8812      	ldrh	r2, [r2, #0]
 8002f62:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2200      	movs	r2, #0
 8002f68:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f6a:	1dbb      	adds	r3, r7, #6
 8002f6c:	881c      	ldrh	r4, [r3, #0]
 8002f6e:	2308      	movs	r3, #8
 8002f70:	18fb      	adds	r3, r7, r3
 8002f72:	881a      	ldrh	r2, [r3, #0]
 8002f74:	230a      	movs	r3, #10
 8002f76:	18fb      	adds	r3, r7, r3
 8002f78:	8819      	ldrh	r1, [r3, #0]
 8002f7a:	68f8      	ldr	r0, [r7, #12]
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	9301      	str	r3, [sp, #4]
 8002f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f82:	9300      	str	r3, [sp, #0]
 8002f84:	0023      	movs	r3, r4
 8002f86:	f000 f8c5 	bl	8003114 <I2C_RequestMemoryWrite>
 8002f8a:	1e03      	subs	r3, r0, #0
 8002f8c:	d005      	beq.n	8002f9a <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2240      	movs	r2, #64	; 0x40
 8002f92:	2100      	movs	r1, #0
 8002f94:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e0b5      	b.n	8003106 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	2bff      	cmp	r3, #255	; 0xff
 8002fa2:	d911      	bls.n	8002fc8 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	22ff      	movs	r2, #255	; 0xff
 8002fa8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fae:	b2da      	uxtb	r2, r3
 8002fb0:	2380      	movs	r3, #128	; 0x80
 8002fb2:	045c      	lsls	r4, r3, #17
 8002fb4:	230a      	movs	r3, #10
 8002fb6:	18fb      	adds	r3, r7, r3
 8002fb8:	8819      	ldrh	r1, [r3, #0]
 8002fba:	68f8      	ldr	r0, [r7, #12]
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	9300      	str	r3, [sp, #0]
 8002fc0:	0023      	movs	r3, r4
 8002fc2:	f000 fa61 	bl	8003488 <I2C_TransferConfig>
 8002fc6:	e012      	b.n	8002fee <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fcc:	b29a      	uxth	r2, r3
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fd6:	b2da      	uxtb	r2, r3
 8002fd8:	2380      	movs	r3, #128	; 0x80
 8002fda:	049c      	lsls	r4, r3, #18
 8002fdc:	230a      	movs	r3, #10
 8002fde:	18fb      	adds	r3, r7, r3
 8002fe0:	8819      	ldrh	r1, [r3, #0]
 8002fe2:	68f8      	ldr	r0, [r7, #12]
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	9300      	str	r3, [sp, #0]
 8002fe8:	0023      	movs	r3, r4
 8002fea:	f000 fa4d 	bl	8003488 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fee:	697a      	ldr	r2, [r7, #20]
 8002ff0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	0018      	movs	r0, r3
 8002ff6:	f000 f952 	bl	800329e <I2C_WaitOnTXISFlagUntilTimeout>
 8002ffa:	1e03      	subs	r3, r0, #0
 8002ffc:	d001      	beq.n	8003002 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e081      	b.n	8003106 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003006:	781a      	ldrb	r2, [r3, #0]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003012:	1c5a      	adds	r2, r3, #1
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800301c:	b29b      	uxth	r3, r3
 800301e:	3b01      	subs	r3, #1
 8003020:	b29a      	uxth	r2, r3
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800302a:	3b01      	subs	r3, #1
 800302c:	b29a      	uxth	r2, r3
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003036:	b29b      	uxth	r3, r3
 8003038:	2b00      	cmp	r3, #0
 800303a:	d03a      	beq.n	80030b2 <HAL_I2C_Mem_Write+0x1fa>
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003040:	2b00      	cmp	r3, #0
 8003042:	d136      	bne.n	80030b2 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003044:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003046:	68f8      	ldr	r0, [r7, #12]
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	9300      	str	r3, [sp, #0]
 800304c:	0013      	movs	r3, r2
 800304e:	2200      	movs	r2, #0
 8003050:	2180      	movs	r1, #128	; 0x80
 8003052:	f000 f8e5 	bl	8003220 <I2C_WaitOnFlagUntilTimeout>
 8003056:	1e03      	subs	r3, r0, #0
 8003058:	d001      	beq.n	800305e <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e053      	b.n	8003106 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003062:	b29b      	uxth	r3, r3
 8003064:	2bff      	cmp	r3, #255	; 0xff
 8003066:	d911      	bls.n	800308c <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	22ff      	movs	r2, #255	; 0xff
 800306c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003072:	b2da      	uxtb	r2, r3
 8003074:	2380      	movs	r3, #128	; 0x80
 8003076:	045c      	lsls	r4, r3, #17
 8003078:	230a      	movs	r3, #10
 800307a:	18fb      	adds	r3, r7, r3
 800307c:	8819      	ldrh	r1, [r3, #0]
 800307e:	68f8      	ldr	r0, [r7, #12]
 8003080:	2300      	movs	r3, #0
 8003082:	9300      	str	r3, [sp, #0]
 8003084:	0023      	movs	r3, r4
 8003086:	f000 f9ff 	bl	8003488 <I2C_TransferConfig>
 800308a:	e012      	b.n	80030b2 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003090:	b29a      	uxth	r2, r3
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800309a:	b2da      	uxtb	r2, r3
 800309c:	2380      	movs	r3, #128	; 0x80
 800309e:	049c      	lsls	r4, r3, #18
 80030a0:	230a      	movs	r3, #10
 80030a2:	18fb      	adds	r3, r7, r3
 80030a4:	8819      	ldrh	r1, [r3, #0]
 80030a6:	68f8      	ldr	r0, [r7, #12]
 80030a8:	2300      	movs	r3, #0
 80030aa:	9300      	str	r3, [sp, #0]
 80030ac:	0023      	movs	r3, r4
 80030ae:	f000 f9eb 	bl	8003488 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d198      	bne.n	8002fee <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030bc:	697a      	ldr	r2, [r7, #20]
 80030be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	0018      	movs	r0, r3
 80030c4:	f000 f92a 	bl	800331c <I2C_WaitOnSTOPFlagUntilTimeout>
 80030c8:	1e03      	subs	r3, r0, #0
 80030ca:	d001      	beq.n	80030d0 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e01a      	b.n	8003106 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2220      	movs	r2, #32
 80030d6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	685a      	ldr	r2, [r3, #4]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	490b      	ldr	r1, [pc, #44]	; (8003110 <HAL_I2C_Mem_Write+0x258>)
 80030e4:	400a      	ands	r2, r1
 80030e6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2241      	movs	r2, #65	; 0x41
 80030ec:	2120      	movs	r1, #32
 80030ee:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2242      	movs	r2, #66	; 0x42
 80030f4:	2100      	movs	r1, #0
 80030f6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2240      	movs	r2, #64	; 0x40
 80030fc:	2100      	movs	r1, #0
 80030fe:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003100:	2300      	movs	r3, #0
 8003102:	e000      	b.n	8003106 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8003104:	2302      	movs	r3, #2
  }
}
 8003106:	0018      	movs	r0, r3
 8003108:	46bd      	mov	sp, r7
 800310a:	b007      	add	sp, #28
 800310c:	bd90      	pop	{r4, r7, pc}
 800310e:	46c0      	nop			; (mov r8, r8)
 8003110:	fe00e800 	.word	0xfe00e800

08003114 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003114:	b5b0      	push	{r4, r5, r7, lr}
 8003116:	b086      	sub	sp, #24
 8003118:	af02      	add	r7, sp, #8
 800311a:	60f8      	str	r0, [r7, #12]
 800311c:	000c      	movs	r4, r1
 800311e:	0010      	movs	r0, r2
 8003120:	0019      	movs	r1, r3
 8003122:	250a      	movs	r5, #10
 8003124:	197b      	adds	r3, r7, r5
 8003126:	1c22      	adds	r2, r4, #0
 8003128:	801a      	strh	r2, [r3, #0]
 800312a:	2308      	movs	r3, #8
 800312c:	18fb      	adds	r3, r7, r3
 800312e:	1c02      	adds	r2, r0, #0
 8003130:	801a      	strh	r2, [r3, #0]
 8003132:	1dbb      	adds	r3, r7, #6
 8003134:	1c0a      	adds	r2, r1, #0
 8003136:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003138:	1dbb      	adds	r3, r7, #6
 800313a:	881b      	ldrh	r3, [r3, #0]
 800313c:	b2da      	uxtb	r2, r3
 800313e:	2380      	movs	r3, #128	; 0x80
 8003140:	045c      	lsls	r4, r3, #17
 8003142:	197b      	adds	r3, r7, r5
 8003144:	8819      	ldrh	r1, [r3, #0]
 8003146:	68f8      	ldr	r0, [r7, #12]
 8003148:	4b23      	ldr	r3, [pc, #140]	; (80031d8 <I2C_RequestMemoryWrite+0xc4>)
 800314a:	9300      	str	r3, [sp, #0]
 800314c:	0023      	movs	r3, r4
 800314e:	f000 f99b 	bl	8003488 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003152:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003154:	6a39      	ldr	r1, [r7, #32]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	0018      	movs	r0, r3
 800315a:	f000 f8a0 	bl	800329e <I2C_WaitOnTXISFlagUntilTimeout>
 800315e:	1e03      	subs	r3, r0, #0
 8003160:	d001      	beq.n	8003166 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e033      	b.n	80031ce <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003166:	1dbb      	adds	r3, r7, #6
 8003168:	881b      	ldrh	r3, [r3, #0]
 800316a:	2b01      	cmp	r3, #1
 800316c:	d107      	bne.n	800317e <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800316e:	2308      	movs	r3, #8
 8003170:	18fb      	adds	r3, r7, r3
 8003172:	881b      	ldrh	r3, [r3, #0]
 8003174:	b2da      	uxtb	r2, r3
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	629a      	str	r2, [r3, #40]	; 0x28
 800317c:	e019      	b.n	80031b2 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800317e:	2308      	movs	r3, #8
 8003180:	18fb      	adds	r3, r7, r3
 8003182:	881b      	ldrh	r3, [r3, #0]
 8003184:	0a1b      	lsrs	r3, r3, #8
 8003186:	b29b      	uxth	r3, r3
 8003188:	b2da      	uxtb	r2, r3
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003190:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003192:	6a39      	ldr	r1, [r7, #32]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	0018      	movs	r0, r3
 8003198:	f000 f881 	bl	800329e <I2C_WaitOnTXISFlagUntilTimeout>
 800319c:	1e03      	subs	r3, r0, #0
 800319e:	d001      	beq.n	80031a4 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e014      	b.n	80031ce <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80031a4:	2308      	movs	r3, #8
 80031a6:	18fb      	adds	r3, r7, r3
 80031a8:	881b      	ldrh	r3, [r3, #0]
 80031aa:	b2da      	uxtb	r2, r3
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80031b2:	6a3a      	ldr	r2, [r7, #32]
 80031b4:	68f8      	ldr	r0, [r7, #12]
 80031b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b8:	9300      	str	r3, [sp, #0]
 80031ba:	0013      	movs	r3, r2
 80031bc:	2200      	movs	r2, #0
 80031be:	2180      	movs	r1, #128	; 0x80
 80031c0:	f000 f82e 	bl	8003220 <I2C_WaitOnFlagUntilTimeout>
 80031c4:	1e03      	subs	r3, r0, #0
 80031c6:	d001      	beq.n	80031cc <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e000      	b.n	80031ce <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 80031cc:	2300      	movs	r3, #0
}
 80031ce:	0018      	movs	r0, r3
 80031d0:	46bd      	mov	sp, r7
 80031d2:	b004      	add	sp, #16
 80031d4:	bdb0      	pop	{r4, r5, r7, pc}
 80031d6:	46c0      	nop			; (mov r8, r8)
 80031d8:	80002000 	.word	0x80002000

080031dc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b082      	sub	sp, #8
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	699b      	ldr	r3, [r3, #24]
 80031ea:	2202      	movs	r2, #2
 80031ec:	4013      	ands	r3, r2
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	d103      	bne.n	80031fa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	2200      	movs	r2, #0
 80031f8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	699b      	ldr	r3, [r3, #24]
 8003200:	2201      	movs	r2, #1
 8003202:	4013      	ands	r3, r2
 8003204:	2b01      	cmp	r3, #1
 8003206:	d007      	beq.n	8003218 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	699a      	ldr	r2, [r3, #24]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	2101      	movs	r1, #1
 8003214:	430a      	orrs	r2, r1
 8003216:	619a      	str	r2, [r3, #24]
  }
}
 8003218:	46c0      	nop			; (mov r8, r8)
 800321a:	46bd      	mov	sp, r7
 800321c:	b002      	add	sp, #8
 800321e:	bd80      	pop	{r7, pc}

08003220 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b084      	sub	sp, #16
 8003224:	af00      	add	r7, sp, #0
 8003226:	60f8      	str	r0, [r7, #12]
 8003228:	60b9      	str	r1, [r7, #8]
 800322a:	603b      	str	r3, [r7, #0]
 800322c:	1dfb      	adds	r3, r7, #7
 800322e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003230:	e021      	b.n	8003276 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	3301      	adds	r3, #1
 8003236:	d01e      	beq.n	8003276 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003238:	f7fe fd46 	bl	8001cc8 <HAL_GetTick>
 800323c:	0002      	movs	r2, r0
 800323e:	69bb      	ldr	r3, [r7, #24]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	683a      	ldr	r2, [r7, #0]
 8003244:	429a      	cmp	r2, r3
 8003246:	d302      	bcc.n	800324e <I2C_WaitOnFlagUntilTimeout+0x2e>
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d113      	bne.n	8003276 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003252:	2220      	movs	r2, #32
 8003254:	431a      	orrs	r2, r3
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2241      	movs	r2, #65	; 0x41
 800325e:	2120      	movs	r1, #32
 8003260:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2242      	movs	r2, #66	; 0x42
 8003266:	2100      	movs	r1, #0
 8003268:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2240      	movs	r2, #64	; 0x40
 800326e:	2100      	movs	r1, #0
 8003270:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e00f      	b.n	8003296 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	699b      	ldr	r3, [r3, #24]
 800327c:	68ba      	ldr	r2, [r7, #8]
 800327e:	4013      	ands	r3, r2
 8003280:	68ba      	ldr	r2, [r7, #8]
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	425a      	negs	r2, r3
 8003286:	4153      	adcs	r3, r2
 8003288:	b2db      	uxtb	r3, r3
 800328a:	001a      	movs	r2, r3
 800328c:	1dfb      	adds	r3, r7, #7
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	429a      	cmp	r2, r3
 8003292:	d0ce      	beq.n	8003232 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003294:	2300      	movs	r3, #0
}
 8003296:	0018      	movs	r0, r3
 8003298:	46bd      	mov	sp, r7
 800329a:	b004      	add	sp, #16
 800329c:	bd80      	pop	{r7, pc}

0800329e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800329e:	b580      	push	{r7, lr}
 80032a0:	b084      	sub	sp, #16
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	60f8      	str	r0, [r7, #12]
 80032a6:	60b9      	str	r1, [r7, #8]
 80032a8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80032aa:	e02b      	b.n	8003304 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	68b9      	ldr	r1, [r7, #8]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	0018      	movs	r0, r3
 80032b4:	f000 f86e 	bl	8003394 <I2C_IsAcknowledgeFailed>
 80032b8:	1e03      	subs	r3, r0, #0
 80032ba:	d001      	beq.n	80032c0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e029      	b.n	8003314 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	3301      	adds	r3, #1
 80032c4:	d01e      	beq.n	8003304 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032c6:	f7fe fcff 	bl	8001cc8 <HAL_GetTick>
 80032ca:	0002      	movs	r2, r0
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	68ba      	ldr	r2, [r7, #8]
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d302      	bcc.n	80032dc <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d113      	bne.n	8003304 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032e0:	2220      	movs	r2, #32
 80032e2:	431a      	orrs	r2, r3
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2241      	movs	r2, #65	; 0x41
 80032ec:	2120      	movs	r1, #32
 80032ee:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2242      	movs	r2, #66	; 0x42
 80032f4:	2100      	movs	r1, #0
 80032f6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2240      	movs	r2, #64	; 0x40
 80032fc:	2100      	movs	r1, #0
 80032fe:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e007      	b.n	8003314 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	699b      	ldr	r3, [r3, #24]
 800330a:	2202      	movs	r2, #2
 800330c:	4013      	ands	r3, r2
 800330e:	2b02      	cmp	r3, #2
 8003310:	d1cc      	bne.n	80032ac <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003312:	2300      	movs	r3, #0
}
 8003314:	0018      	movs	r0, r3
 8003316:	46bd      	mov	sp, r7
 8003318:	b004      	add	sp, #16
 800331a:	bd80      	pop	{r7, pc}

0800331c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	60b9      	str	r1, [r7, #8]
 8003326:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003328:	e028      	b.n	800337c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	68b9      	ldr	r1, [r7, #8]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	0018      	movs	r0, r3
 8003332:	f000 f82f 	bl	8003394 <I2C_IsAcknowledgeFailed>
 8003336:	1e03      	subs	r3, r0, #0
 8003338:	d001      	beq.n	800333e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e026      	b.n	800338c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800333e:	f7fe fcc3 	bl	8001cc8 <HAL_GetTick>
 8003342:	0002      	movs	r2, r0
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	68ba      	ldr	r2, [r7, #8]
 800334a:	429a      	cmp	r2, r3
 800334c:	d302      	bcc.n	8003354 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d113      	bne.n	800337c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003358:	2220      	movs	r2, #32
 800335a:	431a      	orrs	r2, r3
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2241      	movs	r2, #65	; 0x41
 8003364:	2120      	movs	r1, #32
 8003366:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2242      	movs	r2, #66	; 0x42
 800336c:	2100      	movs	r1, #0
 800336e:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2240      	movs	r2, #64	; 0x40
 8003374:	2100      	movs	r1, #0
 8003376:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e007      	b.n	800338c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	2220      	movs	r2, #32
 8003384:	4013      	ands	r3, r2
 8003386:	2b20      	cmp	r3, #32
 8003388:	d1cf      	bne.n	800332a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800338a:	2300      	movs	r3, #0
}
 800338c:	0018      	movs	r0, r3
 800338e:	46bd      	mov	sp, r7
 8003390:	b004      	add	sp, #16
 8003392:	bd80      	pop	{r7, pc}

08003394 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b084      	sub	sp, #16
 8003398:	af00      	add	r7, sp, #0
 800339a:	60f8      	str	r0, [r7, #12]
 800339c:	60b9      	str	r1, [r7, #8]
 800339e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	699b      	ldr	r3, [r3, #24]
 80033a6:	2210      	movs	r2, #16
 80033a8:	4013      	ands	r3, r2
 80033aa:	2b10      	cmp	r3, #16
 80033ac:	d164      	bne.n	8003478 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	685a      	ldr	r2, [r3, #4]
 80033b4:	2380      	movs	r3, #128	; 0x80
 80033b6:	049b      	lsls	r3, r3, #18
 80033b8:	401a      	ands	r2, r3
 80033ba:	2380      	movs	r3, #128	; 0x80
 80033bc:	049b      	lsls	r3, r3, #18
 80033be:	429a      	cmp	r2, r3
 80033c0:	d02b      	beq.n	800341a <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	685a      	ldr	r2, [r3, #4]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	2180      	movs	r1, #128	; 0x80
 80033ce:	01c9      	lsls	r1, r1, #7
 80033d0:	430a      	orrs	r2, r1
 80033d2:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033d4:	e021      	b.n	800341a <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	3301      	adds	r3, #1
 80033da:	d01e      	beq.n	800341a <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033dc:	f7fe fc74 	bl	8001cc8 <HAL_GetTick>
 80033e0:	0002      	movs	r2, r0
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	1ad3      	subs	r3, r2, r3
 80033e6:	68ba      	ldr	r2, [r7, #8]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d302      	bcc.n	80033f2 <I2C_IsAcknowledgeFailed+0x5e>
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d113      	bne.n	800341a <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033f6:	2220      	movs	r2, #32
 80033f8:	431a      	orrs	r2, r3
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2241      	movs	r2, #65	; 0x41
 8003402:	2120      	movs	r1, #32
 8003404:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2242      	movs	r2, #66	; 0x42
 800340a:	2100      	movs	r1, #0
 800340c:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2240      	movs	r2, #64	; 0x40
 8003412:	2100      	movs	r1, #0
 8003414:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e02f      	b.n	800347a <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	699b      	ldr	r3, [r3, #24]
 8003420:	2220      	movs	r2, #32
 8003422:	4013      	ands	r3, r2
 8003424:	2b20      	cmp	r3, #32
 8003426:	d1d6      	bne.n	80033d6 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2210      	movs	r2, #16
 800342e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	2220      	movs	r2, #32
 8003436:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	0018      	movs	r0, r3
 800343c:	f7ff fece 	bl	80031dc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	685a      	ldr	r2, [r3, #4]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	490e      	ldr	r1, [pc, #56]	; (8003484 <I2C_IsAcknowledgeFailed+0xf0>)
 800344c:	400a      	ands	r2, r1
 800344e:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003454:	2204      	movs	r2, #4
 8003456:	431a      	orrs	r2, r3
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2241      	movs	r2, #65	; 0x41
 8003460:	2120      	movs	r1, #32
 8003462:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2242      	movs	r2, #66	; 0x42
 8003468:	2100      	movs	r1, #0
 800346a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2240      	movs	r2, #64	; 0x40
 8003470:	2100      	movs	r1, #0
 8003472:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	e000      	b.n	800347a <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8003478:	2300      	movs	r3, #0
}
 800347a:	0018      	movs	r0, r3
 800347c:	46bd      	mov	sp, r7
 800347e:	b004      	add	sp, #16
 8003480:	bd80      	pop	{r7, pc}
 8003482:	46c0      	nop			; (mov r8, r8)
 8003484:	fe00e800 	.word	0xfe00e800

08003488 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003488:	b590      	push	{r4, r7, lr}
 800348a:	b085      	sub	sp, #20
 800348c:	af00      	add	r7, sp, #0
 800348e:	60f8      	str	r0, [r7, #12]
 8003490:	0008      	movs	r0, r1
 8003492:	0011      	movs	r1, r2
 8003494:	607b      	str	r3, [r7, #4]
 8003496:	240a      	movs	r4, #10
 8003498:	193b      	adds	r3, r7, r4
 800349a:	1c02      	adds	r2, r0, #0
 800349c:	801a      	strh	r2, [r3, #0]
 800349e:	2009      	movs	r0, #9
 80034a0:	183b      	adds	r3, r7, r0
 80034a2:	1c0a      	adds	r2, r1, #0
 80034a4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	6a3a      	ldr	r2, [r7, #32]
 80034ae:	0d51      	lsrs	r1, r2, #21
 80034b0:	2280      	movs	r2, #128	; 0x80
 80034b2:	00d2      	lsls	r2, r2, #3
 80034b4:	400a      	ands	r2, r1
 80034b6:	490e      	ldr	r1, [pc, #56]	; (80034f0 <I2C_TransferConfig+0x68>)
 80034b8:	430a      	orrs	r2, r1
 80034ba:	43d2      	mvns	r2, r2
 80034bc:	401a      	ands	r2, r3
 80034be:	0011      	movs	r1, r2
 80034c0:	193b      	adds	r3, r7, r4
 80034c2:	881b      	ldrh	r3, [r3, #0]
 80034c4:	059b      	lsls	r3, r3, #22
 80034c6:	0d9a      	lsrs	r2, r3, #22
 80034c8:	183b      	adds	r3, r7, r0
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	0418      	lsls	r0, r3, #16
 80034ce:	23ff      	movs	r3, #255	; 0xff
 80034d0:	041b      	lsls	r3, r3, #16
 80034d2:	4003      	ands	r3, r0
 80034d4:	431a      	orrs	r2, r3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	431a      	orrs	r2, r3
 80034da:	6a3b      	ldr	r3, [r7, #32]
 80034dc:	431a      	orrs	r2, r3
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	430a      	orrs	r2, r1
 80034e4:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 80034e6:	46c0      	nop			; (mov r8, r8)
 80034e8:	46bd      	mov	sp, r7
 80034ea:	b005      	add	sp, #20
 80034ec:	bd90      	pop	{r4, r7, pc}
 80034ee:	46c0      	nop			; (mov r8, r8)
 80034f0:	03ff63ff 	.word	0x03ff63ff

080034f4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b082      	sub	sp, #8
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2241      	movs	r2, #65	; 0x41
 8003502:	5c9b      	ldrb	r3, [r3, r2]
 8003504:	b2db      	uxtb	r3, r3
 8003506:	2b20      	cmp	r3, #32
 8003508:	d138      	bne.n	800357c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2240      	movs	r2, #64	; 0x40
 800350e:	5c9b      	ldrb	r3, [r3, r2]
 8003510:	2b01      	cmp	r3, #1
 8003512:	d101      	bne.n	8003518 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003514:	2302      	movs	r3, #2
 8003516:	e032      	b.n	800357e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2240      	movs	r2, #64	; 0x40
 800351c:	2101      	movs	r1, #1
 800351e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2241      	movs	r2, #65	; 0x41
 8003524:	2124      	movs	r1, #36	; 0x24
 8003526:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	2101      	movs	r1, #1
 8003534:	438a      	bics	r2, r1
 8003536:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4911      	ldr	r1, [pc, #68]	; (8003588 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003544:	400a      	ands	r2, r1
 8003546:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	6819      	ldr	r1, [r3, #0]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	683a      	ldr	r2, [r7, #0]
 8003554:	430a      	orrs	r2, r1
 8003556:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	2101      	movs	r1, #1
 8003564:	430a      	orrs	r2, r1
 8003566:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2241      	movs	r2, #65	; 0x41
 800356c:	2120      	movs	r1, #32
 800356e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2240      	movs	r2, #64	; 0x40
 8003574:	2100      	movs	r1, #0
 8003576:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003578:	2300      	movs	r3, #0
 800357a:	e000      	b.n	800357e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800357c:	2302      	movs	r3, #2
  }
}
 800357e:	0018      	movs	r0, r3
 8003580:	46bd      	mov	sp, r7
 8003582:	b002      	add	sp, #8
 8003584:	bd80      	pop	{r7, pc}
 8003586:	46c0      	nop			; (mov r8, r8)
 8003588:	ffffefff 	.word	0xffffefff

0800358c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2241      	movs	r2, #65	; 0x41
 800359a:	5c9b      	ldrb	r3, [r3, r2]
 800359c:	b2db      	uxtb	r3, r3
 800359e:	2b20      	cmp	r3, #32
 80035a0:	d139      	bne.n	8003616 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2240      	movs	r2, #64	; 0x40
 80035a6:	5c9b      	ldrb	r3, [r3, r2]
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d101      	bne.n	80035b0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80035ac:	2302      	movs	r3, #2
 80035ae:	e033      	b.n	8003618 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2240      	movs	r2, #64	; 0x40
 80035b4:	2101      	movs	r1, #1
 80035b6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2241      	movs	r2, #65	; 0x41
 80035bc:	2124      	movs	r1, #36	; 0x24
 80035be:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	2101      	movs	r1, #1
 80035cc:	438a      	bics	r2, r1
 80035ce:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	4a11      	ldr	r2, [pc, #68]	; (8003620 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80035dc:	4013      	ands	r3, r2
 80035de:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	021b      	lsls	r3, r3, #8
 80035e4:	68fa      	ldr	r2, [r7, #12]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	68fa      	ldr	r2, [r7, #12]
 80035f0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2101      	movs	r1, #1
 80035fe:	430a      	orrs	r2, r1
 8003600:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2241      	movs	r2, #65	; 0x41
 8003606:	2120      	movs	r1, #32
 8003608:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2240      	movs	r2, #64	; 0x40
 800360e:	2100      	movs	r1, #0
 8003610:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003612:	2300      	movs	r3, #0
 8003614:	e000      	b.n	8003618 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003616:	2302      	movs	r3, #2
  }
}
 8003618:	0018      	movs	r0, r3
 800361a:	46bd      	mov	sp, r7
 800361c:	b004      	add	sp, #16
 800361e:	bd80      	pop	{r7, pc}
 8003620:	fffff0ff 	.word	0xfffff0ff

08003624 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b088      	sub	sp, #32
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d102      	bne.n	8003638 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	f000 fb76 	bl	8003d24 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	2201      	movs	r2, #1
 800363e:	4013      	ands	r3, r2
 8003640:	d100      	bne.n	8003644 <HAL_RCC_OscConfig+0x20>
 8003642:	e08e      	b.n	8003762 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003644:	4bc5      	ldr	r3, [pc, #788]	; (800395c <HAL_RCC_OscConfig+0x338>)
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	220c      	movs	r2, #12
 800364a:	4013      	ands	r3, r2
 800364c:	2b04      	cmp	r3, #4
 800364e:	d00e      	beq.n	800366e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003650:	4bc2      	ldr	r3, [pc, #776]	; (800395c <HAL_RCC_OscConfig+0x338>)
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	220c      	movs	r2, #12
 8003656:	4013      	ands	r3, r2
 8003658:	2b08      	cmp	r3, #8
 800365a:	d117      	bne.n	800368c <HAL_RCC_OscConfig+0x68>
 800365c:	4bbf      	ldr	r3, [pc, #764]	; (800395c <HAL_RCC_OscConfig+0x338>)
 800365e:	685a      	ldr	r2, [r3, #4]
 8003660:	23c0      	movs	r3, #192	; 0xc0
 8003662:	025b      	lsls	r3, r3, #9
 8003664:	401a      	ands	r2, r3
 8003666:	2380      	movs	r3, #128	; 0x80
 8003668:	025b      	lsls	r3, r3, #9
 800366a:	429a      	cmp	r2, r3
 800366c:	d10e      	bne.n	800368c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800366e:	4bbb      	ldr	r3, [pc, #748]	; (800395c <HAL_RCC_OscConfig+0x338>)
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	2380      	movs	r3, #128	; 0x80
 8003674:	029b      	lsls	r3, r3, #10
 8003676:	4013      	ands	r3, r2
 8003678:	d100      	bne.n	800367c <HAL_RCC_OscConfig+0x58>
 800367a:	e071      	b.n	8003760 <HAL_RCC_OscConfig+0x13c>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d000      	beq.n	8003686 <HAL_RCC_OscConfig+0x62>
 8003684:	e06c      	b.n	8003760 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	f000 fb4c 	bl	8003d24 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	2b01      	cmp	r3, #1
 8003692:	d107      	bne.n	80036a4 <HAL_RCC_OscConfig+0x80>
 8003694:	4bb1      	ldr	r3, [pc, #708]	; (800395c <HAL_RCC_OscConfig+0x338>)
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	4bb0      	ldr	r3, [pc, #704]	; (800395c <HAL_RCC_OscConfig+0x338>)
 800369a:	2180      	movs	r1, #128	; 0x80
 800369c:	0249      	lsls	r1, r1, #9
 800369e:	430a      	orrs	r2, r1
 80036a0:	601a      	str	r2, [r3, #0]
 80036a2:	e02f      	b.n	8003704 <HAL_RCC_OscConfig+0xe0>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d10c      	bne.n	80036c6 <HAL_RCC_OscConfig+0xa2>
 80036ac:	4bab      	ldr	r3, [pc, #684]	; (800395c <HAL_RCC_OscConfig+0x338>)
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	4baa      	ldr	r3, [pc, #680]	; (800395c <HAL_RCC_OscConfig+0x338>)
 80036b2:	49ab      	ldr	r1, [pc, #684]	; (8003960 <HAL_RCC_OscConfig+0x33c>)
 80036b4:	400a      	ands	r2, r1
 80036b6:	601a      	str	r2, [r3, #0]
 80036b8:	4ba8      	ldr	r3, [pc, #672]	; (800395c <HAL_RCC_OscConfig+0x338>)
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	4ba7      	ldr	r3, [pc, #668]	; (800395c <HAL_RCC_OscConfig+0x338>)
 80036be:	49a9      	ldr	r1, [pc, #676]	; (8003964 <HAL_RCC_OscConfig+0x340>)
 80036c0:	400a      	ands	r2, r1
 80036c2:	601a      	str	r2, [r3, #0]
 80036c4:	e01e      	b.n	8003704 <HAL_RCC_OscConfig+0xe0>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	2b05      	cmp	r3, #5
 80036cc:	d10e      	bne.n	80036ec <HAL_RCC_OscConfig+0xc8>
 80036ce:	4ba3      	ldr	r3, [pc, #652]	; (800395c <HAL_RCC_OscConfig+0x338>)
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	4ba2      	ldr	r3, [pc, #648]	; (800395c <HAL_RCC_OscConfig+0x338>)
 80036d4:	2180      	movs	r1, #128	; 0x80
 80036d6:	02c9      	lsls	r1, r1, #11
 80036d8:	430a      	orrs	r2, r1
 80036da:	601a      	str	r2, [r3, #0]
 80036dc:	4b9f      	ldr	r3, [pc, #636]	; (800395c <HAL_RCC_OscConfig+0x338>)
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	4b9e      	ldr	r3, [pc, #632]	; (800395c <HAL_RCC_OscConfig+0x338>)
 80036e2:	2180      	movs	r1, #128	; 0x80
 80036e4:	0249      	lsls	r1, r1, #9
 80036e6:	430a      	orrs	r2, r1
 80036e8:	601a      	str	r2, [r3, #0]
 80036ea:	e00b      	b.n	8003704 <HAL_RCC_OscConfig+0xe0>
 80036ec:	4b9b      	ldr	r3, [pc, #620]	; (800395c <HAL_RCC_OscConfig+0x338>)
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	4b9a      	ldr	r3, [pc, #616]	; (800395c <HAL_RCC_OscConfig+0x338>)
 80036f2:	499b      	ldr	r1, [pc, #620]	; (8003960 <HAL_RCC_OscConfig+0x33c>)
 80036f4:	400a      	ands	r2, r1
 80036f6:	601a      	str	r2, [r3, #0]
 80036f8:	4b98      	ldr	r3, [pc, #608]	; (800395c <HAL_RCC_OscConfig+0x338>)
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	4b97      	ldr	r3, [pc, #604]	; (800395c <HAL_RCC_OscConfig+0x338>)
 80036fe:	4999      	ldr	r1, [pc, #612]	; (8003964 <HAL_RCC_OscConfig+0x340>)
 8003700:	400a      	ands	r2, r1
 8003702:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d014      	beq.n	8003736 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800370c:	f7fe fadc 	bl	8001cc8 <HAL_GetTick>
 8003710:	0003      	movs	r3, r0
 8003712:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003714:	e008      	b.n	8003728 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003716:	f7fe fad7 	bl	8001cc8 <HAL_GetTick>
 800371a:	0002      	movs	r2, r0
 800371c:	69bb      	ldr	r3, [r7, #24]
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	2b64      	cmp	r3, #100	; 0x64
 8003722:	d901      	bls.n	8003728 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8003724:	2303      	movs	r3, #3
 8003726:	e2fd      	b.n	8003d24 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003728:	4b8c      	ldr	r3, [pc, #560]	; (800395c <HAL_RCC_OscConfig+0x338>)
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	2380      	movs	r3, #128	; 0x80
 800372e:	029b      	lsls	r3, r3, #10
 8003730:	4013      	ands	r3, r2
 8003732:	d0f0      	beq.n	8003716 <HAL_RCC_OscConfig+0xf2>
 8003734:	e015      	b.n	8003762 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003736:	f7fe fac7 	bl	8001cc8 <HAL_GetTick>
 800373a:	0003      	movs	r3, r0
 800373c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800373e:	e008      	b.n	8003752 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003740:	f7fe fac2 	bl	8001cc8 <HAL_GetTick>
 8003744:	0002      	movs	r2, r0
 8003746:	69bb      	ldr	r3, [r7, #24]
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	2b64      	cmp	r3, #100	; 0x64
 800374c:	d901      	bls.n	8003752 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	e2e8      	b.n	8003d24 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003752:	4b82      	ldr	r3, [pc, #520]	; (800395c <HAL_RCC_OscConfig+0x338>)
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	2380      	movs	r3, #128	; 0x80
 8003758:	029b      	lsls	r3, r3, #10
 800375a:	4013      	ands	r3, r2
 800375c:	d1f0      	bne.n	8003740 <HAL_RCC_OscConfig+0x11c>
 800375e:	e000      	b.n	8003762 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003760:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	2202      	movs	r2, #2
 8003768:	4013      	ands	r3, r2
 800376a:	d100      	bne.n	800376e <HAL_RCC_OscConfig+0x14a>
 800376c:	e06c      	b.n	8003848 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800376e:	4b7b      	ldr	r3, [pc, #492]	; (800395c <HAL_RCC_OscConfig+0x338>)
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	220c      	movs	r2, #12
 8003774:	4013      	ands	r3, r2
 8003776:	d00e      	beq.n	8003796 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003778:	4b78      	ldr	r3, [pc, #480]	; (800395c <HAL_RCC_OscConfig+0x338>)
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	220c      	movs	r2, #12
 800377e:	4013      	ands	r3, r2
 8003780:	2b08      	cmp	r3, #8
 8003782:	d11f      	bne.n	80037c4 <HAL_RCC_OscConfig+0x1a0>
 8003784:	4b75      	ldr	r3, [pc, #468]	; (800395c <HAL_RCC_OscConfig+0x338>)
 8003786:	685a      	ldr	r2, [r3, #4]
 8003788:	23c0      	movs	r3, #192	; 0xc0
 800378a:	025b      	lsls	r3, r3, #9
 800378c:	401a      	ands	r2, r3
 800378e:	2380      	movs	r3, #128	; 0x80
 8003790:	021b      	lsls	r3, r3, #8
 8003792:	429a      	cmp	r2, r3
 8003794:	d116      	bne.n	80037c4 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003796:	4b71      	ldr	r3, [pc, #452]	; (800395c <HAL_RCC_OscConfig+0x338>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	2202      	movs	r2, #2
 800379c:	4013      	ands	r3, r2
 800379e:	d005      	beq.n	80037ac <HAL_RCC_OscConfig+0x188>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d001      	beq.n	80037ac <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e2bb      	b.n	8003d24 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037ac:	4b6b      	ldr	r3, [pc, #428]	; (800395c <HAL_RCC_OscConfig+0x338>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	22f8      	movs	r2, #248	; 0xf8
 80037b2:	4393      	bics	r3, r2
 80037b4:	0019      	movs	r1, r3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	691b      	ldr	r3, [r3, #16]
 80037ba:	00da      	lsls	r2, r3, #3
 80037bc:	4b67      	ldr	r3, [pc, #412]	; (800395c <HAL_RCC_OscConfig+0x338>)
 80037be:	430a      	orrs	r2, r1
 80037c0:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037c2:	e041      	b.n	8003848 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d024      	beq.n	8003816 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037cc:	4b63      	ldr	r3, [pc, #396]	; (800395c <HAL_RCC_OscConfig+0x338>)
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	4b62      	ldr	r3, [pc, #392]	; (800395c <HAL_RCC_OscConfig+0x338>)
 80037d2:	2101      	movs	r1, #1
 80037d4:	430a      	orrs	r2, r1
 80037d6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037d8:	f7fe fa76 	bl	8001cc8 <HAL_GetTick>
 80037dc:	0003      	movs	r3, r0
 80037de:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037e0:	e008      	b.n	80037f4 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037e2:	f7fe fa71 	bl	8001cc8 <HAL_GetTick>
 80037e6:	0002      	movs	r2, r0
 80037e8:	69bb      	ldr	r3, [r7, #24]
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	2b02      	cmp	r3, #2
 80037ee:	d901      	bls.n	80037f4 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80037f0:	2303      	movs	r3, #3
 80037f2:	e297      	b.n	8003d24 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037f4:	4b59      	ldr	r3, [pc, #356]	; (800395c <HAL_RCC_OscConfig+0x338>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	2202      	movs	r2, #2
 80037fa:	4013      	ands	r3, r2
 80037fc:	d0f1      	beq.n	80037e2 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037fe:	4b57      	ldr	r3, [pc, #348]	; (800395c <HAL_RCC_OscConfig+0x338>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	22f8      	movs	r2, #248	; 0xf8
 8003804:	4393      	bics	r3, r2
 8003806:	0019      	movs	r1, r3
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	691b      	ldr	r3, [r3, #16]
 800380c:	00da      	lsls	r2, r3, #3
 800380e:	4b53      	ldr	r3, [pc, #332]	; (800395c <HAL_RCC_OscConfig+0x338>)
 8003810:	430a      	orrs	r2, r1
 8003812:	601a      	str	r2, [r3, #0]
 8003814:	e018      	b.n	8003848 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003816:	4b51      	ldr	r3, [pc, #324]	; (800395c <HAL_RCC_OscConfig+0x338>)
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	4b50      	ldr	r3, [pc, #320]	; (800395c <HAL_RCC_OscConfig+0x338>)
 800381c:	2101      	movs	r1, #1
 800381e:	438a      	bics	r2, r1
 8003820:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003822:	f7fe fa51 	bl	8001cc8 <HAL_GetTick>
 8003826:	0003      	movs	r3, r0
 8003828:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800382a:	e008      	b.n	800383e <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800382c:	f7fe fa4c 	bl	8001cc8 <HAL_GetTick>
 8003830:	0002      	movs	r2, r0
 8003832:	69bb      	ldr	r3, [r7, #24]
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	2b02      	cmp	r3, #2
 8003838:	d901      	bls.n	800383e <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800383a:	2303      	movs	r3, #3
 800383c:	e272      	b.n	8003d24 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800383e:	4b47      	ldr	r3, [pc, #284]	; (800395c <HAL_RCC_OscConfig+0x338>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	2202      	movs	r2, #2
 8003844:	4013      	ands	r3, r2
 8003846:	d1f1      	bne.n	800382c <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	2208      	movs	r2, #8
 800384e:	4013      	ands	r3, r2
 8003850:	d036      	beq.n	80038c0 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	69db      	ldr	r3, [r3, #28]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d019      	beq.n	800388e <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800385a:	4b40      	ldr	r3, [pc, #256]	; (800395c <HAL_RCC_OscConfig+0x338>)
 800385c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800385e:	4b3f      	ldr	r3, [pc, #252]	; (800395c <HAL_RCC_OscConfig+0x338>)
 8003860:	2101      	movs	r1, #1
 8003862:	430a      	orrs	r2, r1
 8003864:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003866:	f7fe fa2f 	bl	8001cc8 <HAL_GetTick>
 800386a:	0003      	movs	r3, r0
 800386c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800386e:	e008      	b.n	8003882 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003870:	f7fe fa2a 	bl	8001cc8 <HAL_GetTick>
 8003874:	0002      	movs	r2, r0
 8003876:	69bb      	ldr	r3, [r7, #24]
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	2b02      	cmp	r3, #2
 800387c:	d901      	bls.n	8003882 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800387e:	2303      	movs	r3, #3
 8003880:	e250      	b.n	8003d24 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003882:	4b36      	ldr	r3, [pc, #216]	; (800395c <HAL_RCC_OscConfig+0x338>)
 8003884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003886:	2202      	movs	r2, #2
 8003888:	4013      	ands	r3, r2
 800388a:	d0f1      	beq.n	8003870 <HAL_RCC_OscConfig+0x24c>
 800388c:	e018      	b.n	80038c0 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800388e:	4b33      	ldr	r3, [pc, #204]	; (800395c <HAL_RCC_OscConfig+0x338>)
 8003890:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003892:	4b32      	ldr	r3, [pc, #200]	; (800395c <HAL_RCC_OscConfig+0x338>)
 8003894:	2101      	movs	r1, #1
 8003896:	438a      	bics	r2, r1
 8003898:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800389a:	f7fe fa15 	bl	8001cc8 <HAL_GetTick>
 800389e:	0003      	movs	r3, r0
 80038a0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038a2:	e008      	b.n	80038b6 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038a4:	f7fe fa10 	bl	8001cc8 <HAL_GetTick>
 80038a8:	0002      	movs	r2, r0
 80038aa:	69bb      	ldr	r3, [r7, #24]
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	d901      	bls.n	80038b6 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80038b2:	2303      	movs	r3, #3
 80038b4:	e236      	b.n	8003d24 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038b6:	4b29      	ldr	r3, [pc, #164]	; (800395c <HAL_RCC_OscConfig+0x338>)
 80038b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ba:	2202      	movs	r2, #2
 80038bc:	4013      	ands	r3, r2
 80038be:	d1f1      	bne.n	80038a4 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2204      	movs	r2, #4
 80038c6:	4013      	ands	r3, r2
 80038c8:	d100      	bne.n	80038cc <HAL_RCC_OscConfig+0x2a8>
 80038ca:	e0b5      	b.n	8003a38 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038cc:	201f      	movs	r0, #31
 80038ce:	183b      	adds	r3, r7, r0
 80038d0:	2200      	movs	r2, #0
 80038d2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038d4:	4b21      	ldr	r3, [pc, #132]	; (800395c <HAL_RCC_OscConfig+0x338>)
 80038d6:	69da      	ldr	r2, [r3, #28]
 80038d8:	2380      	movs	r3, #128	; 0x80
 80038da:	055b      	lsls	r3, r3, #21
 80038dc:	4013      	ands	r3, r2
 80038de:	d110      	bne.n	8003902 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038e0:	4b1e      	ldr	r3, [pc, #120]	; (800395c <HAL_RCC_OscConfig+0x338>)
 80038e2:	69da      	ldr	r2, [r3, #28]
 80038e4:	4b1d      	ldr	r3, [pc, #116]	; (800395c <HAL_RCC_OscConfig+0x338>)
 80038e6:	2180      	movs	r1, #128	; 0x80
 80038e8:	0549      	lsls	r1, r1, #21
 80038ea:	430a      	orrs	r2, r1
 80038ec:	61da      	str	r2, [r3, #28]
 80038ee:	4b1b      	ldr	r3, [pc, #108]	; (800395c <HAL_RCC_OscConfig+0x338>)
 80038f0:	69da      	ldr	r2, [r3, #28]
 80038f2:	2380      	movs	r3, #128	; 0x80
 80038f4:	055b      	lsls	r3, r3, #21
 80038f6:	4013      	ands	r3, r2
 80038f8:	60fb      	str	r3, [r7, #12]
 80038fa:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80038fc:	183b      	adds	r3, r7, r0
 80038fe:	2201      	movs	r2, #1
 8003900:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003902:	4b19      	ldr	r3, [pc, #100]	; (8003968 <HAL_RCC_OscConfig+0x344>)
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	2380      	movs	r3, #128	; 0x80
 8003908:	005b      	lsls	r3, r3, #1
 800390a:	4013      	ands	r3, r2
 800390c:	d11a      	bne.n	8003944 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800390e:	4b16      	ldr	r3, [pc, #88]	; (8003968 <HAL_RCC_OscConfig+0x344>)
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	4b15      	ldr	r3, [pc, #84]	; (8003968 <HAL_RCC_OscConfig+0x344>)
 8003914:	2180      	movs	r1, #128	; 0x80
 8003916:	0049      	lsls	r1, r1, #1
 8003918:	430a      	orrs	r2, r1
 800391a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800391c:	f7fe f9d4 	bl	8001cc8 <HAL_GetTick>
 8003920:	0003      	movs	r3, r0
 8003922:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003924:	e008      	b.n	8003938 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003926:	f7fe f9cf 	bl	8001cc8 <HAL_GetTick>
 800392a:	0002      	movs	r2, r0
 800392c:	69bb      	ldr	r3, [r7, #24]
 800392e:	1ad3      	subs	r3, r2, r3
 8003930:	2b64      	cmp	r3, #100	; 0x64
 8003932:	d901      	bls.n	8003938 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8003934:	2303      	movs	r3, #3
 8003936:	e1f5      	b.n	8003d24 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003938:	4b0b      	ldr	r3, [pc, #44]	; (8003968 <HAL_RCC_OscConfig+0x344>)
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	2380      	movs	r3, #128	; 0x80
 800393e:	005b      	lsls	r3, r3, #1
 8003940:	4013      	ands	r3, r2
 8003942:	d0f0      	beq.n	8003926 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	2b01      	cmp	r3, #1
 800394a:	d10f      	bne.n	800396c <HAL_RCC_OscConfig+0x348>
 800394c:	4b03      	ldr	r3, [pc, #12]	; (800395c <HAL_RCC_OscConfig+0x338>)
 800394e:	6a1a      	ldr	r2, [r3, #32]
 8003950:	4b02      	ldr	r3, [pc, #8]	; (800395c <HAL_RCC_OscConfig+0x338>)
 8003952:	2101      	movs	r1, #1
 8003954:	430a      	orrs	r2, r1
 8003956:	621a      	str	r2, [r3, #32]
 8003958:	e036      	b.n	80039c8 <HAL_RCC_OscConfig+0x3a4>
 800395a:	46c0      	nop			; (mov r8, r8)
 800395c:	40021000 	.word	0x40021000
 8003960:	fffeffff 	.word	0xfffeffff
 8003964:	fffbffff 	.word	0xfffbffff
 8003968:	40007000 	.word	0x40007000
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d10c      	bne.n	800398e <HAL_RCC_OscConfig+0x36a>
 8003974:	4bca      	ldr	r3, [pc, #808]	; (8003ca0 <HAL_RCC_OscConfig+0x67c>)
 8003976:	6a1a      	ldr	r2, [r3, #32]
 8003978:	4bc9      	ldr	r3, [pc, #804]	; (8003ca0 <HAL_RCC_OscConfig+0x67c>)
 800397a:	2101      	movs	r1, #1
 800397c:	438a      	bics	r2, r1
 800397e:	621a      	str	r2, [r3, #32]
 8003980:	4bc7      	ldr	r3, [pc, #796]	; (8003ca0 <HAL_RCC_OscConfig+0x67c>)
 8003982:	6a1a      	ldr	r2, [r3, #32]
 8003984:	4bc6      	ldr	r3, [pc, #792]	; (8003ca0 <HAL_RCC_OscConfig+0x67c>)
 8003986:	2104      	movs	r1, #4
 8003988:	438a      	bics	r2, r1
 800398a:	621a      	str	r2, [r3, #32]
 800398c:	e01c      	b.n	80039c8 <HAL_RCC_OscConfig+0x3a4>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	2b05      	cmp	r3, #5
 8003994:	d10c      	bne.n	80039b0 <HAL_RCC_OscConfig+0x38c>
 8003996:	4bc2      	ldr	r3, [pc, #776]	; (8003ca0 <HAL_RCC_OscConfig+0x67c>)
 8003998:	6a1a      	ldr	r2, [r3, #32]
 800399a:	4bc1      	ldr	r3, [pc, #772]	; (8003ca0 <HAL_RCC_OscConfig+0x67c>)
 800399c:	2104      	movs	r1, #4
 800399e:	430a      	orrs	r2, r1
 80039a0:	621a      	str	r2, [r3, #32]
 80039a2:	4bbf      	ldr	r3, [pc, #764]	; (8003ca0 <HAL_RCC_OscConfig+0x67c>)
 80039a4:	6a1a      	ldr	r2, [r3, #32]
 80039a6:	4bbe      	ldr	r3, [pc, #760]	; (8003ca0 <HAL_RCC_OscConfig+0x67c>)
 80039a8:	2101      	movs	r1, #1
 80039aa:	430a      	orrs	r2, r1
 80039ac:	621a      	str	r2, [r3, #32]
 80039ae:	e00b      	b.n	80039c8 <HAL_RCC_OscConfig+0x3a4>
 80039b0:	4bbb      	ldr	r3, [pc, #748]	; (8003ca0 <HAL_RCC_OscConfig+0x67c>)
 80039b2:	6a1a      	ldr	r2, [r3, #32]
 80039b4:	4bba      	ldr	r3, [pc, #744]	; (8003ca0 <HAL_RCC_OscConfig+0x67c>)
 80039b6:	2101      	movs	r1, #1
 80039b8:	438a      	bics	r2, r1
 80039ba:	621a      	str	r2, [r3, #32]
 80039bc:	4bb8      	ldr	r3, [pc, #736]	; (8003ca0 <HAL_RCC_OscConfig+0x67c>)
 80039be:	6a1a      	ldr	r2, [r3, #32]
 80039c0:	4bb7      	ldr	r3, [pc, #732]	; (8003ca0 <HAL_RCC_OscConfig+0x67c>)
 80039c2:	2104      	movs	r1, #4
 80039c4:	438a      	bics	r2, r1
 80039c6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d014      	beq.n	80039fa <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039d0:	f7fe f97a 	bl	8001cc8 <HAL_GetTick>
 80039d4:	0003      	movs	r3, r0
 80039d6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039d8:	e009      	b.n	80039ee <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039da:	f7fe f975 	bl	8001cc8 <HAL_GetTick>
 80039de:	0002      	movs	r2, r0
 80039e0:	69bb      	ldr	r3, [r7, #24]
 80039e2:	1ad3      	subs	r3, r2, r3
 80039e4:	4aaf      	ldr	r2, [pc, #700]	; (8003ca4 <HAL_RCC_OscConfig+0x680>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d901      	bls.n	80039ee <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	e19a      	b.n	8003d24 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039ee:	4bac      	ldr	r3, [pc, #688]	; (8003ca0 <HAL_RCC_OscConfig+0x67c>)
 80039f0:	6a1b      	ldr	r3, [r3, #32]
 80039f2:	2202      	movs	r2, #2
 80039f4:	4013      	ands	r3, r2
 80039f6:	d0f0      	beq.n	80039da <HAL_RCC_OscConfig+0x3b6>
 80039f8:	e013      	b.n	8003a22 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039fa:	f7fe f965 	bl	8001cc8 <HAL_GetTick>
 80039fe:	0003      	movs	r3, r0
 8003a00:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a02:	e009      	b.n	8003a18 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a04:	f7fe f960 	bl	8001cc8 <HAL_GetTick>
 8003a08:	0002      	movs	r2, r0
 8003a0a:	69bb      	ldr	r3, [r7, #24]
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	4aa5      	ldr	r2, [pc, #660]	; (8003ca4 <HAL_RCC_OscConfig+0x680>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d901      	bls.n	8003a18 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8003a14:	2303      	movs	r3, #3
 8003a16:	e185      	b.n	8003d24 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a18:	4ba1      	ldr	r3, [pc, #644]	; (8003ca0 <HAL_RCC_OscConfig+0x67c>)
 8003a1a:	6a1b      	ldr	r3, [r3, #32]
 8003a1c:	2202      	movs	r2, #2
 8003a1e:	4013      	ands	r3, r2
 8003a20:	d1f0      	bne.n	8003a04 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003a22:	231f      	movs	r3, #31
 8003a24:	18fb      	adds	r3, r7, r3
 8003a26:	781b      	ldrb	r3, [r3, #0]
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d105      	bne.n	8003a38 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a2c:	4b9c      	ldr	r3, [pc, #624]	; (8003ca0 <HAL_RCC_OscConfig+0x67c>)
 8003a2e:	69da      	ldr	r2, [r3, #28]
 8003a30:	4b9b      	ldr	r3, [pc, #620]	; (8003ca0 <HAL_RCC_OscConfig+0x67c>)
 8003a32:	499d      	ldr	r1, [pc, #628]	; (8003ca8 <HAL_RCC_OscConfig+0x684>)
 8003a34:	400a      	ands	r2, r1
 8003a36:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	2210      	movs	r2, #16
 8003a3e:	4013      	ands	r3, r2
 8003a40:	d063      	beq.n	8003b0a <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	695b      	ldr	r3, [r3, #20]
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d12a      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003a4a:	4b95      	ldr	r3, [pc, #596]	; (8003ca0 <HAL_RCC_OscConfig+0x67c>)
 8003a4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a4e:	4b94      	ldr	r3, [pc, #592]	; (8003ca0 <HAL_RCC_OscConfig+0x67c>)
 8003a50:	2104      	movs	r1, #4
 8003a52:	430a      	orrs	r2, r1
 8003a54:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003a56:	4b92      	ldr	r3, [pc, #584]	; (8003ca0 <HAL_RCC_OscConfig+0x67c>)
 8003a58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a5a:	4b91      	ldr	r3, [pc, #580]	; (8003ca0 <HAL_RCC_OscConfig+0x67c>)
 8003a5c:	2101      	movs	r1, #1
 8003a5e:	430a      	orrs	r2, r1
 8003a60:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a62:	f7fe f931 	bl	8001cc8 <HAL_GetTick>
 8003a66:	0003      	movs	r3, r0
 8003a68:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003a6a:	e008      	b.n	8003a7e <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003a6c:	f7fe f92c 	bl	8001cc8 <HAL_GetTick>
 8003a70:	0002      	movs	r2, r0
 8003a72:	69bb      	ldr	r3, [r7, #24]
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	d901      	bls.n	8003a7e <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8003a7a:	2303      	movs	r3, #3
 8003a7c:	e152      	b.n	8003d24 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003a7e:	4b88      	ldr	r3, [pc, #544]	; (8003ca0 <HAL_RCC_OscConfig+0x67c>)
 8003a80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a82:	2202      	movs	r2, #2
 8003a84:	4013      	ands	r3, r2
 8003a86:	d0f1      	beq.n	8003a6c <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003a88:	4b85      	ldr	r3, [pc, #532]	; (8003ca0 <HAL_RCC_OscConfig+0x67c>)
 8003a8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a8c:	22f8      	movs	r2, #248	; 0xf8
 8003a8e:	4393      	bics	r3, r2
 8003a90:	0019      	movs	r1, r3
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	699b      	ldr	r3, [r3, #24]
 8003a96:	00da      	lsls	r2, r3, #3
 8003a98:	4b81      	ldr	r3, [pc, #516]	; (8003ca0 <HAL_RCC_OscConfig+0x67c>)
 8003a9a:	430a      	orrs	r2, r1
 8003a9c:	635a      	str	r2, [r3, #52]	; 0x34
 8003a9e:	e034      	b.n	8003b0a <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	695b      	ldr	r3, [r3, #20]
 8003aa4:	3305      	adds	r3, #5
 8003aa6:	d111      	bne.n	8003acc <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003aa8:	4b7d      	ldr	r3, [pc, #500]	; (8003ca0 <HAL_RCC_OscConfig+0x67c>)
 8003aaa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003aac:	4b7c      	ldr	r3, [pc, #496]	; (8003ca0 <HAL_RCC_OscConfig+0x67c>)
 8003aae:	2104      	movs	r1, #4
 8003ab0:	438a      	bics	r2, r1
 8003ab2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003ab4:	4b7a      	ldr	r3, [pc, #488]	; (8003ca0 <HAL_RCC_OscConfig+0x67c>)
 8003ab6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ab8:	22f8      	movs	r2, #248	; 0xf8
 8003aba:	4393      	bics	r3, r2
 8003abc:	0019      	movs	r1, r3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	699b      	ldr	r3, [r3, #24]
 8003ac2:	00da      	lsls	r2, r3, #3
 8003ac4:	4b76      	ldr	r3, [pc, #472]	; (8003ca0 <HAL_RCC_OscConfig+0x67c>)
 8003ac6:	430a      	orrs	r2, r1
 8003ac8:	635a      	str	r2, [r3, #52]	; 0x34
 8003aca:	e01e      	b.n	8003b0a <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003acc:	4b74      	ldr	r3, [pc, #464]	; (8003ca0 <HAL_RCC_OscConfig+0x67c>)
 8003ace:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ad0:	4b73      	ldr	r3, [pc, #460]	; (8003ca0 <HAL_RCC_OscConfig+0x67c>)
 8003ad2:	2104      	movs	r1, #4
 8003ad4:	430a      	orrs	r2, r1
 8003ad6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003ad8:	4b71      	ldr	r3, [pc, #452]	; (8003ca0 <HAL_RCC_OscConfig+0x67c>)
 8003ada:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003adc:	4b70      	ldr	r3, [pc, #448]	; (8003ca0 <HAL_RCC_OscConfig+0x67c>)
 8003ade:	2101      	movs	r1, #1
 8003ae0:	438a      	bics	r2, r1
 8003ae2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ae4:	f7fe f8f0 	bl	8001cc8 <HAL_GetTick>
 8003ae8:	0003      	movs	r3, r0
 8003aea:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003aec:	e008      	b.n	8003b00 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003aee:	f7fe f8eb 	bl	8001cc8 <HAL_GetTick>
 8003af2:	0002      	movs	r2, r0
 8003af4:	69bb      	ldr	r3, [r7, #24]
 8003af6:	1ad3      	subs	r3, r2, r3
 8003af8:	2b02      	cmp	r3, #2
 8003afa:	d901      	bls.n	8003b00 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8003afc:	2303      	movs	r3, #3
 8003afe:	e111      	b.n	8003d24 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003b00:	4b67      	ldr	r3, [pc, #412]	; (8003ca0 <HAL_RCC_OscConfig+0x67c>)
 8003b02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b04:	2202      	movs	r2, #2
 8003b06:	4013      	ands	r3, r2
 8003b08:	d1f1      	bne.n	8003aee <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	2220      	movs	r2, #32
 8003b10:	4013      	ands	r3, r2
 8003b12:	d05c      	beq.n	8003bce <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8003b14:	4b62      	ldr	r3, [pc, #392]	; (8003ca0 <HAL_RCC_OscConfig+0x67c>)
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	220c      	movs	r2, #12
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	2b0c      	cmp	r3, #12
 8003b1e:	d00e      	beq.n	8003b3e <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8003b20:	4b5f      	ldr	r3, [pc, #380]	; (8003ca0 <HAL_RCC_OscConfig+0x67c>)
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	220c      	movs	r2, #12
 8003b26:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8003b28:	2b08      	cmp	r3, #8
 8003b2a:	d114      	bne.n	8003b56 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8003b2c:	4b5c      	ldr	r3, [pc, #368]	; (8003ca0 <HAL_RCC_OscConfig+0x67c>)
 8003b2e:	685a      	ldr	r2, [r3, #4]
 8003b30:	23c0      	movs	r3, #192	; 0xc0
 8003b32:	025b      	lsls	r3, r3, #9
 8003b34:	401a      	ands	r2, r3
 8003b36:	23c0      	movs	r3, #192	; 0xc0
 8003b38:	025b      	lsls	r3, r3, #9
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d10b      	bne.n	8003b56 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8003b3e:	4b58      	ldr	r3, [pc, #352]	; (8003ca0 <HAL_RCC_OscConfig+0x67c>)
 8003b40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b42:	2380      	movs	r3, #128	; 0x80
 8003b44:	025b      	lsls	r3, r3, #9
 8003b46:	4013      	ands	r3, r2
 8003b48:	d040      	beq.n	8003bcc <HAL_RCC_OscConfig+0x5a8>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6a1b      	ldr	r3, [r3, #32]
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d03c      	beq.n	8003bcc <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e0e6      	b.n	8003d24 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6a1b      	ldr	r3, [r3, #32]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d01b      	beq.n	8003b96 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8003b5e:	4b50      	ldr	r3, [pc, #320]	; (8003ca0 <HAL_RCC_OscConfig+0x67c>)
 8003b60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b62:	4b4f      	ldr	r3, [pc, #316]	; (8003ca0 <HAL_RCC_OscConfig+0x67c>)
 8003b64:	2180      	movs	r1, #128	; 0x80
 8003b66:	0249      	lsls	r1, r1, #9
 8003b68:	430a      	orrs	r2, r1
 8003b6a:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b6c:	f7fe f8ac 	bl	8001cc8 <HAL_GetTick>
 8003b70:	0003      	movs	r3, r0
 8003b72:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003b74:	e008      	b.n	8003b88 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b76:	f7fe f8a7 	bl	8001cc8 <HAL_GetTick>
 8003b7a:	0002      	movs	r2, r0
 8003b7c:	69bb      	ldr	r3, [r7, #24]
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	2b02      	cmp	r3, #2
 8003b82:	d901      	bls.n	8003b88 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8003b84:	2303      	movs	r3, #3
 8003b86:	e0cd      	b.n	8003d24 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003b88:	4b45      	ldr	r3, [pc, #276]	; (8003ca0 <HAL_RCC_OscConfig+0x67c>)
 8003b8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b8c:	2380      	movs	r3, #128	; 0x80
 8003b8e:	025b      	lsls	r3, r3, #9
 8003b90:	4013      	ands	r3, r2
 8003b92:	d0f0      	beq.n	8003b76 <HAL_RCC_OscConfig+0x552>
 8003b94:	e01b      	b.n	8003bce <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8003b96:	4b42      	ldr	r3, [pc, #264]	; (8003ca0 <HAL_RCC_OscConfig+0x67c>)
 8003b98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b9a:	4b41      	ldr	r3, [pc, #260]	; (8003ca0 <HAL_RCC_OscConfig+0x67c>)
 8003b9c:	4943      	ldr	r1, [pc, #268]	; (8003cac <HAL_RCC_OscConfig+0x688>)
 8003b9e:	400a      	ands	r2, r1
 8003ba0:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ba2:	f7fe f891 	bl	8001cc8 <HAL_GetTick>
 8003ba6:	0003      	movs	r3, r0
 8003ba8:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8003baa:	e008      	b.n	8003bbe <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003bac:	f7fe f88c 	bl	8001cc8 <HAL_GetTick>
 8003bb0:	0002      	movs	r2, r0
 8003bb2:	69bb      	ldr	r3, [r7, #24]
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	2b02      	cmp	r3, #2
 8003bb8:	d901      	bls.n	8003bbe <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e0b2      	b.n	8003d24 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8003bbe:	4b38      	ldr	r3, [pc, #224]	; (8003ca0 <HAL_RCC_OscConfig+0x67c>)
 8003bc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bc2:	2380      	movs	r3, #128	; 0x80
 8003bc4:	025b      	lsls	r3, r3, #9
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	d1f0      	bne.n	8003bac <HAL_RCC_OscConfig+0x588>
 8003bca:	e000      	b.n	8003bce <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8003bcc:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d100      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x5b4>
 8003bd6:	e0a4      	b.n	8003d22 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003bd8:	4b31      	ldr	r3, [pc, #196]	; (8003ca0 <HAL_RCC_OscConfig+0x67c>)
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	220c      	movs	r2, #12
 8003bde:	4013      	ands	r3, r2
 8003be0:	2b08      	cmp	r3, #8
 8003be2:	d100      	bne.n	8003be6 <HAL_RCC_OscConfig+0x5c2>
 8003be4:	e078      	b.n	8003cd8 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bea:	2b02      	cmp	r3, #2
 8003bec:	d14c      	bne.n	8003c88 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bee:	4b2c      	ldr	r3, [pc, #176]	; (8003ca0 <HAL_RCC_OscConfig+0x67c>)
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	4b2b      	ldr	r3, [pc, #172]	; (8003ca0 <HAL_RCC_OscConfig+0x67c>)
 8003bf4:	492e      	ldr	r1, [pc, #184]	; (8003cb0 <HAL_RCC_OscConfig+0x68c>)
 8003bf6:	400a      	ands	r2, r1
 8003bf8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bfa:	f7fe f865 	bl	8001cc8 <HAL_GetTick>
 8003bfe:	0003      	movs	r3, r0
 8003c00:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c02:	e008      	b.n	8003c16 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c04:	f7fe f860 	bl	8001cc8 <HAL_GetTick>
 8003c08:	0002      	movs	r2, r0
 8003c0a:	69bb      	ldr	r3, [r7, #24]
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	d901      	bls.n	8003c16 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8003c12:	2303      	movs	r3, #3
 8003c14:	e086      	b.n	8003d24 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c16:	4b22      	ldr	r3, [pc, #136]	; (8003ca0 <HAL_RCC_OscConfig+0x67c>)
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	2380      	movs	r3, #128	; 0x80
 8003c1c:	049b      	lsls	r3, r3, #18
 8003c1e:	4013      	ands	r3, r2
 8003c20:	d1f0      	bne.n	8003c04 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c22:	4b1f      	ldr	r3, [pc, #124]	; (8003ca0 <HAL_RCC_OscConfig+0x67c>)
 8003c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c26:	220f      	movs	r2, #15
 8003c28:	4393      	bics	r3, r2
 8003c2a:	0019      	movs	r1, r3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c30:	4b1b      	ldr	r3, [pc, #108]	; (8003ca0 <HAL_RCC_OscConfig+0x67c>)
 8003c32:	430a      	orrs	r2, r1
 8003c34:	62da      	str	r2, [r3, #44]	; 0x2c
 8003c36:	4b1a      	ldr	r3, [pc, #104]	; (8003ca0 <HAL_RCC_OscConfig+0x67c>)
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	4a1e      	ldr	r2, [pc, #120]	; (8003cb4 <HAL_RCC_OscConfig+0x690>)
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	0019      	movs	r1, r3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c48:	431a      	orrs	r2, r3
 8003c4a:	4b15      	ldr	r3, [pc, #84]	; (8003ca0 <HAL_RCC_OscConfig+0x67c>)
 8003c4c:	430a      	orrs	r2, r1
 8003c4e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c50:	4b13      	ldr	r3, [pc, #76]	; (8003ca0 <HAL_RCC_OscConfig+0x67c>)
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	4b12      	ldr	r3, [pc, #72]	; (8003ca0 <HAL_RCC_OscConfig+0x67c>)
 8003c56:	2180      	movs	r1, #128	; 0x80
 8003c58:	0449      	lsls	r1, r1, #17
 8003c5a:	430a      	orrs	r2, r1
 8003c5c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c5e:	f7fe f833 	bl	8001cc8 <HAL_GetTick>
 8003c62:	0003      	movs	r3, r0
 8003c64:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c66:	e008      	b.n	8003c7a <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c68:	f7fe f82e 	bl	8001cc8 <HAL_GetTick>
 8003c6c:	0002      	movs	r2, r0
 8003c6e:	69bb      	ldr	r3, [r7, #24]
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	2b02      	cmp	r3, #2
 8003c74:	d901      	bls.n	8003c7a <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8003c76:	2303      	movs	r3, #3
 8003c78:	e054      	b.n	8003d24 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c7a:	4b09      	ldr	r3, [pc, #36]	; (8003ca0 <HAL_RCC_OscConfig+0x67c>)
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	2380      	movs	r3, #128	; 0x80
 8003c80:	049b      	lsls	r3, r3, #18
 8003c82:	4013      	ands	r3, r2
 8003c84:	d0f0      	beq.n	8003c68 <HAL_RCC_OscConfig+0x644>
 8003c86:	e04c      	b.n	8003d22 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c88:	4b05      	ldr	r3, [pc, #20]	; (8003ca0 <HAL_RCC_OscConfig+0x67c>)
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	4b04      	ldr	r3, [pc, #16]	; (8003ca0 <HAL_RCC_OscConfig+0x67c>)
 8003c8e:	4908      	ldr	r1, [pc, #32]	; (8003cb0 <HAL_RCC_OscConfig+0x68c>)
 8003c90:	400a      	ands	r2, r1
 8003c92:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c94:	f7fe f818 	bl	8001cc8 <HAL_GetTick>
 8003c98:	0003      	movs	r3, r0
 8003c9a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c9c:	e015      	b.n	8003cca <HAL_RCC_OscConfig+0x6a6>
 8003c9e:	46c0      	nop			; (mov r8, r8)
 8003ca0:	40021000 	.word	0x40021000
 8003ca4:	00001388 	.word	0x00001388
 8003ca8:	efffffff 	.word	0xefffffff
 8003cac:	fffeffff 	.word	0xfffeffff
 8003cb0:	feffffff 	.word	0xfeffffff
 8003cb4:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cb8:	f7fe f806 	bl	8001cc8 <HAL_GetTick>
 8003cbc:	0002      	movs	r2, r0
 8003cbe:	69bb      	ldr	r3, [r7, #24]
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d901      	bls.n	8003cca <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e02c      	b.n	8003d24 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cca:	4b18      	ldr	r3, [pc, #96]	; (8003d2c <HAL_RCC_OscConfig+0x708>)
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	2380      	movs	r3, #128	; 0x80
 8003cd0:	049b      	lsls	r3, r3, #18
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	d1f0      	bne.n	8003cb8 <HAL_RCC_OscConfig+0x694>
 8003cd6:	e024      	b.n	8003d22 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d101      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e01f      	b.n	8003d24 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003ce4:	4b11      	ldr	r3, [pc, #68]	; (8003d2c <HAL_RCC_OscConfig+0x708>)
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003cea:	4b10      	ldr	r3, [pc, #64]	; (8003d2c <HAL_RCC_OscConfig+0x708>)
 8003cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cee:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cf0:	697a      	ldr	r2, [r7, #20]
 8003cf2:	23c0      	movs	r3, #192	; 0xc0
 8003cf4:	025b      	lsls	r3, r3, #9
 8003cf6:	401a      	ands	r2, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d10e      	bne.n	8003d1e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	220f      	movs	r2, #15
 8003d04:	401a      	ands	r2, r3
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d107      	bne.n	8003d1e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003d0e:	697a      	ldr	r2, [r7, #20]
 8003d10:	23f0      	movs	r3, #240	; 0xf0
 8003d12:	039b      	lsls	r3, r3, #14
 8003d14:	401a      	ands	r2, r3
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	d001      	beq.n	8003d22 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e000      	b.n	8003d24 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8003d22:	2300      	movs	r3, #0
}
 8003d24:	0018      	movs	r0, r3
 8003d26:	46bd      	mov	sp, r7
 8003d28:	b008      	add	sp, #32
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	40021000 	.word	0x40021000

08003d30 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b084      	sub	sp, #16
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d101      	bne.n	8003d44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	e0bf      	b.n	8003ec4 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d44:	4b61      	ldr	r3, [pc, #388]	; (8003ecc <HAL_RCC_ClockConfig+0x19c>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	2201      	movs	r2, #1
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	683a      	ldr	r2, [r7, #0]
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d911      	bls.n	8003d76 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d52:	4b5e      	ldr	r3, [pc, #376]	; (8003ecc <HAL_RCC_ClockConfig+0x19c>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	2201      	movs	r2, #1
 8003d58:	4393      	bics	r3, r2
 8003d5a:	0019      	movs	r1, r3
 8003d5c:	4b5b      	ldr	r3, [pc, #364]	; (8003ecc <HAL_RCC_ClockConfig+0x19c>)
 8003d5e:	683a      	ldr	r2, [r7, #0]
 8003d60:	430a      	orrs	r2, r1
 8003d62:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d64:	4b59      	ldr	r3, [pc, #356]	; (8003ecc <HAL_RCC_ClockConfig+0x19c>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	2201      	movs	r2, #1
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	683a      	ldr	r2, [r7, #0]
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d001      	beq.n	8003d76 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e0a6      	b.n	8003ec4 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	2202      	movs	r2, #2
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	d015      	beq.n	8003dac <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	2204      	movs	r2, #4
 8003d86:	4013      	ands	r3, r2
 8003d88:	d006      	beq.n	8003d98 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003d8a:	4b51      	ldr	r3, [pc, #324]	; (8003ed0 <HAL_RCC_ClockConfig+0x1a0>)
 8003d8c:	685a      	ldr	r2, [r3, #4]
 8003d8e:	4b50      	ldr	r3, [pc, #320]	; (8003ed0 <HAL_RCC_ClockConfig+0x1a0>)
 8003d90:	21e0      	movs	r1, #224	; 0xe0
 8003d92:	00c9      	lsls	r1, r1, #3
 8003d94:	430a      	orrs	r2, r1
 8003d96:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d98:	4b4d      	ldr	r3, [pc, #308]	; (8003ed0 <HAL_RCC_ClockConfig+0x1a0>)
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	22f0      	movs	r2, #240	; 0xf0
 8003d9e:	4393      	bics	r3, r2
 8003da0:	0019      	movs	r1, r3
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	689a      	ldr	r2, [r3, #8]
 8003da6:	4b4a      	ldr	r3, [pc, #296]	; (8003ed0 <HAL_RCC_ClockConfig+0x1a0>)
 8003da8:	430a      	orrs	r2, r1
 8003daa:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2201      	movs	r2, #1
 8003db2:	4013      	ands	r3, r2
 8003db4:	d04c      	beq.n	8003e50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d107      	bne.n	8003dce <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dbe:	4b44      	ldr	r3, [pc, #272]	; (8003ed0 <HAL_RCC_ClockConfig+0x1a0>)
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	2380      	movs	r3, #128	; 0x80
 8003dc4:	029b      	lsls	r3, r3, #10
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	d120      	bne.n	8003e0c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e07a      	b.n	8003ec4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	d107      	bne.n	8003de6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dd6:	4b3e      	ldr	r3, [pc, #248]	; (8003ed0 <HAL_RCC_ClockConfig+0x1a0>)
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	2380      	movs	r3, #128	; 0x80
 8003ddc:	049b      	lsls	r3, r3, #18
 8003dde:	4013      	ands	r3, r2
 8003de0:	d114      	bne.n	8003e0c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e06e      	b.n	8003ec4 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	2b03      	cmp	r3, #3
 8003dec:	d107      	bne.n	8003dfe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003dee:	4b38      	ldr	r3, [pc, #224]	; (8003ed0 <HAL_RCC_ClockConfig+0x1a0>)
 8003df0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003df2:	2380      	movs	r3, #128	; 0x80
 8003df4:	025b      	lsls	r3, r3, #9
 8003df6:	4013      	ands	r3, r2
 8003df8:	d108      	bne.n	8003e0c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e062      	b.n	8003ec4 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dfe:	4b34      	ldr	r3, [pc, #208]	; (8003ed0 <HAL_RCC_ClockConfig+0x1a0>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	2202      	movs	r2, #2
 8003e04:	4013      	ands	r3, r2
 8003e06:	d101      	bne.n	8003e0c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e05b      	b.n	8003ec4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e0c:	4b30      	ldr	r3, [pc, #192]	; (8003ed0 <HAL_RCC_ClockConfig+0x1a0>)
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	2203      	movs	r2, #3
 8003e12:	4393      	bics	r3, r2
 8003e14:	0019      	movs	r1, r3
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	685a      	ldr	r2, [r3, #4]
 8003e1a:	4b2d      	ldr	r3, [pc, #180]	; (8003ed0 <HAL_RCC_ClockConfig+0x1a0>)
 8003e1c:	430a      	orrs	r2, r1
 8003e1e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e20:	f7fd ff52 	bl	8001cc8 <HAL_GetTick>
 8003e24:	0003      	movs	r3, r0
 8003e26:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e28:	e009      	b.n	8003e3e <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e2a:	f7fd ff4d 	bl	8001cc8 <HAL_GetTick>
 8003e2e:	0002      	movs	r2, r0
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	4a27      	ldr	r2, [pc, #156]	; (8003ed4 <HAL_RCC_ClockConfig+0x1a4>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d901      	bls.n	8003e3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	e042      	b.n	8003ec4 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e3e:	4b24      	ldr	r3, [pc, #144]	; (8003ed0 <HAL_RCC_ClockConfig+0x1a0>)
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	220c      	movs	r2, #12
 8003e44:	401a      	ands	r2, r3
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d1ec      	bne.n	8003e2a <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e50:	4b1e      	ldr	r3, [pc, #120]	; (8003ecc <HAL_RCC_ClockConfig+0x19c>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	2201      	movs	r2, #1
 8003e56:	4013      	ands	r3, r2
 8003e58:	683a      	ldr	r2, [r7, #0]
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d211      	bcs.n	8003e82 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e5e:	4b1b      	ldr	r3, [pc, #108]	; (8003ecc <HAL_RCC_ClockConfig+0x19c>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	2201      	movs	r2, #1
 8003e64:	4393      	bics	r3, r2
 8003e66:	0019      	movs	r1, r3
 8003e68:	4b18      	ldr	r3, [pc, #96]	; (8003ecc <HAL_RCC_ClockConfig+0x19c>)
 8003e6a:	683a      	ldr	r2, [r7, #0]
 8003e6c:	430a      	orrs	r2, r1
 8003e6e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e70:	4b16      	ldr	r3, [pc, #88]	; (8003ecc <HAL_RCC_ClockConfig+0x19c>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	2201      	movs	r2, #1
 8003e76:	4013      	ands	r3, r2
 8003e78:	683a      	ldr	r2, [r7, #0]
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d001      	beq.n	8003e82 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e020      	b.n	8003ec4 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	2204      	movs	r2, #4
 8003e88:	4013      	ands	r3, r2
 8003e8a:	d009      	beq.n	8003ea0 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003e8c:	4b10      	ldr	r3, [pc, #64]	; (8003ed0 <HAL_RCC_ClockConfig+0x1a0>)
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	4a11      	ldr	r2, [pc, #68]	; (8003ed8 <HAL_RCC_ClockConfig+0x1a8>)
 8003e92:	4013      	ands	r3, r2
 8003e94:	0019      	movs	r1, r3
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	68da      	ldr	r2, [r3, #12]
 8003e9a:	4b0d      	ldr	r3, [pc, #52]	; (8003ed0 <HAL_RCC_ClockConfig+0x1a0>)
 8003e9c:	430a      	orrs	r2, r1
 8003e9e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003ea0:	f000 f820 	bl	8003ee4 <HAL_RCC_GetSysClockFreq>
 8003ea4:	0001      	movs	r1, r0
 8003ea6:	4b0a      	ldr	r3, [pc, #40]	; (8003ed0 <HAL_RCC_ClockConfig+0x1a0>)
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	091b      	lsrs	r3, r3, #4
 8003eac:	220f      	movs	r2, #15
 8003eae:	4013      	ands	r3, r2
 8003eb0:	4a0a      	ldr	r2, [pc, #40]	; (8003edc <HAL_RCC_ClockConfig+0x1ac>)
 8003eb2:	5cd3      	ldrb	r3, [r2, r3]
 8003eb4:	000a      	movs	r2, r1
 8003eb6:	40da      	lsrs	r2, r3
 8003eb8:	4b09      	ldr	r3, [pc, #36]	; (8003ee0 <HAL_RCC_ClockConfig+0x1b0>)
 8003eba:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003ebc:	2000      	movs	r0, #0
 8003ebe:	f7fd febd 	bl	8001c3c <HAL_InitTick>
  
  return HAL_OK;
 8003ec2:	2300      	movs	r3, #0
}
 8003ec4:	0018      	movs	r0, r3
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	b004      	add	sp, #16
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	40022000 	.word	0x40022000
 8003ed0:	40021000 	.word	0x40021000
 8003ed4:	00001388 	.word	0x00001388
 8003ed8:	fffff8ff 	.word	0xfffff8ff
 8003edc:	08007a64 	.word	0x08007a64
 8003ee0:	20000204 	.word	0x20000204

08003ee4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ee4:	b590      	push	{r4, r7, lr}
 8003ee6:	b08f      	sub	sp, #60	; 0x3c
 8003ee8:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8003eea:	2314      	movs	r3, #20
 8003eec:	18fb      	adds	r3, r7, r3
 8003eee:	4a38      	ldr	r2, [pc, #224]	; (8003fd0 <HAL_RCC_GetSysClockFreq+0xec>)
 8003ef0:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003ef2:	c313      	stmia	r3!, {r0, r1, r4}
 8003ef4:	6812      	ldr	r2, [r2, #0]
 8003ef6:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8003ef8:	1d3b      	adds	r3, r7, #4
 8003efa:	4a36      	ldr	r2, [pc, #216]	; (8003fd4 <HAL_RCC_GetSysClockFreq+0xf0>)
 8003efc:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003efe:	c313      	stmia	r3!, {r0, r1, r4}
 8003f00:	6812      	ldr	r2, [r2, #0]
 8003f02:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003f04:	2300      	movs	r3, #0
 8003f06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f08:	2300      	movs	r3, #0
 8003f0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	637b      	str	r3, [r7, #52]	; 0x34
 8003f10:	2300      	movs	r3, #0
 8003f12:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8003f14:	2300      	movs	r3, #0
 8003f16:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8003f18:	4b2f      	ldr	r3, [pc, #188]	; (8003fd8 <HAL_RCC_GetSysClockFreq+0xf4>)
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f20:	220c      	movs	r2, #12
 8003f22:	4013      	ands	r3, r2
 8003f24:	2b0c      	cmp	r3, #12
 8003f26:	d047      	beq.n	8003fb8 <HAL_RCC_GetSysClockFreq+0xd4>
 8003f28:	d849      	bhi.n	8003fbe <HAL_RCC_GetSysClockFreq+0xda>
 8003f2a:	2b04      	cmp	r3, #4
 8003f2c:	d002      	beq.n	8003f34 <HAL_RCC_GetSysClockFreq+0x50>
 8003f2e:	2b08      	cmp	r3, #8
 8003f30:	d003      	beq.n	8003f3a <HAL_RCC_GetSysClockFreq+0x56>
 8003f32:	e044      	b.n	8003fbe <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003f34:	4b29      	ldr	r3, [pc, #164]	; (8003fdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003f36:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003f38:	e044      	b.n	8003fc4 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f3c:	0c9b      	lsrs	r3, r3, #18
 8003f3e:	220f      	movs	r2, #15
 8003f40:	4013      	ands	r3, r2
 8003f42:	2214      	movs	r2, #20
 8003f44:	18ba      	adds	r2, r7, r2
 8003f46:	5cd3      	ldrb	r3, [r2, r3]
 8003f48:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003f4a:	4b23      	ldr	r3, [pc, #140]	; (8003fd8 <HAL_RCC_GetSysClockFreq+0xf4>)
 8003f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f4e:	220f      	movs	r2, #15
 8003f50:	4013      	ands	r3, r2
 8003f52:	1d3a      	adds	r2, r7, #4
 8003f54:	5cd3      	ldrb	r3, [r2, r3]
 8003f56:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003f58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f5a:	23c0      	movs	r3, #192	; 0xc0
 8003f5c:	025b      	lsls	r3, r3, #9
 8003f5e:	401a      	ands	r2, r3
 8003f60:	2380      	movs	r3, #128	; 0x80
 8003f62:	025b      	lsls	r3, r3, #9
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d109      	bne.n	8003f7c <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003f68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f6a:	481c      	ldr	r0, [pc, #112]	; (8003fdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003f6c:	f7fc f8d6 	bl	800011c <__udivsi3>
 8003f70:	0003      	movs	r3, r0
 8003f72:	001a      	movs	r2, r3
 8003f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f76:	4353      	muls	r3, r2
 8003f78:	637b      	str	r3, [r7, #52]	; 0x34
 8003f7a:	e01a      	b.n	8003fb2 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8003f7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f7e:	23c0      	movs	r3, #192	; 0xc0
 8003f80:	025b      	lsls	r3, r3, #9
 8003f82:	401a      	ands	r2, r3
 8003f84:	23c0      	movs	r3, #192	; 0xc0
 8003f86:	025b      	lsls	r3, r3, #9
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d109      	bne.n	8003fa0 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003f8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f8e:	4814      	ldr	r0, [pc, #80]	; (8003fe0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003f90:	f7fc f8c4 	bl	800011c <__udivsi3>
 8003f94:	0003      	movs	r3, r0
 8003f96:	001a      	movs	r2, r3
 8003f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9a:	4353      	muls	r3, r2
 8003f9c:	637b      	str	r3, [r7, #52]	; 0x34
 8003f9e:	e008      	b.n	8003fb2 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003fa0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003fa2:	480e      	ldr	r0, [pc, #56]	; (8003fdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003fa4:	f7fc f8ba 	bl	800011c <__udivsi3>
 8003fa8:	0003      	movs	r3, r0
 8003faa:	001a      	movs	r2, r3
 8003fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fae:	4353      	muls	r3, r2
 8003fb0:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8003fb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fb4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003fb6:	e005      	b.n	8003fc4 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8003fb8:	4b09      	ldr	r3, [pc, #36]	; (8003fe0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003fba:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003fbc:	e002      	b.n	8003fc4 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003fbe:	4b07      	ldr	r3, [pc, #28]	; (8003fdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003fc0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003fc2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003fc6:	0018      	movs	r0, r3
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	b00f      	add	sp, #60	; 0x3c
 8003fcc:	bd90      	pop	{r4, r7, pc}
 8003fce:	46c0      	nop			; (mov r8, r8)
 8003fd0:	080051fc 	.word	0x080051fc
 8003fd4:	0800520c 	.word	0x0800520c
 8003fd8:	40021000 	.word	0x40021000
 8003fdc:	007a1200 	.word	0x007a1200
 8003fe0:	02dc6c00 	.word	0x02dc6c00

08003fe4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fe8:	4b02      	ldr	r3, [pc, #8]	; (8003ff4 <HAL_RCC_GetHCLKFreq+0x10>)
 8003fea:	681b      	ldr	r3, [r3, #0]
}
 8003fec:	0018      	movs	r0, r3
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}
 8003ff2:	46c0      	nop			; (mov r8, r8)
 8003ff4:	20000204 	.word	0x20000204

08003ff8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003ffc:	f7ff fff2 	bl	8003fe4 <HAL_RCC_GetHCLKFreq>
 8004000:	0001      	movs	r1, r0
 8004002:	4b06      	ldr	r3, [pc, #24]	; (800401c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	0a1b      	lsrs	r3, r3, #8
 8004008:	2207      	movs	r2, #7
 800400a:	4013      	ands	r3, r2
 800400c:	4a04      	ldr	r2, [pc, #16]	; (8004020 <HAL_RCC_GetPCLK1Freq+0x28>)
 800400e:	5cd3      	ldrb	r3, [r2, r3]
 8004010:	40d9      	lsrs	r1, r3
 8004012:	000b      	movs	r3, r1
}    
 8004014:	0018      	movs	r0, r3
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}
 800401a:	46c0      	nop			; (mov r8, r8)
 800401c:	40021000 	.word	0x40021000
 8004020:	08007a74 	.word	0x08007a74

08004024 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b086      	sub	sp, #24
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800402c:	2300      	movs	r3, #0
 800402e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8004030:	2300      	movs	r3, #0
 8004032:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	2380      	movs	r3, #128	; 0x80
 800403a:	025b      	lsls	r3, r3, #9
 800403c:	4013      	ands	r3, r2
 800403e:	d100      	bne.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8004040:	e08e      	b.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8004042:	2017      	movs	r0, #23
 8004044:	183b      	adds	r3, r7, r0
 8004046:	2200      	movs	r2, #0
 8004048:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800404a:	4b67      	ldr	r3, [pc, #412]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800404c:	69da      	ldr	r2, [r3, #28]
 800404e:	2380      	movs	r3, #128	; 0x80
 8004050:	055b      	lsls	r3, r3, #21
 8004052:	4013      	ands	r3, r2
 8004054:	d110      	bne.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004056:	4b64      	ldr	r3, [pc, #400]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004058:	69da      	ldr	r2, [r3, #28]
 800405a:	4b63      	ldr	r3, [pc, #396]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800405c:	2180      	movs	r1, #128	; 0x80
 800405e:	0549      	lsls	r1, r1, #21
 8004060:	430a      	orrs	r2, r1
 8004062:	61da      	str	r2, [r3, #28]
 8004064:	4b60      	ldr	r3, [pc, #384]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004066:	69da      	ldr	r2, [r3, #28]
 8004068:	2380      	movs	r3, #128	; 0x80
 800406a:	055b      	lsls	r3, r3, #21
 800406c:	4013      	ands	r3, r2
 800406e:	60bb      	str	r3, [r7, #8]
 8004070:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004072:	183b      	adds	r3, r7, r0
 8004074:	2201      	movs	r2, #1
 8004076:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004078:	4b5c      	ldr	r3, [pc, #368]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	2380      	movs	r3, #128	; 0x80
 800407e:	005b      	lsls	r3, r3, #1
 8004080:	4013      	ands	r3, r2
 8004082:	d11a      	bne.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004084:	4b59      	ldr	r3, [pc, #356]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	4b58      	ldr	r3, [pc, #352]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800408a:	2180      	movs	r1, #128	; 0x80
 800408c:	0049      	lsls	r1, r1, #1
 800408e:	430a      	orrs	r2, r1
 8004090:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004092:	f7fd fe19 	bl	8001cc8 <HAL_GetTick>
 8004096:	0003      	movs	r3, r0
 8004098:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800409a:	e008      	b.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800409c:	f7fd fe14 	bl	8001cc8 <HAL_GetTick>
 80040a0:	0002      	movs	r2, r0
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	2b64      	cmp	r3, #100	; 0x64
 80040a8:	d901      	bls.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80040aa:	2303      	movs	r3, #3
 80040ac:	e097      	b.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040ae:	4b4f      	ldr	r3, [pc, #316]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	2380      	movs	r3, #128	; 0x80
 80040b4:	005b      	lsls	r3, r3, #1
 80040b6:	4013      	ands	r3, r2
 80040b8:	d0f0      	beq.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80040ba:	4b4b      	ldr	r3, [pc, #300]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80040bc:	6a1a      	ldr	r2, [r3, #32]
 80040be:	23c0      	movs	r3, #192	; 0xc0
 80040c0:	009b      	lsls	r3, r3, #2
 80040c2:	4013      	ands	r3, r2
 80040c4:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d034      	beq.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x112>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	685a      	ldr	r2, [r3, #4]
 80040d0:	23c0      	movs	r3, #192	; 0xc0
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	4013      	ands	r3, r2
 80040d6:	68fa      	ldr	r2, [r7, #12]
 80040d8:	429a      	cmp	r2, r3
 80040da:	d02c      	beq.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80040dc:	4b42      	ldr	r3, [pc, #264]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80040de:	6a1b      	ldr	r3, [r3, #32]
 80040e0:	4a43      	ldr	r2, [pc, #268]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80040e2:	4013      	ands	r3, r2
 80040e4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80040e6:	4b40      	ldr	r3, [pc, #256]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80040e8:	6a1a      	ldr	r2, [r3, #32]
 80040ea:	4b3f      	ldr	r3, [pc, #252]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80040ec:	2180      	movs	r1, #128	; 0x80
 80040ee:	0249      	lsls	r1, r1, #9
 80040f0:	430a      	orrs	r2, r1
 80040f2:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80040f4:	4b3c      	ldr	r3, [pc, #240]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80040f6:	6a1a      	ldr	r2, [r3, #32]
 80040f8:	4b3b      	ldr	r3, [pc, #236]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80040fa:	493e      	ldr	r1, [pc, #248]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040fc:	400a      	ands	r2, r1
 80040fe:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004100:	4b39      	ldr	r3, [pc, #228]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004102:	68fa      	ldr	r2, [r7, #12]
 8004104:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2201      	movs	r2, #1
 800410a:	4013      	ands	r3, r2
 800410c:	d013      	beq.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800410e:	f7fd fddb 	bl	8001cc8 <HAL_GetTick>
 8004112:	0003      	movs	r3, r0
 8004114:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004116:	e009      	b.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004118:	f7fd fdd6 	bl	8001cc8 <HAL_GetTick>
 800411c:	0002      	movs	r2, r0
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	4a35      	ldr	r2, [pc, #212]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d901      	bls.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004128:	2303      	movs	r3, #3
 800412a:	e058      	b.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800412c:	4b2e      	ldr	r3, [pc, #184]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800412e:	6a1b      	ldr	r3, [r3, #32]
 8004130:	2202      	movs	r2, #2
 8004132:	4013      	ands	r3, r2
 8004134:	d0f0      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004136:	4b2c      	ldr	r3, [pc, #176]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004138:	6a1b      	ldr	r3, [r3, #32]
 800413a:	4a2d      	ldr	r2, [pc, #180]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800413c:	4013      	ands	r3, r2
 800413e:	0019      	movs	r1, r3
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	685a      	ldr	r2, [r3, #4]
 8004144:	4b28      	ldr	r3, [pc, #160]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004146:	430a      	orrs	r2, r1
 8004148:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800414a:	2317      	movs	r3, #23
 800414c:	18fb      	adds	r3, r7, r3
 800414e:	781b      	ldrb	r3, [r3, #0]
 8004150:	2b01      	cmp	r3, #1
 8004152:	d105      	bne.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004154:	4b24      	ldr	r3, [pc, #144]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004156:	69da      	ldr	r2, [r3, #28]
 8004158:	4b23      	ldr	r3, [pc, #140]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800415a:	4928      	ldr	r1, [pc, #160]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800415c:	400a      	ands	r2, r1
 800415e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	2201      	movs	r2, #1
 8004166:	4013      	ands	r3, r2
 8004168:	d009      	beq.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800416a:	4b1f      	ldr	r3, [pc, #124]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800416c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800416e:	2203      	movs	r2, #3
 8004170:	4393      	bics	r3, r2
 8004172:	0019      	movs	r1, r3
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	689a      	ldr	r2, [r3, #8]
 8004178:	4b1b      	ldr	r3, [pc, #108]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800417a:	430a      	orrs	r2, r1
 800417c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	2220      	movs	r2, #32
 8004184:	4013      	ands	r3, r2
 8004186:	d009      	beq.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004188:	4b17      	ldr	r3, [pc, #92]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800418a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800418c:	2210      	movs	r2, #16
 800418e:	4393      	bics	r3, r2
 8004190:	0019      	movs	r1, r3
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	68da      	ldr	r2, [r3, #12]
 8004196:	4b14      	ldr	r3, [pc, #80]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004198:	430a      	orrs	r2, r1
 800419a:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	2380      	movs	r3, #128	; 0x80
 80041a2:	029b      	lsls	r3, r3, #10
 80041a4:	4013      	ands	r3, r2
 80041a6:	d009      	beq.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80041a8:	4b0f      	ldr	r3, [pc, #60]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80041aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ac:	2280      	movs	r2, #128	; 0x80
 80041ae:	4393      	bics	r3, r2
 80041b0:	0019      	movs	r1, r3
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	695a      	ldr	r2, [r3, #20]
 80041b6:	4b0c      	ldr	r3, [pc, #48]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80041b8:	430a      	orrs	r2, r1
 80041ba:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	2380      	movs	r3, #128	; 0x80
 80041c2:	00db      	lsls	r3, r3, #3
 80041c4:	4013      	ands	r3, r2
 80041c6:	d009      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80041c8:	4b07      	ldr	r3, [pc, #28]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80041ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041cc:	2240      	movs	r2, #64	; 0x40
 80041ce:	4393      	bics	r3, r2
 80041d0:	0019      	movs	r1, r3
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	691a      	ldr	r2, [r3, #16]
 80041d6:	4b04      	ldr	r3, [pc, #16]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80041d8:	430a      	orrs	r2, r1
 80041da:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80041dc:	2300      	movs	r3, #0
}
 80041de:	0018      	movs	r0, r3
 80041e0:	46bd      	mov	sp, r7
 80041e2:	b006      	add	sp, #24
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	46c0      	nop			; (mov r8, r8)
 80041e8:	40021000 	.word	0x40021000
 80041ec:	40007000 	.word	0x40007000
 80041f0:	fffffcff 	.word	0xfffffcff
 80041f4:	fffeffff 	.word	0xfffeffff
 80041f8:	00001388 	.word	0x00001388
 80041fc:	efffffff 	.word	0xefffffff

08004200 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b082      	sub	sp, #8
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d101      	bne.n	8004212 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e044      	b.n	800429c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004216:	2b00      	cmp	r3, #0
 8004218:	d107      	bne.n	800422a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2274      	movs	r2, #116	; 0x74
 800421e:	2100      	movs	r1, #0
 8004220:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	0018      	movs	r0, r3
 8004226:	f7fd fc05 	bl	8001a34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2224      	movs	r2, #36	; 0x24
 800422e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	2101      	movs	r1, #1
 800423c:	438a      	bics	r2, r1
 800423e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	0018      	movs	r0, r3
 8004244:	f000 f830 	bl	80042a8 <UART_SetConfig>
 8004248:	0003      	movs	r3, r0
 800424a:	2b01      	cmp	r3, #1
 800424c:	d101      	bne.n	8004252 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e024      	b.n	800429c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004256:	2b00      	cmp	r3, #0
 8004258:	d003      	beq.n	8004262 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	0018      	movs	r0, r3
 800425e:	f000 f963 	bl	8004528 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	685a      	ldr	r2, [r3, #4]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	490d      	ldr	r1, [pc, #52]	; (80042a4 <HAL_UART_Init+0xa4>)
 800426e:	400a      	ands	r2, r1
 8004270:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	689a      	ldr	r2, [r3, #8]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	212a      	movs	r1, #42	; 0x2a
 800427e:	438a      	bics	r2, r1
 8004280:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	2101      	movs	r1, #1
 800428e:	430a      	orrs	r2, r1
 8004290:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	0018      	movs	r0, r3
 8004296:	f000 f9fb 	bl	8004690 <UART_CheckIdleState>
 800429a:	0003      	movs	r3, r0
}
 800429c:	0018      	movs	r0, r3
 800429e:	46bd      	mov	sp, r7
 80042a0:	b002      	add	sp, #8
 80042a2:	bd80      	pop	{r7, pc}
 80042a4:	ffffb7ff 	.word	0xffffb7ff

080042a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b088      	sub	sp, #32
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80042b0:	231e      	movs	r3, #30
 80042b2:	18fb      	adds	r3, r7, r3
 80042b4:	2200      	movs	r2, #0
 80042b6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	689a      	ldr	r2, [r3, #8]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	691b      	ldr	r3, [r3, #16]
 80042c0:	431a      	orrs	r2, r3
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	695b      	ldr	r3, [r3, #20]
 80042c6:	431a      	orrs	r2, r3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	69db      	ldr	r3, [r3, #28]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a8d      	ldr	r2, [pc, #564]	; (800450c <UART_SetConfig+0x264>)
 80042d8:	4013      	ands	r3, r2
 80042da:	0019      	movs	r1, r3
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	697a      	ldr	r2, [r7, #20]
 80042e2:	430a      	orrs	r2, r1
 80042e4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	4a88      	ldr	r2, [pc, #544]	; (8004510 <UART_SetConfig+0x268>)
 80042ee:	4013      	ands	r3, r2
 80042f0:	0019      	movs	r1, r3
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	68da      	ldr	r2, [r3, #12]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	430a      	orrs	r2, r1
 80042fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	699b      	ldr	r3, [r3, #24]
 8004302:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6a1b      	ldr	r3, [r3, #32]
 8004308:	697a      	ldr	r2, [r7, #20]
 800430a:	4313      	orrs	r3, r2
 800430c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	4a7f      	ldr	r2, [pc, #508]	; (8004514 <UART_SetConfig+0x26c>)
 8004316:	4013      	ands	r3, r2
 8004318:	0019      	movs	r1, r3
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	697a      	ldr	r2, [r7, #20]
 8004320:	430a      	orrs	r2, r1
 8004322:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a7b      	ldr	r2, [pc, #492]	; (8004518 <UART_SetConfig+0x270>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d127      	bne.n	800437e <UART_SetConfig+0xd6>
 800432e:	4b7b      	ldr	r3, [pc, #492]	; (800451c <UART_SetConfig+0x274>)
 8004330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004332:	2203      	movs	r2, #3
 8004334:	4013      	ands	r3, r2
 8004336:	2b03      	cmp	r3, #3
 8004338:	d00d      	beq.n	8004356 <UART_SetConfig+0xae>
 800433a:	d81b      	bhi.n	8004374 <UART_SetConfig+0xcc>
 800433c:	2b02      	cmp	r3, #2
 800433e:	d014      	beq.n	800436a <UART_SetConfig+0xc2>
 8004340:	d818      	bhi.n	8004374 <UART_SetConfig+0xcc>
 8004342:	2b00      	cmp	r3, #0
 8004344:	d002      	beq.n	800434c <UART_SetConfig+0xa4>
 8004346:	2b01      	cmp	r3, #1
 8004348:	d00a      	beq.n	8004360 <UART_SetConfig+0xb8>
 800434a:	e013      	b.n	8004374 <UART_SetConfig+0xcc>
 800434c:	231f      	movs	r3, #31
 800434e:	18fb      	adds	r3, r7, r3
 8004350:	2200      	movs	r2, #0
 8004352:	701a      	strb	r2, [r3, #0]
 8004354:	e021      	b.n	800439a <UART_SetConfig+0xf2>
 8004356:	231f      	movs	r3, #31
 8004358:	18fb      	adds	r3, r7, r3
 800435a:	2202      	movs	r2, #2
 800435c:	701a      	strb	r2, [r3, #0]
 800435e:	e01c      	b.n	800439a <UART_SetConfig+0xf2>
 8004360:	231f      	movs	r3, #31
 8004362:	18fb      	adds	r3, r7, r3
 8004364:	2204      	movs	r2, #4
 8004366:	701a      	strb	r2, [r3, #0]
 8004368:	e017      	b.n	800439a <UART_SetConfig+0xf2>
 800436a:	231f      	movs	r3, #31
 800436c:	18fb      	adds	r3, r7, r3
 800436e:	2208      	movs	r2, #8
 8004370:	701a      	strb	r2, [r3, #0]
 8004372:	e012      	b.n	800439a <UART_SetConfig+0xf2>
 8004374:	231f      	movs	r3, #31
 8004376:	18fb      	adds	r3, r7, r3
 8004378:	2210      	movs	r2, #16
 800437a:	701a      	strb	r2, [r3, #0]
 800437c:	e00d      	b.n	800439a <UART_SetConfig+0xf2>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a67      	ldr	r2, [pc, #412]	; (8004520 <UART_SetConfig+0x278>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d104      	bne.n	8004392 <UART_SetConfig+0xea>
 8004388:	231f      	movs	r3, #31
 800438a:	18fb      	adds	r3, r7, r3
 800438c:	2200      	movs	r2, #0
 800438e:	701a      	strb	r2, [r3, #0]
 8004390:	e003      	b.n	800439a <UART_SetConfig+0xf2>
 8004392:	231f      	movs	r3, #31
 8004394:	18fb      	adds	r3, r7, r3
 8004396:	2210      	movs	r2, #16
 8004398:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	69da      	ldr	r2, [r3, #28]
 800439e:	2380      	movs	r3, #128	; 0x80
 80043a0:	021b      	lsls	r3, r3, #8
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d15d      	bne.n	8004462 <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 80043a6:	231f      	movs	r3, #31
 80043a8:	18fb      	adds	r3, r7, r3
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	2b08      	cmp	r3, #8
 80043ae:	d015      	beq.n	80043dc <UART_SetConfig+0x134>
 80043b0:	dc18      	bgt.n	80043e4 <UART_SetConfig+0x13c>
 80043b2:	2b04      	cmp	r3, #4
 80043b4:	d00d      	beq.n	80043d2 <UART_SetConfig+0x12a>
 80043b6:	dc15      	bgt.n	80043e4 <UART_SetConfig+0x13c>
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d002      	beq.n	80043c2 <UART_SetConfig+0x11a>
 80043bc:	2b02      	cmp	r3, #2
 80043be:	d005      	beq.n	80043cc <UART_SetConfig+0x124>
 80043c0:	e010      	b.n	80043e4 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043c2:	f7ff fe19 	bl	8003ff8 <HAL_RCC_GetPCLK1Freq>
 80043c6:	0003      	movs	r3, r0
 80043c8:	61bb      	str	r3, [r7, #24]
        break;
 80043ca:	e012      	b.n	80043f2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043cc:	4b55      	ldr	r3, [pc, #340]	; (8004524 <UART_SetConfig+0x27c>)
 80043ce:	61bb      	str	r3, [r7, #24]
        break;
 80043d0:	e00f      	b.n	80043f2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043d2:	f7ff fd87 	bl	8003ee4 <HAL_RCC_GetSysClockFreq>
 80043d6:	0003      	movs	r3, r0
 80043d8:	61bb      	str	r3, [r7, #24]
        break;
 80043da:	e00a      	b.n	80043f2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043dc:	2380      	movs	r3, #128	; 0x80
 80043de:	021b      	lsls	r3, r3, #8
 80043e0:	61bb      	str	r3, [r7, #24]
        break;
 80043e2:	e006      	b.n	80043f2 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 80043e4:	2300      	movs	r3, #0
 80043e6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80043e8:	231e      	movs	r3, #30
 80043ea:	18fb      	adds	r3, r7, r3
 80043ec:	2201      	movs	r2, #1
 80043ee:	701a      	strb	r2, [r3, #0]
        break;
 80043f0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80043f2:	69bb      	ldr	r3, [r7, #24]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d100      	bne.n	80043fa <UART_SetConfig+0x152>
 80043f8:	e07b      	b.n	80044f2 <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80043fa:	69bb      	ldr	r3, [r7, #24]
 80043fc:	005a      	lsls	r2, r3, #1
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	085b      	lsrs	r3, r3, #1
 8004404:	18d2      	adds	r2, r2, r3
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	0019      	movs	r1, r3
 800440c:	0010      	movs	r0, r2
 800440e:	f7fb fe85 	bl	800011c <__udivsi3>
 8004412:	0003      	movs	r3, r0
 8004414:	b29b      	uxth	r3, r3
 8004416:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	2b0f      	cmp	r3, #15
 800441c:	d91c      	bls.n	8004458 <UART_SetConfig+0x1b0>
 800441e:	693a      	ldr	r2, [r7, #16]
 8004420:	2380      	movs	r3, #128	; 0x80
 8004422:	025b      	lsls	r3, r3, #9
 8004424:	429a      	cmp	r2, r3
 8004426:	d217      	bcs.n	8004458 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	b29a      	uxth	r2, r3
 800442c:	200e      	movs	r0, #14
 800442e:	183b      	adds	r3, r7, r0
 8004430:	210f      	movs	r1, #15
 8004432:	438a      	bics	r2, r1
 8004434:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	085b      	lsrs	r3, r3, #1
 800443a:	b29b      	uxth	r3, r3
 800443c:	2207      	movs	r2, #7
 800443e:	4013      	ands	r3, r2
 8004440:	b299      	uxth	r1, r3
 8004442:	183b      	adds	r3, r7, r0
 8004444:	183a      	adds	r2, r7, r0
 8004446:	8812      	ldrh	r2, [r2, #0]
 8004448:	430a      	orrs	r2, r1
 800444a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	183a      	adds	r2, r7, r0
 8004452:	8812      	ldrh	r2, [r2, #0]
 8004454:	60da      	str	r2, [r3, #12]
 8004456:	e04c      	b.n	80044f2 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8004458:	231e      	movs	r3, #30
 800445a:	18fb      	adds	r3, r7, r3
 800445c:	2201      	movs	r2, #1
 800445e:	701a      	strb	r2, [r3, #0]
 8004460:	e047      	b.n	80044f2 <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004462:	231f      	movs	r3, #31
 8004464:	18fb      	adds	r3, r7, r3
 8004466:	781b      	ldrb	r3, [r3, #0]
 8004468:	2b08      	cmp	r3, #8
 800446a:	d015      	beq.n	8004498 <UART_SetConfig+0x1f0>
 800446c:	dc18      	bgt.n	80044a0 <UART_SetConfig+0x1f8>
 800446e:	2b04      	cmp	r3, #4
 8004470:	d00d      	beq.n	800448e <UART_SetConfig+0x1e6>
 8004472:	dc15      	bgt.n	80044a0 <UART_SetConfig+0x1f8>
 8004474:	2b00      	cmp	r3, #0
 8004476:	d002      	beq.n	800447e <UART_SetConfig+0x1d6>
 8004478:	2b02      	cmp	r3, #2
 800447a:	d005      	beq.n	8004488 <UART_SetConfig+0x1e0>
 800447c:	e010      	b.n	80044a0 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800447e:	f7ff fdbb 	bl	8003ff8 <HAL_RCC_GetPCLK1Freq>
 8004482:	0003      	movs	r3, r0
 8004484:	61bb      	str	r3, [r7, #24]
        break;
 8004486:	e012      	b.n	80044ae <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004488:	4b26      	ldr	r3, [pc, #152]	; (8004524 <UART_SetConfig+0x27c>)
 800448a:	61bb      	str	r3, [r7, #24]
        break;
 800448c:	e00f      	b.n	80044ae <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800448e:	f7ff fd29 	bl	8003ee4 <HAL_RCC_GetSysClockFreq>
 8004492:	0003      	movs	r3, r0
 8004494:	61bb      	str	r3, [r7, #24]
        break;
 8004496:	e00a      	b.n	80044ae <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004498:	2380      	movs	r3, #128	; 0x80
 800449a:	021b      	lsls	r3, r3, #8
 800449c:	61bb      	str	r3, [r7, #24]
        break;
 800449e:	e006      	b.n	80044ae <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 80044a0:	2300      	movs	r3, #0
 80044a2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80044a4:	231e      	movs	r3, #30
 80044a6:	18fb      	adds	r3, r7, r3
 80044a8:	2201      	movs	r2, #1
 80044aa:	701a      	strb	r2, [r3, #0]
        break;
 80044ac:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80044ae:	69bb      	ldr	r3, [r7, #24]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d01e      	beq.n	80044f2 <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	085a      	lsrs	r2, r3, #1
 80044ba:	69bb      	ldr	r3, [r7, #24]
 80044bc:	18d2      	adds	r2, r2, r3
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	0019      	movs	r1, r3
 80044c4:	0010      	movs	r0, r2
 80044c6:	f7fb fe29 	bl	800011c <__udivsi3>
 80044ca:	0003      	movs	r3, r0
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	2b0f      	cmp	r3, #15
 80044d4:	d909      	bls.n	80044ea <UART_SetConfig+0x242>
 80044d6:	693a      	ldr	r2, [r7, #16]
 80044d8:	2380      	movs	r3, #128	; 0x80
 80044da:	025b      	lsls	r3, r3, #9
 80044dc:	429a      	cmp	r2, r3
 80044de:	d204      	bcs.n	80044ea <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	693a      	ldr	r2, [r7, #16]
 80044e6:	60da      	str	r2, [r3, #12]
 80044e8:	e003      	b.n	80044f2 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 80044ea:	231e      	movs	r3, #30
 80044ec:	18fb      	adds	r3, r7, r3
 80044ee:	2201      	movs	r2, #1
 80044f0:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2200      	movs	r2, #0
 80044f6:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2200      	movs	r2, #0
 80044fc:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80044fe:	231e      	movs	r3, #30
 8004500:	18fb      	adds	r3, r7, r3
 8004502:	781b      	ldrb	r3, [r3, #0]
}
 8004504:	0018      	movs	r0, r3
 8004506:	46bd      	mov	sp, r7
 8004508:	b008      	add	sp, #32
 800450a:	bd80      	pop	{r7, pc}
 800450c:	efff69f3 	.word	0xefff69f3
 8004510:	ffffcfff 	.word	0xffffcfff
 8004514:	fffff4ff 	.word	0xfffff4ff
 8004518:	40013800 	.word	0x40013800
 800451c:	40021000 	.word	0x40021000
 8004520:	40004400 	.word	0x40004400
 8004524:	007a1200 	.word	0x007a1200

08004528 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b082      	sub	sp, #8
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004534:	2201      	movs	r2, #1
 8004536:	4013      	ands	r3, r2
 8004538:	d00b      	beq.n	8004552 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	4a4a      	ldr	r2, [pc, #296]	; (800466c <UART_AdvFeatureConfig+0x144>)
 8004542:	4013      	ands	r3, r2
 8004544:	0019      	movs	r1, r3
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	430a      	orrs	r2, r1
 8004550:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004556:	2202      	movs	r2, #2
 8004558:	4013      	ands	r3, r2
 800455a:	d00b      	beq.n	8004574 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	4a43      	ldr	r2, [pc, #268]	; (8004670 <UART_AdvFeatureConfig+0x148>)
 8004564:	4013      	ands	r3, r2
 8004566:	0019      	movs	r1, r3
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	430a      	orrs	r2, r1
 8004572:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004578:	2204      	movs	r2, #4
 800457a:	4013      	ands	r3, r2
 800457c:	d00b      	beq.n	8004596 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	4a3b      	ldr	r2, [pc, #236]	; (8004674 <UART_AdvFeatureConfig+0x14c>)
 8004586:	4013      	ands	r3, r2
 8004588:	0019      	movs	r1, r3
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	430a      	orrs	r2, r1
 8004594:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459a:	2208      	movs	r2, #8
 800459c:	4013      	ands	r3, r2
 800459e:	d00b      	beq.n	80045b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	4a34      	ldr	r2, [pc, #208]	; (8004678 <UART_AdvFeatureConfig+0x150>)
 80045a8:	4013      	ands	r3, r2
 80045aa:	0019      	movs	r1, r3
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	430a      	orrs	r2, r1
 80045b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045bc:	2210      	movs	r2, #16
 80045be:	4013      	ands	r3, r2
 80045c0:	d00b      	beq.n	80045da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	4a2c      	ldr	r2, [pc, #176]	; (800467c <UART_AdvFeatureConfig+0x154>)
 80045ca:	4013      	ands	r3, r2
 80045cc:	0019      	movs	r1, r3
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	430a      	orrs	r2, r1
 80045d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045de:	2220      	movs	r2, #32
 80045e0:	4013      	ands	r3, r2
 80045e2:	d00b      	beq.n	80045fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	4a25      	ldr	r2, [pc, #148]	; (8004680 <UART_AdvFeatureConfig+0x158>)
 80045ec:	4013      	ands	r3, r2
 80045ee:	0019      	movs	r1, r3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	430a      	orrs	r2, r1
 80045fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004600:	2240      	movs	r2, #64	; 0x40
 8004602:	4013      	ands	r3, r2
 8004604:	d01d      	beq.n	8004642 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	4a1d      	ldr	r2, [pc, #116]	; (8004684 <UART_AdvFeatureConfig+0x15c>)
 800460e:	4013      	ands	r3, r2
 8004610:	0019      	movs	r1, r3
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	430a      	orrs	r2, r1
 800461c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004622:	2380      	movs	r3, #128	; 0x80
 8004624:	035b      	lsls	r3, r3, #13
 8004626:	429a      	cmp	r2, r3
 8004628:	d10b      	bne.n	8004642 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	4a15      	ldr	r2, [pc, #84]	; (8004688 <UART_AdvFeatureConfig+0x160>)
 8004632:	4013      	ands	r3, r2
 8004634:	0019      	movs	r1, r3
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	430a      	orrs	r2, r1
 8004640:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004646:	2280      	movs	r2, #128	; 0x80
 8004648:	4013      	ands	r3, r2
 800464a:	d00b      	beq.n	8004664 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	4a0e      	ldr	r2, [pc, #56]	; (800468c <UART_AdvFeatureConfig+0x164>)
 8004654:	4013      	ands	r3, r2
 8004656:	0019      	movs	r1, r3
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	430a      	orrs	r2, r1
 8004662:	605a      	str	r2, [r3, #4]
  }
}
 8004664:	46c0      	nop			; (mov r8, r8)
 8004666:	46bd      	mov	sp, r7
 8004668:	b002      	add	sp, #8
 800466a:	bd80      	pop	{r7, pc}
 800466c:	fffdffff 	.word	0xfffdffff
 8004670:	fffeffff 	.word	0xfffeffff
 8004674:	fffbffff 	.word	0xfffbffff
 8004678:	ffff7fff 	.word	0xffff7fff
 800467c:	ffffefff 	.word	0xffffefff
 8004680:	ffffdfff 	.word	0xffffdfff
 8004684:	ffefffff 	.word	0xffefffff
 8004688:	ff9fffff 	.word	0xff9fffff
 800468c:	fff7ffff 	.word	0xfff7ffff

08004690 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b086      	sub	sp, #24
 8004694:	af02      	add	r7, sp, #8
 8004696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2280      	movs	r2, #128	; 0x80
 800469c:	2100      	movs	r1, #0
 800469e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80046a0:	f7fd fb12 	bl	8001cc8 <HAL_GetTick>
 80046a4:	0003      	movs	r3, r0
 80046a6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	2208      	movs	r2, #8
 80046b0:	4013      	ands	r3, r2
 80046b2:	2b08      	cmp	r3, #8
 80046b4:	d10c      	bne.n	80046d0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2280      	movs	r2, #128	; 0x80
 80046ba:	0391      	lsls	r1, r2, #14
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	4a17      	ldr	r2, [pc, #92]	; (800471c <UART_CheckIdleState+0x8c>)
 80046c0:	9200      	str	r2, [sp, #0]
 80046c2:	2200      	movs	r2, #0
 80046c4:	f000 f82c 	bl	8004720 <UART_WaitOnFlagUntilTimeout>
 80046c8:	1e03      	subs	r3, r0, #0
 80046ca:	d001      	beq.n	80046d0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046cc:	2303      	movs	r3, #3
 80046ce:	e021      	b.n	8004714 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	2204      	movs	r2, #4
 80046d8:	4013      	ands	r3, r2
 80046da:	2b04      	cmp	r3, #4
 80046dc:	d10c      	bne.n	80046f8 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2280      	movs	r2, #128	; 0x80
 80046e2:	03d1      	lsls	r1, r2, #15
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	4a0d      	ldr	r2, [pc, #52]	; (800471c <UART_CheckIdleState+0x8c>)
 80046e8:	9200      	str	r2, [sp, #0]
 80046ea:	2200      	movs	r2, #0
 80046ec:	f000 f818 	bl	8004720 <UART_WaitOnFlagUntilTimeout>
 80046f0:	1e03      	subs	r3, r0, #0
 80046f2:	d001      	beq.n	80046f8 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046f4:	2303      	movs	r3, #3
 80046f6:	e00d      	b.n	8004714 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2220      	movs	r2, #32
 80046fc:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2220      	movs	r2, #32
 8004702:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2200      	movs	r2, #0
 8004708:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2274      	movs	r2, #116	; 0x74
 800470e:	2100      	movs	r1, #0
 8004710:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004712:	2300      	movs	r3, #0
}
 8004714:	0018      	movs	r0, r3
 8004716:	46bd      	mov	sp, r7
 8004718:	b004      	add	sp, #16
 800471a:	bd80      	pop	{r7, pc}
 800471c:	01ffffff 	.word	0x01ffffff

08004720 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b094      	sub	sp, #80	; 0x50
 8004724:	af00      	add	r7, sp, #0
 8004726:	60f8      	str	r0, [r7, #12]
 8004728:	60b9      	str	r1, [r7, #8]
 800472a:	603b      	str	r3, [r7, #0]
 800472c:	1dfb      	adds	r3, r7, #7
 800472e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004730:	e0a3      	b.n	800487a <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004732:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004734:	3301      	adds	r3, #1
 8004736:	d100      	bne.n	800473a <UART_WaitOnFlagUntilTimeout+0x1a>
 8004738:	e09f      	b.n	800487a <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800473a:	f7fd fac5 	bl	8001cc8 <HAL_GetTick>
 800473e:	0002      	movs	r2, r0
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	1ad3      	subs	r3, r2, r3
 8004744:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004746:	429a      	cmp	r2, r3
 8004748:	d302      	bcc.n	8004750 <UART_WaitOnFlagUntilTimeout+0x30>
 800474a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800474c:	2b00      	cmp	r3, #0
 800474e:	d13d      	bne.n	80047cc <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004750:	f3ef 8310 	mrs	r3, PRIMASK
 8004754:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004756:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004758:	647b      	str	r3, [r7, #68]	; 0x44
 800475a:	2301      	movs	r3, #1
 800475c:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800475e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004760:	f383 8810 	msr	PRIMASK, r3
}
 8004764:	46c0      	nop			; (mov r8, r8)
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	494c      	ldr	r1, [pc, #304]	; (80048a4 <UART_WaitOnFlagUntilTimeout+0x184>)
 8004772:	400a      	ands	r2, r1
 8004774:	601a      	str	r2, [r3, #0]
 8004776:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004778:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800477a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800477c:	f383 8810 	msr	PRIMASK, r3
}
 8004780:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004782:	f3ef 8310 	mrs	r3, PRIMASK
 8004786:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8004788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800478a:	643b      	str	r3, [r7, #64]	; 0x40
 800478c:	2301      	movs	r3, #1
 800478e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004792:	f383 8810 	msr	PRIMASK, r3
}
 8004796:	46c0      	nop			; (mov r8, r8)
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	689a      	ldr	r2, [r3, #8]
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	2101      	movs	r1, #1
 80047a4:	438a      	bics	r2, r1
 80047a6:	609a      	str	r2, [r3, #8]
 80047a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047ae:	f383 8810 	msr	PRIMASK, r3
}
 80047b2:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2220      	movs	r2, #32
 80047b8:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2220      	movs	r2, #32
 80047be:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2274      	movs	r2, #116	; 0x74
 80047c4:	2100      	movs	r1, #0
 80047c6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80047c8:	2303      	movs	r3, #3
 80047ca:	e067      	b.n	800489c <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	2204      	movs	r2, #4
 80047d4:	4013      	ands	r3, r2
 80047d6:	d050      	beq.n	800487a <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	69da      	ldr	r2, [r3, #28]
 80047de:	2380      	movs	r3, #128	; 0x80
 80047e0:	011b      	lsls	r3, r3, #4
 80047e2:	401a      	ands	r2, r3
 80047e4:	2380      	movs	r3, #128	; 0x80
 80047e6:	011b      	lsls	r3, r3, #4
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d146      	bne.n	800487a <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	2280      	movs	r2, #128	; 0x80
 80047f2:	0112      	lsls	r2, r2, #4
 80047f4:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047f6:	f3ef 8310 	mrs	r3, PRIMASK
 80047fa:	613b      	str	r3, [r7, #16]
  return(result);
 80047fc:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004800:	2301      	movs	r3, #1
 8004802:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	f383 8810 	msr	PRIMASK, r3
}
 800480a:	46c0      	nop			; (mov r8, r8)
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4923      	ldr	r1, [pc, #140]	; (80048a4 <UART_WaitOnFlagUntilTimeout+0x184>)
 8004818:	400a      	ands	r2, r1
 800481a:	601a      	str	r2, [r3, #0]
 800481c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800481e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004820:	69bb      	ldr	r3, [r7, #24]
 8004822:	f383 8810 	msr	PRIMASK, r3
}
 8004826:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004828:	f3ef 8310 	mrs	r3, PRIMASK
 800482c:	61fb      	str	r3, [r7, #28]
  return(result);
 800482e:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004830:	64bb      	str	r3, [r7, #72]	; 0x48
 8004832:	2301      	movs	r3, #1
 8004834:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004836:	6a3b      	ldr	r3, [r7, #32]
 8004838:	f383 8810 	msr	PRIMASK, r3
}
 800483c:	46c0      	nop			; (mov r8, r8)
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	689a      	ldr	r2, [r3, #8]
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	2101      	movs	r1, #1
 800484a:	438a      	bics	r2, r1
 800484c:	609a      	str	r2, [r3, #8]
 800484e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004850:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004854:	f383 8810 	msr	PRIMASK, r3
}
 8004858:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2220      	movs	r2, #32
 800485e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2220      	movs	r2, #32
 8004864:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2280      	movs	r2, #128	; 0x80
 800486a:	2120      	movs	r1, #32
 800486c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2274      	movs	r2, #116	; 0x74
 8004872:	2100      	movs	r1, #0
 8004874:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	e010      	b.n	800489c <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	69db      	ldr	r3, [r3, #28]
 8004880:	68ba      	ldr	r2, [r7, #8]
 8004882:	4013      	ands	r3, r2
 8004884:	68ba      	ldr	r2, [r7, #8]
 8004886:	1ad3      	subs	r3, r2, r3
 8004888:	425a      	negs	r2, r3
 800488a:	4153      	adcs	r3, r2
 800488c:	b2db      	uxtb	r3, r3
 800488e:	001a      	movs	r2, r3
 8004890:	1dfb      	adds	r3, r7, #7
 8004892:	781b      	ldrb	r3, [r3, #0]
 8004894:	429a      	cmp	r2, r3
 8004896:	d100      	bne.n	800489a <UART_WaitOnFlagUntilTimeout+0x17a>
 8004898:	e74b      	b.n	8004732 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800489a:	2300      	movs	r3, #0
}
 800489c:	0018      	movs	r0, r3
 800489e:	46bd      	mov	sp, r7
 80048a0:	b014      	add	sp, #80	; 0x50
 80048a2:	bd80      	pop	{r7, pc}
 80048a4:	fffffe5f 	.word	0xfffffe5f

080048a8 <__errno>:
 80048a8:	4b01      	ldr	r3, [pc, #4]	; (80048b0 <__errno+0x8>)
 80048aa:	6818      	ldr	r0, [r3, #0]
 80048ac:	4770      	bx	lr
 80048ae:	46c0      	nop			; (mov r8, r8)
 80048b0:	20000210 	.word	0x20000210

080048b4 <__libc_init_array>:
 80048b4:	b570      	push	{r4, r5, r6, lr}
 80048b6:	2600      	movs	r6, #0
 80048b8:	4d0c      	ldr	r5, [pc, #48]	; (80048ec <__libc_init_array+0x38>)
 80048ba:	4c0d      	ldr	r4, [pc, #52]	; (80048f0 <__libc_init_array+0x3c>)
 80048bc:	1b64      	subs	r4, r4, r5
 80048be:	10a4      	asrs	r4, r4, #2
 80048c0:	42a6      	cmp	r6, r4
 80048c2:	d109      	bne.n	80048d8 <__libc_init_array+0x24>
 80048c4:	2600      	movs	r6, #0
 80048c6:	f000 fc5b 	bl	8005180 <_init>
 80048ca:	4d0a      	ldr	r5, [pc, #40]	; (80048f4 <__libc_init_array+0x40>)
 80048cc:	4c0a      	ldr	r4, [pc, #40]	; (80048f8 <__libc_init_array+0x44>)
 80048ce:	1b64      	subs	r4, r4, r5
 80048d0:	10a4      	asrs	r4, r4, #2
 80048d2:	42a6      	cmp	r6, r4
 80048d4:	d105      	bne.n	80048e2 <__libc_init_array+0x2e>
 80048d6:	bd70      	pop	{r4, r5, r6, pc}
 80048d8:	00b3      	lsls	r3, r6, #2
 80048da:	58eb      	ldr	r3, [r5, r3]
 80048dc:	4798      	blx	r3
 80048de:	3601      	adds	r6, #1
 80048e0:	e7ee      	b.n	80048c0 <__libc_init_array+0xc>
 80048e2:	00b3      	lsls	r3, r6, #2
 80048e4:	58eb      	ldr	r3, [r5, r3]
 80048e6:	4798      	blx	r3
 80048e8:	3601      	adds	r6, #1
 80048ea:	e7f2      	b.n	80048d2 <__libc_init_array+0x1e>
 80048ec:	08007ab0 	.word	0x08007ab0
 80048f0:	08007ab0 	.word	0x08007ab0
 80048f4:	08007ab0 	.word	0x08007ab0
 80048f8:	08007ab4 	.word	0x08007ab4

080048fc <memcpy>:
 80048fc:	2300      	movs	r3, #0
 80048fe:	b510      	push	{r4, lr}
 8004900:	429a      	cmp	r2, r3
 8004902:	d100      	bne.n	8004906 <memcpy+0xa>
 8004904:	bd10      	pop	{r4, pc}
 8004906:	5ccc      	ldrb	r4, [r1, r3]
 8004908:	54c4      	strb	r4, [r0, r3]
 800490a:	3301      	adds	r3, #1
 800490c:	e7f8      	b.n	8004900 <memcpy+0x4>

0800490e <memset>:
 800490e:	0003      	movs	r3, r0
 8004910:	1882      	adds	r2, r0, r2
 8004912:	4293      	cmp	r3, r2
 8004914:	d100      	bne.n	8004918 <memset+0xa>
 8004916:	4770      	bx	lr
 8004918:	7019      	strb	r1, [r3, #0]
 800491a:	3301      	adds	r3, #1
 800491c:	e7f9      	b.n	8004912 <memset+0x4>
	...

08004920 <sniprintf>:
 8004920:	b40c      	push	{r2, r3}
 8004922:	b530      	push	{r4, r5, lr}
 8004924:	4b17      	ldr	r3, [pc, #92]	; (8004984 <sniprintf+0x64>)
 8004926:	000c      	movs	r4, r1
 8004928:	681d      	ldr	r5, [r3, #0]
 800492a:	b09d      	sub	sp, #116	; 0x74
 800492c:	2900      	cmp	r1, #0
 800492e:	da08      	bge.n	8004942 <sniprintf+0x22>
 8004930:	238b      	movs	r3, #139	; 0x8b
 8004932:	2001      	movs	r0, #1
 8004934:	602b      	str	r3, [r5, #0]
 8004936:	4240      	negs	r0, r0
 8004938:	b01d      	add	sp, #116	; 0x74
 800493a:	bc30      	pop	{r4, r5}
 800493c:	bc08      	pop	{r3}
 800493e:	b002      	add	sp, #8
 8004940:	4718      	bx	r3
 8004942:	2382      	movs	r3, #130	; 0x82
 8004944:	466a      	mov	r2, sp
 8004946:	009b      	lsls	r3, r3, #2
 8004948:	8293      	strh	r3, [r2, #20]
 800494a:	2300      	movs	r3, #0
 800494c:	9002      	str	r0, [sp, #8]
 800494e:	9006      	str	r0, [sp, #24]
 8004950:	4299      	cmp	r1, r3
 8004952:	d000      	beq.n	8004956 <sniprintf+0x36>
 8004954:	1e4b      	subs	r3, r1, #1
 8004956:	9304      	str	r3, [sp, #16]
 8004958:	9307      	str	r3, [sp, #28]
 800495a:	2301      	movs	r3, #1
 800495c:	466a      	mov	r2, sp
 800495e:	425b      	negs	r3, r3
 8004960:	82d3      	strh	r3, [r2, #22]
 8004962:	0028      	movs	r0, r5
 8004964:	ab21      	add	r3, sp, #132	; 0x84
 8004966:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004968:	a902      	add	r1, sp, #8
 800496a:	9301      	str	r3, [sp, #4]
 800496c:	f000 f86e 	bl	8004a4c <_svfiprintf_r>
 8004970:	1c43      	adds	r3, r0, #1
 8004972:	da01      	bge.n	8004978 <sniprintf+0x58>
 8004974:	238b      	movs	r3, #139	; 0x8b
 8004976:	602b      	str	r3, [r5, #0]
 8004978:	2c00      	cmp	r4, #0
 800497a:	d0dd      	beq.n	8004938 <sniprintf+0x18>
 800497c:	2300      	movs	r3, #0
 800497e:	9a02      	ldr	r2, [sp, #8]
 8004980:	7013      	strb	r3, [r2, #0]
 8004982:	e7d9      	b.n	8004938 <sniprintf+0x18>
 8004984:	20000210 	.word	0x20000210

08004988 <__ssputs_r>:
 8004988:	b5f0      	push	{r4, r5, r6, r7, lr}
 800498a:	688e      	ldr	r6, [r1, #8]
 800498c:	b085      	sub	sp, #20
 800498e:	0007      	movs	r7, r0
 8004990:	000c      	movs	r4, r1
 8004992:	9203      	str	r2, [sp, #12]
 8004994:	9301      	str	r3, [sp, #4]
 8004996:	429e      	cmp	r6, r3
 8004998:	d83c      	bhi.n	8004a14 <__ssputs_r+0x8c>
 800499a:	2390      	movs	r3, #144	; 0x90
 800499c:	898a      	ldrh	r2, [r1, #12]
 800499e:	00db      	lsls	r3, r3, #3
 80049a0:	421a      	tst	r2, r3
 80049a2:	d034      	beq.n	8004a0e <__ssputs_r+0x86>
 80049a4:	2503      	movs	r5, #3
 80049a6:	6909      	ldr	r1, [r1, #16]
 80049a8:	6823      	ldr	r3, [r4, #0]
 80049aa:	1a5b      	subs	r3, r3, r1
 80049ac:	9302      	str	r3, [sp, #8]
 80049ae:	6963      	ldr	r3, [r4, #20]
 80049b0:	9802      	ldr	r0, [sp, #8]
 80049b2:	435d      	muls	r5, r3
 80049b4:	0feb      	lsrs	r3, r5, #31
 80049b6:	195d      	adds	r5, r3, r5
 80049b8:	9b01      	ldr	r3, [sp, #4]
 80049ba:	106d      	asrs	r5, r5, #1
 80049bc:	3301      	adds	r3, #1
 80049be:	181b      	adds	r3, r3, r0
 80049c0:	42ab      	cmp	r3, r5
 80049c2:	d900      	bls.n	80049c6 <__ssputs_r+0x3e>
 80049c4:	001d      	movs	r5, r3
 80049c6:	0553      	lsls	r3, r2, #21
 80049c8:	d532      	bpl.n	8004a30 <__ssputs_r+0xa8>
 80049ca:	0029      	movs	r1, r5
 80049cc:	0038      	movs	r0, r7
 80049ce:	f000 fb27 	bl	8005020 <_malloc_r>
 80049d2:	1e06      	subs	r6, r0, #0
 80049d4:	d109      	bne.n	80049ea <__ssputs_r+0x62>
 80049d6:	230c      	movs	r3, #12
 80049d8:	603b      	str	r3, [r7, #0]
 80049da:	2340      	movs	r3, #64	; 0x40
 80049dc:	2001      	movs	r0, #1
 80049de:	89a2      	ldrh	r2, [r4, #12]
 80049e0:	4240      	negs	r0, r0
 80049e2:	4313      	orrs	r3, r2
 80049e4:	81a3      	strh	r3, [r4, #12]
 80049e6:	b005      	add	sp, #20
 80049e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049ea:	9a02      	ldr	r2, [sp, #8]
 80049ec:	6921      	ldr	r1, [r4, #16]
 80049ee:	f7ff ff85 	bl	80048fc <memcpy>
 80049f2:	89a3      	ldrh	r3, [r4, #12]
 80049f4:	4a14      	ldr	r2, [pc, #80]	; (8004a48 <__ssputs_r+0xc0>)
 80049f6:	401a      	ands	r2, r3
 80049f8:	2380      	movs	r3, #128	; 0x80
 80049fa:	4313      	orrs	r3, r2
 80049fc:	81a3      	strh	r3, [r4, #12]
 80049fe:	9b02      	ldr	r3, [sp, #8]
 8004a00:	6126      	str	r6, [r4, #16]
 8004a02:	18f6      	adds	r6, r6, r3
 8004a04:	6026      	str	r6, [r4, #0]
 8004a06:	6165      	str	r5, [r4, #20]
 8004a08:	9e01      	ldr	r6, [sp, #4]
 8004a0a:	1aed      	subs	r5, r5, r3
 8004a0c:	60a5      	str	r5, [r4, #8]
 8004a0e:	9b01      	ldr	r3, [sp, #4]
 8004a10:	429e      	cmp	r6, r3
 8004a12:	d900      	bls.n	8004a16 <__ssputs_r+0x8e>
 8004a14:	9e01      	ldr	r6, [sp, #4]
 8004a16:	0032      	movs	r2, r6
 8004a18:	9903      	ldr	r1, [sp, #12]
 8004a1a:	6820      	ldr	r0, [r4, #0]
 8004a1c:	f000 faa3 	bl	8004f66 <memmove>
 8004a20:	68a3      	ldr	r3, [r4, #8]
 8004a22:	2000      	movs	r0, #0
 8004a24:	1b9b      	subs	r3, r3, r6
 8004a26:	60a3      	str	r3, [r4, #8]
 8004a28:	6823      	ldr	r3, [r4, #0]
 8004a2a:	199e      	adds	r6, r3, r6
 8004a2c:	6026      	str	r6, [r4, #0]
 8004a2e:	e7da      	b.n	80049e6 <__ssputs_r+0x5e>
 8004a30:	002a      	movs	r2, r5
 8004a32:	0038      	movs	r0, r7
 8004a34:	f000 fb52 	bl	80050dc <_realloc_r>
 8004a38:	1e06      	subs	r6, r0, #0
 8004a3a:	d1e0      	bne.n	80049fe <__ssputs_r+0x76>
 8004a3c:	0038      	movs	r0, r7
 8004a3e:	6921      	ldr	r1, [r4, #16]
 8004a40:	f000 faa4 	bl	8004f8c <_free_r>
 8004a44:	e7c7      	b.n	80049d6 <__ssputs_r+0x4e>
 8004a46:	46c0      	nop			; (mov r8, r8)
 8004a48:	fffffb7f 	.word	0xfffffb7f

08004a4c <_svfiprintf_r>:
 8004a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a4e:	b0a1      	sub	sp, #132	; 0x84
 8004a50:	9003      	str	r0, [sp, #12]
 8004a52:	001d      	movs	r5, r3
 8004a54:	898b      	ldrh	r3, [r1, #12]
 8004a56:	000f      	movs	r7, r1
 8004a58:	0016      	movs	r6, r2
 8004a5a:	061b      	lsls	r3, r3, #24
 8004a5c:	d511      	bpl.n	8004a82 <_svfiprintf_r+0x36>
 8004a5e:	690b      	ldr	r3, [r1, #16]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d10e      	bne.n	8004a82 <_svfiprintf_r+0x36>
 8004a64:	2140      	movs	r1, #64	; 0x40
 8004a66:	f000 fadb 	bl	8005020 <_malloc_r>
 8004a6a:	6038      	str	r0, [r7, #0]
 8004a6c:	6138      	str	r0, [r7, #16]
 8004a6e:	2800      	cmp	r0, #0
 8004a70:	d105      	bne.n	8004a7e <_svfiprintf_r+0x32>
 8004a72:	230c      	movs	r3, #12
 8004a74:	9a03      	ldr	r2, [sp, #12]
 8004a76:	3801      	subs	r0, #1
 8004a78:	6013      	str	r3, [r2, #0]
 8004a7a:	b021      	add	sp, #132	; 0x84
 8004a7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a7e:	2340      	movs	r3, #64	; 0x40
 8004a80:	617b      	str	r3, [r7, #20]
 8004a82:	2300      	movs	r3, #0
 8004a84:	ac08      	add	r4, sp, #32
 8004a86:	6163      	str	r3, [r4, #20]
 8004a88:	3320      	adds	r3, #32
 8004a8a:	7663      	strb	r3, [r4, #25]
 8004a8c:	3310      	adds	r3, #16
 8004a8e:	76a3      	strb	r3, [r4, #26]
 8004a90:	9507      	str	r5, [sp, #28]
 8004a92:	0035      	movs	r5, r6
 8004a94:	782b      	ldrb	r3, [r5, #0]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d001      	beq.n	8004a9e <_svfiprintf_r+0x52>
 8004a9a:	2b25      	cmp	r3, #37	; 0x25
 8004a9c:	d147      	bne.n	8004b2e <_svfiprintf_r+0xe2>
 8004a9e:	1bab      	subs	r3, r5, r6
 8004aa0:	9305      	str	r3, [sp, #20]
 8004aa2:	42b5      	cmp	r5, r6
 8004aa4:	d00c      	beq.n	8004ac0 <_svfiprintf_r+0x74>
 8004aa6:	0032      	movs	r2, r6
 8004aa8:	0039      	movs	r1, r7
 8004aaa:	9803      	ldr	r0, [sp, #12]
 8004aac:	f7ff ff6c 	bl	8004988 <__ssputs_r>
 8004ab0:	1c43      	adds	r3, r0, #1
 8004ab2:	d100      	bne.n	8004ab6 <_svfiprintf_r+0x6a>
 8004ab4:	e0ae      	b.n	8004c14 <_svfiprintf_r+0x1c8>
 8004ab6:	6962      	ldr	r2, [r4, #20]
 8004ab8:	9b05      	ldr	r3, [sp, #20]
 8004aba:	4694      	mov	ip, r2
 8004abc:	4463      	add	r3, ip
 8004abe:	6163      	str	r3, [r4, #20]
 8004ac0:	782b      	ldrb	r3, [r5, #0]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d100      	bne.n	8004ac8 <_svfiprintf_r+0x7c>
 8004ac6:	e0a5      	b.n	8004c14 <_svfiprintf_r+0x1c8>
 8004ac8:	2201      	movs	r2, #1
 8004aca:	2300      	movs	r3, #0
 8004acc:	4252      	negs	r2, r2
 8004ace:	6062      	str	r2, [r4, #4]
 8004ad0:	a904      	add	r1, sp, #16
 8004ad2:	3254      	adds	r2, #84	; 0x54
 8004ad4:	1852      	adds	r2, r2, r1
 8004ad6:	1c6e      	adds	r6, r5, #1
 8004ad8:	6023      	str	r3, [r4, #0]
 8004ada:	60e3      	str	r3, [r4, #12]
 8004adc:	60a3      	str	r3, [r4, #8]
 8004ade:	7013      	strb	r3, [r2, #0]
 8004ae0:	65a3      	str	r3, [r4, #88]	; 0x58
 8004ae2:	2205      	movs	r2, #5
 8004ae4:	7831      	ldrb	r1, [r6, #0]
 8004ae6:	4854      	ldr	r0, [pc, #336]	; (8004c38 <_svfiprintf_r+0x1ec>)
 8004ae8:	f000 fa32 	bl	8004f50 <memchr>
 8004aec:	1c75      	adds	r5, r6, #1
 8004aee:	2800      	cmp	r0, #0
 8004af0:	d11f      	bne.n	8004b32 <_svfiprintf_r+0xe6>
 8004af2:	6822      	ldr	r2, [r4, #0]
 8004af4:	06d3      	lsls	r3, r2, #27
 8004af6:	d504      	bpl.n	8004b02 <_svfiprintf_r+0xb6>
 8004af8:	2353      	movs	r3, #83	; 0x53
 8004afa:	a904      	add	r1, sp, #16
 8004afc:	185b      	adds	r3, r3, r1
 8004afe:	2120      	movs	r1, #32
 8004b00:	7019      	strb	r1, [r3, #0]
 8004b02:	0713      	lsls	r3, r2, #28
 8004b04:	d504      	bpl.n	8004b10 <_svfiprintf_r+0xc4>
 8004b06:	2353      	movs	r3, #83	; 0x53
 8004b08:	a904      	add	r1, sp, #16
 8004b0a:	185b      	adds	r3, r3, r1
 8004b0c:	212b      	movs	r1, #43	; 0x2b
 8004b0e:	7019      	strb	r1, [r3, #0]
 8004b10:	7833      	ldrb	r3, [r6, #0]
 8004b12:	2b2a      	cmp	r3, #42	; 0x2a
 8004b14:	d016      	beq.n	8004b44 <_svfiprintf_r+0xf8>
 8004b16:	0035      	movs	r5, r6
 8004b18:	2100      	movs	r1, #0
 8004b1a:	200a      	movs	r0, #10
 8004b1c:	68e3      	ldr	r3, [r4, #12]
 8004b1e:	782a      	ldrb	r2, [r5, #0]
 8004b20:	1c6e      	adds	r6, r5, #1
 8004b22:	3a30      	subs	r2, #48	; 0x30
 8004b24:	2a09      	cmp	r2, #9
 8004b26:	d94e      	bls.n	8004bc6 <_svfiprintf_r+0x17a>
 8004b28:	2900      	cmp	r1, #0
 8004b2a:	d111      	bne.n	8004b50 <_svfiprintf_r+0x104>
 8004b2c:	e017      	b.n	8004b5e <_svfiprintf_r+0x112>
 8004b2e:	3501      	adds	r5, #1
 8004b30:	e7b0      	b.n	8004a94 <_svfiprintf_r+0x48>
 8004b32:	4b41      	ldr	r3, [pc, #260]	; (8004c38 <_svfiprintf_r+0x1ec>)
 8004b34:	6822      	ldr	r2, [r4, #0]
 8004b36:	1ac0      	subs	r0, r0, r3
 8004b38:	2301      	movs	r3, #1
 8004b3a:	4083      	lsls	r3, r0
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	002e      	movs	r6, r5
 8004b40:	6023      	str	r3, [r4, #0]
 8004b42:	e7ce      	b.n	8004ae2 <_svfiprintf_r+0x96>
 8004b44:	9b07      	ldr	r3, [sp, #28]
 8004b46:	1d19      	adds	r1, r3, #4
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	9107      	str	r1, [sp, #28]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	db01      	blt.n	8004b54 <_svfiprintf_r+0x108>
 8004b50:	930b      	str	r3, [sp, #44]	; 0x2c
 8004b52:	e004      	b.n	8004b5e <_svfiprintf_r+0x112>
 8004b54:	425b      	negs	r3, r3
 8004b56:	60e3      	str	r3, [r4, #12]
 8004b58:	2302      	movs	r3, #2
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	6023      	str	r3, [r4, #0]
 8004b5e:	782b      	ldrb	r3, [r5, #0]
 8004b60:	2b2e      	cmp	r3, #46	; 0x2e
 8004b62:	d10a      	bne.n	8004b7a <_svfiprintf_r+0x12e>
 8004b64:	786b      	ldrb	r3, [r5, #1]
 8004b66:	2b2a      	cmp	r3, #42	; 0x2a
 8004b68:	d135      	bne.n	8004bd6 <_svfiprintf_r+0x18a>
 8004b6a:	9b07      	ldr	r3, [sp, #28]
 8004b6c:	3502      	adds	r5, #2
 8004b6e:	1d1a      	adds	r2, r3, #4
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	9207      	str	r2, [sp, #28]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	db2b      	blt.n	8004bd0 <_svfiprintf_r+0x184>
 8004b78:	9309      	str	r3, [sp, #36]	; 0x24
 8004b7a:	4e30      	ldr	r6, [pc, #192]	; (8004c3c <_svfiprintf_r+0x1f0>)
 8004b7c:	2203      	movs	r2, #3
 8004b7e:	0030      	movs	r0, r6
 8004b80:	7829      	ldrb	r1, [r5, #0]
 8004b82:	f000 f9e5 	bl	8004f50 <memchr>
 8004b86:	2800      	cmp	r0, #0
 8004b88:	d006      	beq.n	8004b98 <_svfiprintf_r+0x14c>
 8004b8a:	2340      	movs	r3, #64	; 0x40
 8004b8c:	1b80      	subs	r0, r0, r6
 8004b8e:	4083      	lsls	r3, r0
 8004b90:	6822      	ldr	r2, [r4, #0]
 8004b92:	3501      	adds	r5, #1
 8004b94:	4313      	orrs	r3, r2
 8004b96:	6023      	str	r3, [r4, #0]
 8004b98:	7829      	ldrb	r1, [r5, #0]
 8004b9a:	2206      	movs	r2, #6
 8004b9c:	4828      	ldr	r0, [pc, #160]	; (8004c40 <_svfiprintf_r+0x1f4>)
 8004b9e:	1c6e      	adds	r6, r5, #1
 8004ba0:	7621      	strb	r1, [r4, #24]
 8004ba2:	f000 f9d5 	bl	8004f50 <memchr>
 8004ba6:	2800      	cmp	r0, #0
 8004ba8:	d03c      	beq.n	8004c24 <_svfiprintf_r+0x1d8>
 8004baa:	4b26      	ldr	r3, [pc, #152]	; (8004c44 <_svfiprintf_r+0x1f8>)
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d125      	bne.n	8004bfc <_svfiprintf_r+0x1b0>
 8004bb0:	2207      	movs	r2, #7
 8004bb2:	9b07      	ldr	r3, [sp, #28]
 8004bb4:	3307      	adds	r3, #7
 8004bb6:	4393      	bics	r3, r2
 8004bb8:	3308      	adds	r3, #8
 8004bba:	9307      	str	r3, [sp, #28]
 8004bbc:	6963      	ldr	r3, [r4, #20]
 8004bbe:	9a04      	ldr	r2, [sp, #16]
 8004bc0:	189b      	adds	r3, r3, r2
 8004bc2:	6163      	str	r3, [r4, #20]
 8004bc4:	e765      	b.n	8004a92 <_svfiprintf_r+0x46>
 8004bc6:	4343      	muls	r3, r0
 8004bc8:	0035      	movs	r5, r6
 8004bca:	2101      	movs	r1, #1
 8004bcc:	189b      	adds	r3, r3, r2
 8004bce:	e7a6      	b.n	8004b1e <_svfiprintf_r+0xd2>
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	425b      	negs	r3, r3
 8004bd4:	e7d0      	b.n	8004b78 <_svfiprintf_r+0x12c>
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	200a      	movs	r0, #10
 8004bda:	001a      	movs	r2, r3
 8004bdc:	3501      	adds	r5, #1
 8004bde:	6063      	str	r3, [r4, #4]
 8004be0:	7829      	ldrb	r1, [r5, #0]
 8004be2:	1c6e      	adds	r6, r5, #1
 8004be4:	3930      	subs	r1, #48	; 0x30
 8004be6:	2909      	cmp	r1, #9
 8004be8:	d903      	bls.n	8004bf2 <_svfiprintf_r+0x1a6>
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d0c5      	beq.n	8004b7a <_svfiprintf_r+0x12e>
 8004bee:	9209      	str	r2, [sp, #36]	; 0x24
 8004bf0:	e7c3      	b.n	8004b7a <_svfiprintf_r+0x12e>
 8004bf2:	4342      	muls	r2, r0
 8004bf4:	0035      	movs	r5, r6
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	1852      	adds	r2, r2, r1
 8004bfa:	e7f1      	b.n	8004be0 <_svfiprintf_r+0x194>
 8004bfc:	ab07      	add	r3, sp, #28
 8004bfe:	9300      	str	r3, [sp, #0]
 8004c00:	003a      	movs	r2, r7
 8004c02:	0021      	movs	r1, r4
 8004c04:	4b10      	ldr	r3, [pc, #64]	; (8004c48 <_svfiprintf_r+0x1fc>)
 8004c06:	9803      	ldr	r0, [sp, #12]
 8004c08:	e000      	b.n	8004c0c <_svfiprintf_r+0x1c0>
 8004c0a:	bf00      	nop
 8004c0c:	9004      	str	r0, [sp, #16]
 8004c0e:	9b04      	ldr	r3, [sp, #16]
 8004c10:	3301      	adds	r3, #1
 8004c12:	d1d3      	bne.n	8004bbc <_svfiprintf_r+0x170>
 8004c14:	89bb      	ldrh	r3, [r7, #12]
 8004c16:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004c18:	065b      	lsls	r3, r3, #25
 8004c1a:	d400      	bmi.n	8004c1e <_svfiprintf_r+0x1d2>
 8004c1c:	e72d      	b.n	8004a7a <_svfiprintf_r+0x2e>
 8004c1e:	2001      	movs	r0, #1
 8004c20:	4240      	negs	r0, r0
 8004c22:	e72a      	b.n	8004a7a <_svfiprintf_r+0x2e>
 8004c24:	ab07      	add	r3, sp, #28
 8004c26:	9300      	str	r3, [sp, #0]
 8004c28:	003a      	movs	r2, r7
 8004c2a:	0021      	movs	r1, r4
 8004c2c:	4b06      	ldr	r3, [pc, #24]	; (8004c48 <_svfiprintf_r+0x1fc>)
 8004c2e:	9803      	ldr	r0, [sp, #12]
 8004c30:	f000 f87c 	bl	8004d2c <_printf_i>
 8004c34:	e7ea      	b.n	8004c0c <_svfiprintf_r+0x1c0>
 8004c36:	46c0      	nop			; (mov r8, r8)
 8004c38:	08007a7c 	.word	0x08007a7c
 8004c3c:	08007a82 	.word	0x08007a82
 8004c40:	08007a86 	.word	0x08007a86
 8004c44:	00000000 	.word	0x00000000
 8004c48:	08004989 	.word	0x08004989

08004c4c <_printf_common>:
 8004c4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c4e:	0015      	movs	r5, r2
 8004c50:	9301      	str	r3, [sp, #4]
 8004c52:	688a      	ldr	r2, [r1, #8]
 8004c54:	690b      	ldr	r3, [r1, #16]
 8004c56:	000c      	movs	r4, r1
 8004c58:	9000      	str	r0, [sp, #0]
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	da00      	bge.n	8004c60 <_printf_common+0x14>
 8004c5e:	0013      	movs	r3, r2
 8004c60:	0022      	movs	r2, r4
 8004c62:	602b      	str	r3, [r5, #0]
 8004c64:	3243      	adds	r2, #67	; 0x43
 8004c66:	7812      	ldrb	r2, [r2, #0]
 8004c68:	2a00      	cmp	r2, #0
 8004c6a:	d001      	beq.n	8004c70 <_printf_common+0x24>
 8004c6c:	3301      	adds	r3, #1
 8004c6e:	602b      	str	r3, [r5, #0]
 8004c70:	6823      	ldr	r3, [r4, #0]
 8004c72:	069b      	lsls	r3, r3, #26
 8004c74:	d502      	bpl.n	8004c7c <_printf_common+0x30>
 8004c76:	682b      	ldr	r3, [r5, #0]
 8004c78:	3302      	adds	r3, #2
 8004c7a:	602b      	str	r3, [r5, #0]
 8004c7c:	6822      	ldr	r2, [r4, #0]
 8004c7e:	2306      	movs	r3, #6
 8004c80:	0017      	movs	r7, r2
 8004c82:	401f      	ands	r7, r3
 8004c84:	421a      	tst	r2, r3
 8004c86:	d027      	beq.n	8004cd8 <_printf_common+0x8c>
 8004c88:	0023      	movs	r3, r4
 8004c8a:	3343      	adds	r3, #67	; 0x43
 8004c8c:	781b      	ldrb	r3, [r3, #0]
 8004c8e:	1e5a      	subs	r2, r3, #1
 8004c90:	4193      	sbcs	r3, r2
 8004c92:	6822      	ldr	r2, [r4, #0]
 8004c94:	0692      	lsls	r2, r2, #26
 8004c96:	d430      	bmi.n	8004cfa <_printf_common+0xae>
 8004c98:	0022      	movs	r2, r4
 8004c9a:	9901      	ldr	r1, [sp, #4]
 8004c9c:	9800      	ldr	r0, [sp, #0]
 8004c9e:	9e08      	ldr	r6, [sp, #32]
 8004ca0:	3243      	adds	r2, #67	; 0x43
 8004ca2:	47b0      	blx	r6
 8004ca4:	1c43      	adds	r3, r0, #1
 8004ca6:	d025      	beq.n	8004cf4 <_printf_common+0xa8>
 8004ca8:	2306      	movs	r3, #6
 8004caa:	6820      	ldr	r0, [r4, #0]
 8004cac:	682a      	ldr	r2, [r5, #0]
 8004cae:	68e1      	ldr	r1, [r4, #12]
 8004cb0:	2500      	movs	r5, #0
 8004cb2:	4003      	ands	r3, r0
 8004cb4:	2b04      	cmp	r3, #4
 8004cb6:	d103      	bne.n	8004cc0 <_printf_common+0x74>
 8004cb8:	1a8d      	subs	r5, r1, r2
 8004cba:	43eb      	mvns	r3, r5
 8004cbc:	17db      	asrs	r3, r3, #31
 8004cbe:	401d      	ands	r5, r3
 8004cc0:	68a3      	ldr	r3, [r4, #8]
 8004cc2:	6922      	ldr	r2, [r4, #16]
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	dd01      	ble.n	8004ccc <_printf_common+0x80>
 8004cc8:	1a9b      	subs	r3, r3, r2
 8004cca:	18ed      	adds	r5, r5, r3
 8004ccc:	2700      	movs	r7, #0
 8004cce:	42bd      	cmp	r5, r7
 8004cd0:	d120      	bne.n	8004d14 <_printf_common+0xc8>
 8004cd2:	2000      	movs	r0, #0
 8004cd4:	e010      	b.n	8004cf8 <_printf_common+0xac>
 8004cd6:	3701      	adds	r7, #1
 8004cd8:	68e3      	ldr	r3, [r4, #12]
 8004cda:	682a      	ldr	r2, [r5, #0]
 8004cdc:	1a9b      	subs	r3, r3, r2
 8004cde:	42bb      	cmp	r3, r7
 8004ce0:	ddd2      	ble.n	8004c88 <_printf_common+0x3c>
 8004ce2:	0022      	movs	r2, r4
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	9901      	ldr	r1, [sp, #4]
 8004ce8:	9800      	ldr	r0, [sp, #0]
 8004cea:	9e08      	ldr	r6, [sp, #32]
 8004cec:	3219      	adds	r2, #25
 8004cee:	47b0      	blx	r6
 8004cf0:	1c43      	adds	r3, r0, #1
 8004cf2:	d1f0      	bne.n	8004cd6 <_printf_common+0x8a>
 8004cf4:	2001      	movs	r0, #1
 8004cf6:	4240      	negs	r0, r0
 8004cf8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004cfa:	2030      	movs	r0, #48	; 0x30
 8004cfc:	18e1      	adds	r1, r4, r3
 8004cfe:	3143      	adds	r1, #67	; 0x43
 8004d00:	7008      	strb	r0, [r1, #0]
 8004d02:	0021      	movs	r1, r4
 8004d04:	1c5a      	adds	r2, r3, #1
 8004d06:	3145      	adds	r1, #69	; 0x45
 8004d08:	7809      	ldrb	r1, [r1, #0]
 8004d0a:	18a2      	adds	r2, r4, r2
 8004d0c:	3243      	adds	r2, #67	; 0x43
 8004d0e:	3302      	adds	r3, #2
 8004d10:	7011      	strb	r1, [r2, #0]
 8004d12:	e7c1      	b.n	8004c98 <_printf_common+0x4c>
 8004d14:	0022      	movs	r2, r4
 8004d16:	2301      	movs	r3, #1
 8004d18:	9901      	ldr	r1, [sp, #4]
 8004d1a:	9800      	ldr	r0, [sp, #0]
 8004d1c:	9e08      	ldr	r6, [sp, #32]
 8004d1e:	321a      	adds	r2, #26
 8004d20:	47b0      	blx	r6
 8004d22:	1c43      	adds	r3, r0, #1
 8004d24:	d0e6      	beq.n	8004cf4 <_printf_common+0xa8>
 8004d26:	3701      	adds	r7, #1
 8004d28:	e7d1      	b.n	8004cce <_printf_common+0x82>
	...

08004d2c <_printf_i>:
 8004d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d2e:	b08b      	sub	sp, #44	; 0x2c
 8004d30:	9206      	str	r2, [sp, #24]
 8004d32:	000a      	movs	r2, r1
 8004d34:	3243      	adds	r2, #67	; 0x43
 8004d36:	9307      	str	r3, [sp, #28]
 8004d38:	9005      	str	r0, [sp, #20]
 8004d3a:	9204      	str	r2, [sp, #16]
 8004d3c:	7e0a      	ldrb	r2, [r1, #24]
 8004d3e:	000c      	movs	r4, r1
 8004d40:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004d42:	2a78      	cmp	r2, #120	; 0x78
 8004d44:	d806      	bhi.n	8004d54 <_printf_i+0x28>
 8004d46:	2a62      	cmp	r2, #98	; 0x62
 8004d48:	d808      	bhi.n	8004d5c <_printf_i+0x30>
 8004d4a:	2a00      	cmp	r2, #0
 8004d4c:	d100      	bne.n	8004d50 <_printf_i+0x24>
 8004d4e:	e0c0      	b.n	8004ed2 <_printf_i+0x1a6>
 8004d50:	2a58      	cmp	r2, #88	; 0x58
 8004d52:	d052      	beq.n	8004dfa <_printf_i+0xce>
 8004d54:	0026      	movs	r6, r4
 8004d56:	3642      	adds	r6, #66	; 0x42
 8004d58:	7032      	strb	r2, [r6, #0]
 8004d5a:	e022      	b.n	8004da2 <_printf_i+0x76>
 8004d5c:	0010      	movs	r0, r2
 8004d5e:	3863      	subs	r0, #99	; 0x63
 8004d60:	2815      	cmp	r0, #21
 8004d62:	d8f7      	bhi.n	8004d54 <_printf_i+0x28>
 8004d64:	f7fb f9d0 	bl	8000108 <__gnu_thumb1_case_shi>
 8004d68:	001f0016 	.word	0x001f0016
 8004d6c:	fff6fff6 	.word	0xfff6fff6
 8004d70:	fff6fff6 	.word	0xfff6fff6
 8004d74:	fff6001f 	.word	0xfff6001f
 8004d78:	fff6fff6 	.word	0xfff6fff6
 8004d7c:	00a8fff6 	.word	0x00a8fff6
 8004d80:	009a0036 	.word	0x009a0036
 8004d84:	fff6fff6 	.word	0xfff6fff6
 8004d88:	fff600b9 	.word	0xfff600b9
 8004d8c:	fff60036 	.word	0xfff60036
 8004d90:	009efff6 	.word	0x009efff6
 8004d94:	0026      	movs	r6, r4
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	3642      	adds	r6, #66	; 0x42
 8004d9a:	1d11      	adds	r1, r2, #4
 8004d9c:	6019      	str	r1, [r3, #0]
 8004d9e:	6813      	ldr	r3, [r2, #0]
 8004da0:	7033      	strb	r3, [r6, #0]
 8004da2:	2301      	movs	r3, #1
 8004da4:	e0a7      	b.n	8004ef6 <_printf_i+0x1ca>
 8004da6:	6808      	ldr	r0, [r1, #0]
 8004da8:	6819      	ldr	r1, [r3, #0]
 8004daa:	1d0a      	adds	r2, r1, #4
 8004dac:	0605      	lsls	r5, r0, #24
 8004dae:	d50b      	bpl.n	8004dc8 <_printf_i+0x9c>
 8004db0:	680d      	ldr	r5, [r1, #0]
 8004db2:	601a      	str	r2, [r3, #0]
 8004db4:	2d00      	cmp	r5, #0
 8004db6:	da03      	bge.n	8004dc0 <_printf_i+0x94>
 8004db8:	232d      	movs	r3, #45	; 0x2d
 8004dba:	9a04      	ldr	r2, [sp, #16]
 8004dbc:	426d      	negs	r5, r5
 8004dbe:	7013      	strb	r3, [r2, #0]
 8004dc0:	4b61      	ldr	r3, [pc, #388]	; (8004f48 <_printf_i+0x21c>)
 8004dc2:	270a      	movs	r7, #10
 8004dc4:	9303      	str	r3, [sp, #12]
 8004dc6:	e032      	b.n	8004e2e <_printf_i+0x102>
 8004dc8:	680d      	ldr	r5, [r1, #0]
 8004dca:	601a      	str	r2, [r3, #0]
 8004dcc:	0641      	lsls	r1, r0, #25
 8004dce:	d5f1      	bpl.n	8004db4 <_printf_i+0x88>
 8004dd0:	b22d      	sxth	r5, r5
 8004dd2:	e7ef      	b.n	8004db4 <_printf_i+0x88>
 8004dd4:	680d      	ldr	r5, [r1, #0]
 8004dd6:	6819      	ldr	r1, [r3, #0]
 8004dd8:	1d08      	adds	r0, r1, #4
 8004dda:	6018      	str	r0, [r3, #0]
 8004ddc:	062e      	lsls	r6, r5, #24
 8004dde:	d501      	bpl.n	8004de4 <_printf_i+0xb8>
 8004de0:	680d      	ldr	r5, [r1, #0]
 8004de2:	e003      	b.n	8004dec <_printf_i+0xc0>
 8004de4:	066d      	lsls	r5, r5, #25
 8004de6:	d5fb      	bpl.n	8004de0 <_printf_i+0xb4>
 8004de8:	680d      	ldr	r5, [r1, #0]
 8004dea:	b2ad      	uxth	r5, r5
 8004dec:	4b56      	ldr	r3, [pc, #344]	; (8004f48 <_printf_i+0x21c>)
 8004dee:	270a      	movs	r7, #10
 8004df0:	9303      	str	r3, [sp, #12]
 8004df2:	2a6f      	cmp	r2, #111	; 0x6f
 8004df4:	d117      	bne.n	8004e26 <_printf_i+0xfa>
 8004df6:	2708      	movs	r7, #8
 8004df8:	e015      	b.n	8004e26 <_printf_i+0xfa>
 8004dfa:	3145      	adds	r1, #69	; 0x45
 8004dfc:	700a      	strb	r2, [r1, #0]
 8004dfe:	4a52      	ldr	r2, [pc, #328]	; (8004f48 <_printf_i+0x21c>)
 8004e00:	9203      	str	r2, [sp, #12]
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	6821      	ldr	r1, [r4, #0]
 8004e06:	ca20      	ldmia	r2!, {r5}
 8004e08:	601a      	str	r2, [r3, #0]
 8004e0a:	0608      	lsls	r0, r1, #24
 8004e0c:	d550      	bpl.n	8004eb0 <_printf_i+0x184>
 8004e0e:	07cb      	lsls	r3, r1, #31
 8004e10:	d502      	bpl.n	8004e18 <_printf_i+0xec>
 8004e12:	2320      	movs	r3, #32
 8004e14:	4319      	orrs	r1, r3
 8004e16:	6021      	str	r1, [r4, #0]
 8004e18:	2710      	movs	r7, #16
 8004e1a:	2d00      	cmp	r5, #0
 8004e1c:	d103      	bne.n	8004e26 <_printf_i+0xfa>
 8004e1e:	2320      	movs	r3, #32
 8004e20:	6822      	ldr	r2, [r4, #0]
 8004e22:	439a      	bics	r2, r3
 8004e24:	6022      	str	r2, [r4, #0]
 8004e26:	0023      	movs	r3, r4
 8004e28:	2200      	movs	r2, #0
 8004e2a:	3343      	adds	r3, #67	; 0x43
 8004e2c:	701a      	strb	r2, [r3, #0]
 8004e2e:	6863      	ldr	r3, [r4, #4]
 8004e30:	60a3      	str	r3, [r4, #8]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	db03      	blt.n	8004e3e <_printf_i+0x112>
 8004e36:	2204      	movs	r2, #4
 8004e38:	6821      	ldr	r1, [r4, #0]
 8004e3a:	4391      	bics	r1, r2
 8004e3c:	6021      	str	r1, [r4, #0]
 8004e3e:	2d00      	cmp	r5, #0
 8004e40:	d102      	bne.n	8004e48 <_printf_i+0x11c>
 8004e42:	9e04      	ldr	r6, [sp, #16]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d00c      	beq.n	8004e62 <_printf_i+0x136>
 8004e48:	9e04      	ldr	r6, [sp, #16]
 8004e4a:	0028      	movs	r0, r5
 8004e4c:	0039      	movs	r1, r7
 8004e4e:	f7fb f9eb 	bl	8000228 <__aeabi_uidivmod>
 8004e52:	9b03      	ldr	r3, [sp, #12]
 8004e54:	3e01      	subs	r6, #1
 8004e56:	5c5b      	ldrb	r3, [r3, r1]
 8004e58:	7033      	strb	r3, [r6, #0]
 8004e5a:	002b      	movs	r3, r5
 8004e5c:	0005      	movs	r5, r0
 8004e5e:	429f      	cmp	r7, r3
 8004e60:	d9f3      	bls.n	8004e4a <_printf_i+0x11e>
 8004e62:	2f08      	cmp	r7, #8
 8004e64:	d109      	bne.n	8004e7a <_printf_i+0x14e>
 8004e66:	6823      	ldr	r3, [r4, #0]
 8004e68:	07db      	lsls	r3, r3, #31
 8004e6a:	d506      	bpl.n	8004e7a <_printf_i+0x14e>
 8004e6c:	6863      	ldr	r3, [r4, #4]
 8004e6e:	6922      	ldr	r2, [r4, #16]
 8004e70:	4293      	cmp	r3, r2
 8004e72:	dc02      	bgt.n	8004e7a <_printf_i+0x14e>
 8004e74:	2330      	movs	r3, #48	; 0x30
 8004e76:	3e01      	subs	r6, #1
 8004e78:	7033      	strb	r3, [r6, #0]
 8004e7a:	9b04      	ldr	r3, [sp, #16]
 8004e7c:	1b9b      	subs	r3, r3, r6
 8004e7e:	6123      	str	r3, [r4, #16]
 8004e80:	9b07      	ldr	r3, [sp, #28]
 8004e82:	0021      	movs	r1, r4
 8004e84:	9300      	str	r3, [sp, #0]
 8004e86:	9805      	ldr	r0, [sp, #20]
 8004e88:	9b06      	ldr	r3, [sp, #24]
 8004e8a:	aa09      	add	r2, sp, #36	; 0x24
 8004e8c:	f7ff fede 	bl	8004c4c <_printf_common>
 8004e90:	1c43      	adds	r3, r0, #1
 8004e92:	d135      	bne.n	8004f00 <_printf_i+0x1d4>
 8004e94:	2001      	movs	r0, #1
 8004e96:	4240      	negs	r0, r0
 8004e98:	b00b      	add	sp, #44	; 0x2c
 8004e9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e9c:	2220      	movs	r2, #32
 8004e9e:	6809      	ldr	r1, [r1, #0]
 8004ea0:	430a      	orrs	r2, r1
 8004ea2:	6022      	str	r2, [r4, #0]
 8004ea4:	0022      	movs	r2, r4
 8004ea6:	2178      	movs	r1, #120	; 0x78
 8004ea8:	3245      	adds	r2, #69	; 0x45
 8004eaa:	7011      	strb	r1, [r2, #0]
 8004eac:	4a27      	ldr	r2, [pc, #156]	; (8004f4c <_printf_i+0x220>)
 8004eae:	e7a7      	b.n	8004e00 <_printf_i+0xd4>
 8004eb0:	0648      	lsls	r0, r1, #25
 8004eb2:	d5ac      	bpl.n	8004e0e <_printf_i+0xe2>
 8004eb4:	b2ad      	uxth	r5, r5
 8004eb6:	e7aa      	b.n	8004e0e <_printf_i+0xe2>
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	680d      	ldr	r5, [r1, #0]
 8004ebc:	1d10      	adds	r0, r2, #4
 8004ebe:	6949      	ldr	r1, [r1, #20]
 8004ec0:	6018      	str	r0, [r3, #0]
 8004ec2:	6813      	ldr	r3, [r2, #0]
 8004ec4:	062e      	lsls	r6, r5, #24
 8004ec6:	d501      	bpl.n	8004ecc <_printf_i+0x1a0>
 8004ec8:	6019      	str	r1, [r3, #0]
 8004eca:	e002      	b.n	8004ed2 <_printf_i+0x1a6>
 8004ecc:	066d      	lsls	r5, r5, #25
 8004ece:	d5fb      	bpl.n	8004ec8 <_printf_i+0x19c>
 8004ed0:	8019      	strh	r1, [r3, #0]
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	9e04      	ldr	r6, [sp, #16]
 8004ed6:	6123      	str	r3, [r4, #16]
 8004ed8:	e7d2      	b.n	8004e80 <_printf_i+0x154>
 8004eda:	681a      	ldr	r2, [r3, #0]
 8004edc:	1d11      	adds	r1, r2, #4
 8004ede:	6019      	str	r1, [r3, #0]
 8004ee0:	6816      	ldr	r6, [r2, #0]
 8004ee2:	2100      	movs	r1, #0
 8004ee4:	0030      	movs	r0, r6
 8004ee6:	6862      	ldr	r2, [r4, #4]
 8004ee8:	f000 f832 	bl	8004f50 <memchr>
 8004eec:	2800      	cmp	r0, #0
 8004eee:	d001      	beq.n	8004ef4 <_printf_i+0x1c8>
 8004ef0:	1b80      	subs	r0, r0, r6
 8004ef2:	6060      	str	r0, [r4, #4]
 8004ef4:	6863      	ldr	r3, [r4, #4]
 8004ef6:	6123      	str	r3, [r4, #16]
 8004ef8:	2300      	movs	r3, #0
 8004efa:	9a04      	ldr	r2, [sp, #16]
 8004efc:	7013      	strb	r3, [r2, #0]
 8004efe:	e7bf      	b.n	8004e80 <_printf_i+0x154>
 8004f00:	6923      	ldr	r3, [r4, #16]
 8004f02:	0032      	movs	r2, r6
 8004f04:	9906      	ldr	r1, [sp, #24]
 8004f06:	9805      	ldr	r0, [sp, #20]
 8004f08:	9d07      	ldr	r5, [sp, #28]
 8004f0a:	47a8      	blx	r5
 8004f0c:	1c43      	adds	r3, r0, #1
 8004f0e:	d0c1      	beq.n	8004e94 <_printf_i+0x168>
 8004f10:	6823      	ldr	r3, [r4, #0]
 8004f12:	079b      	lsls	r3, r3, #30
 8004f14:	d415      	bmi.n	8004f42 <_printf_i+0x216>
 8004f16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f18:	68e0      	ldr	r0, [r4, #12]
 8004f1a:	4298      	cmp	r0, r3
 8004f1c:	dabc      	bge.n	8004e98 <_printf_i+0x16c>
 8004f1e:	0018      	movs	r0, r3
 8004f20:	e7ba      	b.n	8004e98 <_printf_i+0x16c>
 8004f22:	0022      	movs	r2, r4
 8004f24:	2301      	movs	r3, #1
 8004f26:	9906      	ldr	r1, [sp, #24]
 8004f28:	9805      	ldr	r0, [sp, #20]
 8004f2a:	9e07      	ldr	r6, [sp, #28]
 8004f2c:	3219      	adds	r2, #25
 8004f2e:	47b0      	blx	r6
 8004f30:	1c43      	adds	r3, r0, #1
 8004f32:	d0af      	beq.n	8004e94 <_printf_i+0x168>
 8004f34:	3501      	adds	r5, #1
 8004f36:	68e3      	ldr	r3, [r4, #12]
 8004f38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f3a:	1a9b      	subs	r3, r3, r2
 8004f3c:	42ab      	cmp	r3, r5
 8004f3e:	dcf0      	bgt.n	8004f22 <_printf_i+0x1f6>
 8004f40:	e7e9      	b.n	8004f16 <_printf_i+0x1ea>
 8004f42:	2500      	movs	r5, #0
 8004f44:	e7f7      	b.n	8004f36 <_printf_i+0x20a>
 8004f46:	46c0      	nop			; (mov r8, r8)
 8004f48:	08007a8d 	.word	0x08007a8d
 8004f4c:	08007a9e 	.word	0x08007a9e

08004f50 <memchr>:
 8004f50:	b2c9      	uxtb	r1, r1
 8004f52:	1882      	adds	r2, r0, r2
 8004f54:	4290      	cmp	r0, r2
 8004f56:	d101      	bne.n	8004f5c <memchr+0xc>
 8004f58:	2000      	movs	r0, #0
 8004f5a:	4770      	bx	lr
 8004f5c:	7803      	ldrb	r3, [r0, #0]
 8004f5e:	428b      	cmp	r3, r1
 8004f60:	d0fb      	beq.n	8004f5a <memchr+0xa>
 8004f62:	3001      	adds	r0, #1
 8004f64:	e7f6      	b.n	8004f54 <memchr+0x4>

08004f66 <memmove>:
 8004f66:	b510      	push	{r4, lr}
 8004f68:	4288      	cmp	r0, r1
 8004f6a:	d902      	bls.n	8004f72 <memmove+0xc>
 8004f6c:	188b      	adds	r3, r1, r2
 8004f6e:	4298      	cmp	r0, r3
 8004f70:	d303      	bcc.n	8004f7a <memmove+0x14>
 8004f72:	2300      	movs	r3, #0
 8004f74:	e007      	b.n	8004f86 <memmove+0x20>
 8004f76:	5c8b      	ldrb	r3, [r1, r2]
 8004f78:	5483      	strb	r3, [r0, r2]
 8004f7a:	3a01      	subs	r2, #1
 8004f7c:	d2fb      	bcs.n	8004f76 <memmove+0x10>
 8004f7e:	bd10      	pop	{r4, pc}
 8004f80:	5ccc      	ldrb	r4, [r1, r3]
 8004f82:	54c4      	strb	r4, [r0, r3]
 8004f84:	3301      	adds	r3, #1
 8004f86:	429a      	cmp	r2, r3
 8004f88:	d1fa      	bne.n	8004f80 <memmove+0x1a>
 8004f8a:	e7f8      	b.n	8004f7e <memmove+0x18>

08004f8c <_free_r>:
 8004f8c:	b570      	push	{r4, r5, r6, lr}
 8004f8e:	0005      	movs	r5, r0
 8004f90:	2900      	cmp	r1, #0
 8004f92:	d010      	beq.n	8004fb6 <_free_r+0x2a>
 8004f94:	1f0c      	subs	r4, r1, #4
 8004f96:	6823      	ldr	r3, [r4, #0]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	da00      	bge.n	8004f9e <_free_r+0x12>
 8004f9c:	18e4      	adds	r4, r4, r3
 8004f9e:	0028      	movs	r0, r5
 8004fa0:	f000 f8d4 	bl	800514c <__malloc_lock>
 8004fa4:	4a1d      	ldr	r2, [pc, #116]	; (800501c <_free_r+0x90>)
 8004fa6:	6813      	ldr	r3, [r2, #0]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d105      	bne.n	8004fb8 <_free_r+0x2c>
 8004fac:	6063      	str	r3, [r4, #4]
 8004fae:	6014      	str	r4, [r2, #0]
 8004fb0:	0028      	movs	r0, r5
 8004fb2:	f000 f8d3 	bl	800515c <__malloc_unlock>
 8004fb6:	bd70      	pop	{r4, r5, r6, pc}
 8004fb8:	42a3      	cmp	r3, r4
 8004fba:	d908      	bls.n	8004fce <_free_r+0x42>
 8004fbc:	6821      	ldr	r1, [r4, #0]
 8004fbe:	1860      	adds	r0, r4, r1
 8004fc0:	4283      	cmp	r3, r0
 8004fc2:	d1f3      	bne.n	8004fac <_free_r+0x20>
 8004fc4:	6818      	ldr	r0, [r3, #0]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	1841      	adds	r1, r0, r1
 8004fca:	6021      	str	r1, [r4, #0]
 8004fcc:	e7ee      	b.n	8004fac <_free_r+0x20>
 8004fce:	001a      	movs	r2, r3
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d001      	beq.n	8004fda <_free_r+0x4e>
 8004fd6:	42a3      	cmp	r3, r4
 8004fd8:	d9f9      	bls.n	8004fce <_free_r+0x42>
 8004fda:	6811      	ldr	r1, [r2, #0]
 8004fdc:	1850      	adds	r0, r2, r1
 8004fde:	42a0      	cmp	r0, r4
 8004fe0:	d10b      	bne.n	8004ffa <_free_r+0x6e>
 8004fe2:	6820      	ldr	r0, [r4, #0]
 8004fe4:	1809      	adds	r1, r1, r0
 8004fe6:	1850      	adds	r0, r2, r1
 8004fe8:	6011      	str	r1, [r2, #0]
 8004fea:	4283      	cmp	r3, r0
 8004fec:	d1e0      	bne.n	8004fb0 <_free_r+0x24>
 8004fee:	6818      	ldr	r0, [r3, #0]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	1841      	adds	r1, r0, r1
 8004ff4:	6011      	str	r1, [r2, #0]
 8004ff6:	6053      	str	r3, [r2, #4]
 8004ff8:	e7da      	b.n	8004fb0 <_free_r+0x24>
 8004ffa:	42a0      	cmp	r0, r4
 8004ffc:	d902      	bls.n	8005004 <_free_r+0x78>
 8004ffe:	230c      	movs	r3, #12
 8005000:	602b      	str	r3, [r5, #0]
 8005002:	e7d5      	b.n	8004fb0 <_free_r+0x24>
 8005004:	6821      	ldr	r1, [r4, #0]
 8005006:	1860      	adds	r0, r4, r1
 8005008:	4283      	cmp	r3, r0
 800500a:	d103      	bne.n	8005014 <_free_r+0x88>
 800500c:	6818      	ldr	r0, [r3, #0]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	1841      	adds	r1, r0, r1
 8005012:	6021      	str	r1, [r4, #0]
 8005014:	6063      	str	r3, [r4, #4]
 8005016:	6054      	str	r4, [r2, #4]
 8005018:	e7ca      	b.n	8004fb0 <_free_r+0x24>
 800501a:	46c0      	nop			; (mov r8, r8)
 800501c:	200006ec 	.word	0x200006ec

08005020 <_malloc_r>:
 8005020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005022:	2303      	movs	r3, #3
 8005024:	1ccd      	adds	r5, r1, #3
 8005026:	439d      	bics	r5, r3
 8005028:	3508      	adds	r5, #8
 800502a:	0006      	movs	r6, r0
 800502c:	2d0c      	cmp	r5, #12
 800502e:	d21f      	bcs.n	8005070 <_malloc_r+0x50>
 8005030:	250c      	movs	r5, #12
 8005032:	42a9      	cmp	r1, r5
 8005034:	d81e      	bhi.n	8005074 <_malloc_r+0x54>
 8005036:	0030      	movs	r0, r6
 8005038:	f000 f888 	bl	800514c <__malloc_lock>
 800503c:	4925      	ldr	r1, [pc, #148]	; (80050d4 <_malloc_r+0xb4>)
 800503e:	680a      	ldr	r2, [r1, #0]
 8005040:	0014      	movs	r4, r2
 8005042:	2c00      	cmp	r4, #0
 8005044:	d11a      	bne.n	800507c <_malloc_r+0x5c>
 8005046:	4f24      	ldr	r7, [pc, #144]	; (80050d8 <_malloc_r+0xb8>)
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d104      	bne.n	8005058 <_malloc_r+0x38>
 800504e:	0021      	movs	r1, r4
 8005050:	0030      	movs	r0, r6
 8005052:	f000 f869 	bl	8005128 <_sbrk_r>
 8005056:	6038      	str	r0, [r7, #0]
 8005058:	0029      	movs	r1, r5
 800505a:	0030      	movs	r0, r6
 800505c:	f000 f864 	bl	8005128 <_sbrk_r>
 8005060:	1c43      	adds	r3, r0, #1
 8005062:	d12b      	bne.n	80050bc <_malloc_r+0x9c>
 8005064:	230c      	movs	r3, #12
 8005066:	0030      	movs	r0, r6
 8005068:	6033      	str	r3, [r6, #0]
 800506a:	f000 f877 	bl	800515c <__malloc_unlock>
 800506e:	e003      	b.n	8005078 <_malloc_r+0x58>
 8005070:	2d00      	cmp	r5, #0
 8005072:	dade      	bge.n	8005032 <_malloc_r+0x12>
 8005074:	230c      	movs	r3, #12
 8005076:	6033      	str	r3, [r6, #0]
 8005078:	2000      	movs	r0, #0
 800507a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800507c:	6823      	ldr	r3, [r4, #0]
 800507e:	1b5b      	subs	r3, r3, r5
 8005080:	d419      	bmi.n	80050b6 <_malloc_r+0x96>
 8005082:	2b0b      	cmp	r3, #11
 8005084:	d903      	bls.n	800508e <_malloc_r+0x6e>
 8005086:	6023      	str	r3, [r4, #0]
 8005088:	18e4      	adds	r4, r4, r3
 800508a:	6025      	str	r5, [r4, #0]
 800508c:	e003      	b.n	8005096 <_malloc_r+0x76>
 800508e:	6863      	ldr	r3, [r4, #4]
 8005090:	42a2      	cmp	r2, r4
 8005092:	d10e      	bne.n	80050b2 <_malloc_r+0x92>
 8005094:	600b      	str	r3, [r1, #0]
 8005096:	0030      	movs	r0, r6
 8005098:	f000 f860 	bl	800515c <__malloc_unlock>
 800509c:	0020      	movs	r0, r4
 800509e:	2207      	movs	r2, #7
 80050a0:	300b      	adds	r0, #11
 80050a2:	1d23      	adds	r3, r4, #4
 80050a4:	4390      	bics	r0, r2
 80050a6:	1ac2      	subs	r2, r0, r3
 80050a8:	4298      	cmp	r0, r3
 80050aa:	d0e6      	beq.n	800507a <_malloc_r+0x5a>
 80050ac:	1a1b      	subs	r3, r3, r0
 80050ae:	50a3      	str	r3, [r4, r2]
 80050b0:	e7e3      	b.n	800507a <_malloc_r+0x5a>
 80050b2:	6053      	str	r3, [r2, #4]
 80050b4:	e7ef      	b.n	8005096 <_malloc_r+0x76>
 80050b6:	0022      	movs	r2, r4
 80050b8:	6864      	ldr	r4, [r4, #4]
 80050ba:	e7c2      	b.n	8005042 <_malloc_r+0x22>
 80050bc:	2303      	movs	r3, #3
 80050be:	1cc4      	adds	r4, r0, #3
 80050c0:	439c      	bics	r4, r3
 80050c2:	42a0      	cmp	r0, r4
 80050c4:	d0e1      	beq.n	800508a <_malloc_r+0x6a>
 80050c6:	1a21      	subs	r1, r4, r0
 80050c8:	0030      	movs	r0, r6
 80050ca:	f000 f82d 	bl	8005128 <_sbrk_r>
 80050ce:	1c43      	adds	r3, r0, #1
 80050d0:	d1db      	bne.n	800508a <_malloc_r+0x6a>
 80050d2:	e7c7      	b.n	8005064 <_malloc_r+0x44>
 80050d4:	200006ec 	.word	0x200006ec
 80050d8:	200006f0 	.word	0x200006f0

080050dc <_realloc_r>:
 80050dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050de:	0007      	movs	r7, r0
 80050e0:	000d      	movs	r5, r1
 80050e2:	0016      	movs	r6, r2
 80050e4:	2900      	cmp	r1, #0
 80050e6:	d105      	bne.n	80050f4 <_realloc_r+0x18>
 80050e8:	0011      	movs	r1, r2
 80050ea:	f7ff ff99 	bl	8005020 <_malloc_r>
 80050ee:	0004      	movs	r4, r0
 80050f0:	0020      	movs	r0, r4
 80050f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80050f4:	2a00      	cmp	r2, #0
 80050f6:	d103      	bne.n	8005100 <_realloc_r+0x24>
 80050f8:	f7ff ff48 	bl	8004f8c <_free_r>
 80050fc:	0034      	movs	r4, r6
 80050fe:	e7f7      	b.n	80050f0 <_realloc_r+0x14>
 8005100:	f000 f834 	bl	800516c <_malloc_usable_size_r>
 8005104:	002c      	movs	r4, r5
 8005106:	42b0      	cmp	r0, r6
 8005108:	d2f2      	bcs.n	80050f0 <_realloc_r+0x14>
 800510a:	0031      	movs	r1, r6
 800510c:	0038      	movs	r0, r7
 800510e:	f7ff ff87 	bl	8005020 <_malloc_r>
 8005112:	1e04      	subs	r4, r0, #0
 8005114:	d0ec      	beq.n	80050f0 <_realloc_r+0x14>
 8005116:	0029      	movs	r1, r5
 8005118:	0032      	movs	r2, r6
 800511a:	f7ff fbef 	bl	80048fc <memcpy>
 800511e:	0029      	movs	r1, r5
 8005120:	0038      	movs	r0, r7
 8005122:	f7ff ff33 	bl	8004f8c <_free_r>
 8005126:	e7e3      	b.n	80050f0 <_realloc_r+0x14>

08005128 <_sbrk_r>:
 8005128:	2300      	movs	r3, #0
 800512a:	b570      	push	{r4, r5, r6, lr}
 800512c:	4d06      	ldr	r5, [pc, #24]	; (8005148 <_sbrk_r+0x20>)
 800512e:	0004      	movs	r4, r0
 8005130:	0008      	movs	r0, r1
 8005132:	602b      	str	r3, [r5, #0]
 8005134:	f7fc fcf0 	bl	8001b18 <_sbrk>
 8005138:	1c43      	adds	r3, r0, #1
 800513a:	d103      	bne.n	8005144 <_sbrk_r+0x1c>
 800513c:	682b      	ldr	r3, [r5, #0]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d000      	beq.n	8005144 <_sbrk_r+0x1c>
 8005142:	6023      	str	r3, [r4, #0]
 8005144:	bd70      	pop	{r4, r5, r6, pc}
 8005146:	46c0      	nop			; (mov r8, r8)
 8005148:	20000864 	.word	0x20000864

0800514c <__malloc_lock>:
 800514c:	b510      	push	{r4, lr}
 800514e:	4802      	ldr	r0, [pc, #8]	; (8005158 <__malloc_lock+0xc>)
 8005150:	f000 f814 	bl	800517c <__retarget_lock_acquire_recursive>
 8005154:	bd10      	pop	{r4, pc}
 8005156:	46c0      	nop			; (mov r8, r8)
 8005158:	2000086c 	.word	0x2000086c

0800515c <__malloc_unlock>:
 800515c:	b510      	push	{r4, lr}
 800515e:	4802      	ldr	r0, [pc, #8]	; (8005168 <__malloc_unlock+0xc>)
 8005160:	f000 f80d 	bl	800517e <__retarget_lock_release_recursive>
 8005164:	bd10      	pop	{r4, pc}
 8005166:	46c0      	nop			; (mov r8, r8)
 8005168:	2000086c 	.word	0x2000086c

0800516c <_malloc_usable_size_r>:
 800516c:	1f0b      	subs	r3, r1, #4
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	1f18      	subs	r0, r3, #4
 8005172:	2b00      	cmp	r3, #0
 8005174:	da01      	bge.n	800517a <_malloc_usable_size_r+0xe>
 8005176:	580b      	ldr	r3, [r1, r0]
 8005178:	18c0      	adds	r0, r0, r3
 800517a:	4770      	bx	lr

0800517c <__retarget_lock_acquire_recursive>:
 800517c:	4770      	bx	lr

0800517e <__retarget_lock_release_recursive>:
 800517e:	4770      	bx	lr

08005180 <_init>:
 8005180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005182:	46c0      	nop			; (mov r8, r8)
 8005184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005186:	bc08      	pop	{r3}
 8005188:	469e      	mov	lr, r3
 800518a:	4770      	bx	lr

0800518c <_fini>:
 800518c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800518e:	46c0      	nop			; (mov r8, r8)
 8005190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005192:	bc08      	pop	{r3}
 8005194:	469e      	mov	lr, r3
 8005196:	4770      	bx	lr
