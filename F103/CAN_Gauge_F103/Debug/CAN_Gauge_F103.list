
CAN_Gauge_F103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d5c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002188  08003e68  08003e68  00013e68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ff0  08005ff0  00020318  2**0
                  CONTENTS
  4 .ARM          00000000  08005ff0  08005ff0  00020318  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005ff0  08005ff0  00020318  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ff0  08005ff0  00015ff0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ff4  08005ff4  00015ff4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000318  20000000  08005ff8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000564  20000318  08006310  00020318  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000087c  08006310  0002087c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020318  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b097  00000000  00000000  00020341  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001beb  00000000  00000000  0002b3d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000958  00000000  00000000  0002cfc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008a0  00000000  00000000  0002d920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017b56  00000000  00000000  0002e1c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000af07  00000000  00000000  00045d16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000865d3  00000000  00000000  00050c1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d71f0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a7c  00000000  00000000  000d7244  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000318 	.word	0x20000318
 8000128:	00000000 	.word	0x00000000
 800012c:	08003e50 	.word	0x08003e50

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000031c 	.word	0x2000031c
 8000148:	08003e50 	.word	0x08003e50

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__aeabi_f2iz>:
 8000608:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800060c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000610:	d30f      	bcc.n	8000632 <__aeabi_f2iz+0x2a>
 8000612:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000616:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800061a:	d90d      	bls.n	8000638 <__aeabi_f2iz+0x30>
 800061c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000620:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000624:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000628:	fa23 f002 	lsr.w	r0, r3, r2
 800062c:	bf18      	it	ne
 800062e:	4240      	negne	r0, r0
 8000630:	4770      	bx	lr
 8000632:	f04f 0000 	mov.w	r0, #0
 8000636:	4770      	bx	lr
 8000638:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800063c:	d101      	bne.n	8000642 <__aeabi_f2iz+0x3a>
 800063e:	0242      	lsls	r2, r0, #9
 8000640:	d105      	bne.n	800064e <__aeabi_f2iz+0x46>
 8000642:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000646:	bf08      	it	eq
 8000648:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800064c:	4770      	bx	lr
 800064e:	f04f 0000 	mov.w	r0, #0
 8000652:	4770      	bx	lr

08000654 <checkConfig>:
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
	msgRXstatus = 1;
	rxID = rxHeader.StdId;
}

void checkConfig(){
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0

	if (HAL_GPIO_ReadPin(GPIOB, config1_Pin) == 0){
 8000658:	2101      	movs	r1, #1
 800065a:	480f      	ldr	r0, [pc, #60]	; (8000698 <checkConfig+0x44>)
 800065c:	f001 fee8 	bl	8002430 <HAL_GPIO_ReadPin>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d104      	bne.n	8000670 <checkConfig+0x1c>
		config++;
 8000666:	4b0d      	ldr	r3, [pc, #52]	; (800069c <checkConfig+0x48>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	3301      	adds	r3, #1
 800066c:	4a0b      	ldr	r2, [pc, #44]	; (800069c <checkConfig+0x48>)
 800066e:	6013      	str	r3, [r2, #0]
	}
	if (HAL_GPIO_ReadPin(GPIOB, config2_Pin) == 0){
 8000670:	2102      	movs	r1, #2
 8000672:	4809      	ldr	r0, [pc, #36]	; (8000698 <checkConfig+0x44>)
 8000674:	f001 fedc 	bl	8002430 <HAL_GPIO_ReadPin>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d109      	bne.n	8000692 <checkConfig+0x3e>
		config++;
 800067e:	4b07      	ldr	r3, [pc, #28]	; (800069c <checkConfig+0x48>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	3301      	adds	r3, #1
 8000684:	4a05      	ldr	r2, [pc, #20]	; (800069c <checkConfig+0x48>)
 8000686:	6013      	str	r3, [r2, #0]
		config++;
 8000688:	4b04      	ldr	r3, [pc, #16]	; (800069c <checkConfig+0x48>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	3301      	adds	r3, #1
 800068e:	4a03      	ldr	r2, [pc, #12]	; (800069c <checkConfig+0x48>)
 8000690:	6013      	str	r3, [r2, #0]

	}
}
 8000692:	bf00      	nop
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	40010c00 	.word	0x40010c00
 800069c:	20000368 	.word	0x20000368

080006a0 <canFilterInit>:
	    btnPress=1;
	  }
	 HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
}

void canFilterInit(int hiID, int loID){
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
 80006a8:	6039      	str	r1, [r7, #0]
  	canfilter.FilterBank = 0;
 80006aa:	4b15      	ldr	r3, [pc, #84]	; (8000700 <canFilterInit+0x60>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	615a      	str	r2, [r3, #20]
  	canfilter.FilterMode = CAN_FILTERMODE_IDLIST;
 80006b0:	4b13      	ldr	r3, [pc, #76]	; (8000700 <canFilterInit+0x60>)
 80006b2:	2201      	movs	r2, #1
 80006b4:	619a      	str	r2, [r3, #24]
  	canfilter.FilterFIFOAssignment = CAN_RX_FIFO0;
 80006b6:	4b12      	ldr	r3, [pc, #72]	; (8000700 <canFilterInit+0x60>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	611a      	str	r2, [r3, #16]
  	canfilter.FilterIdHigh = hiID<<5;
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	015b      	lsls	r3, r3, #5
 80006c0:	461a      	mov	r2, r3
 80006c2:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <canFilterInit+0x60>)
 80006c4:	601a      	str	r2, [r3, #0]
  	canfilter.FilterIdLow = loID<<5;
 80006c6:	683b      	ldr	r3, [r7, #0]
 80006c8:	015b      	lsls	r3, r3, #5
 80006ca:	461a      	mov	r2, r3
 80006cc:	4b0c      	ldr	r3, [pc, #48]	; (8000700 <canFilterInit+0x60>)
 80006ce:	605a      	str	r2, [r3, #4]
  	canfilter.FilterMaskIdHigh = 0;
 80006d0:	4b0b      	ldr	r3, [pc, #44]	; (8000700 <canFilterInit+0x60>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	609a      	str	r2, [r3, #8]
  	canfilter.FilterMaskIdLow = 0;
 80006d6:	4b0a      	ldr	r3, [pc, #40]	; (8000700 <canFilterInit+0x60>)
 80006d8:	2200      	movs	r2, #0
 80006da:	60da      	str	r2, [r3, #12]
  	canfilter.FilterScale = CAN_FILTERSCALE_32BIT;
 80006dc:	4b08      	ldr	r3, [pc, #32]	; (8000700 <canFilterInit+0x60>)
 80006de:	2201      	movs	r2, #1
 80006e0:	61da      	str	r2, [r3, #28]
  	canfilter.FilterActivation = ENABLE;
 80006e2:	4b07      	ldr	r3, [pc, #28]	; (8000700 <canFilterInit+0x60>)
 80006e4:	2201      	movs	r2, #1
 80006e6:	621a      	str	r2, [r3, #32]
  	canfilter.SlaveStartFilterBank = 1;
 80006e8:	4b05      	ldr	r3, [pc, #20]	; (8000700 <canFilterInit+0x60>)
 80006ea:	2201      	movs	r2, #1
 80006ec:	625a      	str	r2, [r3, #36]	; 0x24
  	HAL_CAN_ConfigFilter(&hcan,&canfilter);
 80006ee:	4904      	ldr	r1, [pc, #16]	; (8000700 <canFilterInit+0x60>)
 80006f0:	4804      	ldr	r0, [pc, #16]	; (8000704 <canFilterInit+0x64>)
 80006f2:	f001 fb02 	bl	8001cfa <HAL_CAN_ConfigFilter>
}
 80006f6:	bf00      	nop
 80006f8:	3708      	adds	r7, #8
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	20000840 	.word	0x20000840
 8000704:	20000814 	.word	0x20000814

08000708 <byte2Data>:

int byte2Data(int b1, int b2){
 8000708:	b480      	push	{r7}
 800070a:	b085      	sub	sp, #20
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
 8000710:	6039      	str	r1, [r7, #0]
	// combine two bytes into a single value
	uint32_t sensorVal = (canRX[b1] << 8)|(canRX[b2]);
 8000712:	4a08      	ldr	r2, [pc, #32]	; (8000734 <byte2Data+0x2c>)
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	4413      	add	r3, r2
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	021b      	lsls	r3, r3, #8
 800071c:	4905      	ldr	r1, [pc, #20]	; (8000734 <byte2Data+0x2c>)
 800071e:	683a      	ldr	r2, [r7, #0]
 8000720:	440a      	add	r2, r1
 8000722:	7812      	ldrb	r2, [r2, #0]
 8000724:	4313      	orrs	r3, r2
 8000726:	60fb      	str	r3, [r7, #12]
	return sensorVal;
 8000728:	68fb      	ldr	r3, [r7, #12]
}
 800072a:	4618      	mov	r0, r3
 800072c:	3714      	adds	r7, #20
 800072e:	46bd      	mov	sp, r7
 8000730:	bc80      	pop	{r7}
 8000732:	4770      	bx	lr
 8000734:	20000334 	.word	0x20000334

08000738 <scaleData>:

void scaleData(struct rxData* data){
 8000738:	b590      	push	{r4, r7, lr}
 800073a:	b085      	sub	sp, #20
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
	float scaled =  (data->val * (data->multi/data->div));
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	69db      	ldr	r3, [r3, #28]
 8000744:	4618      	mov	r0, r3
 8000746:	f7ff fdbb 	bl	80002c0 <__aeabi_i2f>
 800074a:	4604      	mov	r4, r0
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681a      	ldr	r2, [r3, #0]
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	685b      	ldr	r3, [r3, #4]
 8000754:	4619      	mov	r1, r3
 8000756:	4610      	mov	r0, r2
 8000758:	f7ff feba 	bl	80004d0 <__aeabi_fdiv>
 800075c:	4603      	mov	r3, r0
 800075e:	4619      	mov	r1, r3
 8000760:	4620      	mov	r0, r4
 8000762:	f7ff fe01 	bl	8000368 <__aeabi_fmul>
 8000766:	4603      	mov	r3, r0
 8000768:	60fb      	str	r3, [r7, #12]
	data->scaled = scaled;
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	68fa      	ldr	r2, [r7, #12]
 800076e:	619a      	str	r2, [r3, #24]

}
 8000770:	bf00      	nop
 8000772:	3714      	adds	r7, #20
 8000774:	46bd      	mov	sp, r7
 8000776:	bd90      	pop	{r4, r7, pc}

08000778 <getData>:

void getData(){
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0


	switch(rxID){
 800077c:	4b6d      	ldr	r3, [pc, #436]	; (8000934 <getData+0x1bc>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8000784:	2b05      	cmp	r3, #5
 8000786:	f200 80d3 	bhi.w	8000930 <getData+0x1b8>
 800078a:	a201      	add	r2, pc, #4	; (adr r2, 8000790 <getData+0x18>)
 800078c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000790:	080007a9 	.word	0x080007a9
 8000794:	08000803 	.word	0x08000803
 8000798:	08000841 	.word	0x08000841
 800079c:	0800086d 	.word	0x0800086d
 80007a0:	080008b7 	.word	0x080008b7
 80007a4:	08000905 	.word	0x08000905

	case 512 :
		// counts or enabled status
		warningCount = byte2Data(1,0);
 80007a8:	2100      	movs	r1, #0
 80007aa:	2001      	movs	r0, #1
 80007ac:	f7ff ffac 	bl	8000708 <byte2Data>
 80007b0:	4603      	mov	r3, r0
 80007b2:	4a61      	ldr	r2, [pc, #388]	; (8000938 <getData+0x1c0>)
 80007b4:	6013      	str	r3, [r2, #0]
		lastError = byte2Data(3,2);
 80007b6:	2102      	movs	r1, #2
 80007b8:	2003      	movs	r0, #3
 80007ba:	f7ff ffa5 	bl	8000708 <byte2Data>
 80007be:	4603      	mov	r3, r0
 80007c0:	4a5e      	ldr	r2, [pc, #376]	; (800093c <getData+0x1c4>)
 80007c2:	6013      	str	r3, [r2, #0]
		revLimit = (canRX[4]) & 1;
 80007c4:	4b5e      	ldr	r3, [pc, #376]	; (8000940 <getData+0x1c8>)
 80007c6:	791b      	ldrb	r3, [r3, #4]
 80007c8:	f003 0301 	and.w	r3, r3, #1
 80007cc:	4a5d      	ldr	r2, [pc, #372]	; (8000944 <getData+0x1cc>)
 80007ce:	6013      	str	r3, [r2, #0]
		mainRelay = (canRX[4]) & (1<<1);
 80007d0:	4b5b      	ldr	r3, [pc, #364]	; (8000940 <getData+0x1c8>)
 80007d2:	791b      	ldrb	r3, [r3, #4]
 80007d4:	f003 0302 	and.w	r3, r3, #2
 80007d8:	4a5b      	ldr	r2, [pc, #364]	; (8000948 <getData+0x1d0>)
 80007da:	6013      	str	r3, [r2, #0]
		fuelPump = (canRX[4]) & (1<<2);
 80007dc:	4b58      	ldr	r3, [pc, #352]	; (8000940 <getData+0x1c8>)
 80007de:	791b      	ldrb	r3, [r3, #4]
 80007e0:	f003 0304 	and.w	r3, r3, #4
 80007e4:	4a59      	ldr	r2, [pc, #356]	; (800094c <getData+0x1d4>)
 80007e6:	6013      	str	r3, [r2, #0]
		CEL = (canRX[4]) & (1<<3);
 80007e8:	4b55      	ldr	r3, [pc, #340]	; (8000940 <getData+0x1c8>)
 80007ea:	791b      	ldrb	r3, [r3, #4]
 80007ec:	f003 0308 	and.w	r3, r3, #8
 80007f0:	4a57      	ldr	r2, [pc, #348]	; (8000950 <getData+0x1d8>)
 80007f2:	6013      	str	r3, [r2, #0]
		egoHeater = (canRX[4]) & (1<<4);
 80007f4:	4b52      	ldr	r3, [pc, #328]	; (8000940 <getData+0x1c8>)
 80007f6:	791b      	ldrb	r3, [r3, #4]
 80007f8:	f003 0310 	and.w	r3, r3, #16
 80007fc:	4a55      	ldr	r2, [pc, #340]	; (8000954 <getData+0x1dc>)
 80007fe:	6013      	str	r3, [r2, #0]
		break;
 8000800:	e096      	b.n	8000930 <getData+0x1b8>


	case 513 :
		rpm.val = byte2Data(1,0);		//RPM
 8000802:	2100      	movs	r1, #0
 8000804:	2001      	movs	r0, #1
 8000806:	f7ff ff7f 	bl	8000708 <byte2Data>
 800080a:	4603      	mov	r3, r0
 800080c:	4a52      	ldr	r2, [pc, #328]	; (8000958 <getData+0x1e0>)
 800080e:	61d3      	str	r3, [r2, #28]
		timing.val = byte2Data(3,2);	//Timing deg
 8000810:	2102      	movs	r1, #2
 8000812:	2003      	movs	r0, #3
 8000814:	f7ff ff78 	bl	8000708 <byte2Data>
 8000818:	4603      	mov	r3, r0
 800081a:	4a50      	ldr	r2, [pc, #320]	; (800095c <getData+0x1e4>)
 800081c:	61d3      	str	r3, [r2, #28]
		injDuty.val = byte2Data(5,4);	//Injector Duty %
 800081e:	2104      	movs	r1, #4
 8000820:	2005      	movs	r0, #5
 8000822:	f7ff ff71 	bl	8000708 <byte2Data>
 8000826:	4603      	mov	r3, r0
 8000828:	4a4d      	ldr	r2, [pc, #308]	; (8000960 <getData+0x1e8>)
 800082a:	61d3      	str	r3, [r2, #28]
		injDuty.val = injDuty.val;
 800082c:	4b4c      	ldr	r3, [pc, #304]	; (8000960 <getData+0x1e8>)
 800082e:	69db      	ldr	r3, [r3, #28]
 8000830:	4a4b      	ldr	r2, [pc, #300]	; (8000960 <getData+0x1e8>)
 8000832:	61d3      	str	r3, [r2, #28]
		vss.val = canRX[6];				//Vehicle Speed kph
 8000834:	4b42      	ldr	r3, [pc, #264]	; (8000940 <getData+0x1c8>)
 8000836:	799b      	ldrb	r3, [r3, #6]
 8000838:	461a      	mov	r2, r3
 800083a:	4b4a      	ldr	r3, [pc, #296]	; (8000964 <getData+0x1ec>)
 800083c:	61da      	str	r2, [r3, #28]
		break;
 800083e:	e077      	b.n	8000930 <getData+0x1b8>

	case 514 :
		accel.val = byte2Data(1,0);		//Accelerator Position
 8000840:	2100      	movs	r1, #0
 8000842:	2001      	movs	r0, #1
 8000844:	f7ff ff60 	bl	8000708 <byte2Data>
 8000848:	4603      	mov	r3, r0
 800084a:	4a47      	ldr	r2, [pc, #284]	; (8000968 <getData+0x1f0>)
 800084c:	61d3      	str	r3, [r2, #28]
		tps1.val = byte2Data(3,2);		//TPS 1 Position
 800084e:	2102      	movs	r1, #2
 8000850:	2003      	movs	r0, #3
 8000852:	f7ff ff59 	bl	8000708 <byte2Data>
 8000856:	4603      	mov	r3, r0
 8000858:	4a44      	ldr	r2, [pc, #272]	; (800096c <getData+0x1f4>)
 800085a:	61d3      	str	r3, [r2, #28]
		tps2.val = byte2Data(5,4);		//TPS 1 Position
 800085c:	2104      	movs	r1, #4
 800085e:	2005      	movs	r0, #5
 8000860:	f7ff ff52 	bl	8000708 <byte2Data>
 8000864:	4603      	mov	r3, r0
 8000866:	4a42      	ldr	r2, [pc, #264]	; (8000970 <getData+0x1f8>)
 8000868:	61d3      	str	r3, [r2, #28]
		break;
 800086a:	e061      	b.n	8000930 <getData+0x1b8>

	case 515 :
		map.val = byte2Data(1,0);			//MAP kPa
 800086c:	2100      	movs	r1, #0
 800086e:	2001      	movs	r0, #1
 8000870:	f7ff ff4a 	bl	8000708 <byte2Data>
 8000874:	4603      	mov	r3, r0
 8000876:	4a3f      	ldr	r2, [pc, #252]	; (8000974 <getData+0x1fc>)
 8000878:	61d3      	str	r3, [r2, #28]
		clt.val = canRX[2] - tempOffset; 	//Coolant Temp C
 800087a:	4b31      	ldr	r3, [pc, #196]	; (8000940 <getData+0x1c8>)
 800087c:	789b      	ldrb	r3, [r3, #2]
 800087e:	461a      	mov	r2, r3
 8000880:	2328      	movs	r3, #40	; 0x28
 8000882:	1ad3      	subs	r3, r2, r3
 8000884:	4a3c      	ldr	r2, [pc, #240]	; (8000978 <getData+0x200>)
 8000886:	61d3      	str	r3, [r2, #28]
		iat.val = canRX[3] - tempOffset;	//Intake Temp C
 8000888:	4b2d      	ldr	r3, [pc, #180]	; (8000940 <getData+0x1c8>)
 800088a:	78db      	ldrb	r3, [r3, #3]
 800088c:	461a      	mov	r2, r3
 800088e:	2328      	movs	r3, #40	; 0x28
 8000890:	1ad3      	subs	r3, r2, r3
 8000892:	4a3a      	ldr	r2, [pc, #232]	; (800097c <getData+0x204>)
 8000894:	61d3      	str	r3, [r2, #28]
		auxT1.val = canRX[4];				//Aux Temp 1 C
 8000896:	4b2a      	ldr	r3, [pc, #168]	; (8000940 <getData+0x1c8>)
 8000898:	791b      	ldrb	r3, [r3, #4]
 800089a:	461a      	mov	r2, r3
 800089c:	4b38      	ldr	r3, [pc, #224]	; (8000980 <getData+0x208>)
 800089e:	61da      	str	r2, [r3, #28]
		auxT2.val = canRX[5];				//Aux Temp 2 C
 80008a0:	4b27      	ldr	r3, [pc, #156]	; (8000940 <getData+0x1c8>)
 80008a2:	795b      	ldrb	r3, [r3, #5]
 80008a4:	461a      	mov	r2, r3
 80008a6:	4b37      	ldr	r3, [pc, #220]	; (8000984 <getData+0x20c>)
 80008a8:	61da      	str	r2, [r3, #28]
		//mcuT.val = canRX[6];				//MCU Temp C
		fuel.val = canRX[7];				//Fuel Level %
 80008aa:	4b25      	ldr	r3, [pc, #148]	; (8000940 <getData+0x1c8>)
 80008ac:	79db      	ldrb	r3, [r3, #7]
 80008ae:	461a      	mov	r2, r3
 80008b0:	4b35      	ldr	r3, [pc, #212]	; (8000988 <getData+0x210>)
 80008b2:	61da      	str	r2, [r3, #28]
		break;
 80008b4:	e03c      	b.n	8000930 <getData+0x1b8>

	case 516 :
		afr.val = byte2Data(1,0);		//AFR
 80008b6:	2100      	movs	r1, #0
 80008b8:	2001      	movs	r0, #1
 80008ba:	f7ff ff25 	bl	8000708 <byte2Data>
 80008be:	4603      	mov	r3, r0
 80008c0:	4a32      	ldr	r2, [pc, #200]	; (800098c <getData+0x214>)
 80008c2:	61d3      	str	r3, [r2, #28]
		afr.val = afr.val/10;
 80008c4:	4b31      	ldr	r3, [pc, #196]	; (800098c <getData+0x214>)
 80008c6:	69db      	ldr	r3, [r3, #28]
 80008c8:	4a31      	ldr	r2, [pc, #196]	; (8000990 <getData+0x218>)
 80008ca:	fb82 1203 	smull	r1, r2, r2, r3
 80008ce:	1092      	asrs	r2, r2, #2
 80008d0:	17db      	asrs	r3, r3, #31
 80008d2:	1ad3      	subs	r3, r2, r3
 80008d4:	4a2d      	ldr	r2, [pc, #180]	; (800098c <getData+0x214>)
 80008d6:	61d3      	str	r3, [r2, #28]

		oilPress.val = byte2Data(3,2);	//Oil Pressure kPa
 80008d8:	2102      	movs	r1, #2
 80008da:	2003      	movs	r0, #3
 80008dc:	f7ff ff14 	bl	8000708 <byte2Data>
 80008e0:	4603      	mov	r3, r0
 80008e2:	4a2c      	ldr	r2, [pc, #176]	; (8000994 <getData+0x21c>)
 80008e4:	61d3      	str	r3, [r2, #28]

		vvtPos.val = byte2Data(5,4);	//VVT Position deg
 80008e6:	2104      	movs	r1, #4
 80008e8:	2005      	movs	r0, #5
 80008ea:	f7ff ff0d 	bl	8000708 <byte2Data>
 80008ee:	4603      	mov	r3, r0
 80008f0:	4a29      	ldr	r2, [pc, #164]	; (8000998 <getData+0x220>)
 80008f2:	61d3      	str	r3, [r2, #28]

		battery.val = byte2Data(7,6);	//Battery mV
 80008f4:	2106      	movs	r1, #6
 80008f6:	2007      	movs	r0, #7
 80008f8:	f7ff ff06 	bl	8000708 <byte2Data>
 80008fc:	4603      	mov	r3, r0
 80008fe:	4a27      	ldr	r2, [pc, #156]	; (800099c <getData+0x224>)
 8000900:	61d3      	str	r3, [r2, #28]
		break;
 8000902:	e015      	b.n	8000930 <getData+0x1b8>

	case 517 :
		cylAirMass.val = byte2Data(1,0);	//Cylinder Air Mass mg
 8000904:	2100      	movs	r1, #0
 8000906:	2001      	movs	r0, #1
 8000908:	f7ff fefe 	bl	8000708 <byte2Data>
 800090c:	4603      	mov	r3, r0
 800090e:	4a24      	ldr	r2, [pc, #144]	; (80009a0 <getData+0x228>)
 8000910:	61d3      	str	r3, [r2, #28]

		estAir.val = byte2Data(3,2);		//Estimated Air Flow kg/h
 8000912:	2102      	movs	r1, #2
 8000914:	2003      	movs	r0, #3
 8000916:	f7ff fef7 	bl	8000708 <byte2Data>
 800091a:	4603      	mov	r3, r0
 800091c:	4a21      	ldr	r2, [pc, #132]	; (80009a4 <getData+0x22c>)
 800091e:	61d3      	str	r3, [r2, #28]

		injPW.val = byte2Data(5,4);			//Injector Pulse Width ms
 8000920:	2104      	movs	r1, #4
 8000922:	2005      	movs	r0, #5
 8000924:	f7ff fef0 	bl	8000708 <byte2Data>
 8000928:	4603      	mov	r3, r0
 800092a:	4a1f      	ldr	r2, [pc, #124]	; (80009a8 <getData+0x230>)
 800092c:	61d3      	str	r3, [r2, #28]

		break;
 800092e:	bf00      	nop

	}
}
 8000930:	bf00      	nop
 8000932:	bd80      	pop	{r7, pc}
 8000934:	2000083c 	.word	0x2000083c
 8000938:	20000344 	.word	0x20000344
 800093c:	20000348 	.word	0x20000348
 8000940:	20000334 	.word	0x20000334
 8000944:	2000034c 	.word	0x2000034c
 8000948:	20000350 	.word	0x20000350
 800094c:	20000354 	.word	0x20000354
 8000950:	20000358 	.word	0x20000358
 8000954:	2000035c 	.word	0x2000035c
 8000958:	20000014 	.word	0x20000014
 800095c:	20000054 	.word	0x20000054
 8000960:	20000074 	.word	0x20000074
 8000964:	20000034 	.word	0x20000034
 8000968:	20000094 	.word	0x20000094
 800096c:	200000b4 	.word	0x200000b4
 8000970:	200000d4 	.word	0x200000d4
 8000974:	200000f4 	.word	0x200000f4
 8000978:	20000114 	.word	0x20000114
 800097c:	20000134 	.word	0x20000134
 8000980:	20000154 	.word	0x20000154
 8000984:	20000174 	.word	0x20000174
 8000988:	20000194 	.word	0x20000194
 800098c:	200001b4 	.word	0x200001b4
 8000990:	66666667 	.word	0x66666667
 8000994:	200001d4 	.word	0x200001d4
 8000998:	200001f4 	.word	0x200001f4
 800099c:	20000214 	.word	0x20000214
 80009a0:	20000234 	.word	0x20000234
 80009a4:	20000254 	.word	0x20000254
 80009a8:	20000274 	.word	0x20000274

080009ac <printText>:

void printText( char* text, int X, int Y){
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b084      	sub	sp, #16
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	60f8      	str	r0, [r7, #12]
 80009b4:	60b9      	str	r1, [r7, #8]
 80009b6:	607a      	str	r2, [r7, #4]

	// Set cursor and print 11x18 text
	ssd1306_SetCursor(X, Y);
 80009b8:	68bb      	ldr	r3, [r7, #8]
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	687a      	ldr	r2, [r7, #4]
 80009be:	b2d2      	uxtb	r2, r2
 80009c0:	4611      	mov	r1, r2
 80009c2:	4618      	mov	r0, r3
 80009c4:	f000 fe88 	bl	80016d8 <ssd1306_SetCursor>
	ssd1306_WriteString(text, Font_11x18, White);
 80009c8:	4a04      	ldr	r2, [pc, #16]	; (80009dc <printText+0x30>)
 80009ca:	2301      	movs	r3, #1
 80009cc:	ca06      	ldmia	r2, {r1, r2}
 80009ce:	68f8      	ldr	r0, [r7, #12]
 80009d0:	f000 fe5c 	bl	800168c <ssd1306_WriteString>

}
 80009d4:	bf00      	nop
 80009d6:	3710      	adds	r7, #16
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	20000298 	.word	0x20000298

080009e0 <printDataDigitalLarge>:
	ssd1306_SetCursor(X, Y);
	ssd1306_WriteString(text, Font_16x26, White);

}

void printDataDigitalLarge(struct rxData * data, int X, int Y){
 80009e0:	b590      	push	{r4, r7, lr}
 80009e2:	b089      	sub	sp, #36	; 0x24
 80009e4:	af02      	add	r7, sp, #8
 80009e6:	60f8      	str	r0, [r7, #12]
 80009e8:	60b9      	str	r1, [r7, #8]
 80009ea:	607a      	str	r2, [r7, #4]

	// Set cursor x/y location and print the selected data
	// If decimal value is 0 it will not be printed
	// This will print the maximum stored value
	ssd1306_SetCursor(X, Y);
 80009ec:	68bb      	ldr	r3, [r7, #8]
 80009ee:	b2db      	uxtb	r3, r3
 80009f0:	687a      	ldr	r2, [r7, #4]
 80009f2:	b2d2      	uxtb	r2, r2
 80009f4:	4611      	mov	r1, r2
 80009f6:	4618      	mov	r0, r3
 80009f8:	f000 fe6e 	bl	80016d8 <ssd1306_SetCursor>

	int A = data->scaled;
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	699b      	ldr	r3, [r3, #24]
 8000a00:	4618      	mov	r0, r3
 8000a02:	f7ff fe01 	bl	8000608 <__aeabi_f2iz>
 8000a06:	4603      	mov	r3, r0
 8000a08:	617b      	str	r3, [r7, #20]
	int B = (data->scaled - A) * 100;
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	699c      	ldr	r4, [r3, #24]
 8000a0e:	6978      	ldr	r0, [r7, #20]
 8000a10:	f7ff fc56 	bl	80002c0 <__aeabi_i2f>
 8000a14:	4603      	mov	r3, r0
 8000a16:	4619      	mov	r1, r3
 8000a18:	4620      	mov	r0, r4
 8000a1a:	f7ff fb9b 	bl	8000154 <__aeabi_fsub>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	4919      	ldr	r1, [pc, #100]	; (8000a88 <printDataDigitalLarge+0xa8>)
 8000a22:	4618      	mov	r0, r3
 8000a24:	f7ff fca0 	bl	8000368 <__aeabi_fmul>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f7ff fdec 	bl	8000608 <__aeabi_f2iz>
 8000a30:	4603      	mov	r3, r0
 8000a32:	613b      	str	r3, [r7, #16]

	if ((data->dec == 0)) {
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	695b      	ldr	r3, [r3, #20]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d106      	bne.n	8000a4a <printDataDigitalLarge+0x6a>
		snprintf(buff, sizeof(buff), "%d", A);
 8000a3c:	697b      	ldr	r3, [r7, #20]
 8000a3e:	4a13      	ldr	r2, [pc, #76]	; (8000a8c <printDataDigitalLarge+0xac>)
 8000a40:	2110      	movs	r1, #16
 8000a42:	4813      	ldr	r0, [pc, #76]	; (8000a90 <printDataDigitalLarge+0xb0>)
 8000a44:	f002 fdc4 	bl	80035d0 <sniprintf>
 8000a48:	e013      	b.n	8000a72 <printDataDigitalLarge+0x92>

	}
	else{
		if (B < 10){
 8000a4a:	693b      	ldr	r3, [r7, #16]
 8000a4c:	2b09      	cmp	r3, #9
 8000a4e:	dc08      	bgt.n	8000a62 <printDataDigitalLarge+0x82>
			snprintf(buff, sizeof(buff), "%d.0%d", A, B);
 8000a50:	693b      	ldr	r3, [r7, #16]
 8000a52:	9300      	str	r3, [sp, #0]
 8000a54:	697b      	ldr	r3, [r7, #20]
 8000a56:	4a0f      	ldr	r2, [pc, #60]	; (8000a94 <printDataDigitalLarge+0xb4>)
 8000a58:	2110      	movs	r1, #16
 8000a5a:	480d      	ldr	r0, [pc, #52]	; (8000a90 <printDataDigitalLarge+0xb0>)
 8000a5c:	f002 fdb8 	bl	80035d0 <sniprintf>
 8000a60:	e007      	b.n	8000a72 <printDataDigitalLarge+0x92>
		}
		else{
		snprintf(buff, sizeof(buff), "%d.%d", A, B);
 8000a62:	693b      	ldr	r3, [r7, #16]
 8000a64:	9300      	str	r3, [sp, #0]
 8000a66:	697b      	ldr	r3, [r7, #20]
 8000a68:	4a0b      	ldr	r2, [pc, #44]	; (8000a98 <printDataDigitalLarge+0xb8>)
 8000a6a:	2110      	movs	r1, #16
 8000a6c:	4808      	ldr	r0, [pc, #32]	; (8000a90 <printDataDigitalLarge+0xb0>)
 8000a6e:	f002 fdaf 	bl	80035d0 <sniprintf>
		}
	}

	ssd1306_WriteString(buff, Font_16x26, White);
 8000a72:	4a0a      	ldr	r2, [pc, #40]	; (8000a9c <printDataDigitalLarge+0xbc>)
 8000a74:	2301      	movs	r3, #1
 8000a76:	ca06      	ldmia	r2, {r1, r2}
 8000a78:	4805      	ldr	r0, [pc, #20]	; (8000a90 <printDataDigitalLarge+0xb0>)
 8000a7a:	f000 fe07 	bl	800168c <ssd1306_WriteString>

}
 8000a7e:	bf00      	nop
 8000a80:	371c      	adds	r7, #28
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd90      	pop	{r4, r7, pc}
 8000a86:	bf00      	nop
 8000a88:	42c80000 	.word	0x42c80000
 8000a8c:	08003e68 	.word	0x08003e68
 8000a90:	20000804 	.word	0x20000804
 8000a94:	08003e6c 	.word	0x08003e6c
 8000a98:	08003e74 	.word	0x08003e74
 8000a9c:	200002a0 	.word	0x200002a0

08000aa0 <printValue>:

void printValue(int data, int X, int Y){
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b084      	sub	sp, #16
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	60f8      	str	r0, [r7, #12]
 8000aa8:	60b9      	str	r1, [r7, #8]
 8000aaa:	607a      	str	r2, [r7, #4]
	ssd1306_SetCursor(X, Y);
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	b2db      	uxtb	r3, r3
 8000ab0:	687a      	ldr	r2, [r7, #4]
 8000ab2:	b2d2      	uxtb	r2, r2
 8000ab4:	4611      	mov	r1, r2
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f000 fe0e 	bl	80016d8 <ssd1306_SetCursor>
	snprintf(buff, sizeof(buff), "%d", data);
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	4a07      	ldr	r2, [pc, #28]	; (8000adc <printValue+0x3c>)
 8000ac0:	2110      	movs	r1, #16
 8000ac2:	4807      	ldr	r0, [pc, #28]	; (8000ae0 <printValue+0x40>)
 8000ac4:	f002 fd84 	bl	80035d0 <sniprintf>
			ssd1306_WriteString(buff, Font_11x18, White);
 8000ac8:	4a06      	ldr	r2, [pc, #24]	; (8000ae4 <printValue+0x44>)
 8000aca:	2301      	movs	r3, #1
 8000acc:	ca06      	ldmia	r2, {r1, r2}
 8000ace:	4804      	ldr	r0, [pc, #16]	; (8000ae0 <printValue+0x40>)
 8000ad0:	f000 fddc 	bl	800168c <ssd1306_WriteString>
}
 8000ad4:	bf00      	nop
 8000ad6:	3710      	adds	r7, #16
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	08003e68 	.word	0x08003e68
 8000ae0:	20000804 	.word	0x20000804
 8000ae4:	20000298 	.word	0x20000298

08000ae8 <getPercent>:

int getPercent(struct rxData *data){
 8000ae8:	b590      	push	{r4, r7, lr}
 8000aea:	b085      	sub	sp, #20
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
	// This returns a percentage of the current value vs the set limits for the data

	// Offset current and max values by min, then divide by the max to get the percentage
	int p = ((data->val-(data->min*data->div/data->multi))*100);
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	69db      	ldr	r3, [r3, #28]
 8000af4:	4618      	mov	r0, r3
 8000af6:	f7ff fbe3 	bl	80002c0 <__aeabi_i2f>
 8000afa:	4604      	mov	r4, r0
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	68da      	ldr	r2, [r3, #12]
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	685b      	ldr	r3, [r3, #4]
 8000b04:	4619      	mov	r1, r3
 8000b06:	4610      	mov	r0, r2
 8000b08:	f7ff fc2e 	bl	8000368 <__aeabi_fmul>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	461a      	mov	r2, r3
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4619      	mov	r1, r3
 8000b16:	4610      	mov	r0, r2
 8000b18:	f7ff fcda 	bl	80004d0 <__aeabi_fdiv>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4620      	mov	r0, r4
 8000b22:	f7ff fb17 	bl	8000154 <__aeabi_fsub>
 8000b26:	4603      	mov	r3, r0
 8000b28:	491f      	ldr	r1, [pc, #124]	; (8000ba8 <getPercent+0xc0>)
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f7ff fc1c 	bl	8000368 <__aeabi_fmul>
 8000b30:	4603      	mov	r3, r0
 8000b32:	4618      	mov	r0, r3
 8000b34:	f7ff fd68 	bl	8000608 <__aeabi_f2iz>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	60fb      	str	r3, [r7, #12]
	p = p / ((data->max - data->min)*data->div/data->multi);
 8000b3c:	68f8      	ldr	r0, [r7, #12]
 8000b3e:	f7ff fbbf 	bl	80002c0 <__aeabi_i2f>
 8000b42:	4604      	mov	r4, r0
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	689a      	ldr	r2, [r3, #8]
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	68db      	ldr	r3, [r3, #12]
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	4610      	mov	r0, r2
 8000b50:	f7ff fb00 	bl	8000154 <__aeabi_fsub>
 8000b54:	4603      	mov	r3, r0
 8000b56:	461a      	mov	r2, r3
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	685b      	ldr	r3, [r3, #4]
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	4610      	mov	r0, r2
 8000b60:	f7ff fc02 	bl	8000368 <__aeabi_fmul>
 8000b64:	4603      	mov	r3, r0
 8000b66:	461a      	mov	r2, r3
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4610      	mov	r0, r2
 8000b70:	f7ff fcae 	bl	80004d0 <__aeabi_fdiv>
 8000b74:	4603      	mov	r3, r0
 8000b76:	4619      	mov	r1, r3
 8000b78:	4620      	mov	r0, r4
 8000b7a:	f7ff fca9 	bl	80004d0 <__aeabi_fdiv>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	4618      	mov	r0, r3
 8000b82:	f7ff fd41 	bl	8000608 <__aeabi_f2iz>
 8000b86:	4603      	mov	r3, r0
 8000b88:	60fb      	str	r3, [r7, #12]

	// Limit percentage to 0 -> 100
	if (p > 100){
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	2b64      	cmp	r3, #100	; 0x64
 8000b8e:	dd01      	ble.n	8000b94 <getPercent+0xac>
		p = 100;
 8000b90:	2364      	movs	r3, #100	; 0x64
 8000b92:	60fb      	str	r3, [r7, #12]
	}
	if (p < 0){
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	da01      	bge.n	8000b9e <getPercent+0xb6>
		p = 0;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	60fb      	str	r3, [r7, #12]
	}

	return p;
 8000b9e:	68fb      	ldr	r3, [r7, #12]
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	3714      	adds	r7, #20
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd90      	pop	{r4, r7, pc}
 8000ba8:	42c80000 	.word	0x42c80000

08000bac <printStartup>:

void printStartup(){
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0

#ifdef startupInfo
	ssd1306_Fill(Black);
 8000bb0:	2000      	movs	r0, #0
 8000bb2:	f000 fc2b 	bl	800140c <ssd1306_Fill>
	printValue(buildDate,5,05);
 8000bb6:	4b0e      	ldr	r3, [pc, #56]	; (8000bf0 <printStartup+0x44>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	2205      	movs	r2, #5
 8000bbc:	2105      	movs	r1, #5
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f7ff ff6e 	bl	8000aa0 <printValue>
	printValue(config,100,05);
 8000bc4:	4b0b      	ldr	r3, [pc, #44]	; (8000bf4 <printStartup+0x48>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	2205      	movs	r2, #5
 8000bca:	2164      	movs	r1, #100	; 0x64
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f7ff ff67 	bl	8000aa0 <printValue>
	printText("CAN 500k",5,25);
 8000bd2:	2219      	movs	r2, #25
 8000bd4:	2105      	movs	r1, #5
 8000bd6:	4808      	ldr	r0, [pc, #32]	; (8000bf8 <printStartup+0x4c>)
 8000bd8:	f7ff fee8 	bl	80009ac <printText>
	printText("ID 512",5,45);
 8000bdc:	222d      	movs	r2, #45	; 0x2d
 8000bde:	2105      	movs	r1, #5
 8000be0:	4806      	ldr	r0, [pc, #24]	; (8000bfc <printStartup+0x50>)
 8000be2:	f7ff fee3 	bl	80009ac <printText>
	ssd1306_UpdateScreen();
 8000be6:	f000 fc33 	bl	8001450 <ssd1306_UpdateScreen>
	printText("Waiting",5,05);
	ssd1306_UpdateScreen();

#endif

}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	20000000 	.word	0x20000000
 8000bf4:	20000368 	.word	0x20000368
 8000bf8:	08003e7c 	.word	0x08003e7c
 8000bfc:	08003e88 	.word	0x08003e88

08000c00 <LEDprogress>:

void LEDprogress(int l){
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]


	// Set all LED outputs off
				HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin|LED5_Pin|LED6_Pin|LED7_Pin|LED8_Pin|LED9_Pin|LED10_Pin, GPIO_PIN_RESET);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8000c0e:	4834      	ldr	r0, [pc, #208]	; (8000ce0 <LEDprogress+0xe0>)
 8000c10:	f001 fc25 	bl	800245e <HAL_GPIO_WritePin>
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	2b0a      	cmp	r3, #10
 8000c18:	d85d      	bhi.n	8000cd6 <LEDprogress+0xd6>
 8000c1a:	a201      	add	r2, pc, #4	; (adr r2, 8000c20 <LEDprogress+0x20>)
 8000c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c20:	08000c4d 	.word	0x08000c4d
 8000c24:	08000c5b 	.word	0x08000c5b
 8000c28:	08000c67 	.word	0x08000c67
 8000c2c:	08000c73 	.word	0x08000c73
 8000c30:	08000c7f 	.word	0x08000c7f
 8000c34:	08000c8b 	.word	0x08000c8b
 8000c38:	08000c97 	.word	0x08000c97
 8000c3c:	08000ca3 	.word	0x08000ca3
 8000c40:	08000caf 	.word	0x08000caf
 8000c44:	08000cbb 	.word	0x08000cbb
 8000c48:	08000cc9 	.word	0x08000cc9

	// Set 1 - 10 LEDs on
	switch(l){

	case 0 :
		 HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin|LED5_Pin|LED6_Pin|LED7_Pin|LED8_Pin|LED9_Pin|LED10_Pin, GPIO_PIN_RESET);
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8000c52:	4823      	ldr	r0, [pc, #140]	; (8000ce0 <LEDprogress+0xe0>)
 8000c54:	f001 fc03 	bl	800245e <HAL_GPIO_WritePin>
		 break;
 8000c58:	e03e      	b.n	8000cd8 <LEDprogress+0xd8>

	case 1 :
	 	 HAL_GPIO_WritePin(GPIOA, LED1_Pin, GPIO_PIN_SET);
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	2101      	movs	r1, #1
 8000c5e:	4820      	ldr	r0, [pc, #128]	; (8000ce0 <LEDprogress+0xe0>)
 8000c60:	f001 fbfd 	bl	800245e <HAL_GPIO_WritePin>
		 break;
 8000c64:	e038      	b.n	8000cd8 <LEDprogress+0xd8>

	case 2 :
	 	 HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin, GPIO_PIN_SET);
 8000c66:	2201      	movs	r2, #1
 8000c68:	2103      	movs	r1, #3
 8000c6a:	481d      	ldr	r0, [pc, #116]	; (8000ce0 <LEDprogress+0xe0>)
 8000c6c:	f001 fbf7 	bl	800245e <HAL_GPIO_WritePin>
		 break;
 8000c70:	e032      	b.n	8000cd8 <LEDprogress+0xd8>

	case 3 :
		HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_SET);
 8000c72:	2201      	movs	r2, #1
 8000c74:	2107      	movs	r1, #7
 8000c76:	481a      	ldr	r0, [pc, #104]	; (8000ce0 <LEDprogress+0xe0>)
 8000c78:	f001 fbf1 	bl	800245e <HAL_GPIO_WritePin>
		break;
 8000c7c:	e02c      	b.n	8000cd8 <LEDprogress+0xd8>

	case 4 :
		HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin, GPIO_PIN_SET);
 8000c7e:	2201      	movs	r2, #1
 8000c80:	210f      	movs	r1, #15
 8000c82:	4817      	ldr	r0, [pc, #92]	; (8000ce0 <LEDprogress+0xe0>)
 8000c84:	f001 fbeb 	bl	800245e <HAL_GPIO_WritePin>
		break;
 8000c88:	e026      	b.n	8000cd8 <LEDprogress+0xd8>

	case 5 :
		HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin|LED5_Pin, GPIO_PIN_SET);
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	211f      	movs	r1, #31
 8000c8e:	4814      	ldr	r0, [pc, #80]	; (8000ce0 <LEDprogress+0xe0>)
 8000c90:	f001 fbe5 	bl	800245e <HAL_GPIO_WritePin>
		break;
 8000c94:	e020      	b.n	8000cd8 <LEDprogress+0xd8>

	case 6 :
		HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin|LED5_Pin|LED6_Pin, GPIO_PIN_SET);
 8000c96:	2201      	movs	r2, #1
 8000c98:	213f      	movs	r1, #63	; 0x3f
 8000c9a:	4811      	ldr	r0, [pc, #68]	; (8000ce0 <LEDprogress+0xe0>)
 8000c9c:	f001 fbdf 	bl	800245e <HAL_GPIO_WritePin>
		break;
 8000ca0:	e01a      	b.n	8000cd8 <LEDprogress+0xd8>

	case 7 :
		HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin|LED5_Pin|LED6_Pin|LED7_Pin, GPIO_PIN_SET);
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	217f      	movs	r1, #127	; 0x7f
 8000ca6:	480e      	ldr	r0, [pc, #56]	; (8000ce0 <LEDprogress+0xe0>)
 8000ca8:	f001 fbd9 	bl	800245e <HAL_GPIO_WritePin>
		break;
 8000cac:	e014      	b.n	8000cd8 <LEDprogress+0xd8>

	case 8 :
		HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin|LED5_Pin|LED6_Pin|LED7_Pin|LED8_Pin, GPIO_PIN_SET);
 8000cae:	2201      	movs	r2, #1
 8000cb0:	21ff      	movs	r1, #255	; 0xff
 8000cb2:	480b      	ldr	r0, [pc, #44]	; (8000ce0 <LEDprogress+0xe0>)
 8000cb4:	f001 fbd3 	bl	800245e <HAL_GPIO_WritePin>
		break;
 8000cb8:	e00e      	b.n	8000cd8 <LEDprogress+0xd8>

	case 9 :
	 	 HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin|LED5_Pin|LED6_Pin|LED7_Pin|LED8_Pin|LED9_Pin, GPIO_PIN_SET);
 8000cba:	2201      	movs	r2, #1
 8000cbc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8000cc0:	4807      	ldr	r0, [pc, #28]	; (8000ce0 <LEDprogress+0xe0>)
 8000cc2:	f001 fbcc 	bl	800245e <HAL_GPIO_WritePin>
	 	 break;
 8000cc6:	e007      	b.n	8000cd8 <LEDprogress+0xd8>

	case 10 :
		HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin|LED5_Pin|LED6_Pin|LED7_Pin|LED8_Pin|LED9_Pin|LED10_Pin, GPIO_PIN_SET);
 8000cc8:	2201      	movs	r2, #1
 8000cca:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8000cce:	4804      	ldr	r0, [pc, #16]	; (8000ce0 <LEDprogress+0xe0>)
 8000cd0:	f001 fbc5 	bl	800245e <HAL_GPIO_WritePin>
	 	break;
 8000cd4:	e000      	b.n	8000cd8 <LEDprogress+0xd8>

	default:
		break;
 8000cd6:	bf00      	nop
	}


}
 8000cd8:	bf00      	nop
 8000cda:	3708      	adds	r7, #8
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	40010800 	.word	0x40010800

08000ce4 <LEDsingle>:

void LEDsingle(int l){
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]

	// Set all LED outputs off
				HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin|LED5_Pin|LED6_Pin|LED7_Pin|LED8_Pin|LED9_Pin|LED10_Pin, GPIO_PIN_RESET);
 8000cec:	2200      	movs	r2, #0
 8000cee:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8000cf2:	4834      	ldr	r0, [pc, #208]	; (8000dc4 <LEDsingle+0xe0>)
 8000cf4:	f001 fbb3 	bl	800245e <HAL_GPIO_WritePin>
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	3b01      	subs	r3, #1
 8000cfc:	2b09      	cmp	r3, #9
 8000cfe:	d855      	bhi.n	8000dac <LEDsingle+0xc8>
 8000d00:	a201      	add	r2, pc, #4	; (adr r2, 8000d08 <LEDsingle+0x24>)
 8000d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d06:	bf00      	nop
 8000d08:	08000d31 	.word	0x08000d31
 8000d0c:	08000d3d 	.word	0x08000d3d
 8000d10:	08000d49 	.word	0x08000d49
 8000d14:	08000d55 	.word	0x08000d55
 8000d18:	08000d61 	.word	0x08000d61
 8000d1c:	08000d6d 	.word	0x08000d6d
 8000d20:	08000d79 	.word	0x08000d79
 8000d24:	08000d85 	.word	0x08000d85
 8000d28:	08000d91 	.word	0x08000d91
 8000d2c:	08000d9f 	.word	0x08000d9f

	// Set single LED 1-10 on
	switch(l){

	case 1:
		 HAL_GPIO_WritePin(GPIOA, LED1_Pin, GPIO_PIN_SET);
 8000d30:	2201      	movs	r2, #1
 8000d32:	2101      	movs	r1, #1
 8000d34:	4823      	ldr	r0, [pc, #140]	; (8000dc4 <LEDsingle+0xe0>)
 8000d36:	f001 fb92 	bl	800245e <HAL_GPIO_WritePin>
				 break;
 8000d3a:	e03e      	b.n	8000dba <LEDsingle+0xd6>
	case 2:
		 HAL_GPIO_WritePin(GPIOA, LED2_Pin, GPIO_PIN_SET);
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	2102      	movs	r1, #2
 8000d40:	4820      	ldr	r0, [pc, #128]	; (8000dc4 <LEDsingle+0xe0>)
 8000d42:	f001 fb8c 	bl	800245e <HAL_GPIO_WritePin>
				 break;
 8000d46:	e038      	b.n	8000dba <LEDsingle+0xd6>
	case 3:
		 HAL_GPIO_WritePin(GPIOA, LED3_Pin, GPIO_PIN_SET);
 8000d48:	2201      	movs	r2, #1
 8000d4a:	2104      	movs	r1, #4
 8000d4c:	481d      	ldr	r0, [pc, #116]	; (8000dc4 <LEDsingle+0xe0>)
 8000d4e:	f001 fb86 	bl	800245e <HAL_GPIO_WritePin>
				 break;
 8000d52:	e032      	b.n	8000dba <LEDsingle+0xd6>
	case 4:
		 HAL_GPIO_WritePin(GPIOA, LED4_Pin, GPIO_PIN_SET);
 8000d54:	2201      	movs	r2, #1
 8000d56:	2108      	movs	r1, #8
 8000d58:	481a      	ldr	r0, [pc, #104]	; (8000dc4 <LEDsingle+0xe0>)
 8000d5a:	f001 fb80 	bl	800245e <HAL_GPIO_WritePin>
				 break;
 8000d5e:	e02c      	b.n	8000dba <LEDsingle+0xd6>
	case 5:
		 HAL_GPIO_WritePin(GPIOA, LED5_Pin, GPIO_PIN_SET);
 8000d60:	2201      	movs	r2, #1
 8000d62:	2110      	movs	r1, #16
 8000d64:	4817      	ldr	r0, [pc, #92]	; (8000dc4 <LEDsingle+0xe0>)
 8000d66:	f001 fb7a 	bl	800245e <HAL_GPIO_WritePin>
				 break;
 8000d6a:	e026      	b.n	8000dba <LEDsingle+0xd6>
	case 6:
		 HAL_GPIO_WritePin(GPIOA, LED6_Pin, GPIO_PIN_SET);
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	2120      	movs	r1, #32
 8000d70:	4814      	ldr	r0, [pc, #80]	; (8000dc4 <LEDsingle+0xe0>)
 8000d72:	f001 fb74 	bl	800245e <HAL_GPIO_WritePin>
				 break;
 8000d76:	e020      	b.n	8000dba <LEDsingle+0xd6>
	case 7:
		 HAL_GPIO_WritePin(GPIOA, LED7_Pin, GPIO_PIN_SET);
 8000d78:	2201      	movs	r2, #1
 8000d7a:	2140      	movs	r1, #64	; 0x40
 8000d7c:	4811      	ldr	r0, [pc, #68]	; (8000dc4 <LEDsingle+0xe0>)
 8000d7e:	f001 fb6e 	bl	800245e <HAL_GPIO_WritePin>
				 break;
 8000d82:	e01a      	b.n	8000dba <LEDsingle+0xd6>
	case 8:
		 HAL_GPIO_WritePin(GPIOA, LED8_Pin, GPIO_PIN_SET);
 8000d84:	2201      	movs	r2, #1
 8000d86:	2180      	movs	r1, #128	; 0x80
 8000d88:	480e      	ldr	r0, [pc, #56]	; (8000dc4 <LEDsingle+0xe0>)
 8000d8a:	f001 fb68 	bl	800245e <HAL_GPIO_WritePin>
				 break;
 8000d8e:	e014      	b.n	8000dba <LEDsingle+0xd6>
	case 9:
		 HAL_GPIO_WritePin(GPIOA, LED9_Pin, GPIO_PIN_SET);
 8000d90:	2201      	movs	r2, #1
 8000d92:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d96:	480b      	ldr	r0, [pc, #44]	; (8000dc4 <LEDsingle+0xe0>)
 8000d98:	f001 fb61 	bl	800245e <HAL_GPIO_WritePin>
				 break;
 8000d9c:	e00d      	b.n	8000dba <LEDsingle+0xd6>
	case 10:
		 HAL_GPIO_WritePin(GPIOA, LED10_Pin, GPIO_PIN_SET);
 8000d9e:	2201      	movs	r2, #1
 8000da0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000da4:	4807      	ldr	r0, [pc, #28]	; (8000dc4 <LEDsingle+0xe0>)
 8000da6:	f001 fb5a 	bl	800245e <HAL_GPIO_WritePin>
				 break;
 8000daa:	e006      	b.n	8000dba <LEDsingle+0xd6>
	default:
		HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin|LED5_Pin|LED6_Pin|LED7_Pin|LED8_Pin|LED9_Pin|LED10_Pin, GPIO_PIN_RESET);
 8000dac:	2200      	movs	r2, #0
 8000dae:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8000db2:	4804      	ldr	r0, [pc, #16]	; (8000dc4 <LEDsingle+0xe0>)
 8000db4:	f001 fb53 	bl	800245e <HAL_GPIO_WritePin>
		break;
 8000db8:	bf00      	nop

		}
}
 8000dba:	bf00      	nop
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	40010800 	.word	0x40010800

08000dc8 <printGauge>:

void printGauge(char *t, struct rxData *data2){
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
 8000dd0:	6039      	str	r1, [r7, #0]
//
	currentFilter = data2->ID;
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	691b      	ldr	r3, [r3, #16]
 8000dd6:	4a1c      	ldr	r2, [pc, #112]	; (8000e48 <printGauge+0x80>)
 8000dd8:	6013      	str	r3, [r2, #0]
	scaleData(data2);
 8000dda:	6838      	ldr	r0, [r7, #0]
 8000ddc:	f7ff fcac 	bl	8000738 <scaleData>
	p = getPercent(data2);
 8000de0:	6838      	ldr	r0, [r7, #0]
 8000de2:	f7ff fe81 	bl	8000ae8 <getPercent>
 8000de6:	4603      	mov	r3, r0
 8000de8:	4a18      	ldr	r2, [pc, #96]	; (8000e4c <printGauge+0x84>)
 8000dea:	6013      	str	r3, [r2, #0]
	printText(t,5,2);
 8000dec:	2202      	movs	r2, #2
 8000dee:	2105      	movs	r1, #5
 8000df0:	6878      	ldr	r0, [r7, #4]
 8000df2:	f7ff fddb 	bl	80009ac <printText>
	printDataDigitalLarge(data2,5,30);
 8000df6:	221e      	movs	r2, #30
 8000df8:	2105      	movs	r1, #5
 8000dfa:	6838      	ldr	r0, [r7, #0]
 8000dfc:	f7ff fdf0 	bl	80009e0 <printDataDigitalLarge>
	ssd1306_UpdateScreen();
 8000e00:	f000 fb26 	bl	8001450 <ssd1306_UpdateScreen>

	// Set LEDs
	p = p /10;
 8000e04:	4b11      	ldr	r3, [pc, #68]	; (8000e4c <printGauge+0x84>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a11      	ldr	r2, [pc, #68]	; (8000e50 <printGauge+0x88>)
 8000e0a:	fb82 1203 	smull	r1, r2, r2, r3
 8000e0e:	1092      	asrs	r2, r2, #2
 8000e10:	17db      	asrs	r3, r3, #31
 8000e12:	1ad3      	subs	r3, r2, r3
 8000e14:	4a0d      	ldr	r2, [pc, #52]	; (8000e4c <printGauge+0x84>)
 8000e16:	6013      	str	r3, [r2, #0]
	if (config == 1 || config == 3){
 8000e18:	4b0e      	ldr	r3, [pc, #56]	; (8000e54 <printGauge+0x8c>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	2b01      	cmp	r3, #1
 8000e1e:	d003      	beq.n	8000e28 <printGauge+0x60>
 8000e20:	4b0c      	ldr	r3, [pc, #48]	; (8000e54 <printGauge+0x8c>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	2b03      	cmp	r3, #3
 8000e26:	d105      	bne.n	8000e34 <printGauge+0x6c>
		LEDsingle(p);
 8000e28:	4b08      	ldr	r3, [pc, #32]	; (8000e4c <printGauge+0x84>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f7ff ff59 	bl	8000ce4 <LEDsingle>
 8000e32:	e005      	b.n	8000e40 <printGauge+0x78>
	}
	else {
		LEDprogress(p);
 8000e34:	4b05      	ldr	r3, [pc, #20]	; (8000e4c <printGauge+0x84>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f7ff fee1 	bl	8000c00 <LEDprogress>
	}
//
}
 8000e3e:	bf00      	nop
 8000e40:	bf00      	nop
 8000e42:	3708      	adds	r7, #8
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	20000294 	.word	0x20000294
 8000e4c:	20000790 	.word	0x20000790
 8000e50:	66666667 	.word	0x66666667
 8000e54:	20000368 	.word	0x20000368

08000e58 <updateGauge>:

void updateGauge(int gaugePrint){
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
	//Setup CAN filter with address for desired data
	//Print specified data to the display



	ssd1306_Fill(Black);
 8000e60:	2000      	movs	r0, #0
 8000e62:	f000 fad3 	bl	800140c <ssd1306_Fill>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	2b05      	cmp	r3, #5
 8000e6a:	d82d      	bhi.n	8000ec8 <updateGauge+0x70>
 8000e6c:	a201      	add	r2, pc, #4	; (adr r2, 8000e74 <updateGauge+0x1c>)
 8000e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e72:	bf00      	nop
 8000e74:	08000e8d 	.word	0x08000e8d
 8000e78:	08000e97 	.word	0x08000e97
 8000e7c:	08000ea1 	.word	0x08000ea1
 8000e80:	08000eab 	.word	0x08000eab
 8000e84:	08000eb5 	.word	0x08000eb5
 8000e88:	08000ebf 	.word	0x08000ebf
	switch (gaugePrint){

	case 0 : // AFR
		printGauge("AFR",&afr);
 8000e8c:	4912      	ldr	r1, [pc, #72]	; (8000ed8 <updateGauge+0x80>)
 8000e8e:	4813      	ldr	r0, [pc, #76]	; (8000edc <updateGauge+0x84>)
 8000e90:	f7ff ff9a 	bl	8000dc8 <printGauge>
		break;
 8000e94:	e01c      	b.n	8000ed0 <updateGauge+0x78>

	case 1 : // Intake Temp C
		printGauge("IAT C",&iat);
 8000e96:	4912      	ldr	r1, [pc, #72]	; (8000ee0 <updateGauge+0x88>)
 8000e98:	4812      	ldr	r0, [pc, #72]	; (8000ee4 <updateGauge+0x8c>)
 8000e9a:	f7ff ff95 	bl	8000dc8 <printGauge>
		break;
 8000e9e:	e017      	b.n	8000ed0 <updateGauge+0x78>

	case 2 : // clt C
		printGauge("CLT C",&clt);
 8000ea0:	4911      	ldr	r1, [pc, #68]	; (8000ee8 <updateGauge+0x90>)
 8000ea2:	4812      	ldr	r0, [pc, #72]	; (8000eec <updateGauge+0x94>)
 8000ea4:	f7ff ff90 	bl	8000dc8 <printGauge>
		break;
 8000ea8:	e012      	b.n	8000ed0 <updateGauge+0x78>

	case 3 : // map kpa
		printGauge("MAP kPa",&map);
 8000eaa:	4911      	ldr	r1, [pc, #68]	; (8000ef0 <updateGauge+0x98>)
 8000eac:	4811      	ldr	r0, [pc, #68]	; (8000ef4 <updateGauge+0x9c>)
 8000eae:	f7ff ff8b 	bl	8000dc8 <printGauge>
		break;
 8000eb2:	e00d      	b.n	8000ed0 <updateGauge+0x78>

	case 4 : //Battery
		printGauge("Voltage",&battery);
 8000eb4:	4910      	ldr	r1, [pc, #64]	; (8000ef8 <updateGauge+0xa0>)
 8000eb6:	4811      	ldr	r0, [pc, #68]	; (8000efc <updateGauge+0xa4>)
 8000eb8:	f7ff ff86 	bl	8000dc8 <printGauge>
		break;
 8000ebc:	e008      	b.n	8000ed0 <updateGauge+0x78>

	case 5 : //RPM
		printGauge("RPM",&rpm);
 8000ebe:	4910      	ldr	r1, [pc, #64]	; (8000f00 <updateGauge+0xa8>)
 8000ec0:	4810      	ldr	r0, [pc, #64]	; (8000f04 <updateGauge+0xac>)
 8000ec2:	f7ff ff81 	bl	8000dc8 <printGauge>
		break;
 8000ec6:	e003      	b.n	8000ed0 <updateGauge+0x78>


	default : // If no gauge is available move to next

		btnPress=1;
 8000ec8:	4b0f      	ldr	r3, [pc, #60]	; (8000f08 <updateGauge+0xb0>)
 8000eca:	2201      	movs	r2, #1
 8000ecc:	601a      	str	r2, [r3, #0]
		break;
 8000ece:	bf00      	nop

	}
}
 8000ed0:	bf00      	nop
 8000ed2:	3708      	adds	r7, #8
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	200001b4 	.word	0x200001b4
 8000edc:	08003e90 	.word	0x08003e90
 8000ee0:	20000134 	.word	0x20000134
 8000ee4:	08003e94 	.word	0x08003e94
 8000ee8:	20000114 	.word	0x20000114
 8000eec:	08003e9c 	.word	0x08003e9c
 8000ef0:	200000f4 	.word	0x200000f4
 8000ef4:	08003ea4 	.word	0x08003ea4
 8000ef8:	20000214 	.word	0x20000214
 8000efc:	08003eac 	.word	0x08003eac
 8000f00:	20000014 	.word	0x20000014
 8000f04:	08003eb4 	.word	0x08003eb4
 8000f08:	20000340 	.word	0x20000340

08000f0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f12:	f000 fd71 	bl	80019f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f16:	f000 f8d5 	bl	80010c4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  HAL_Delay(startupDelay);
 8000f1a:	4b5c      	ldr	r3, [pc, #368]	; (800108c <main+0x180>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f000 fdcc 	bl	8001abc <HAL_Delay>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f24:	f000 f96e 	bl	8001204 <MX_GPIO_Init>
  MX_CAN_Init();
 8000f28:	f000 f908 	bl	800113c <MX_CAN_Init>
  MX_I2C1_Init();
 8000f2c:	f000 f93c 	bl	80011a8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

	// Check config jumpers
	checkConfig();
 8000f30:	f7ff fb90 	bl	8000654 <checkConfig>

	// Initialize Display
	for (int OLEDInit = 0; OLEDInit<OLEDreinit ; OLEDInit++){
 8000f34:	2300      	movs	r3, #0
 8000f36:	607b      	str	r3, [r7, #4]
 8000f38:	e007      	b.n	8000f4a <main+0x3e>
	ssd1306_Init();
 8000f3a:	f000 f9fd 	bl	8001338 <ssd1306_Init>
	HAL_Delay(10);
 8000f3e:	200a      	movs	r0, #10
 8000f40:	f000 fdbc 	bl	8001abc <HAL_Delay>
	for (int OLEDInit = 0; OLEDInit<OLEDreinit ; OLEDInit++){
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	3301      	adds	r3, #1
 8000f48:	607b      	str	r3, [r7, #4]
 8000f4a:	4b51      	ldr	r3, [pc, #324]	; (8001090 <main+0x184>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	687a      	ldr	r2, [r7, #4]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	dbf2      	blt.n	8000f3a <main+0x2e>
	};

#ifdef OLEDstartup
	// Print startup info on OLED
	printStartup();
 8000f54:	f7ff fe2a 	bl	8000bac <printStartup>
#endif

#ifdef LEDstartup
	// Startup test for all LEDs
	int cycle = 0;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	603b      	str	r3, [r7, #0]
	while (cycle  < 11){
 8000f5c:	e008      	b.n	8000f70 <main+0x64>
	LEDsingle(cycle);
 8000f5e:	6838      	ldr	r0, [r7, #0]
 8000f60:	f7ff fec0 	bl	8000ce4 <LEDsingle>
	cycle ++;
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	3301      	adds	r3, #1
 8000f68:	603b      	str	r3, [r7, #0]
	HAL_Delay(50);
 8000f6a:	2032      	movs	r0, #50	; 0x32
 8000f6c:	f000 fda6 	bl	8001abc <HAL_Delay>
	while (cycle  < 11){
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	2b0a      	cmp	r3, #10
 8000f74:	ddf3      	ble.n	8000f5e <main+0x52>
	}
	HAL_Delay(100);
 8000f76:	2064      	movs	r0, #100	; 0x64
 8000f78:	f000 fda0 	bl	8001abc <HAL_Delay>
	LEDprogress(0);
 8000f7c:	2000      	movs	r0, #0
 8000f7e:	f7ff fe3f 	bl	8000c00 <LEDprogress>
	HAL_Delay(100);
 8000f82:	2064      	movs	r0, #100	; 0x64
 8000f84:	f000 fd9a 	bl	8001abc <HAL_Delay>
	LEDprogress(10);
 8000f88:	200a      	movs	r0, #10
 8000f8a:	f7ff fe39 	bl	8000c00 <LEDprogress>
	HAL_Delay(500);
 8000f8e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f92:	f000 fd93 	bl	8001abc <HAL_Delay>
	LEDprogress(0);
 8000f96:	2000      	movs	r0, #0
 8000f98:	f7ff fe32 	bl	8000c00 <LEDprogress>
#endif


// Setup CAN
canFilterInit(filterID[currentFilter], filterID[currentFilter]);
 8000f9c:	4b3d      	ldr	r3, [pc, #244]	; (8001094 <main+0x188>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a3d      	ldr	r2, [pc, #244]	; (8001098 <main+0x18c>)
 8000fa2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000fa6:	4b3b      	ldr	r3, [pc, #236]	; (8001094 <main+0x188>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	493b      	ldr	r1, [pc, #236]	; (8001098 <main+0x18c>)
 8000fac:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	4610      	mov	r0, r2
 8000fb4:	f7ff fb74 	bl	80006a0 <canFilterInit>
HAL_CAN_Start(&hcan);
 8000fb8:	4838      	ldr	r0, [pc, #224]	; (800109c <main+0x190>)
 8000fba:	f000 ff67 	bl	8001e8c <HAL_CAN_Start>
HAL_CAN_ActivateNotification(&hcan,CAN_IT_RX_FIFO0_MSG_PENDING);
 8000fbe:	2102      	movs	r1, #2
 8000fc0:	4836      	ldr	r0, [pc, #216]	; (800109c <main+0x190>)
 8000fc2:	f000 ffa7 	bl	8001f14 <HAL_CAN_ActivateNotification>
    /* USER CODE BEGIN 3 */


	#ifdef CANtimeout
		  // If no CAN messages are received for the specified wait time alert on OLED
		 if (lastCanMessage > 0 && ((HAL_GetTick() - lastCanMessage) > canWaitTime)){
 8000fc6:	4b36      	ldr	r3, [pc, #216]	; (80010a0 <main+0x194>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	dd21      	ble.n	8001012 <main+0x106>
 8000fce:	f000 fd6b 	bl	8001aa8 <HAL_GetTick>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	4a32      	ldr	r2, [pc, #200]	; (80010a0 <main+0x194>)
 8000fd6:	6812      	ldr	r2, [r2, #0]
 8000fd8:	1a9b      	subs	r3, r3, r2
 8000fda:	4a32      	ldr	r2, [pc, #200]	; (80010a4 <main+0x198>)
 8000fdc:	6812      	ldr	r2, [r2, #0]
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d917      	bls.n	8001012 <main+0x106>
				ssd1306_Fill(Black);
 8000fe2:	2000      	movs	r0, #0
 8000fe4:	f000 fa12 	bl	800140c <ssd1306_Fill>
				printText("Lost",5,5);
 8000fe8:	2205      	movs	r2, #5
 8000fea:	2105      	movs	r1, #5
 8000fec:	482e      	ldr	r0, [pc, #184]	; (80010a8 <main+0x19c>)
 8000fee:	f7ff fcdd 	bl	80009ac <printText>
				printText("Data",5,20);
 8000ff2:	2214      	movs	r2, #20
 8000ff4:	2105      	movs	r1, #5
 8000ff6:	482d      	ldr	r0, [pc, #180]	; (80010ac <main+0x1a0>)
 8000ff8:	f7ff fcd8 	bl	80009ac <printText>
				printText("Connection",5,35);
 8000ffc:	2223      	movs	r2, #35	; 0x23
 8000ffe:	2105      	movs	r1, #5
 8001000:	482b      	ldr	r0, [pc, #172]	; (80010b0 <main+0x1a4>)
 8001002:	f7ff fcd3 	bl	80009ac <printText>
				ssd1306_UpdateScreen();
 8001006:	f000 fa23 	bl	8001450 <ssd1306_UpdateScreen>
				LEDprogress(999);
 800100a:	f240 30e7 	movw	r0, #999	; 0x3e7
 800100e:	f7ff fdf7 	bl	8000c00 <LEDprogress>
		 	 }
	#endif

	// Get data from received CAN message
	 if (msgRXstatus == 1){
 8001012:	4b28      	ldr	r3, [pc, #160]	; (80010b4 <main+0x1a8>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	2b01      	cmp	r3, #1
 8001018:	d10f      	bne.n	800103a <main+0x12e>
		 getData();
 800101a:	f7ff fbad 	bl	8000778 <getData>
		 msgRXstatus = 0;
 800101e:	4b25      	ldr	r3, [pc, #148]	; (80010b4 <main+0x1a8>)
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
		 updateGauge(currentGauge);
 8001024:	4b24      	ldr	r3, [pc, #144]	; (80010b8 <main+0x1ac>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4618      	mov	r0, r3
 800102a:	f7ff ff15 	bl	8000e58 <updateGauge>
		 lastCanMessage = HAL_GetTick();
 800102e:	f000 fd3b 	bl	8001aa8 <HAL_GetTick>
 8001032:	4603      	mov	r3, r0
 8001034:	461a      	mov	r2, r3
 8001036:	4b1a      	ldr	r3, [pc, #104]	; (80010a0 <main+0x194>)
 8001038:	601a      	str	r2, [r3, #0]
	 }

	 // Cycle gauges if the button was pressed
	 if (btnPress == 1){
 800103a:	4b20      	ldr	r3, [pc, #128]	; (80010bc <main+0x1b0>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	2b01      	cmp	r3, #1
 8001040:	d1c1      	bne.n	8000fc6 <main+0xba>

		 // Reset button pressed status
		 btnPress = 0;
 8001042:	4b1e      	ldr	r3, [pc, #120]	; (80010bc <main+0x1b0>)
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]

		 //Advance to next gauge, cycle back to 1st if at last
		 currentGauge++;
 8001048:	4b1b      	ldr	r3, [pc, #108]	; (80010b8 <main+0x1ac>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	3301      	adds	r3, #1
 800104e:	4a1a      	ldr	r2, [pc, #104]	; (80010b8 <main+0x1ac>)
 8001050:	6013      	str	r3, [r2, #0]
		 if (currentGauge > totalNumGauge){
 8001052:	4b19      	ldr	r3, [pc, #100]	; (80010b8 <main+0x1ac>)
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	4b1a      	ldr	r3, [pc, #104]	; (80010c0 <main+0x1b4>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	429a      	cmp	r2, r3
 800105c:	dd02      	ble.n	8001064 <main+0x158>
			 currentGauge = 0;
 800105e:	4b16      	ldr	r3, [pc, #88]	; (80010b8 <main+0x1ac>)
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
		 }
		 updateGauge(currentGauge);
 8001064:	4b14      	ldr	r3, [pc, #80]	; (80010b8 <main+0x1ac>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff fef5 	bl	8000e58 <updateGauge>
		 canFilterInit(filterID[currentFilter], filterID[currentFilter]);
 800106e:	4b09      	ldr	r3, [pc, #36]	; (8001094 <main+0x188>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4a09      	ldr	r2, [pc, #36]	; (8001098 <main+0x18c>)
 8001074:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001078:	4b06      	ldr	r3, [pc, #24]	; (8001094 <main+0x188>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4906      	ldr	r1, [pc, #24]	; (8001098 <main+0x18c>)
 800107e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001082:	4619      	mov	r1, r3
 8001084:	4610      	mov	r0, r2
 8001086:	f7ff fb0b 	bl	80006a0 <canFilterInit>
		 if (lastCanMessage > 0 && ((HAL_GetTick() - lastCanMessage) > canWaitTime)){
 800108a:	e79c      	b.n	8000fc6 <main+0xba>
 800108c:	2000000c 	.word	0x2000000c
 8001090:	20000010 	.word	0x20000010
 8001094:	20000294 	.word	0x20000294
 8001098:	08003ee4 	.word	0x08003ee4
 800109c:	20000814 	.word	0x20000814
 80010a0:	20000364 	.word	0x20000364
 80010a4:	20000008 	.word	0x20000008
 80010a8:	08003eb8 	.word	0x08003eb8
 80010ac:	08003ec0 	.word	0x08003ec0
 80010b0:	08003ec8 	.word	0x08003ec8
 80010b4:	20000360 	.word	0x20000360
 80010b8:	2000033c 	.word	0x2000033c
 80010bc:	20000340 	.word	0x20000340
 80010c0:	20000004 	.word	0x20000004

080010c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b090      	sub	sp, #64	; 0x40
 80010c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ca:	f107 0318 	add.w	r3, r7, #24
 80010ce:	2228      	movs	r2, #40	; 0x28
 80010d0:	2100      	movs	r1, #0
 80010d2:	4618      	mov	r0, r3
 80010d4:	f002 fa74 	bl	80035c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010d8:	1d3b      	adds	r3, r7, #4
 80010da:	2200      	movs	r2, #0
 80010dc:	601a      	str	r2, [r3, #0]
 80010de:	605a      	str	r2, [r3, #4]
 80010e0:	609a      	str	r2, [r3, #8]
 80010e2:	60da      	str	r2, [r3, #12]
 80010e4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010e6:	2302      	movs	r3, #2
 80010e8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010ea:	2301      	movs	r3, #1
 80010ec:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010ee:	2310      	movs	r3, #16
 80010f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80010f2:	2300      	movs	r3, #0
 80010f4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010f6:	f107 0318 	add.w	r3, r7, #24
 80010fa:	4618      	mov	r0, r3
 80010fc:	f001 fe22 	bl	8002d44 <HAL_RCC_OscConfig>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001106:	f000 f8d9 	bl	80012bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800110a:	230f      	movs	r3, #15
 800110c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800110e:	2300      	movs	r3, #0
 8001110:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001112:	2300      	movs	r3, #0
 8001114:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001116:	2300      	movs	r3, #0
 8001118:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800111a:	2300      	movs	r3, #0
 800111c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800111e:	1d3b      	adds	r3, r7, #4
 8001120:	2100      	movs	r1, #0
 8001122:	4618      	mov	r0, r3
 8001124:	f002 f88e 	bl	8003244 <HAL_RCC_ClockConfig>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800112e:	f000 f8c5 	bl	80012bc <Error_Handler>
  }
}
 8001132:	bf00      	nop
 8001134:	3740      	adds	r7, #64	; 0x40
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
	...

0800113c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8001140:	4b17      	ldr	r3, [pc, #92]	; (80011a0 <MX_CAN_Init+0x64>)
 8001142:	4a18      	ldr	r2, [pc, #96]	; (80011a4 <MX_CAN_Init+0x68>)
 8001144:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 2;
 8001146:	4b16      	ldr	r3, [pc, #88]	; (80011a0 <MX_CAN_Init+0x64>)
 8001148:	2202      	movs	r2, #2
 800114a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800114c:	4b14      	ldr	r3, [pc, #80]	; (80011a0 <MX_CAN_Init+0x64>)
 800114e:	2200      	movs	r2, #0
 8001150:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001152:	4b13      	ldr	r3, [pc, #76]	; (80011a0 <MX_CAN_Init+0x64>)
 8001154:	2200      	movs	r2, #0
 8001156:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_4TQ;
 8001158:	4b11      	ldr	r3, [pc, #68]	; (80011a0 <MX_CAN_Init+0x64>)
 800115a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800115e:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 8001160:	4b0f      	ldr	r3, [pc, #60]	; (80011a0 <MX_CAN_Init+0x64>)
 8001162:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001166:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001168:	4b0d      	ldr	r3, [pc, #52]	; (80011a0 <MX_CAN_Init+0x64>)
 800116a:	2200      	movs	r2, #0
 800116c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800116e:	4b0c      	ldr	r3, [pc, #48]	; (80011a0 <MX_CAN_Init+0x64>)
 8001170:	2200      	movs	r2, #0
 8001172:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001174:	4b0a      	ldr	r3, [pc, #40]	; (80011a0 <MX_CAN_Init+0x64>)
 8001176:	2200      	movs	r2, #0
 8001178:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800117a:	4b09      	ldr	r3, [pc, #36]	; (80011a0 <MX_CAN_Init+0x64>)
 800117c:	2200      	movs	r2, #0
 800117e:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001180:	4b07      	ldr	r3, [pc, #28]	; (80011a0 <MX_CAN_Init+0x64>)
 8001182:	2200      	movs	r2, #0
 8001184:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001186:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <MX_CAN_Init+0x64>)
 8001188:	2200      	movs	r2, #0
 800118a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800118c:	4804      	ldr	r0, [pc, #16]	; (80011a0 <MX_CAN_Init+0x64>)
 800118e:	f000 fcb9 	bl	8001b04 <HAL_CAN_Init>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8001198:	f000 f890 	bl	80012bc <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 800119c:	bf00      	nop
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	20000814 	.word	0x20000814
 80011a4:	40006400 	.word	0x40006400

080011a8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011ac:	4b12      	ldr	r3, [pc, #72]	; (80011f8 <MX_I2C1_Init+0x50>)
 80011ae:	4a13      	ldr	r2, [pc, #76]	; (80011fc <MX_I2C1_Init+0x54>)
 80011b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80011b2:	4b11      	ldr	r3, [pc, #68]	; (80011f8 <MX_I2C1_Init+0x50>)
 80011b4:	4a12      	ldr	r2, [pc, #72]	; (8001200 <MX_I2C1_Init+0x58>)
 80011b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011b8:	4b0f      	ldr	r3, [pc, #60]	; (80011f8 <MX_I2C1_Init+0x50>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80011be:	4b0e      	ldr	r3, [pc, #56]	; (80011f8 <MX_I2C1_Init+0x50>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011c4:	4b0c      	ldr	r3, [pc, #48]	; (80011f8 <MX_I2C1_Init+0x50>)
 80011c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011ca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011cc:	4b0a      	ldr	r3, [pc, #40]	; (80011f8 <MX_I2C1_Init+0x50>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80011d2:	4b09      	ldr	r3, [pc, #36]	; (80011f8 <MX_I2C1_Init+0x50>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011d8:	4b07      	ldr	r3, [pc, #28]	; (80011f8 <MX_I2C1_Init+0x50>)
 80011da:	2200      	movs	r2, #0
 80011dc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011de:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <MX_I2C1_Init+0x50>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011e4:	4804      	ldr	r0, [pc, #16]	; (80011f8 <MX_I2C1_Init+0x50>)
 80011e6:	f001 f953 	bl	8002490 <HAL_I2C_Init>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011f0:	f000 f864 	bl	80012bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011f4:	bf00      	nop
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	200007b0 	.word	0x200007b0
 80011fc:	40005400 	.word	0x40005400
 8001200:	00061a80 	.word	0x00061a80

08001204 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b086      	sub	sp, #24
 8001208:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800120a:	f107 0308 	add.w	r3, r7, #8
 800120e:	2200      	movs	r2, #0
 8001210:	601a      	str	r2, [r3, #0]
 8001212:	605a      	str	r2, [r3, #4]
 8001214:	609a      	str	r2, [r3, #8]
 8001216:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001218:	4b25      	ldr	r3, [pc, #148]	; (80012b0 <MX_GPIO_Init+0xac>)
 800121a:	699b      	ldr	r3, [r3, #24]
 800121c:	4a24      	ldr	r2, [pc, #144]	; (80012b0 <MX_GPIO_Init+0xac>)
 800121e:	f043 0304 	orr.w	r3, r3, #4
 8001222:	6193      	str	r3, [r2, #24]
 8001224:	4b22      	ldr	r3, [pc, #136]	; (80012b0 <MX_GPIO_Init+0xac>)
 8001226:	699b      	ldr	r3, [r3, #24]
 8001228:	f003 0304 	and.w	r3, r3, #4
 800122c:	607b      	str	r3, [r7, #4]
 800122e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001230:	4b1f      	ldr	r3, [pc, #124]	; (80012b0 <MX_GPIO_Init+0xac>)
 8001232:	699b      	ldr	r3, [r3, #24]
 8001234:	4a1e      	ldr	r2, [pc, #120]	; (80012b0 <MX_GPIO_Init+0xac>)
 8001236:	f043 0308 	orr.w	r3, r3, #8
 800123a:	6193      	str	r3, [r2, #24]
 800123c:	4b1c      	ldr	r3, [pc, #112]	; (80012b0 <MX_GPIO_Init+0xac>)
 800123e:	699b      	ldr	r3, [r3, #24]
 8001240:	f003 0308 	and.w	r3, r3, #8
 8001244:	603b      	str	r3, [r7, #0]
 8001246:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin
 8001248:	2200      	movs	r2, #0
 800124a:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800124e:	4819      	ldr	r0, [pc, #100]	; (80012b4 <MX_GPIO_Init+0xb0>)
 8001250:	f001 f905 	bl	800245e <HAL_GPIO_WritePin>
                          |LED9_Pin|LED10_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LED4_Pin
                           LED5_Pin LED6_Pin LED7_Pin LED8_Pin
                           LED9_Pin LED10_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin
 8001254:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8001258:	60bb      	str	r3, [r7, #8]
                          |LED5_Pin|LED6_Pin|LED7_Pin|LED8_Pin
                          |LED9_Pin|LED10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800125a:	2301      	movs	r3, #1
 800125c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125e:	2300      	movs	r3, #0
 8001260:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001262:	2302      	movs	r3, #2
 8001264:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001266:	f107 0308 	add.w	r3, r7, #8
 800126a:	4619      	mov	r1, r3
 800126c:	4811      	ldr	r0, [pc, #68]	; (80012b4 <MX_GPIO_Init+0xb0>)
 800126e:	f000 ff5b 	bl	8002128 <HAL_GPIO_Init>

  /*Configure GPIO pins : config1_Pin config2_Pin CONFIG_3_Pin CONFIG_4_Pin
                           CONFIG_5_Pin SPARE_1_Pin SPARE_2_Pin */
  GPIO_InitStruct.Pin = config1_Pin|config2_Pin|CONFIG_3_Pin|CONFIG_4_Pin
 8001272:	f24e 031b 	movw	r3, #57371	; 0xe01b
 8001276:	60bb      	str	r3, [r7, #8]
                          |CONFIG_5_Pin|SPARE_1_Pin|SPARE_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001278:	2300      	movs	r3, #0
 800127a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127c:	2300      	movs	r3, #0
 800127e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001280:	f107 0308 	add.w	r3, r7, #8
 8001284:	4619      	mov	r1, r3
 8001286:	480c      	ldr	r0, [pc, #48]	; (80012b8 <MX_GPIO_Init+0xb4>)
 8001288:	f000 ff4e 	bl	8002128 <HAL_GPIO_Init>

  /*Configure GPIO pin : button_Pin */
  GPIO_InitStruct.Pin = button_Pin;
 800128c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001290:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001292:	2300      	movs	r3, #0
 8001294:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001296:	2300      	movs	r3, #0
 8001298:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(button_GPIO_Port, &GPIO_InitStruct);
 800129a:	f107 0308 	add.w	r3, r7, #8
 800129e:	4619      	mov	r1, r3
 80012a0:	4804      	ldr	r0, [pc, #16]	; (80012b4 <MX_GPIO_Init+0xb0>)
 80012a2:	f000 ff41 	bl	8002128 <HAL_GPIO_Init>

}
 80012a6:	bf00      	nop
 80012a8:	3718      	adds	r7, #24
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	40021000 	.word	0x40021000
 80012b4:	40010800 	.word	0x40010800
 80012b8:	40010c00 	.word	0x40010c00

080012bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012c0:	b672      	cpsid	i
}
 80012c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012c4:	e7fe      	b.n	80012c4 <Error_Handler+0x8>

080012c6 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80012c6:	b480      	push	{r7}
 80012c8:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80012ca:	bf00      	nop
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bc80      	pop	{r7}
 80012d0:	4770      	bx	lr
	...

080012d4 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b086      	sub	sp, #24
 80012d8:	af04      	add	r7, sp, #16
 80012da:	4603      	mov	r3, r0
 80012dc:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80012de:	f04f 33ff 	mov.w	r3, #4294967295
 80012e2:	9302      	str	r3, [sp, #8]
 80012e4:	2301      	movs	r3, #1
 80012e6:	9301      	str	r3, [sp, #4]
 80012e8:	1dfb      	adds	r3, r7, #7
 80012ea:	9300      	str	r3, [sp, #0]
 80012ec:	2301      	movs	r3, #1
 80012ee:	2200      	movs	r2, #0
 80012f0:	2178      	movs	r1, #120	; 0x78
 80012f2:	4803      	ldr	r0, [pc, #12]	; (8001300 <ssd1306_WriteCommand+0x2c>)
 80012f4:	f001 fa10 	bl	8002718 <HAL_I2C_Mem_Write>
}
 80012f8:	bf00      	nop
 80012fa:	3708      	adds	r7, #8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	200007b0 	.word	0x200007b0

08001304 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001304:	b580      	push	{r7, lr}
 8001306:	b086      	sub	sp, #24
 8001308:	af04      	add	r7, sp, #16
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	b29b      	uxth	r3, r3
 8001312:	f04f 32ff 	mov.w	r2, #4294967295
 8001316:	9202      	str	r2, [sp, #8]
 8001318:	9301      	str	r3, [sp, #4]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	9300      	str	r3, [sp, #0]
 800131e:	2301      	movs	r3, #1
 8001320:	2240      	movs	r2, #64	; 0x40
 8001322:	2178      	movs	r1, #120	; 0x78
 8001324:	4803      	ldr	r0, [pc, #12]	; (8001334 <ssd1306_WriteData+0x30>)
 8001326:	f001 f9f7 	bl	8002718 <HAL_I2C_Mem_Write>
}
 800132a:	bf00      	nop
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	200007b0 	.word	0x200007b0

08001338 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 800133c:	f7ff ffc3 	bl	80012c6 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001340:	2064      	movs	r0, #100	; 0x64
 8001342:	f000 fbbb 	bl	8001abc <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001346:	2000      	movs	r0, #0
 8001348:	f000 f9f2 	bl	8001730 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 800134c:	2020      	movs	r0, #32
 800134e:	f7ff ffc1 	bl	80012d4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001352:	2010      	movs	r0, #16
 8001354:	f7ff ffbe 	bl	80012d4 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001358:	20b0      	movs	r0, #176	; 0xb0
 800135a:	f7ff ffbb 	bl	80012d4 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror verticallys
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800135e:	20c8      	movs	r0, #200	; 0xc8
 8001360:	f7ff ffb8 	bl	80012d4 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001364:	2000      	movs	r0, #0
 8001366:	f7ff ffb5 	bl	80012d4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800136a:	2010      	movs	r0, #16
 800136c:	f7ff ffb2 	bl	80012d4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001370:	2040      	movs	r0, #64	; 0x40
 8001372:	f7ff ffaf 	bl	80012d4 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001376:	20ff      	movs	r0, #255	; 0xff
 8001378:	f000 f9c6 	bl	8001708 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 800137c:	20a1      	movs	r0, #161	; 0xa1
 800137e:	f7ff ffa9 	bl	80012d4 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001382:	20a6      	movs	r0, #166	; 0xa6
 8001384:	f7ff ffa6 	bl	80012d4 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001388:	20a8      	movs	r0, #168	; 0xa8
 800138a:	f7ff ffa3 	bl	80012d4 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800138e:	203f      	movs	r0, #63	; 0x3f
 8001390:	f7ff ffa0 	bl	80012d4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001394:	20a4      	movs	r0, #164	; 0xa4
 8001396:	f7ff ff9d 	bl	80012d4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800139a:	20d3      	movs	r0, #211	; 0xd3
 800139c:	f7ff ff9a 	bl	80012d4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x0); //-not offset
 80013a0:	2000      	movs	r0, #0
 80013a2:	f7ff ff97 	bl	80012d4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80013a6:	20d5      	movs	r0, #213	; 0xd5
 80013a8:	f7ff ff94 	bl	80012d4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //--set divide ratio
 80013ac:	2010      	movs	r0, #16
 80013ae:	f7ff ff91 	bl	80012d4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80013b2:	20d9      	movs	r0, #217	; 0xd9
 80013b4:	f7ff ff8e 	bl	80012d4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80013b8:	2022      	movs	r0, #34	; 0x22
 80013ba:	f7ff ff8b 	bl	80012d4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80013be:	20da      	movs	r0, #218	; 0xda
 80013c0:	f7ff ff88 	bl	80012d4 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80013c4:	2012      	movs	r0, #18
 80013c6:	f7ff ff85 	bl	80012d4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80013ca:	20db      	movs	r0, #219	; 0xdb
 80013cc:	f7ff ff82 	bl	80012d4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVccs
 80013d0:	2020      	movs	r0, #32
 80013d2:	f7ff ff7f 	bl	80012d4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80013d6:	208d      	movs	r0, #141	; 0x8d
 80013d8:	f7ff ff7c 	bl	80012d4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80013dc:	2014      	movs	r0, #20
 80013de:	f7ff ff79 	bl	80012d4 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80013e2:	2001      	movs	r0, #1
 80013e4:	f000 f9a4 	bl	8001730 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80013e8:	2000      	movs	r0, #0
 80013ea:	f000 f80f 	bl	800140c <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80013ee:	f000 f82f 	bl	8001450 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80013f2:	4b05      	ldr	r3, [pc, #20]	; (8001408 <ssd1306_Init+0xd0>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80013f8:	4b03      	ldr	r3, [pc, #12]	; (8001408 <ssd1306_Init+0xd0>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80013fe:	4b02      	ldr	r3, [pc, #8]	; (8001408 <ssd1306_Init+0xd0>)
 8001400:	2201      	movs	r2, #1
 8001402:	715a      	strb	r2, [r3, #5]
}
 8001404:	bf00      	nop
 8001406:	bd80      	pop	{r7, pc}
 8001408:	2000077c 	.word	0x2000077c

0800140c <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 800140c:	b480      	push	{r7}
 800140e:	b085      	sub	sp, #20
 8001410:	af00      	add	r7, sp, #0
 8001412:	4603      	mov	r3, r0
 8001414:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001416:	2300      	movs	r3, #0
 8001418:	60fb      	str	r3, [r7, #12]
 800141a:	e00d      	b.n	8001438 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 800141c:	79fb      	ldrb	r3, [r7, #7]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d101      	bne.n	8001426 <ssd1306_Fill+0x1a>
 8001422:	2100      	movs	r1, #0
 8001424:	e000      	b.n	8001428 <ssd1306_Fill+0x1c>
 8001426:	21ff      	movs	r1, #255	; 0xff
 8001428:	4a08      	ldr	r2, [pc, #32]	; (800144c <ssd1306_Fill+0x40>)
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	4413      	add	r3, r2
 800142e:	460a      	mov	r2, r1
 8001430:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	3301      	adds	r3, #1
 8001436:	60fb      	str	r3, [r7, #12]
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	f5b3 6f82 	cmp.w	r3, #1040	; 0x410
 800143e:	d3ed      	bcc.n	800141c <ssd1306_Fill+0x10>
    }
}
 8001440:	bf00      	nop
 8001442:	bf00      	nop
 8001444:	3714      	adds	r7, #20
 8001446:	46bd      	mov	sp, r7
 8001448:	bc80      	pop	{r7}
 800144a:	4770      	bx	lr
 800144c:	2000036c 	.word	0x2000036c

08001450 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001456:	2300      	movs	r3, #0
 8001458:	71fb      	strb	r3, [r7, #7]
 800145a:	e01a      	b.n	8001492 <ssd1306_UpdateScreen+0x42>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 800145c:	79fb      	ldrb	r3, [r7, #7]
 800145e:	3b50      	subs	r3, #80	; 0x50
 8001460:	b2db      	uxtb	r3, r3
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff ff36 	bl	80012d4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 8001468:	2000      	movs	r0, #0
 800146a:	f7ff ff33 	bl	80012d4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 800146e:	2010      	movs	r0, #16
 8001470:	f7ff ff30 	bl	80012d4 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001474:	79fa      	ldrb	r2, [r7, #7]
 8001476:	4613      	mov	r3, r2
 8001478:	019b      	lsls	r3, r3, #6
 800147a:	4413      	add	r3, r2
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	461a      	mov	r2, r3
 8001480:	4b08      	ldr	r3, [pc, #32]	; (80014a4 <ssd1306_UpdateScreen+0x54>)
 8001482:	4413      	add	r3, r2
 8001484:	2182      	movs	r1, #130	; 0x82
 8001486:	4618      	mov	r0, r3
 8001488:	f7ff ff3c 	bl	8001304 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800148c:	79fb      	ldrb	r3, [r7, #7]
 800148e:	3301      	adds	r3, #1
 8001490:	71fb      	strb	r3, [r7, #7]
 8001492:	79fb      	ldrb	r3, [r7, #7]
 8001494:	2b07      	cmp	r3, #7
 8001496:	d9e1      	bls.n	800145c <ssd1306_UpdateScreen+0xc>
    }
}
 8001498:	bf00      	nop
 800149a:	bf00      	nop
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	2000036c 	.word	0x2000036c

080014a8 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80014a8:	b490      	push	{r4, r7}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	4603      	mov	r3, r0
 80014b0:	71fb      	strb	r3, [r7, #7]
 80014b2:	460b      	mov	r3, r1
 80014b4:	71bb      	strb	r3, [r7, #6]
 80014b6:	4613      	mov	r3, r2
 80014b8:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80014ba:	79fb      	ldrb	r3, [r7, #7]
 80014bc:	2b81      	cmp	r3, #129	; 0x81
 80014be:	d854      	bhi.n	800156a <ssd1306_DrawPixel+0xc2>
 80014c0:	79bb      	ldrb	r3, [r7, #6]
 80014c2:	2b3f      	cmp	r3, #63	; 0x3f
 80014c4:	d851      	bhi.n	800156a <ssd1306_DrawPixel+0xc2>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 80014c6:	4b2b      	ldr	r3, [pc, #172]	; (8001574 <ssd1306_DrawPixel+0xcc>)
 80014c8:	791b      	ldrb	r3, [r3, #4]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d006      	beq.n	80014dc <ssd1306_DrawPixel+0x34>
        color = (SSD1306_COLOR)!color;
 80014ce:	797b      	ldrb	r3, [r7, #5]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	bf0c      	ite	eq
 80014d4:	2301      	moveq	r3, #1
 80014d6:	2300      	movne	r3, #0
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	717b      	strb	r3, [r7, #5]
    }
    
    // Draw in the right color
    if(color == White) {
 80014dc:	797b      	ldrb	r3, [r7, #5]
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d120      	bne.n	8001524 <ssd1306_DrawPixel+0x7c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80014e2:	79fa      	ldrb	r2, [r7, #7]
 80014e4:	79bb      	ldrb	r3, [r7, #6]
 80014e6:	08db      	lsrs	r3, r3, #3
 80014e8:	b2d8      	uxtb	r0, r3
 80014ea:	4601      	mov	r1, r0
 80014ec:	460b      	mov	r3, r1
 80014ee:	019b      	lsls	r3, r3, #6
 80014f0:	440b      	add	r3, r1
 80014f2:	005b      	lsls	r3, r3, #1
 80014f4:	4413      	add	r3, r2
 80014f6:	4a20      	ldr	r2, [pc, #128]	; (8001578 <ssd1306_DrawPixel+0xd0>)
 80014f8:	5cd3      	ldrb	r3, [r2, r3]
 80014fa:	b25a      	sxtb	r2, r3
 80014fc:	79bb      	ldrb	r3, [r7, #6]
 80014fe:	f003 0307 	and.w	r3, r3, #7
 8001502:	2101      	movs	r1, #1
 8001504:	fa01 f303 	lsl.w	r3, r1, r3
 8001508:	b25b      	sxtb	r3, r3
 800150a:	4313      	orrs	r3, r2
 800150c:	b25c      	sxtb	r4, r3
 800150e:	79fa      	ldrb	r2, [r7, #7]
 8001510:	4601      	mov	r1, r0
 8001512:	460b      	mov	r3, r1
 8001514:	019b      	lsls	r3, r3, #6
 8001516:	440b      	add	r3, r1
 8001518:	005b      	lsls	r3, r3, #1
 800151a:	4413      	add	r3, r2
 800151c:	b2e1      	uxtb	r1, r4
 800151e:	4a16      	ldr	r2, [pc, #88]	; (8001578 <ssd1306_DrawPixel+0xd0>)
 8001520:	54d1      	strb	r1, [r2, r3]
 8001522:	e023      	b.n	800156c <ssd1306_DrawPixel+0xc4>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001524:	79fa      	ldrb	r2, [r7, #7]
 8001526:	79bb      	ldrb	r3, [r7, #6]
 8001528:	08db      	lsrs	r3, r3, #3
 800152a:	b2d8      	uxtb	r0, r3
 800152c:	4601      	mov	r1, r0
 800152e:	460b      	mov	r3, r1
 8001530:	019b      	lsls	r3, r3, #6
 8001532:	440b      	add	r3, r1
 8001534:	005b      	lsls	r3, r3, #1
 8001536:	4413      	add	r3, r2
 8001538:	4a0f      	ldr	r2, [pc, #60]	; (8001578 <ssd1306_DrawPixel+0xd0>)
 800153a:	5cd3      	ldrb	r3, [r2, r3]
 800153c:	b25a      	sxtb	r2, r3
 800153e:	79bb      	ldrb	r3, [r7, #6]
 8001540:	f003 0307 	and.w	r3, r3, #7
 8001544:	2101      	movs	r1, #1
 8001546:	fa01 f303 	lsl.w	r3, r1, r3
 800154a:	b25b      	sxtb	r3, r3
 800154c:	43db      	mvns	r3, r3
 800154e:	b25b      	sxtb	r3, r3
 8001550:	4013      	ands	r3, r2
 8001552:	b25c      	sxtb	r4, r3
 8001554:	79fa      	ldrb	r2, [r7, #7]
 8001556:	4601      	mov	r1, r0
 8001558:	460b      	mov	r3, r1
 800155a:	019b      	lsls	r3, r3, #6
 800155c:	440b      	add	r3, r1
 800155e:	005b      	lsls	r3, r3, #1
 8001560:	4413      	add	r3, r2
 8001562:	b2e1      	uxtb	r1, r4
 8001564:	4a04      	ldr	r2, [pc, #16]	; (8001578 <ssd1306_DrawPixel+0xd0>)
 8001566:	54d1      	strb	r1, [r2, r3]
 8001568:	e000      	b.n	800156c <ssd1306_DrawPixel+0xc4>
        return;
 800156a:	bf00      	nop
    }
}
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bc90      	pop	{r4, r7}
 8001572:	4770      	bx	lr
 8001574:	2000077c 	.word	0x2000077c
 8001578:	2000036c 	.word	0x2000036c

0800157c <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 800157c:	b590      	push	{r4, r7, lr}
 800157e:	b089      	sub	sp, #36	; 0x24
 8001580:	af00      	add	r7, sp, #0
 8001582:	4604      	mov	r4, r0
 8001584:	1d38      	adds	r0, r7, #4
 8001586:	e880 0006 	stmia.w	r0, {r1, r2}
 800158a:	461a      	mov	r2, r3
 800158c:	4623      	mov	r3, r4
 800158e:	73fb      	strb	r3, [r7, #15]
 8001590:	4613      	mov	r3, r2
 8001592:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001594:	7bfb      	ldrb	r3, [r7, #15]
 8001596:	2b1f      	cmp	r3, #31
 8001598:	d902      	bls.n	80015a0 <ssd1306_WriteChar+0x24>
 800159a:	7bfb      	ldrb	r3, [r7, #15]
 800159c:	2b7e      	cmp	r3, #126	; 0x7e
 800159e:	d901      	bls.n	80015a4 <ssd1306_WriteChar+0x28>
        return 0;
 80015a0:	2300      	movs	r3, #0
 80015a2:	e06d      	b.n	8001680 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80015a4:	4b38      	ldr	r3, [pc, #224]	; (8001688 <ssd1306_WriteChar+0x10c>)
 80015a6:	881b      	ldrh	r3, [r3, #0]
 80015a8:	461a      	mov	r2, r3
 80015aa:	793b      	ldrb	r3, [r7, #4]
 80015ac:	4413      	add	r3, r2
 80015ae:	2b82      	cmp	r3, #130	; 0x82
 80015b0:	dc06      	bgt.n	80015c0 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80015b2:	4b35      	ldr	r3, [pc, #212]	; (8001688 <ssd1306_WriteChar+0x10c>)
 80015b4:	885b      	ldrh	r3, [r3, #2]
 80015b6:	461a      	mov	r2, r3
 80015b8:	797b      	ldrb	r3, [r7, #5]
 80015ba:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80015bc:	2b40      	cmp	r3, #64	; 0x40
 80015be:	dd01      	ble.n	80015c4 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 80015c0:	2300      	movs	r3, #0
 80015c2:	e05d      	b.n	8001680 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80015c4:	2300      	movs	r3, #0
 80015c6:	61fb      	str	r3, [r7, #28]
 80015c8:	e04c      	b.n	8001664 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80015ca:	68ba      	ldr	r2, [r7, #8]
 80015cc:	7bfb      	ldrb	r3, [r7, #15]
 80015ce:	3b20      	subs	r3, #32
 80015d0:	7979      	ldrb	r1, [r7, #5]
 80015d2:	fb01 f303 	mul.w	r3, r1, r3
 80015d6:	4619      	mov	r1, r3
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	440b      	add	r3, r1
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	4413      	add	r3, r2
 80015e0:	881b      	ldrh	r3, [r3, #0]
 80015e2:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 80015e4:	2300      	movs	r3, #0
 80015e6:	61bb      	str	r3, [r7, #24]
 80015e8:	e034      	b.n	8001654 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 80015ea:	697a      	ldr	r2, [r7, #20]
 80015ec:	69bb      	ldr	r3, [r7, #24]
 80015ee:	fa02 f303 	lsl.w	r3, r2, r3
 80015f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d012      	beq.n	8001620 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80015fa:	4b23      	ldr	r3, [pc, #140]	; (8001688 <ssd1306_WriteChar+0x10c>)
 80015fc:	881b      	ldrh	r3, [r3, #0]
 80015fe:	b2da      	uxtb	r2, r3
 8001600:	69bb      	ldr	r3, [r7, #24]
 8001602:	b2db      	uxtb	r3, r3
 8001604:	4413      	add	r3, r2
 8001606:	b2d8      	uxtb	r0, r3
 8001608:	4b1f      	ldr	r3, [pc, #124]	; (8001688 <ssd1306_WriteChar+0x10c>)
 800160a:	885b      	ldrh	r3, [r3, #2]
 800160c:	b2da      	uxtb	r2, r3
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	b2db      	uxtb	r3, r3
 8001612:	4413      	add	r3, r2
 8001614:	b2db      	uxtb	r3, r3
 8001616:	7bba      	ldrb	r2, [r7, #14]
 8001618:	4619      	mov	r1, r3
 800161a:	f7ff ff45 	bl	80014a8 <ssd1306_DrawPixel>
 800161e:	e016      	b.n	800164e <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001620:	4b19      	ldr	r3, [pc, #100]	; (8001688 <ssd1306_WriteChar+0x10c>)
 8001622:	881b      	ldrh	r3, [r3, #0]
 8001624:	b2da      	uxtb	r2, r3
 8001626:	69bb      	ldr	r3, [r7, #24]
 8001628:	b2db      	uxtb	r3, r3
 800162a:	4413      	add	r3, r2
 800162c:	b2d8      	uxtb	r0, r3
 800162e:	4b16      	ldr	r3, [pc, #88]	; (8001688 <ssd1306_WriteChar+0x10c>)
 8001630:	885b      	ldrh	r3, [r3, #2]
 8001632:	b2da      	uxtb	r2, r3
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	b2db      	uxtb	r3, r3
 8001638:	4413      	add	r3, r2
 800163a:	b2d9      	uxtb	r1, r3
 800163c:	7bbb      	ldrb	r3, [r7, #14]
 800163e:	2b00      	cmp	r3, #0
 8001640:	bf0c      	ite	eq
 8001642:	2301      	moveq	r3, #1
 8001644:	2300      	movne	r3, #0
 8001646:	b2db      	uxtb	r3, r3
 8001648:	461a      	mov	r2, r3
 800164a:	f7ff ff2d 	bl	80014a8 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	3301      	adds	r3, #1
 8001652:	61bb      	str	r3, [r7, #24]
 8001654:	793b      	ldrb	r3, [r7, #4]
 8001656:	461a      	mov	r2, r3
 8001658:	69bb      	ldr	r3, [r7, #24]
 800165a:	4293      	cmp	r3, r2
 800165c:	d3c5      	bcc.n	80015ea <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	3301      	adds	r3, #1
 8001662:	61fb      	str	r3, [r7, #28]
 8001664:	797b      	ldrb	r3, [r7, #5]
 8001666:	461a      	mov	r2, r3
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	4293      	cmp	r3, r2
 800166c:	d3ad      	bcc.n	80015ca <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 800166e:	4b06      	ldr	r3, [pc, #24]	; (8001688 <ssd1306_WriteChar+0x10c>)
 8001670:	881a      	ldrh	r2, [r3, #0]
 8001672:	793b      	ldrb	r3, [r7, #4]
 8001674:	b29b      	uxth	r3, r3
 8001676:	4413      	add	r3, r2
 8001678:	b29a      	uxth	r2, r3
 800167a:	4b03      	ldr	r3, [pc, #12]	; (8001688 <ssd1306_WriteChar+0x10c>)
 800167c:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 800167e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001680:	4618      	mov	r0, r3
 8001682:	3724      	adds	r7, #36	; 0x24
 8001684:	46bd      	mov	sp, r7
 8001686:	bd90      	pop	{r4, r7, pc}
 8001688:	2000077c 	.word	0x2000077c

0800168c <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
 8001692:	60f8      	str	r0, [r7, #12]
 8001694:	1d38      	adds	r0, r7, #4
 8001696:	e880 0006 	stmia.w	r0, {r1, r2}
 800169a:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 800169c:	e012      	b.n	80016c4 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	7818      	ldrb	r0, [r3, #0]
 80016a2:	78fb      	ldrb	r3, [r7, #3]
 80016a4:	1d3a      	adds	r2, r7, #4
 80016a6:	ca06      	ldmia	r2, {r1, r2}
 80016a8:	f7ff ff68 	bl	800157c <ssd1306_WriteChar>
 80016ac:	4603      	mov	r3, r0
 80016ae:	461a      	mov	r2, r3
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d002      	beq.n	80016be <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	e008      	b.n	80016d0 <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	3301      	adds	r3, #1
 80016c2:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d1e8      	bne.n	800169e <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	781b      	ldrb	r3, [r3, #0]
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3710      	adds	r7, #16
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	4603      	mov	r3, r0
 80016e0:	460a      	mov	r2, r1
 80016e2:	71fb      	strb	r3, [r7, #7]
 80016e4:	4613      	mov	r3, r2
 80016e6:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80016e8:	79fb      	ldrb	r3, [r7, #7]
 80016ea:	b29a      	uxth	r2, r3
 80016ec:	4b05      	ldr	r3, [pc, #20]	; (8001704 <ssd1306_SetCursor+0x2c>)
 80016ee:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80016f0:	79bb      	ldrb	r3, [r7, #6]
 80016f2:	b29a      	uxth	r2, r3
 80016f4:	4b03      	ldr	r3, [pc, #12]	; (8001704 <ssd1306_SetCursor+0x2c>)
 80016f6:	805a      	strh	r2, [r3, #2]
}
 80016f8:	bf00      	nop
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bc80      	pop	{r7}
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	2000077c 	.word	0x2000077c

08001708 <ssd1306_SetContrast>:
  ssd1306_Line(x1,y2,x1,y1,color);

  return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001712:	2381      	movs	r3, #129	; 0x81
 8001714:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001716:	7bfb      	ldrb	r3, [r7, #15]
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff fddb 	bl	80012d4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800171e:	79fb      	ldrb	r3, [r7, #7]
 8001720:	4618      	mov	r0, r3
 8001722:	f7ff fdd7 	bl	80012d4 <ssd1306_WriteCommand>
}
 8001726:	bf00      	nop
 8001728:	3710      	adds	r7, #16
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
	...

08001730 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
 8001736:	4603      	mov	r3, r0
 8001738:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800173a:	79fb      	ldrb	r3, [r7, #7]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d005      	beq.n	800174c <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001740:	23af      	movs	r3, #175	; 0xaf
 8001742:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001744:	4b08      	ldr	r3, [pc, #32]	; (8001768 <ssd1306_SetDisplayOn+0x38>)
 8001746:	2201      	movs	r2, #1
 8001748:	719a      	strb	r2, [r3, #6]
 800174a:	e004      	b.n	8001756 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 800174c:	23ae      	movs	r3, #174	; 0xae
 800174e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001750:	4b05      	ldr	r3, [pc, #20]	; (8001768 <ssd1306_SetDisplayOn+0x38>)
 8001752:	2200      	movs	r2, #0
 8001754:	719a      	strb	r2, [r3, #6]
    }
    ssd1306_WriteCommand(value);
 8001756:	7bfb      	ldrb	r3, [r7, #15]
 8001758:	4618      	mov	r0, r3
 800175a:	f7ff fdbb 	bl	80012d4 <ssd1306_WriteCommand>
}
 800175e:	bf00      	nop
 8001760:	3710      	adds	r7, #16
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	2000077c 	.word	0x2000077c

0800176c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800176c:	b480      	push	{r7}
 800176e:	b085      	sub	sp, #20
 8001770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001772:	4b15      	ldr	r3, [pc, #84]	; (80017c8 <HAL_MspInit+0x5c>)
 8001774:	699b      	ldr	r3, [r3, #24]
 8001776:	4a14      	ldr	r2, [pc, #80]	; (80017c8 <HAL_MspInit+0x5c>)
 8001778:	f043 0301 	orr.w	r3, r3, #1
 800177c:	6193      	str	r3, [r2, #24]
 800177e:	4b12      	ldr	r3, [pc, #72]	; (80017c8 <HAL_MspInit+0x5c>)
 8001780:	699b      	ldr	r3, [r3, #24]
 8001782:	f003 0301 	and.w	r3, r3, #1
 8001786:	60bb      	str	r3, [r7, #8]
 8001788:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800178a:	4b0f      	ldr	r3, [pc, #60]	; (80017c8 <HAL_MspInit+0x5c>)
 800178c:	69db      	ldr	r3, [r3, #28]
 800178e:	4a0e      	ldr	r2, [pc, #56]	; (80017c8 <HAL_MspInit+0x5c>)
 8001790:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001794:	61d3      	str	r3, [r2, #28]
 8001796:	4b0c      	ldr	r3, [pc, #48]	; (80017c8 <HAL_MspInit+0x5c>)
 8001798:	69db      	ldr	r3, [r3, #28]
 800179a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800179e:	607b      	str	r3, [r7, #4]
 80017a0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80017a2:	4b0a      	ldr	r3, [pc, #40]	; (80017cc <HAL_MspInit+0x60>)
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	60fb      	str	r3, [r7, #12]
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80017ae:	60fb      	str	r3, [r7, #12]
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80017b6:	60fb      	str	r3, [r7, #12]
 80017b8:	4a04      	ldr	r2, [pc, #16]	; (80017cc <HAL_MspInit+0x60>)
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017be:	bf00      	nop
 80017c0:	3714      	adds	r7, #20
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bc80      	pop	{r7}
 80017c6:	4770      	bx	lr
 80017c8:	40021000 	.word	0x40021000
 80017cc:	40010000 	.word	0x40010000

080017d0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b088      	sub	sp, #32
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d8:	f107 0310 	add.w	r3, r7, #16
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	605a      	str	r2, [r3, #4]
 80017e2:	609a      	str	r2, [r3, #8]
 80017e4:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a1c      	ldr	r2, [pc, #112]	; (800185c <HAL_CAN_MspInit+0x8c>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d131      	bne.n	8001854 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80017f0:	4b1b      	ldr	r3, [pc, #108]	; (8001860 <HAL_CAN_MspInit+0x90>)
 80017f2:	69db      	ldr	r3, [r3, #28]
 80017f4:	4a1a      	ldr	r2, [pc, #104]	; (8001860 <HAL_CAN_MspInit+0x90>)
 80017f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80017fa:	61d3      	str	r3, [r2, #28]
 80017fc:	4b18      	ldr	r3, [pc, #96]	; (8001860 <HAL_CAN_MspInit+0x90>)
 80017fe:	69db      	ldr	r3, [r3, #28]
 8001800:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001804:	60fb      	str	r3, [r7, #12]
 8001806:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001808:	4b15      	ldr	r3, [pc, #84]	; (8001860 <HAL_CAN_MspInit+0x90>)
 800180a:	699b      	ldr	r3, [r3, #24]
 800180c:	4a14      	ldr	r2, [pc, #80]	; (8001860 <HAL_CAN_MspInit+0x90>)
 800180e:	f043 0304 	orr.w	r3, r3, #4
 8001812:	6193      	str	r3, [r2, #24]
 8001814:	4b12      	ldr	r3, [pc, #72]	; (8001860 <HAL_CAN_MspInit+0x90>)
 8001816:	699b      	ldr	r3, [r3, #24]
 8001818:	f003 0304 	and.w	r3, r3, #4
 800181c:	60bb      	str	r3, [r7, #8]
 800181e:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001820:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001824:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001826:	2300      	movs	r3, #0
 8001828:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182a:	2300      	movs	r3, #0
 800182c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800182e:	f107 0310 	add.w	r3, r7, #16
 8001832:	4619      	mov	r1, r3
 8001834:	480b      	ldr	r0, [pc, #44]	; (8001864 <HAL_CAN_MspInit+0x94>)
 8001836:	f000 fc77 	bl	8002128 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800183a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800183e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001840:	2302      	movs	r3, #2
 8001842:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001844:	2303      	movs	r3, #3
 8001846:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001848:	f107 0310 	add.w	r3, r7, #16
 800184c:	4619      	mov	r1, r3
 800184e:	4805      	ldr	r0, [pc, #20]	; (8001864 <HAL_CAN_MspInit+0x94>)
 8001850:	f000 fc6a 	bl	8002128 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001854:	bf00      	nop
 8001856:	3720      	adds	r7, #32
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	40006400 	.word	0x40006400
 8001860:	40021000 	.word	0x40021000
 8001864:	40010800 	.word	0x40010800

08001868 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b088      	sub	sp, #32
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001870:	f107 0310 	add.w	r3, r7, #16
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]
 8001878:	605a      	str	r2, [r3, #4]
 800187a:	609a      	str	r2, [r3, #8]
 800187c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a15      	ldr	r2, [pc, #84]	; (80018d8 <HAL_I2C_MspInit+0x70>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d123      	bne.n	80018d0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001888:	4b14      	ldr	r3, [pc, #80]	; (80018dc <HAL_I2C_MspInit+0x74>)
 800188a:	699b      	ldr	r3, [r3, #24]
 800188c:	4a13      	ldr	r2, [pc, #76]	; (80018dc <HAL_I2C_MspInit+0x74>)
 800188e:	f043 0308 	orr.w	r3, r3, #8
 8001892:	6193      	str	r3, [r2, #24]
 8001894:	4b11      	ldr	r3, [pc, #68]	; (80018dc <HAL_I2C_MspInit+0x74>)
 8001896:	699b      	ldr	r3, [r3, #24]
 8001898:	f003 0308 	and.w	r3, r3, #8
 800189c:	60fb      	str	r3, [r7, #12]
 800189e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80018a0:	23c0      	movs	r3, #192	; 0xc0
 80018a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018a4:	2312      	movs	r3, #18
 80018a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018a8:	2303      	movs	r3, #3
 80018aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ac:	f107 0310 	add.w	r3, r7, #16
 80018b0:	4619      	mov	r1, r3
 80018b2:	480b      	ldr	r0, [pc, #44]	; (80018e0 <HAL_I2C_MspInit+0x78>)
 80018b4:	f000 fc38 	bl	8002128 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018b8:	4b08      	ldr	r3, [pc, #32]	; (80018dc <HAL_I2C_MspInit+0x74>)
 80018ba:	69db      	ldr	r3, [r3, #28]
 80018bc:	4a07      	ldr	r2, [pc, #28]	; (80018dc <HAL_I2C_MspInit+0x74>)
 80018be:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018c2:	61d3      	str	r3, [r2, #28]
 80018c4:	4b05      	ldr	r3, [pc, #20]	; (80018dc <HAL_I2C_MspInit+0x74>)
 80018c6:	69db      	ldr	r3, [r3, #28]
 80018c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018cc:	60bb      	str	r3, [r7, #8]
 80018ce:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80018d0:	bf00      	nop
 80018d2:	3720      	adds	r7, #32
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	40005400 	.word	0x40005400
 80018dc:	40021000 	.word	0x40021000
 80018e0:	40010c00 	.word	0x40010c00

080018e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018e8:	e7fe      	b.n	80018e8 <NMI_Handler+0x4>

080018ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018ea:	b480      	push	{r7}
 80018ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018ee:	e7fe      	b.n	80018ee <HardFault_Handler+0x4>

080018f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018f4:	e7fe      	b.n	80018f4 <MemManage_Handler+0x4>

080018f6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018f6:	b480      	push	{r7}
 80018f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018fa:	e7fe      	b.n	80018fa <BusFault_Handler+0x4>

080018fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001900:	e7fe      	b.n	8001900 <UsageFault_Handler+0x4>

08001902 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001902:	b480      	push	{r7}
 8001904:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001906:	bf00      	nop
 8001908:	46bd      	mov	sp, r7
 800190a:	bc80      	pop	{r7}
 800190c:	4770      	bx	lr

0800190e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800190e:	b480      	push	{r7}
 8001910:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001912:	bf00      	nop
 8001914:	46bd      	mov	sp, r7
 8001916:	bc80      	pop	{r7}
 8001918:	4770      	bx	lr

0800191a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800191a:	b480      	push	{r7}
 800191c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800191e:	bf00      	nop
 8001920:	46bd      	mov	sp, r7
 8001922:	bc80      	pop	{r7}
 8001924:	4770      	bx	lr

08001926 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001926:	b580      	push	{r7, lr}
 8001928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800192a:	f000 f8ab 	bl	8001a84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800192e:	bf00      	nop
 8001930:	bd80      	pop	{r7, pc}
	...

08001934 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b086      	sub	sp, #24
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800193c:	4a14      	ldr	r2, [pc, #80]	; (8001990 <_sbrk+0x5c>)
 800193e:	4b15      	ldr	r3, [pc, #84]	; (8001994 <_sbrk+0x60>)
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001948:	4b13      	ldr	r3, [pc, #76]	; (8001998 <_sbrk+0x64>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d102      	bne.n	8001956 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001950:	4b11      	ldr	r3, [pc, #68]	; (8001998 <_sbrk+0x64>)
 8001952:	4a12      	ldr	r2, [pc, #72]	; (800199c <_sbrk+0x68>)
 8001954:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001956:	4b10      	ldr	r3, [pc, #64]	; (8001998 <_sbrk+0x64>)
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4413      	add	r3, r2
 800195e:	693a      	ldr	r2, [r7, #16]
 8001960:	429a      	cmp	r2, r3
 8001962:	d207      	bcs.n	8001974 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001964:	f001 fdf4 	bl	8003550 <__errno>
 8001968:	4603      	mov	r3, r0
 800196a:	220c      	movs	r2, #12
 800196c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800196e:	f04f 33ff 	mov.w	r3, #4294967295
 8001972:	e009      	b.n	8001988 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001974:	4b08      	ldr	r3, [pc, #32]	; (8001998 <_sbrk+0x64>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800197a:	4b07      	ldr	r3, [pc, #28]	; (8001998 <_sbrk+0x64>)
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4413      	add	r3, r2
 8001982:	4a05      	ldr	r2, [pc, #20]	; (8001998 <_sbrk+0x64>)
 8001984:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001986:	68fb      	ldr	r3, [r7, #12]
}
 8001988:	4618      	mov	r0, r3
 800198a:	3718      	adds	r7, #24
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	20005000 	.word	0x20005000
 8001994:	00000400 	.word	0x00000400
 8001998:	20000784 	.word	0x20000784
 800199c:	20000880 	.word	0x20000880

080019a0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019a4:	bf00      	nop
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bc80      	pop	{r7}
 80019aa:	4770      	bx	lr

080019ac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019ac:	480c      	ldr	r0, [pc, #48]	; (80019e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80019ae:	490d      	ldr	r1, [pc, #52]	; (80019e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80019b0:	4a0d      	ldr	r2, [pc, #52]	; (80019e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80019b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019b4:	e002      	b.n	80019bc <LoopCopyDataInit>

080019b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019ba:	3304      	adds	r3, #4

080019bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019c0:	d3f9      	bcc.n	80019b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019c2:	4a0a      	ldr	r2, [pc, #40]	; (80019ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80019c4:	4c0a      	ldr	r4, [pc, #40]	; (80019f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80019c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019c8:	e001      	b.n	80019ce <LoopFillZerobss>

080019ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019cc:	3204      	adds	r2, #4

080019ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019d0:	d3fb      	bcc.n	80019ca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80019d2:	f7ff ffe5 	bl	80019a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019d6:	f001 fdc1 	bl	800355c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80019da:	f7ff fa97 	bl	8000f0c <main>
  bx lr
 80019de:	4770      	bx	lr
  ldr r0, =_sdata
 80019e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019e4:	20000318 	.word	0x20000318
  ldr r2, =_sidata
 80019e8:	08005ff8 	.word	0x08005ff8
  ldr r2, =_sbss
 80019ec:	20000318 	.word	0x20000318
  ldr r4, =_ebss
 80019f0:	2000087c 	.word	0x2000087c

080019f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019f4:	e7fe      	b.n	80019f4 <ADC1_2_IRQHandler>
	...

080019f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019fc:	4b08      	ldr	r3, [pc, #32]	; (8001a20 <HAL_Init+0x28>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a07      	ldr	r2, [pc, #28]	; (8001a20 <HAL_Init+0x28>)
 8001a02:	f043 0310 	orr.w	r3, r3, #16
 8001a06:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a08:	2003      	movs	r0, #3
 8001a0a:	f000 fb59 	bl	80020c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a0e:	200f      	movs	r0, #15
 8001a10:	f000 f808 	bl	8001a24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a14:	f7ff feaa 	bl	800176c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a18:	2300      	movs	r3, #0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	40022000 	.word	0x40022000

08001a24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a2c:	4b12      	ldr	r3, [pc, #72]	; (8001a78 <HAL_InitTick+0x54>)
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	4b12      	ldr	r3, [pc, #72]	; (8001a7c <HAL_InitTick+0x58>)
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	4619      	mov	r1, r3
 8001a36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a42:	4618      	mov	r0, r3
 8001a44:	f000 fb63 	bl	800210e <HAL_SYSTICK_Config>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e00e      	b.n	8001a70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2b0f      	cmp	r3, #15
 8001a56:	d80a      	bhi.n	8001a6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a58:	2200      	movs	r2, #0
 8001a5a:	6879      	ldr	r1, [r7, #4]
 8001a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a60:	f000 fb39 	bl	80020d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a64:	4a06      	ldr	r2, [pc, #24]	; (8001a80 <HAL_InitTick+0x5c>)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	e000      	b.n	8001a70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3708      	adds	r7, #8
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	200002a8 	.word	0x200002a8
 8001a7c:	200002b0 	.word	0x200002b0
 8001a80:	200002ac 	.word	0x200002ac

08001a84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a88:	4b05      	ldr	r3, [pc, #20]	; (8001aa0 <HAL_IncTick+0x1c>)
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	4b05      	ldr	r3, [pc, #20]	; (8001aa4 <HAL_IncTick+0x20>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4413      	add	r3, r2
 8001a94:	4a03      	ldr	r2, [pc, #12]	; (8001aa4 <HAL_IncTick+0x20>)
 8001a96:	6013      	str	r3, [r2, #0]
}
 8001a98:	bf00      	nop
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bc80      	pop	{r7}
 8001a9e:	4770      	bx	lr
 8001aa0:	200002b0 	.word	0x200002b0
 8001aa4:	20000868 	.word	0x20000868

08001aa8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  return uwTick;
 8001aac:	4b02      	ldr	r3, [pc, #8]	; (8001ab8 <HAL_GetTick+0x10>)
 8001aae:	681b      	ldr	r3, [r3, #0]
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bc80      	pop	{r7}
 8001ab6:	4770      	bx	lr
 8001ab8:	20000868 	.word	0x20000868

08001abc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ac4:	f7ff fff0 	bl	8001aa8 <HAL_GetTick>
 8001ac8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ad4:	d005      	beq.n	8001ae2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ad6:	4b0a      	ldr	r3, [pc, #40]	; (8001b00 <HAL_Delay+0x44>)
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	461a      	mov	r2, r3
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	4413      	add	r3, r2
 8001ae0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ae2:	bf00      	nop
 8001ae4:	f7ff ffe0 	bl	8001aa8 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	68fa      	ldr	r2, [r7, #12]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d8f7      	bhi.n	8001ae4 <HAL_Delay+0x28>
  {
  }
}
 8001af4:	bf00      	nop
 8001af6:	bf00      	nop
 8001af8:	3710      	adds	r7, #16
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	200002b0 	.word	0x200002b0

08001b04 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d101      	bne.n	8001b16 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e0ed      	b.n	8001cf2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d102      	bne.n	8001b28 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f7ff fe54 	bl	80017d0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f042 0201 	orr.w	r2, r2, #1
 8001b36:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b38:	f7ff ffb6 	bl	8001aa8 <HAL_GetTick>
 8001b3c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001b3e:	e012      	b.n	8001b66 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001b40:	f7ff ffb2 	bl	8001aa8 <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	2b0a      	cmp	r3, #10
 8001b4c:	d90b      	bls.n	8001b66 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b52:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2205      	movs	r2, #5
 8001b5e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e0c5      	b.n	8001cf2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f003 0301 	and.w	r3, r3, #1
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d0e5      	beq.n	8001b40 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f022 0202 	bic.w	r2, r2, #2
 8001b82:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b84:	f7ff ff90 	bl	8001aa8 <HAL_GetTick>
 8001b88:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001b8a:	e012      	b.n	8001bb2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001b8c:	f7ff ff8c 	bl	8001aa8 <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	2b0a      	cmp	r3, #10
 8001b98:	d90b      	bls.n	8001bb2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b9e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2205      	movs	r2, #5
 8001baa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e09f      	b.n	8001cf2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f003 0302 	and.w	r3, r3, #2
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d1e5      	bne.n	8001b8c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	7e1b      	ldrb	r3, [r3, #24]
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d108      	bne.n	8001bda <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001bd6:	601a      	str	r2, [r3, #0]
 8001bd8:	e007      	b.n	8001bea <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001be8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	7e5b      	ldrb	r3, [r3, #25]
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d108      	bne.n	8001c04 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c00:	601a      	str	r2, [r3, #0]
 8001c02:	e007      	b.n	8001c14 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c12:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	7e9b      	ldrb	r3, [r3, #26]
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d108      	bne.n	8001c2e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f042 0220 	orr.w	r2, r2, #32
 8001c2a:	601a      	str	r2, [r3, #0]
 8001c2c:	e007      	b.n	8001c3e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f022 0220 	bic.w	r2, r2, #32
 8001c3c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	7edb      	ldrb	r3, [r3, #27]
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d108      	bne.n	8001c58 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f022 0210 	bic.w	r2, r2, #16
 8001c54:	601a      	str	r2, [r3, #0]
 8001c56:	e007      	b.n	8001c68 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f042 0210 	orr.w	r2, r2, #16
 8001c66:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	7f1b      	ldrb	r3, [r3, #28]
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d108      	bne.n	8001c82 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f042 0208 	orr.w	r2, r2, #8
 8001c7e:	601a      	str	r2, [r3, #0]
 8001c80:	e007      	b.n	8001c92 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f022 0208 	bic.w	r2, r2, #8
 8001c90:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	7f5b      	ldrb	r3, [r3, #29]
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d108      	bne.n	8001cac <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f042 0204 	orr.w	r2, r2, #4
 8001ca8:	601a      	str	r2, [r3, #0]
 8001caa:	e007      	b.n	8001cbc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f022 0204 	bic.w	r2, r2, #4
 8001cba:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	689a      	ldr	r2, [r3, #8]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	431a      	orrs	r2, r3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	691b      	ldr	r3, [r3, #16]
 8001cca:	431a      	orrs	r2, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	695b      	ldr	r3, [r3, #20]
 8001cd0:	ea42 0103 	orr.w	r1, r2, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	1e5a      	subs	r2, r3, #1
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	430a      	orrs	r2, r1
 8001ce0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2201      	movs	r2, #1
 8001cec:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001cf0:	2300      	movs	r3, #0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3710      	adds	r7, #16
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	b087      	sub	sp, #28
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
 8001d02:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d10:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001d12:	7cfb      	ldrb	r3, [r7, #19]
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d003      	beq.n	8001d20 <HAL_CAN_ConfigFilter+0x26>
 8001d18:	7cfb      	ldrb	r3, [r7, #19]
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	f040 80aa 	bne.w	8001e74 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001d26:	f043 0201 	orr.w	r2, r3, #1
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	695b      	ldr	r3, [r3, #20]
 8001d34:	f003 031f 	and.w	r3, r3, #31
 8001d38:	2201      	movs	r2, #1
 8001d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	43db      	mvns	r3, r3
 8001d4a:	401a      	ands	r2, r3
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	69db      	ldr	r3, [r3, #28]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d123      	bne.n	8001da2 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	43db      	mvns	r3, r3
 8001d64:	401a      	ands	r2, r3
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001d78:	683a      	ldr	r2, [r7, #0]
 8001d7a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001d7c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	3248      	adds	r2, #72	; 0x48
 8001d82:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001d96:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001d98:	6979      	ldr	r1, [r7, #20]
 8001d9a:	3348      	adds	r3, #72	; 0x48
 8001d9c:	00db      	lsls	r3, r3, #3
 8001d9e:	440b      	add	r3, r1
 8001da0:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	69db      	ldr	r3, [r3, #28]
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d122      	bne.n	8001df0 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	431a      	orrs	r2, r3
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001dc6:	683a      	ldr	r2, [r7, #0]
 8001dc8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001dca:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	3248      	adds	r2, #72	; 0x48
 8001dd0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	68db      	ldr	r3, [r3, #12]
 8001dde:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001de4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001de6:	6979      	ldr	r1, [r7, #20]
 8001de8:	3348      	adds	r3, #72	; 0x48
 8001dea:	00db      	lsls	r3, r3, #3
 8001dec:	440b      	add	r3, r1
 8001dee:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	699b      	ldr	r3, [r3, #24]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d109      	bne.n	8001e0c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	43db      	mvns	r3, r3
 8001e02:	401a      	ands	r2, r3
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001e0a:	e007      	b.n	8001e1c <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	431a      	orrs	r2, r3
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	691b      	ldr	r3, [r3, #16]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d109      	bne.n	8001e38 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	43db      	mvns	r3, r3
 8001e2e:	401a      	ands	r2, r3
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001e36:	e007      	b.n	8001e48 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	431a      	orrs	r2, r3
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	6a1b      	ldr	r3, [r3, #32]
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d107      	bne.n	8001e60 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	431a      	orrs	r2, r3
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001e66:	f023 0201 	bic.w	r2, r3, #1
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001e70:	2300      	movs	r3, #0
 8001e72:	e006      	b.n	8001e82 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e78:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
  }
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	371c      	adds	r7, #28
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bc80      	pop	{r7}
 8001e8a:	4770      	bx	lr

08001e8c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d12e      	bne.n	8001efe <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2202      	movs	r2, #2
 8001ea4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f022 0201 	bic.w	r2, r2, #1
 8001eb6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001eb8:	f7ff fdf6 	bl	8001aa8 <HAL_GetTick>
 8001ebc:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001ebe:	e012      	b.n	8001ee6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ec0:	f7ff fdf2 	bl	8001aa8 <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	2b0a      	cmp	r3, #10
 8001ecc:	d90b      	bls.n	8001ee6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2205      	movs	r2, #5
 8001ede:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e012      	b.n	8001f0c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f003 0301 	and.w	r3, r3, #1
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d1e5      	bne.n	8001ec0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001efa:	2300      	movs	r3, #0
 8001efc:	e006      	b.n	8001f0c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f02:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
  }
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3710      	adds	r7, #16
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b085      	sub	sp, #20
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f24:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001f26:	7bfb      	ldrb	r3, [r7, #15]
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d002      	beq.n	8001f32 <HAL_CAN_ActivateNotification+0x1e>
 8001f2c:	7bfb      	ldrb	r3, [r7, #15]
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d109      	bne.n	8001f46 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	6959      	ldr	r1, [r3, #20]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	683a      	ldr	r2, [r7, #0]
 8001f3e:	430a      	orrs	r2, r1
 8001f40:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001f42:	2300      	movs	r3, #0
 8001f44:	e006      	b.n	8001f54 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
  }
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3714      	adds	r7, #20
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bc80      	pop	{r7}
 8001f5c:	4770      	bx	lr
	...

08001f60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b085      	sub	sp, #20
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	f003 0307 	and.w	r3, r3, #7
 8001f6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f70:	4b0c      	ldr	r3, [pc, #48]	; (8001fa4 <__NVIC_SetPriorityGrouping+0x44>)
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f76:	68ba      	ldr	r2, [r7, #8]
 8001f78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f92:	4a04      	ldr	r2, [pc, #16]	; (8001fa4 <__NVIC_SetPriorityGrouping+0x44>)
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	60d3      	str	r3, [r2, #12]
}
 8001f98:	bf00      	nop
 8001f9a:	3714      	adds	r7, #20
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bc80      	pop	{r7}
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	e000ed00 	.word	0xe000ed00

08001fa8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fac:	4b04      	ldr	r3, [pc, #16]	; (8001fc0 <__NVIC_GetPriorityGrouping+0x18>)
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	0a1b      	lsrs	r3, r3, #8
 8001fb2:	f003 0307 	and.w	r3, r3, #7
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bc80      	pop	{r7}
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	e000ed00 	.word	0xe000ed00

08001fc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	4603      	mov	r3, r0
 8001fcc:	6039      	str	r1, [r7, #0]
 8001fce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	db0a      	blt.n	8001fee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	b2da      	uxtb	r2, r3
 8001fdc:	490c      	ldr	r1, [pc, #48]	; (8002010 <__NVIC_SetPriority+0x4c>)
 8001fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe2:	0112      	lsls	r2, r2, #4
 8001fe4:	b2d2      	uxtb	r2, r2
 8001fe6:	440b      	add	r3, r1
 8001fe8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fec:	e00a      	b.n	8002004 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	b2da      	uxtb	r2, r3
 8001ff2:	4908      	ldr	r1, [pc, #32]	; (8002014 <__NVIC_SetPriority+0x50>)
 8001ff4:	79fb      	ldrb	r3, [r7, #7]
 8001ff6:	f003 030f 	and.w	r3, r3, #15
 8001ffa:	3b04      	subs	r3, #4
 8001ffc:	0112      	lsls	r2, r2, #4
 8001ffe:	b2d2      	uxtb	r2, r2
 8002000:	440b      	add	r3, r1
 8002002:	761a      	strb	r2, [r3, #24]
}
 8002004:	bf00      	nop
 8002006:	370c      	adds	r7, #12
 8002008:	46bd      	mov	sp, r7
 800200a:	bc80      	pop	{r7}
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	e000e100 	.word	0xe000e100
 8002014:	e000ed00 	.word	0xe000ed00

08002018 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002018:	b480      	push	{r7}
 800201a:	b089      	sub	sp, #36	; 0x24
 800201c:	af00      	add	r7, sp, #0
 800201e:	60f8      	str	r0, [r7, #12]
 8002020:	60b9      	str	r1, [r7, #8]
 8002022:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	f003 0307 	and.w	r3, r3, #7
 800202a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	f1c3 0307 	rsb	r3, r3, #7
 8002032:	2b04      	cmp	r3, #4
 8002034:	bf28      	it	cs
 8002036:	2304      	movcs	r3, #4
 8002038:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	3304      	adds	r3, #4
 800203e:	2b06      	cmp	r3, #6
 8002040:	d902      	bls.n	8002048 <NVIC_EncodePriority+0x30>
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	3b03      	subs	r3, #3
 8002046:	e000      	b.n	800204a <NVIC_EncodePriority+0x32>
 8002048:	2300      	movs	r3, #0
 800204a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800204c:	f04f 32ff 	mov.w	r2, #4294967295
 8002050:	69bb      	ldr	r3, [r7, #24]
 8002052:	fa02 f303 	lsl.w	r3, r2, r3
 8002056:	43da      	mvns	r2, r3
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	401a      	ands	r2, r3
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002060:	f04f 31ff 	mov.w	r1, #4294967295
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	fa01 f303 	lsl.w	r3, r1, r3
 800206a:	43d9      	mvns	r1, r3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002070:	4313      	orrs	r3, r2
         );
}
 8002072:	4618      	mov	r0, r3
 8002074:	3724      	adds	r7, #36	; 0x24
 8002076:	46bd      	mov	sp, r7
 8002078:	bc80      	pop	{r7}
 800207a:	4770      	bx	lr

0800207c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	3b01      	subs	r3, #1
 8002088:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800208c:	d301      	bcc.n	8002092 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800208e:	2301      	movs	r3, #1
 8002090:	e00f      	b.n	80020b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002092:	4a0a      	ldr	r2, [pc, #40]	; (80020bc <SysTick_Config+0x40>)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	3b01      	subs	r3, #1
 8002098:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800209a:	210f      	movs	r1, #15
 800209c:	f04f 30ff 	mov.w	r0, #4294967295
 80020a0:	f7ff ff90 	bl	8001fc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020a4:	4b05      	ldr	r3, [pc, #20]	; (80020bc <SysTick_Config+0x40>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020aa:	4b04      	ldr	r3, [pc, #16]	; (80020bc <SysTick_Config+0x40>)
 80020ac:	2207      	movs	r2, #7
 80020ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020b0:	2300      	movs	r3, #0
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3708      	adds	r7, #8
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	e000e010 	.word	0xe000e010

080020c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f7ff ff49 	bl	8001f60 <__NVIC_SetPriorityGrouping>
}
 80020ce:	bf00      	nop
 80020d0:	3708      	adds	r7, #8
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}

080020d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020d6:	b580      	push	{r7, lr}
 80020d8:	b086      	sub	sp, #24
 80020da:	af00      	add	r7, sp, #0
 80020dc:	4603      	mov	r3, r0
 80020de:	60b9      	str	r1, [r7, #8]
 80020e0:	607a      	str	r2, [r7, #4]
 80020e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020e4:	2300      	movs	r3, #0
 80020e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020e8:	f7ff ff5e 	bl	8001fa8 <__NVIC_GetPriorityGrouping>
 80020ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	68b9      	ldr	r1, [r7, #8]
 80020f2:	6978      	ldr	r0, [r7, #20]
 80020f4:	f7ff ff90 	bl	8002018 <NVIC_EncodePriority>
 80020f8:	4602      	mov	r2, r0
 80020fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020fe:	4611      	mov	r1, r2
 8002100:	4618      	mov	r0, r3
 8002102:	f7ff ff5f 	bl	8001fc4 <__NVIC_SetPriority>
}
 8002106:	bf00      	nop
 8002108:	3718      	adds	r7, #24
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}

0800210e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800210e:	b580      	push	{r7, lr}
 8002110:	b082      	sub	sp, #8
 8002112:	af00      	add	r7, sp, #0
 8002114:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f7ff ffb0 	bl	800207c <SysTick_Config>
 800211c:	4603      	mov	r3, r0
}
 800211e:	4618      	mov	r0, r3
 8002120:	3708      	adds	r7, #8
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
	...

08002128 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002128:	b480      	push	{r7}
 800212a:	b08b      	sub	sp, #44	; 0x2c
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002132:	2300      	movs	r3, #0
 8002134:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002136:	2300      	movs	r3, #0
 8002138:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800213a:	e169      	b.n	8002410 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800213c:	2201      	movs	r2, #1
 800213e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002140:	fa02 f303 	lsl.w	r3, r2, r3
 8002144:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	69fa      	ldr	r2, [r7, #28]
 800214c:	4013      	ands	r3, r2
 800214e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	429a      	cmp	r2, r3
 8002156:	f040 8158 	bne.w	800240a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	4a9a      	ldr	r2, [pc, #616]	; (80023c8 <HAL_GPIO_Init+0x2a0>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d05e      	beq.n	8002222 <HAL_GPIO_Init+0xfa>
 8002164:	4a98      	ldr	r2, [pc, #608]	; (80023c8 <HAL_GPIO_Init+0x2a0>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d875      	bhi.n	8002256 <HAL_GPIO_Init+0x12e>
 800216a:	4a98      	ldr	r2, [pc, #608]	; (80023cc <HAL_GPIO_Init+0x2a4>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d058      	beq.n	8002222 <HAL_GPIO_Init+0xfa>
 8002170:	4a96      	ldr	r2, [pc, #600]	; (80023cc <HAL_GPIO_Init+0x2a4>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d86f      	bhi.n	8002256 <HAL_GPIO_Init+0x12e>
 8002176:	4a96      	ldr	r2, [pc, #600]	; (80023d0 <HAL_GPIO_Init+0x2a8>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d052      	beq.n	8002222 <HAL_GPIO_Init+0xfa>
 800217c:	4a94      	ldr	r2, [pc, #592]	; (80023d0 <HAL_GPIO_Init+0x2a8>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d869      	bhi.n	8002256 <HAL_GPIO_Init+0x12e>
 8002182:	4a94      	ldr	r2, [pc, #592]	; (80023d4 <HAL_GPIO_Init+0x2ac>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d04c      	beq.n	8002222 <HAL_GPIO_Init+0xfa>
 8002188:	4a92      	ldr	r2, [pc, #584]	; (80023d4 <HAL_GPIO_Init+0x2ac>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d863      	bhi.n	8002256 <HAL_GPIO_Init+0x12e>
 800218e:	4a92      	ldr	r2, [pc, #584]	; (80023d8 <HAL_GPIO_Init+0x2b0>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d046      	beq.n	8002222 <HAL_GPIO_Init+0xfa>
 8002194:	4a90      	ldr	r2, [pc, #576]	; (80023d8 <HAL_GPIO_Init+0x2b0>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d85d      	bhi.n	8002256 <HAL_GPIO_Init+0x12e>
 800219a:	2b12      	cmp	r3, #18
 800219c:	d82a      	bhi.n	80021f4 <HAL_GPIO_Init+0xcc>
 800219e:	2b12      	cmp	r3, #18
 80021a0:	d859      	bhi.n	8002256 <HAL_GPIO_Init+0x12e>
 80021a2:	a201      	add	r2, pc, #4	; (adr r2, 80021a8 <HAL_GPIO_Init+0x80>)
 80021a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021a8:	08002223 	.word	0x08002223
 80021ac:	080021fd 	.word	0x080021fd
 80021b0:	0800220f 	.word	0x0800220f
 80021b4:	08002251 	.word	0x08002251
 80021b8:	08002257 	.word	0x08002257
 80021bc:	08002257 	.word	0x08002257
 80021c0:	08002257 	.word	0x08002257
 80021c4:	08002257 	.word	0x08002257
 80021c8:	08002257 	.word	0x08002257
 80021cc:	08002257 	.word	0x08002257
 80021d0:	08002257 	.word	0x08002257
 80021d4:	08002257 	.word	0x08002257
 80021d8:	08002257 	.word	0x08002257
 80021dc:	08002257 	.word	0x08002257
 80021e0:	08002257 	.word	0x08002257
 80021e4:	08002257 	.word	0x08002257
 80021e8:	08002257 	.word	0x08002257
 80021ec:	08002205 	.word	0x08002205
 80021f0:	08002219 	.word	0x08002219
 80021f4:	4a79      	ldr	r2, [pc, #484]	; (80023dc <HAL_GPIO_Init+0x2b4>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d013      	beq.n	8002222 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80021fa:	e02c      	b.n	8002256 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	623b      	str	r3, [r7, #32]
          break;
 8002202:	e029      	b.n	8002258 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	3304      	adds	r3, #4
 800220a:	623b      	str	r3, [r7, #32]
          break;
 800220c:	e024      	b.n	8002258 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	68db      	ldr	r3, [r3, #12]
 8002212:	3308      	adds	r3, #8
 8002214:	623b      	str	r3, [r7, #32]
          break;
 8002216:	e01f      	b.n	8002258 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	330c      	adds	r3, #12
 800221e:	623b      	str	r3, [r7, #32]
          break;
 8002220:	e01a      	b.n	8002258 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d102      	bne.n	8002230 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800222a:	2304      	movs	r3, #4
 800222c:	623b      	str	r3, [r7, #32]
          break;
 800222e:	e013      	b.n	8002258 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	2b01      	cmp	r3, #1
 8002236:	d105      	bne.n	8002244 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002238:	2308      	movs	r3, #8
 800223a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	69fa      	ldr	r2, [r7, #28]
 8002240:	611a      	str	r2, [r3, #16]
          break;
 8002242:	e009      	b.n	8002258 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002244:	2308      	movs	r3, #8
 8002246:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	69fa      	ldr	r2, [r7, #28]
 800224c:	615a      	str	r2, [r3, #20]
          break;
 800224e:	e003      	b.n	8002258 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002250:	2300      	movs	r3, #0
 8002252:	623b      	str	r3, [r7, #32]
          break;
 8002254:	e000      	b.n	8002258 <HAL_GPIO_Init+0x130>
          break;
 8002256:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002258:	69bb      	ldr	r3, [r7, #24]
 800225a:	2bff      	cmp	r3, #255	; 0xff
 800225c:	d801      	bhi.n	8002262 <HAL_GPIO_Init+0x13a>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	e001      	b.n	8002266 <HAL_GPIO_Init+0x13e>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	3304      	adds	r3, #4
 8002266:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002268:	69bb      	ldr	r3, [r7, #24]
 800226a:	2bff      	cmp	r3, #255	; 0xff
 800226c:	d802      	bhi.n	8002274 <HAL_GPIO_Init+0x14c>
 800226e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	e002      	b.n	800227a <HAL_GPIO_Init+0x152>
 8002274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002276:	3b08      	subs	r3, #8
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	210f      	movs	r1, #15
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	fa01 f303 	lsl.w	r3, r1, r3
 8002288:	43db      	mvns	r3, r3
 800228a:	401a      	ands	r2, r3
 800228c:	6a39      	ldr	r1, [r7, #32]
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	fa01 f303 	lsl.w	r3, r1, r3
 8002294:	431a      	orrs	r2, r3
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	f000 80b1 	beq.w	800240a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80022a8:	4b4d      	ldr	r3, [pc, #308]	; (80023e0 <HAL_GPIO_Init+0x2b8>)
 80022aa:	699b      	ldr	r3, [r3, #24]
 80022ac:	4a4c      	ldr	r2, [pc, #304]	; (80023e0 <HAL_GPIO_Init+0x2b8>)
 80022ae:	f043 0301 	orr.w	r3, r3, #1
 80022b2:	6193      	str	r3, [r2, #24]
 80022b4:	4b4a      	ldr	r3, [pc, #296]	; (80023e0 <HAL_GPIO_Init+0x2b8>)
 80022b6:	699b      	ldr	r3, [r3, #24]
 80022b8:	f003 0301 	and.w	r3, r3, #1
 80022bc:	60bb      	str	r3, [r7, #8]
 80022be:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80022c0:	4a48      	ldr	r2, [pc, #288]	; (80023e4 <HAL_GPIO_Init+0x2bc>)
 80022c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c4:	089b      	lsrs	r3, r3, #2
 80022c6:	3302      	adds	r3, #2
 80022c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022cc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80022ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d0:	f003 0303 	and.w	r3, r3, #3
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	220f      	movs	r2, #15
 80022d8:	fa02 f303 	lsl.w	r3, r2, r3
 80022dc:	43db      	mvns	r3, r3
 80022de:	68fa      	ldr	r2, [r7, #12]
 80022e0:	4013      	ands	r3, r2
 80022e2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	4a40      	ldr	r2, [pc, #256]	; (80023e8 <HAL_GPIO_Init+0x2c0>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d013      	beq.n	8002314 <HAL_GPIO_Init+0x1ec>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	4a3f      	ldr	r2, [pc, #252]	; (80023ec <HAL_GPIO_Init+0x2c4>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d00d      	beq.n	8002310 <HAL_GPIO_Init+0x1e8>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	4a3e      	ldr	r2, [pc, #248]	; (80023f0 <HAL_GPIO_Init+0x2c8>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d007      	beq.n	800230c <HAL_GPIO_Init+0x1e4>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	4a3d      	ldr	r2, [pc, #244]	; (80023f4 <HAL_GPIO_Init+0x2cc>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d101      	bne.n	8002308 <HAL_GPIO_Init+0x1e0>
 8002304:	2303      	movs	r3, #3
 8002306:	e006      	b.n	8002316 <HAL_GPIO_Init+0x1ee>
 8002308:	2304      	movs	r3, #4
 800230a:	e004      	b.n	8002316 <HAL_GPIO_Init+0x1ee>
 800230c:	2302      	movs	r3, #2
 800230e:	e002      	b.n	8002316 <HAL_GPIO_Init+0x1ee>
 8002310:	2301      	movs	r3, #1
 8002312:	e000      	b.n	8002316 <HAL_GPIO_Init+0x1ee>
 8002314:	2300      	movs	r3, #0
 8002316:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002318:	f002 0203 	and.w	r2, r2, #3
 800231c:	0092      	lsls	r2, r2, #2
 800231e:	4093      	lsls	r3, r2
 8002320:	68fa      	ldr	r2, [r7, #12]
 8002322:	4313      	orrs	r3, r2
 8002324:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002326:	492f      	ldr	r1, [pc, #188]	; (80023e4 <HAL_GPIO_Init+0x2bc>)
 8002328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232a:	089b      	lsrs	r3, r3, #2
 800232c:	3302      	adds	r3, #2
 800232e:	68fa      	ldr	r2, [r7, #12]
 8002330:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d006      	beq.n	800234e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002340:	4b2d      	ldr	r3, [pc, #180]	; (80023f8 <HAL_GPIO_Init+0x2d0>)
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	492c      	ldr	r1, [pc, #176]	; (80023f8 <HAL_GPIO_Init+0x2d0>)
 8002346:	69bb      	ldr	r3, [r7, #24]
 8002348:	4313      	orrs	r3, r2
 800234a:	600b      	str	r3, [r1, #0]
 800234c:	e006      	b.n	800235c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800234e:	4b2a      	ldr	r3, [pc, #168]	; (80023f8 <HAL_GPIO_Init+0x2d0>)
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	69bb      	ldr	r3, [r7, #24]
 8002354:	43db      	mvns	r3, r3
 8002356:	4928      	ldr	r1, [pc, #160]	; (80023f8 <HAL_GPIO_Init+0x2d0>)
 8002358:	4013      	ands	r3, r2
 800235a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d006      	beq.n	8002376 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002368:	4b23      	ldr	r3, [pc, #140]	; (80023f8 <HAL_GPIO_Init+0x2d0>)
 800236a:	685a      	ldr	r2, [r3, #4]
 800236c:	4922      	ldr	r1, [pc, #136]	; (80023f8 <HAL_GPIO_Init+0x2d0>)
 800236e:	69bb      	ldr	r3, [r7, #24]
 8002370:	4313      	orrs	r3, r2
 8002372:	604b      	str	r3, [r1, #4]
 8002374:	e006      	b.n	8002384 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002376:	4b20      	ldr	r3, [pc, #128]	; (80023f8 <HAL_GPIO_Init+0x2d0>)
 8002378:	685a      	ldr	r2, [r3, #4]
 800237a:	69bb      	ldr	r3, [r7, #24]
 800237c:	43db      	mvns	r3, r3
 800237e:	491e      	ldr	r1, [pc, #120]	; (80023f8 <HAL_GPIO_Init+0x2d0>)
 8002380:	4013      	ands	r3, r2
 8002382:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d006      	beq.n	800239e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002390:	4b19      	ldr	r3, [pc, #100]	; (80023f8 <HAL_GPIO_Init+0x2d0>)
 8002392:	689a      	ldr	r2, [r3, #8]
 8002394:	4918      	ldr	r1, [pc, #96]	; (80023f8 <HAL_GPIO_Init+0x2d0>)
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	4313      	orrs	r3, r2
 800239a:	608b      	str	r3, [r1, #8]
 800239c:	e006      	b.n	80023ac <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800239e:	4b16      	ldr	r3, [pc, #88]	; (80023f8 <HAL_GPIO_Init+0x2d0>)
 80023a0:	689a      	ldr	r2, [r3, #8]
 80023a2:	69bb      	ldr	r3, [r7, #24]
 80023a4:	43db      	mvns	r3, r3
 80023a6:	4914      	ldr	r1, [pc, #80]	; (80023f8 <HAL_GPIO_Init+0x2d0>)
 80023a8:	4013      	ands	r3, r2
 80023aa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d021      	beq.n	80023fc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80023b8:	4b0f      	ldr	r3, [pc, #60]	; (80023f8 <HAL_GPIO_Init+0x2d0>)
 80023ba:	68da      	ldr	r2, [r3, #12]
 80023bc:	490e      	ldr	r1, [pc, #56]	; (80023f8 <HAL_GPIO_Init+0x2d0>)
 80023be:	69bb      	ldr	r3, [r7, #24]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	60cb      	str	r3, [r1, #12]
 80023c4:	e021      	b.n	800240a <HAL_GPIO_Init+0x2e2>
 80023c6:	bf00      	nop
 80023c8:	10320000 	.word	0x10320000
 80023cc:	10310000 	.word	0x10310000
 80023d0:	10220000 	.word	0x10220000
 80023d4:	10210000 	.word	0x10210000
 80023d8:	10120000 	.word	0x10120000
 80023dc:	10110000 	.word	0x10110000
 80023e0:	40021000 	.word	0x40021000
 80023e4:	40010000 	.word	0x40010000
 80023e8:	40010800 	.word	0x40010800
 80023ec:	40010c00 	.word	0x40010c00
 80023f0:	40011000 	.word	0x40011000
 80023f4:	40011400 	.word	0x40011400
 80023f8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80023fc:	4b0b      	ldr	r3, [pc, #44]	; (800242c <HAL_GPIO_Init+0x304>)
 80023fe:	68da      	ldr	r2, [r3, #12]
 8002400:	69bb      	ldr	r3, [r7, #24]
 8002402:	43db      	mvns	r3, r3
 8002404:	4909      	ldr	r1, [pc, #36]	; (800242c <HAL_GPIO_Init+0x304>)
 8002406:	4013      	ands	r3, r2
 8002408:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800240a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240c:	3301      	adds	r3, #1
 800240e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002416:	fa22 f303 	lsr.w	r3, r2, r3
 800241a:	2b00      	cmp	r3, #0
 800241c:	f47f ae8e 	bne.w	800213c <HAL_GPIO_Init+0x14>
  }
}
 8002420:	bf00      	nop
 8002422:	bf00      	nop
 8002424:	372c      	adds	r7, #44	; 0x2c
 8002426:	46bd      	mov	sp, r7
 8002428:	bc80      	pop	{r7}
 800242a:	4770      	bx	lr
 800242c:	40010400 	.word	0x40010400

08002430 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002430:	b480      	push	{r7}
 8002432:	b085      	sub	sp, #20
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	460b      	mov	r3, r1
 800243a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	689a      	ldr	r2, [r3, #8]
 8002440:	887b      	ldrh	r3, [r7, #2]
 8002442:	4013      	ands	r3, r2
 8002444:	2b00      	cmp	r3, #0
 8002446:	d002      	beq.n	800244e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002448:	2301      	movs	r3, #1
 800244a:	73fb      	strb	r3, [r7, #15]
 800244c:	e001      	b.n	8002452 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800244e:	2300      	movs	r3, #0
 8002450:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002452:	7bfb      	ldrb	r3, [r7, #15]
}
 8002454:	4618      	mov	r0, r3
 8002456:	3714      	adds	r7, #20
 8002458:	46bd      	mov	sp, r7
 800245a:	bc80      	pop	{r7}
 800245c:	4770      	bx	lr

0800245e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800245e:	b480      	push	{r7}
 8002460:	b083      	sub	sp, #12
 8002462:	af00      	add	r7, sp, #0
 8002464:	6078      	str	r0, [r7, #4]
 8002466:	460b      	mov	r3, r1
 8002468:	807b      	strh	r3, [r7, #2]
 800246a:	4613      	mov	r3, r2
 800246c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800246e:	787b      	ldrb	r3, [r7, #1]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d003      	beq.n	800247c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002474:	887a      	ldrh	r2, [r7, #2]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800247a:	e003      	b.n	8002484 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800247c:	887b      	ldrh	r3, [r7, #2]
 800247e:	041a      	lsls	r2, r3, #16
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	611a      	str	r2, [r3, #16]
}
 8002484:	bf00      	nop
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	bc80      	pop	{r7}
 800248c:	4770      	bx	lr
	...

08002490 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d101      	bne.n	80024a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e12b      	b.n	80026fa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d106      	bne.n	80024bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2200      	movs	r2, #0
 80024b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f7ff f9d6 	bl	8001868 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2224      	movs	r2, #36	; 0x24
 80024c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f022 0201 	bic.w	r2, r2, #1
 80024d2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024e2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024f2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80024f4:	f000 fffa 	bl	80034ec <HAL_RCC_GetPCLK1Freq>
 80024f8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	4a81      	ldr	r2, [pc, #516]	; (8002704 <HAL_I2C_Init+0x274>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d807      	bhi.n	8002514 <HAL_I2C_Init+0x84>
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	4a80      	ldr	r2, [pc, #512]	; (8002708 <HAL_I2C_Init+0x278>)
 8002508:	4293      	cmp	r3, r2
 800250a:	bf94      	ite	ls
 800250c:	2301      	movls	r3, #1
 800250e:	2300      	movhi	r3, #0
 8002510:	b2db      	uxtb	r3, r3
 8002512:	e006      	b.n	8002522 <HAL_I2C_Init+0x92>
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	4a7d      	ldr	r2, [pc, #500]	; (800270c <HAL_I2C_Init+0x27c>)
 8002518:	4293      	cmp	r3, r2
 800251a:	bf94      	ite	ls
 800251c:	2301      	movls	r3, #1
 800251e:	2300      	movhi	r3, #0
 8002520:	b2db      	uxtb	r3, r3
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e0e7      	b.n	80026fa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	4a78      	ldr	r2, [pc, #480]	; (8002710 <HAL_I2C_Init+0x280>)
 800252e:	fba2 2303 	umull	r2, r3, r2, r3
 8002532:	0c9b      	lsrs	r3, r3, #18
 8002534:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	68ba      	ldr	r2, [r7, #8]
 8002546:	430a      	orrs	r2, r1
 8002548:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	6a1b      	ldr	r3, [r3, #32]
 8002550:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	4a6a      	ldr	r2, [pc, #424]	; (8002704 <HAL_I2C_Init+0x274>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d802      	bhi.n	8002564 <HAL_I2C_Init+0xd4>
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	3301      	adds	r3, #1
 8002562:	e009      	b.n	8002578 <HAL_I2C_Init+0xe8>
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800256a:	fb02 f303 	mul.w	r3, r2, r3
 800256e:	4a69      	ldr	r2, [pc, #420]	; (8002714 <HAL_I2C_Init+0x284>)
 8002570:	fba2 2303 	umull	r2, r3, r2, r3
 8002574:	099b      	lsrs	r3, r3, #6
 8002576:	3301      	adds	r3, #1
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	6812      	ldr	r2, [r2, #0]
 800257c:	430b      	orrs	r3, r1
 800257e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	69db      	ldr	r3, [r3, #28]
 8002586:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800258a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	495c      	ldr	r1, [pc, #368]	; (8002704 <HAL_I2C_Init+0x274>)
 8002594:	428b      	cmp	r3, r1
 8002596:	d819      	bhi.n	80025cc <HAL_I2C_Init+0x13c>
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	1e59      	subs	r1, r3, #1
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	005b      	lsls	r3, r3, #1
 80025a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80025a6:	1c59      	adds	r1, r3, #1
 80025a8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80025ac:	400b      	ands	r3, r1
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d00a      	beq.n	80025c8 <HAL_I2C_Init+0x138>
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	1e59      	subs	r1, r3, #1
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	005b      	lsls	r3, r3, #1
 80025bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80025c0:	3301      	adds	r3, #1
 80025c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025c6:	e051      	b.n	800266c <HAL_I2C_Init+0x1dc>
 80025c8:	2304      	movs	r3, #4
 80025ca:	e04f      	b.n	800266c <HAL_I2C_Init+0x1dc>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d111      	bne.n	80025f8 <HAL_I2C_Init+0x168>
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	1e58      	subs	r0, r3, #1
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6859      	ldr	r1, [r3, #4]
 80025dc:	460b      	mov	r3, r1
 80025de:	005b      	lsls	r3, r3, #1
 80025e0:	440b      	add	r3, r1
 80025e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80025e6:	3301      	adds	r3, #1
 80025e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	bf0c      	ite	eq
 80025f0:	2301      	moveq	r3, #1
 80025f2:	2300      	movne	r3, #0
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	e012      	b.n	800261e <HAL_I2C_Init+0x18e>
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	1e58      	subs	r0, r3, #1
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6859      	ldr	r1, [r3, #4]
 8002600:	460b      	mov	r3, r1
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	440b      	add	r3, r1
 8002606:	0099      	lsls	r1, r3, #2
 8002608:	440b      	add	r3, r1
 800260a:	fbb0 f3f3 	udiv	r3, r0, r3
 800260e:	3301      	adds	r3, #1
 8002610:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002614:	2b00      	cmp	r3, #0
 8002616:	bf0c      	ite	eq
 8002618:	2301      	moveq	r3, #1
 800261a:	2300      	movne	r3, #0
 800261c:	b2db      	uxtb	r3, r3
 800261e:	2b00      	cmp	r3, #0
 8002620:	d001      	beq.n	8002626 <HAL_I2C_Init+0x196>
 8002622:	2301      	movs	r3, #1
 8002624:	e022      	b.n	800266c <HAL_I2C_Init+0x1dc>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d10e      	bne.n	800264c <HAL_I2C_Init+0x1bc>
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	1e58      	subs	r0, r3, #1
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6859      	ldr	r1, [r3, #4]
 8002636:	460b      	mov	r3, r1
 8002638:	005b      	lsls	r3, r3, #1
 800263a:	440b      	add	r3, r1
 800263c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002640:	3301      	adds	r3, #1
 8002642:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002646:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800264a:	e00f      	b.n	800266c <HAL_I2C_Init+0x1dc>
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	1e58      	subs	r0, r3, #1
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6859      	ldr	r1, [r3, #4]
 8002654:	460b      	mov	r3, r1
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	440b      	add	r3, r1
 800265a:	0099      	lsls	r1, r3, #2
 800265c:	440b      	add	r3, r1
 800265e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002662:	3301      	adds	r3, #1
 8002664:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002668:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800266c:	6879      	ldr	r1, [r7, #4]
 800266e:	6809      	ldr	r1, [r1, #0]
 8002670:	4313      	orrs	r3, r2
 8002672:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	69da      	ldr	r2, [r3, #28]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6a1b      	ldr	r3, [r3, #32]
 8002686:	431a      	orrs	r2, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	430a      	orrs	r2, r1
 800268e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800269a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	6911      	ldr	r1, [r2, #16]
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	68d2      	ldr	r2, [r2, #12]
 80026a6:	4311      	orrs	r1, r2
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	6812      	ldr	r2, [r2, #0]
 80026ac:	430b      	orrs	r3, r1
 80026ae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	695a      	ldr	r2, [r3, #20]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	699b      	ldr	r3, [r3, #24]
 80026c2:	431a      	orrs	r2, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	430a      	orrs	r2, r1
 80026ca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f042 0201 	orr.w	r2, r2, #1
 80026da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2200      	movs	r2, #0
 80026e0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2220      	movs	r2, #32
 80026e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2200      	movs	r2, #0
 80026f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80026f8:	2300      	movs	r3, #0
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3710      	adds	r7, #16
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	000186a0 	.word	0x000186a0
 8002708:	001e847f 	.word	0x001e847f
 800270c:	003d08ff 	.word	0x003d08ff
 8002710:	431bde83 	.word	0x431bde83
 8002714:	10624dd3 	.word	0x10624dd3

08002718 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b088      	sub	sp, #32
 800271c:	af02      	add	r7, sp, #8
 800271e:	60f8      	str	r0, [r7, #12]
 8002720:	4608      	mov	r0, r1
 8002722:	4611      	mov	r1, r2
 8002724:	461a      	mov	r2, r3
 8002726:	4603      	mov	r3, r0
 8002728:	817b      	strh	r3, [r7, #10]
 800272a:	460b      	mov	r3, r1
 800272c:	813b      	strh	r3, [r7, #8]
 800272e:	4613      	mov	r3, r2
 8002730:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002732:	f7ff f9b9 	bl	8001aa8 <HAL_GetTick>
 8002736:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800273e:	b2db      	uxtb	r3, r3
 8002740:	2b20      	cmp	r3, #32
 8002742:	f040 80d9 	bne.w	80028f8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	9300      	str	r3, [sp, #0]
 800274a:	2319      	movs	r3, #25
 800274c:	2201      	movs	r2, #1
 800274e:	496d      	ldr	r1, [pc, #436]	; (8002904 <HAL_I2C_Mem_Write+0x1ec>)
 8002750:	68f8      	ldr	r0, [r7, #12]
 8002752:	f000 f971 	bl	8002a38 <I2C_WaitOnFlagUntilTimeout>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d001      	beq.n	8002760 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800275c:	2302      	movs	r3, #2
 800275e:	e0cc      	b.n	80028fa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002766:	2b01      	cmp	r3, #1
 8002768:	d101      	bne.n	800276e <HAL_I2C_Mem_Write+0x56>
 800276a:	2302      	movs	r3, #2
 800276c:	e0c5      	b.n	80028fa <HAL_I2C_Mem_Write+0x1e2>
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2201      	movs	r2, #1
 8002772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0301 	and.w	r3, r3, #1
 8002780:	2b01      	cmp	r3, #1
 8002782:	d007      	beq.n	8002794 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f042 0201 	orr.w	r2, r2, #1
 8002792:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027a2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2221      	movs	r2, #33	; 0x21
 80027a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2240      	movs	r2, #64	; 0x40
 80027b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2200      	movs	r2, #0
 80027b8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	6a3a      	ldr	r2, [r7, #32]
 80027be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80027c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ca:	b29a      	uxth	r2, r3
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	4a4d      	ldr	r2, [pc, #308]	; (8002908 <HAL_I2C_Mem_Write+0x1f0>)
 80027d4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80027d6:	88f8      	ldrh	r0, [r7, #6]
 80027d8:	893a      	ldrh	r2, [r7, #8]
 80027da:	8979      	ldrh	r1, [r7, #10]
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	9301      	str	r3, [sp, #4]
 80027e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027e2:	9300      	str	r3, [sp, #0]
 80027e4:	4603      	mov	r3, r0
 80027e6:	68f8      	ldr	r0, [r7, #12]
 80027e8:	f000 f890 	bl	800290c <I2C_RequestMemoryWrite>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d052      	beq.n	8002898 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e081      	b.n	80028fa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027f6:	697a      	ldr	r2, [r7, #20]
 80027f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80027fa:	68f8      	ldr	r0, [r7, #12]
 80027fc:	f000 f9f2 	bl	8002be4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d00d      	beq.n	8002822 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280a:	2b04      	cmp	r3, #4
 800280c:	d107      	bne.n	800281e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800281c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e06b      	b.n	80028fa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002826:	781a      	ldrb	r2, [r3, #0]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002832:	1c5a      	adds	r2, r3, #1
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800283c:	3b01      	subs	r3, #1
 800283e:	b29a      	uxth	r2, r3
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002848:	b29b      	uxth	r3, r3
 800284a:	3b01      	subs	r3, #1
 800284c:	b29a      	uxth	r2, r3
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	695b      	ldr	r3, [r3, #20]
 8002858:	f003 0304 	and.w	r3, r3, #4
 800285c:	2b04      	cmp	r3, #4
 800285e:	d11b      	bne.n	8002898 <HAL_I2C_Mem_Write+0x180>
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002864:	2b00      	cmp	r3, #0
 8002866:	d017      	beq.n	8002898 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286c:	781a      	ldrb	r2, [r3, #0]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002878:	1c5a      	adds	r2, r3, #1
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002882:	3b01      	subs	r3, #1
 8002884:	b29a      	uxth	r2, r3
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800288e:	b29b      	uxth	r3, r3
 8002890:	3b01      	subs	r3, #1
 8002892:	b29a      	uxth	r2, r3
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800289c:	2b00      	cmp	r3, #0
 800289e:	d1aa      	bne.n	80027f6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028a0:	697a      	ldr	r2, [r7, #20]
 80028a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80028a4:	68f8      	ldr	r0, [r7, #12]
 80028a6:	f000 f9de 	bl	8002c66 <I2C_WaitOnBTFFlagUntilTimeout>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d00d      	beq.n	80028cc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b4:	2b04      	cmp	r3, #4
 80028b6:	d107      	bne.n	80028c8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028c6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e016      	b.n	80028fa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2220      	movs	r2, #32
 80028e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2200      	movs	r2, #0
 80028e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2200      	movs	r2, #0
 80028f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80028f4:	2300      	movs	r3, #0
 80028f6:	e000      	b.n	80028fa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80028f8:	2302      	movs	r3, #2
  }
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3718      	adds	r7, #24
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	00100002 	.word	0x00100002
 8002908:	ffff0000 	.word	0xffff0000

0800290c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b088      	sub	sp, #32
 8002910:	af02      	add	r7, sp, #8
 8002912:	60f8      	str	r0, [r7, #12]
 8002914:	4608      	mov	r0, r1
 8002916:	4611      	mov	r1, r2
 8002918:	461a      	mov	r2, r3
 800291a:	4603      	mov	r3, r0
 800291c:	817b      	strh	r3, [r7, #10]
 800291e:	460b      	mov	r3, r1
 8002920:	813b      	strh	r3, [r7, #8]
 8002922:	4613      	mov	r3, r2
 8002924:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002934:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002938:	9300      	str	r3, [sp, #0]
 800293a:	6a3b      	ldr	r3, [r7, #32]
 800293c:	2200      	movs	r2, #0
 800293e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002942:	68f8      	ldr	r0, [r7, #12]
 8002944:	f000 f878 	bl	8002a38 <I2C_WaitOnFlagUntilTimeout>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d00d      	beq.n	800296a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002958:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800295c:	d103      	bne.n	8002966 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002964:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e05f      	b.n	8002a2a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800296a:	897b      	ldrh	r3, [r7, #10]
 800296c:	b2db      	uxtb	r3, r3
 800296e:	461a      	mov	r2, r3
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002978:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800297a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297c:	6a3a      	ldr	r2, [r7, #32]
 800297e:	492d      	ldr	r1, [pc, #180]	; (8002a34 <I2C_RequestMemoryWrite+0x128>)
 8002980:	68f8      	ldr	r0, [r7, #12]
 8002982:	f000 f8b0 	bl	8002ae6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d001      	beq.n	8002990 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e04c      	b.n	8002a2a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002990:	2300      	movs	r3, #0
 8002992:	617b      	str	r3, [r7, #20]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	695b      	ldr	r3, [r3, #20]
 800299a:	617b      	str	r3, [r7, #20]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	699b      	ldr	r3, [r3, #24]
 80029a2:	617b      	str	r3, [r7, #20]
 80029a4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029a8:	6a39      	ldr	r1, [r7, #32]
 80029aa:	68f8      	ldr	r0, [r7, #12]
 80029ac:	f000 f91a 	bl	8002be4 <I2C_WaitOnTXEFlagUntilTimeout>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d00d      	beq.n	80029d2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ba:	2b04      	cmp	r3, #4
 80029bc:	d107      	bne.n	80029ce <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029cc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e02b      	b.n	8002a2a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80029d2:	88fb      	ldrh	r3, [r7, #6]
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d105      	bne.n	80029e4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80029d8:	893b      	ldrh	r3, [r7, #8]
 80029da:	b2da      	uxtb	r2, r3
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	611a      	str	r2, [r3, #16]
 80029e2:	e021      	b.n	8002a28 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80029e4:	893b      	ldrh	r3, [r7, #8]
 80029e6:	0a1b      	lsrs	r3, r3, #8
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	b2da      	uxtb	r2, r3
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029f4:	6a39      	ldr	r1, [r7, #32]
 80029f6:	68f8      	ldr	r0, [r7, #12]
 80029f8:	f000 f8f4 	bl	8002be4 <I2C_WaitOnTXEFlagUntilTimeout>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d00d      	beq.n	8002a1e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a06:	2b04      	cmp	r3, #4
 8002a08:	d107      	bne.n	8002a1a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a18:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e005      	b.n	8002a2a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a1e:	893b      	ldrh	r3, [r7, #8]
 8002a20:	b2da      	uxtb	r2, r3
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002a28:	2300      	movs	r3, #0
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3718      	adds	r7, #24
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	00010002 	.word	0x00010002

08002a38 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	60f8      	str	r0, [r7, #12]
 8002a40:	60b9      	str	r1, [r7, #8]
 8002a42:	603b      	str	r3, [r7, #0]
 8002a44:	4613      	mov	r3, r2
 8002a46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a48:	e025      	b.n	8002a96 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a50:	d021      	beq.n	8002a96 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a52:	f7ff f829 	bl	8001aa8 <HAL_GetTick>
 8002a56:	4602      	mov	r2, r0
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	683a      	ldr	r2, [r7, #0]
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d302      	bcc.n	8002a68 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d116      	bne.n	8002a96 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2220      	movs	r2, #32
 8002a72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a82:	f043 0220 	orr.w	r2, r3, #32
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e023      	b.n	8002ade <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	0c1b      	lsrs	r3, r3, #16
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d10d      	bne.n	8002abc <I2C_WaitOnFlagUntilTimeout+0x84>
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	695b      	ldr	r3, [r3, #20]
 8002aa6:	43da      	mvns	r2, r3
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	4013      	ands	r3, r2
 8002aac:	b29b      	uxth	r3, r3
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	bf0c      	ite	eq
 8002ab2:	2301      	moveq	r3, #1
 8002ab4:	2300      	movne	r3, #0
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	461a      	mov	r2, r3
 8002aba:	e00c      	b.n	8002ad6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	699b      	ldr	r3, [r3, #24]
 8002ac2:	43da      	mvns	r2, r3
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	bf0c      	ite	eq
 8002ace:	2301      	moveq	r3, #1
 8002ad0:	2300      	movne	r3, #0
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	79fb      	ldrb	r3, [r7, #7]
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d0b6      	beq.n	8002a4a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002adc:	2300      	movs	r3, #0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3710      	adds	r7, #16
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}

08002ae6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002ae6:	b580      	push	{r7, lr}
 8002ae8:	b084      	sub	sp, #16
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	60f8      	str	r0, [r7, #12]
 8002aee:	60b9      	str	r1, [r7, #8]
 8002af0:	607a      	str	r2, [r7, #4]
 8002af2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002af4:	e051      	b.n	8002b9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	695b      	ldr	r3, [r3, #20]
 8002afc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b04:	d123      	bne.n	8002b4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b14:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b1e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2200      	movs	r2, #0
 8002b24:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2220      	movs	r2, #32
 8002b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2200      	movs	r2, #0
 8002b32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3a:	f043 0204 	orr.w	r2, r3, #4
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2200      	movs	r2, #0
 8002b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e046      	b.n	8002bdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b54:	d021      	beq.n	8002b9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b56:	f7fe ffa7 	bl	8001aa8 <HAL_GetTick>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d302      	bcc.n	8002b6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d116      	bne.n	8002b9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2220      	movs	r2, #32
 8002b76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b86:	f043 0220 	orr.w	r2, r3, #32
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2200      	movs	r2, #0
 8002b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e020      	b.n	8002bdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	0c1b      	lsrs	r3, r3, #16
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d10c      	bne.n	8002bbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	695b      	ldr	r3, [r3, #20]
 8002baa:	43da      	mvns	r2, r3
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	4013      	ands	r3, r2
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	bf14      	ite	ne
 8002bb6:	2301      	movne	r3, #1
 8002bb8:	2300      	moveq	r3, #0
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	e00b      	b.n	8002bd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	699b      	ldr	r3, [r3, #24]
 8002bc4:	43da      	mvns	r2, r3
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	4013      	ands	r3, r2
 8002bca:	b29b      	uxth	r3, r3
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	bf14      	ite	ne
 8002bd0:	2301      	movne	r3, #1
 8002bd2:	2300      	moveq	r3, #0
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d18d      	bne.n	8002af6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002bda:	2300      	movs	r3, #0
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3710      	adds	r7, #16
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	60b9      	str	r1, [r7, #8]
 8002bee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002bf0:	e02d      	b.n	8002c4e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002bf2:	68f8      	ldr	r0, [r7, #12]
 8002bf4:	f000 f878 	bl	8002ce8 <I2C_IsAcknowledgeFailed>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d001      	beq.n	8002c02 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e02d      	b.n	8002c5e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c08:	d021      	beq.n	8002c4e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c0a:	f7fe ff4d 	bl	8001aa8 <HAL_GetTick>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	1ad3      	subs	r3, r2, r3
 8002c14:	68ba      	ldr	r2, [r7, #8]
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d302      	bcc.n	8002c20 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d116      	bne.n	8002c4e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2200      	movs	r2, #0
 8002c24:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2220      	movs	r2, #32
 8002c2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2200      	movs	r2, #0
 8002c32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3a:	f043 0220 	orr.w	r2, r3, #32
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2200      	movs	r2, #0
 8002c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e007      	b.n	8002c5e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	695b      	ldr	r3, [r3, #20]
 8002c54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c58:	2b80      	cmp	r3, #128	; 0x80
 8002c5a:	d1ca      	bne.n	8002bf2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c5c:	2300      	movs	r3, #0
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3710      	adds	r7, #16
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}

08002c66 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c66:	b580      	push	{r7, lr}
 8002c68:	b084      	sub	sp, #16
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	60f8      	str	r0, [r7, #12]
 8002c6e:	60b9      	str	r1, [r7, #8]
 8002c70:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c72:	e02d      	b.n	8002cd0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c74:	68f8      	ldr	r0, [r7, #12]
 8002c76:	f000 f837 	bl	8002ce8 <I2C_IsAcknowledgeFailed>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d001      	beq.n	8002c84 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e02d      	b.n	8002ce0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c8a:	d021      	beq.n	8002cd0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c8c:	f7fe ff0c 	bl	8001aa8 <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	68ba      	ldr	r2, [r7, #8]
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d302      	bcc.n	8002ca2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d116      	bne.n	8002cd0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2220      	movs	r2, #32
 8002cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cbc:	f043 0220 	orr.w	r2, r3, #32
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e007      	b.n	8002ce0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	695b      	ldr	r3, [r3, #20]
 8002cd6:	f003 0304 	and.w	r3, r3, #4
 8002cda:	2b04      	cmp	r3, #4
 8002cdc:	d1ca      	bne.n	8002c74 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002cde:	2300      	movs	r3, #0
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3710      	adds	r7, #16
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	695b      	ldr	r3, [r3, #20]
 8002cf6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cfe:	d11b      	bne.n	8002d38 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d08:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2220      	movs	r2, #32
 8002d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d24:	f043 0204 	orr.w	r2, r3, #4
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e000      	b.n	8002d3a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002d38:	2300      	movs	r3, #0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	370c      	adds	r7, #12
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bc80      	pop	{r7}
 8002d42:	4770      	bx	lr

08002d44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b086      	sub	sp, #24
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d101      	bne.n	8002d56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e26c      	b.n	8003230 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0301 	and.w	r3, r3, #1
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	f000 8087 	beq.w	8002e72 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d64:	4b92      	ldr	r3, [pc, #584]	; (8002fb0 <HAL_RCC_OscConfig+0x26c>)
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f003 030c 	and.w	r3, r3, #12
 8002d6c:	2b04      	cmp	r3, #4
 8002d6e:	d00c      	beq.n	8002d8a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002d70:	4b8f      	ldr	r3, [pc, #572]	; (8002fb0 <HAL_RCC_OscConfig+0x26c>)
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f003 030c 	and.w	r3, r3, #12
 8002d78:	2b08      	cmp	r3, #8
 8002d7a:	d112      	bne.n	8002da2 <HAL_RCC_OscConfig+0x5e>
 8002d7c:	4b8c      	ldr	r3, [pc, #560]	; (8002fb0 <HAL_RCC_OscConfig+0x26c>)
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d88:	d10b      	bne.n	8002da2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d8a:	4b89      	ldr	r3, [pc, #548]	; (8002fb0 <HAL_RCC_OscConfig+0x26c>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d06c      	beq.n	8002e70 <HAL_RCC_OscConfig+0x12c>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d168      	bne.n	8002e70 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e246      	b.n	8003230 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002daa:	d106      	bne.n	8002dba <HAL_RCC_OscConfig+0x76>
 8002dac:	4b80      	ldr	r3, [pc, #512]	; (8002fb0 <HAL_RCC_OscConfig+0x26c>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a7f      	ldr	r2, [pc, #508]	; (8002fb0 <HAL_RCC_OscConfig+0x26c>)
 8002db2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002db6:	6013      	str	r3, [r2, #0]
 8002db8:	e02e      	b.n	8002e18 <HAL_RCC_OscConfig+0xd4>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d10c      	bne.n	8002ddc <HAL_RCC_OscConfig+0x98>
 8002dc2:	4b7b      	ldr	r3, [pc, #492]	; (8002fb0 <HAL_RCC_OscConfig+0x26c>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a7a      	ldr	r2, [pc, #488]	; (8002fb0 <HAL_RCC_OscConfig+0x26c>)
 8002dc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dcc:	6013      	str	r3, [r2, #0]
 8002dce:	4b78      	ldr	r3, [pc, #480]	; (8002fb0 <HAL_RCC_OscConfig+0x26c>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a77      	ldr	r2, [pc, #476]	; (8002fb0 <HAL_RCC_OscConfig+0x26c>)
 8002dd4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dd8:	6013      	str	r3, [r2, #0]
 8002dda:	e01d      	b.n	8002e18 <HAL_RCC_OscConfig+0xd4>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002de4:	d10c      	bne.n	8002e00 <HAL_RCC_OscConfig+0xbc>
 8002de6:	4b72      	ldr	r3, [pc, #456]	; (8002fb0 <HAL_RCC_OscConfig+0x26c>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a71      	ldr	r2, [pc, #452]	; (8002fb0 <HAL_RCC_OscConfig+0x26c>)
 8002dec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002df0:	6013      	str	r3, [r2, #0]
 8002df2:	4b6f      	ldr	r3, [pc, #444]	; (8002fb0 <HAL_RCC_OscConfig+0x26c>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a6e      	ldr	r2, [pc, #440]	; (8002fb0 <HAL_RCC_OscConfig+0x26c>)
 8002df8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dfc:	6013      	str	r3, [r2, #0]
 8002dfe:	e00b      	b.n	8002e18 <HAL_RCC_OscConfig+0xd4>
 8002e00:	4b6b      	ldr	r3, [pc, #428]	; (8002fb0 <HAL_RCC_OscConfig+0x26c>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a6a      	ldr	r2, [pc, #424]	; (8002fb0 <HAL_RCC_OscConfig+0x26c>)
 8002e06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e0a:	6013      	str	r3, [r2, #0]
 8002e0c:	4b68      	ldr	r3, [pc, #416]	; (8002fb0 <HAL_RCC_OscConfig+0x26c>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a67      	ldr	r2, [pc, #412]	; (8002fb0 <HAL_RCC_OscConfig+0x26c>)
 8002e12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e16:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d013      	beq.n	8002e48 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e20:	f7fe fe42 	bl	8001aa8 <HAL_GetTick>
 8002e24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e26:	e008      	b.n	8002e3a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e28:	f7fe fe3e 	bl	8001aa8 <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	2b64      	cmp	r3, #100	; 0x64
 8002e34:	d901      	bls.n	8002e3a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e1fa      	b.n	8003230 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e3a:	4b5d      	ldr	r3, [pc, #372]	; (8002fb0 <HAL_RCC_OscConfig+0x26c>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d0f0      	beq.n	8002e28 <HAL_RCC_OscConfig+0xe4>
 8002e46:	e014      	b.n	8002e72 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e48:	f7fe fe2e 	bl	8001aa8 <HAL_GetTick>
 8002e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e4e:	e008      	b.n	8002e62 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e50:	f7fe fe2a 	bl	8001aa8 <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	2b64      	cmp	r3, #100	; 0x64
 8002e5c:	d901      	bls.n	8002e62 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e1e6      	b.n	8003230 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e62:	4b53      	ldr	r3, [pc, #332]	; (8002fb0 <HAL_RCC_OscConfig+0x26c>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d1f0      	bne.n	8002e50 <HAL_RCC_OscConfig+0x10c>
 8002e6e:	e000      	b.n	8002e72 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0302 	and.w	r3, r3, #2
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d063      	beq.n	8002f46 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e7e:	4b4c      	ldr	r3, [pc, #304]	; (8002fb0 <HAL_RCC_OscConfig+0x26c>)
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	f003 030c 	and.w	r3, r3, #12
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d00b      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002e8a:	4b49      	ldr	r3, [pc, #292]	; (8002fb0 <HAL_RCC_OscConfig+0x26c>)
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	f003 030c 	and.w	r3, r3, #12
 8002e92:	2b08      	cmp	r3, #8
 8002e94:	d11c      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x18c>
 8002e96:	4b46      	ldr	r3, [pc, #280]	; (8002fb0 <HAL_RCC_OscConfig+0x26c>)
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d116      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ea2:	4b43      	ldr	r3, [pc, #268]	; (8002fb0 <HAL_RCC_OscConfig+0x26c>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0302 	and.w	r3, r3, #2
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d005      	beq.n	8002eba <HAL_RCC_OscConfig+0x176>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	691b      	ldr	r3, [r3, #16]
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d001      	beq.n	8002eba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e1ba      	b.n	8003230 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eba:	4b3d      	ldr	r3, [pc, #244]	; (8002fb0 <HAL_RCC_OscConfig+0x26c>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	695b      	ldr	r3, [r3, #20]
 8002ec6:	00db      	lsls	r3, r3, #3
 8002ec8:	4939      	ldr	r1, [pc, #228]	; (8002fb0 <HAL_RCC_OscConfig+0x26c>)
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ece:	e03a      	b.n	8002f46 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	691b      	ldr	r3, [r3, #16]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d020      	beq.n	8002f1a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ed8:	4b36      	ldr	r3, [pc, #216]	; (8002fb4 <HAL_RCC_OscConfig+0x270>)
 8002eda:	2201      	movs	r2, #1
 8002edc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ede:	f7fe fde3 	bl	8001aa8 <HAL_GetTick>
 8002ee2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ee4:	e008      	b.n	8002ef8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ee6:	f7fe fddf 	bl	8001aa8 <HAL_GetTick>
 8002eea:	4602      	mov	r2, r0
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d901      	bls.n	8002ef8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	e19b      	b.n	8003230 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ef8:	4b2d      	ldr	r3, [pc, #180]	; (8002fb0 <HAL_RCC_OscConfig+0x26c>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0302 	and.w	r3, r3, #2
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d0f0      	beq.n	8002ee6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f04:	4b2a      	ldr	r3, [pc, #168]	; (8002fb0 <HAL_RCC_OscConfig+0x26c>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	695b      	ldr	r3, [r3, #20]
 8002f10:	00db      	lsls	r3, r3, #3
 8002f12:	4927      	ldr	r1, [pc, #156]	; (8002fb0 <HAL_RCC_OscConfig+0x26c>)
 8002f14:	4313      	orrs	r3, r2
 8002f16:	600b      	str	r3, [r1, #0]
 8002f18:	e015      	b.n	8002f46 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f1a:	4b26      	ldr	r3, [pc, #152]	; (8002fb4 <HAL_RCC_OscConfig+0x270>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f20:	f7fe fdc2 	bl	8001aa8 <HAL_GetTick>
 8002f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f26:	e008      	b.n	8002f3a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f28:	f7fe fdbe 	bl	8001aa8 <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	d901      	bls.n	8002f3a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e17a      	b.n	8003230 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f3a:	4b1d      	ldr	r3, [pc, #116]	; (8002fb0 <HAL_RCC_OscConfig+0x26c>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0302 	and.w	r3, r3, #2
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d1f0      	bne.n	8002f28 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0308 	and.w	r3, r3, #8
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d03a      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	699b      	ldr	r3, [r3, #24]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d019      	beq.n	8002f8e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f5a:	4b17      	ldr	r3, [pc, #92]	; (8002fb8 <HAL_RCC_OscConfig+0x274>)
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f60:	f7fe fda2 	bl	8001aa8 <HAL_GetTick>
 8002f64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f66:	e008      	b.n	8002f7a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f68:	f7fe fd9e 	bl	8001aa8 <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	2b02      	cmp	r3, #2
 8002f74:	d901      	bls.n	8002f7a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e15a      	b.n	8003230 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f7a:	4b0d      	ldr	r3, [pc, #52]	; (8002fb0 <HAL_RCC_OscConfig+0x26c>)
 8002f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7e:	f003 0302 	and.w	r3, r3, #2
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d0f0      	beq.n	8002f68 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002f86:	2001      	movs	r0, #1
 8002f88:	f000 fac4 	bl	8003514 <RCC_Delay>
 8002f8c:	e01c      	b.n	8002fc8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f8e:	4b0a      	ldr	r3, [pc, #40]	; (8002fb8 <HAL_RCC_OscConfig+0x274>)
 8002f90:	2200      	movs	r2, #0
 8002f92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f94:	f7fe fd88 	bl	8001aa8 <HAL_GetTick>
 8002f98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f9a:	e00f      	b.n	8002fbc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f9c:	f7fe fd84 	bl	8001aa8 <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d908      	bls.n	8002fbc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e140      	b.n	8003230 <HAL_RCC_OscConfig+0x4ec>
 8002fae:	bf00      	nop
 8002fb0:	40021000 	.word	0x40021000
 8002fb4:	42420000 	.word	0x42420000
 8002fb8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fbc:	4b9e      	ldr	r3, [pc, #632]	; (8003238 <HAL_RCC_OscConfig+0x4f4>)
 8002fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc0:	f003 0302 	and.w	r3, r3, #2
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d1e9      	bne.n	8002f9c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 0304 	and.w	r3, r3, #4
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	f000 80a6 	beq.w	8003122 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fda:	4b97      	ldr	r3, [pc, #604]	; (8003238 <HAL_RCC_OscConfig+0x4f4>)
 8002fdc:	69db      	ldr	r3, [r3, #28]
 8002fde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d10d      	bne.n	8003002 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fe6:	4b94      	ldr	r3, [pc, #592]	; (8003238 <HAL_RCC_OscConfig+0x4f4>)
 8002fe8:	69db      	ldr	r3, [r3, #28]
 8002fea:	4a93      	ldr	r2, [pc, #588]	; (8003238 <HAL_RCC_OscConfig+0x4f4>)
 8002fec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ff0:	61d3      	str	r3, [r2, #28]
 8002ff2:	4b91      	ldr	r3, [pc, #580]	; (8003238 <HAL_RCC_OscConfig+0x4f4>)
 8002ff4:	69db      	ldr	r3, [r3, #28]
 8002ff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ffa:	60bb      	str	r3, [r7, #8]
 8002ffc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ffe:	2301      	movs	r3, #1
 8003000:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003002:	4b8e      	ldr	r3, [pc, #568]	; (800323c <HAL_RCC_OscConfig+0x4f8>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800300a:	2b00      	cmp	r3, #0
 800300c:	d118      	bne.n	8003040 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800300e:	4b8b      	ldr	r3, [pc, #556]	; (800323c <HAL_RCC_OscConfig+0x4f8>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a8a      	ldr	r2, [pc, #552]	; (800323c <HAL_RCC_OscConfig+0x4f8>)
 8003014:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003018:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800301a:	f7fe fd45 	bl	8001aa8 <HAL_GetTick>
 800301e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003020:	e008      	b.n	8003034 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003022:	f7fe fd41 	bl	8001aa8 <HAL_GetTick>
 8003026:	4602      	mov	r2, r0
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	2b64      	cmp	r3, #100	; 0x64
 800302e:	d901      	bls.n	8003034 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003030:	2303      	movs	r3, #3
 8003032:	e0fd      	b.n	8003230 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003034:	4b81      	ldr	r3, [pc, #516]	; (800323c <HAL_RCC_OscConfig+0x4f8>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800303c:	2b00      	cmp	r3, #0
 800303e:	d0f0      	beq.n	8003022 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	2b01      	cmp	r3, #1
 8003046:	d106      	bne.n	8003056 <HAL_RCC_OscConfig+0x312>
 8003048:	4b7b      	ldr	r3, [pc, #492]	; (8003238 <HAL_RCC_OscConfig+0x4f4>)
 800304a:	6a1b      	ldr	r3, [r3, #32]
 800304c:	4a7a      	ldr	r2, [pc, #488]	; (8003238 <HAL_RCC_OscConfig+0x4f4>)
 800304e:	f043 0301 	orr.w	r3, r3, #1
 8003052:	6213      	str	r3, [r2, #32]
 8003054:	e02d      	b.n	80030b2 <HAL_RCC_OscConfig+0x36e>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d10c      	bne.n	8003078 <HAL_RCC_OscConfig+0x334>
 800305e:	4b76      	ldr	r3, [pc, #472]	; (8003238 <HAL_RCC_OscConfig+0x4f4>)
 8003060:	6a1b      	ldr	r3, [r3, #32]
 8003062:	4a75      	ldr	r2, [pc, #468]	; (8003238 <HAL_RCC_OscConfig+0x4f4>)
 8003064:	f023 0301 	bic.w	r3, r3, #1
 8003068:	6213      	str	r3, [r2, #32]
 800306a:	4b73      	ldr	r3, [pc, #460]	; (8003238 <HAL_RCC_OscConfig+0x4f4>)
 800306c:	6a1b      	ldr	r3, [r3, #32]
 800306e:	4a72      	ldr	r2, [pc, #456]	; (8003238 <HAL_RCC_OscConfig+0x4f4>)
 8003070:	f023 0304 	bic.w	r3, r3, #4
 8003074:	6213      	str	r3, [r2, #32]
 8003076:	e01c      	b.n	80030b2 <HAL_RCC_OscConfig+0x36e>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	2b05      	cmp	r3, #5
 800307e:	d10c      	bne.n	800309a <HAL_RCC_OscConfig+0x356>
 8003080:	4b6d      	ldr	r3, [pc, #436]	; (8003238 <HAL_RCC_OscConfig+0x4f4>)
 8003082:	6a1b      	ldr	r3, [r3, #32]
 8003084:	4a6c      	ldr	r2, [pc, #432]	; (8003238 <HAL_RCC_OscConfig+0x4f4>)
 8003086:	f043 0304 	orr.w	r3, r3, #4
 800308a:	6213      	str	r3, [r2, #32]
 800308c:	4b6a      	ldr	r3, [pc, #424]	; (8003238 <HAL_RCC_OscConfig+0x4f4>)
 800308e:	6a1b      	ldr	r3, [r3, #32]
 8003090:	4a69      	ldr	r2, [pc, #420]	; (8003238 <HAL_RCC_OscConfig+0x4f4>)
 8003092:	f043 0301 	orr.w	r3, r3, #1
 8003096:	6213      	str	r3, [r2, #32]
 8003098:	e00b      	b.n	80030b2 <HAL_RCC_OscConfig+0x36e>
 800309a:	4b67      	ldr	r3, [pc, #412]	; (8003238 <HAL_RCC_OscConfig+0x4f4>)
 800309c:	6a1b      	ldr	r3, [r3, #32]
 800309e:	4a66      	ldr	r2, [pc, #408]	; (8003238 <HAL_RCC_OscConfig+0x4f4>)
 80030a0:	f023 0301 	bic.w	r3, r3, #1
 80030a4:	6213      	str	r3, [r2, #32]
 80030a6:	4b64      	ldr	r3, [pc, #400]	; (8003238 <HAL_RCC_OscConfig+0x4f4>)
 80030a8:	6a1b      	ldr	r3, [r3, #32]
 80030aa:	4a63      	ldr	r2, [pc, #396]	; (8003238 <HAL_RCC_OscConfig+0x4f4>)
 80030ac:	f023 0304 	bic.w	r3, r3, #4
 80030b0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	68db      	ldr	r3, [r3, #12]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d015      	beq.n	80030e6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030ba:	f7fe fcf5 	bl	8001aa8 <HAL_GetTick>
 80030be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030c0:	e00a      	b.n	80030d8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030c2:	f7fe fcf1 	bl	8001aa8 <HAL_GetTick>
 80030c6:	4602      	mov	r2, r0
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d901      	bls.n	80030d8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80030d4:	2303      	movs	r3, #3
 80030d6:	e0ab      	b.n	8003230 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030d8:	4b57      	ldr	r3, [pc, #348]	; (8003238 <HAL_RCC_OscConfig+0x4f4>)
 80030da:	6a1b      	ldr	r3, [r3, #32]
 80030dc:	f003 0302 	and.w	r3, r3, #2
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d0ee      	beq.n	80030c2 <HAL_RCC_OscConfig+0x37e>
 80030e4:	e014      	b.n	8003110 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030e6:	f7fe fcdf 	bl	8001aa8 <HAL_GetTick>
 80030ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030ec:	e00a      	b.n	8003104 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030ee:	f7fe fcdb 	bl	8001aa8 <HAL_GetTick>
 80030f2:	4602      	mov	r2, r0
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d901      	bls.n	8003104 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003100:	2303      	movs	r3, #3
 8003102:	e095      	b.n	8003230 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003104:	4b4c      	ldr	r3, [pc, #304]	; (8003238 <HAL_RCC_OscConfig+0x4f4>)
 8003106:	6a1b      	ldr	r3, [r3, #32]
 8003108:	f003 0302 	and.w	r3, r3, #2
 800310c:	2b00      	cmp	r3, #0
 800310e:	d1ee      	bne.n	80030ee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003110:	7dfb      	ldrb	r3, [r7, #23]
 8003112:	2b01      	cmp	r3, #1
 8003114:	d105      	bne.n	8003122 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003116:	4b48      	ldr	r3, [pc, #288]	; (8003238 <HAL_RCC_OscConfig+0x4f4>)
 8003118:	69db      	ldr	r3, [r3, #28]
 800311a:	4a47      	ldr	r2, [pc, #284]	; (8003238 <HAL_RCC_OscConfig+0x4f4>)
 800311c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003120:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	69db      	ldr	r3, [r3, #28]
 8003126:	2b00      	cmp	r3, #0
 8003128:	f000 8081 	beq.w	800322e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800312c:	4b42      	ldr	r3, [pc, #264]	; (8003238 <HAL_RCC_OscConfig+0x4f4>)
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f003 030c 	and.w	r3, r3, #12
 8003134:	2b08      	cmp	r3, #8
 8003136:	d061      	beq.n	80031fc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	69db      	ldr	r3, [r3, #28]
 800313c:	2b02      	cmp	r3, #2
 800313e:	d146      	bne.n	80031ce <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003140:	4b3f      	ldr	r3, [pc, #252]	; (8003240 <HAL_RCC_OscConfig+0x4fc>)
 8003142:	2200      	movs	r2, #0
 8003144:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003146:	f7fe fcaf 	bl	8001aa8 <HAL_GetTick>
 800314a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800314c:	e008      	b.n	8003160 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800314e:	f7fe fcab 	bl	8001aa8 <HAL_GetTick>
 8003152:	4602      	mov	r2, r0
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	1ad3      	subs	r3, r2, r3
 8003158:	2b02      	cmp	r3, #2
 800315a:	d901      	bls.n	8003160 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800315c:	2303      	movs	r3, #3
 800315e:	e067      	b.n	8003230 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003160:	4b35      	ldr	r3, [pc, #212]	; (8003238 <HAL_RCC_OscConfig+0x4f4>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003168:	2b00      	cmp	r3, #0
 800316a:	d1f0      	bne.n	800314e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6a1b      	ldr	r3, [r3, #32]
 8003170:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003174:	d108      	bne.n	8003188 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003176:	4b30      	ldr	r3, [pc, #192]	; (8003238 <HAL_RCC_OscConfig+0x4f4>)
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	492d      	ldr	r1, [pc, #180]	; (8003238 <HAL_RCC_OscConfig+0x4f4>)
 8003184:	4313      	orrs	r3, r2
 8003186:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003188:	4b2b      	ldr	r3, [pc, #172]	; (8003238 <HAL_RCC_OscConfig+0x4f4>)
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6a19      	ldr	r1, [r3, #32]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003198:	430b      	orrs	r3, r1
 800319a:	4927      	ldr	r1, [pc, #156]	; (8003238 <HAL_RCC_OscConfig+0x4f4>)
 800319c:	4313      	orrs	r3, r2
 800319e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031a0:	4b27      	ldr	r3, [pc, #156]	; (8003240 <HAL_RCC_OscConfig+0x4fc>)
 80031a2:	2201      	movs	r2, #1
 80031a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031a6:	f7fe fc7f 	bl	8001aa8 <HAL_GetTick>
 80031aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031ac:	e008      	b.n	80031c0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031ae:	f7fe fc7b 	bl	8001aa8 <HAL_GetTick>
 80031b2:	4602      	mov	r2, r0
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	2b02      	cmp	r3, #2
 80031ba:	d901      	bls.n	80031c0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80031bc:	2303      	movs	r3, #3
 80031be:	e037      	b.n	8003230 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031c0:	4b1d      	ldr	r3, [pc, #116]	; (8003238 <HAL_RCC_OscConfig+0x4f4>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d0f0      	beq.n	80031ae <HAL_RCC_OscConfig+0x46a>
 80031cc:	e02f      	b.n	800322e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031ce:	4b1c      	ldr	r3, [pc, #112]	; (8003240 <HAL_RCC_OscConfig+0x4fc>)
 80031d0:	2200      	movs	r2, #0
 80031d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031d4:	f7fe fc68 	bl	8001aa8 <HAL_GetTick>
 80031d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031da:	e008      	b.n	80031ee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031dc:	f7fe fc64 	bl	8001aa8 <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d901      	bls.n	80031ee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e020      	b.n	8003230 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031ee:	4b12      	ldr	r3, [pc, #72]	; (8003238 <HAL_RCC_OscConfig+0x4f4>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d1f0      	bne.n	80031dc <HAL_RCC_OscConfig+0x498>
 80031fa:	e018      	b.n	800322e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	69db      	ldr	r3, [r3, #28]
 8003200:	2b01      	cmp	r3, #1
 8003202:	d101      	bne.n	8003208 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e013      	b.n	8003230 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003208:	4b0b      	ldr	r3, [pc, #44]	; (8003238 <HAL_RCC_OscConfig+0x4f4>)
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6a1b      	ldr	r3, [r3, #32]
 8003218:	429a      	cmp	r2, r3
 800321a:	d106      	bne.n	800322a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003226:	429a      	cmp	r2, r3
 8003228:	d001      	beq.n	800322e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e000      	b.n	8003230 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800322e:	2300      	movs	r3, #0
}
 8003230:	4618      	mov	r0, r3
 8003232:	3718      	adds	r7, #24
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}
 8003238:	40021000 	.word	0x40021000
 800323c:	40007000 	.word	0x40007000
 8003240:	42420060 	.word	0x42420060

08003244 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b084      	sub	sp, #16
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d101      	bne.n	8003258 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e0d0      	b.n	80033fa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003258:	4b6a      	ldr	r3, [pc, #424]	; (8003404 <HAL_RCC_ClockConfig+0x1c0>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0307 	and.w	r3, r3, #7
 8003260:	683a      	ldr	r2, [r7, #0]
 8003262:	429a      	cmp	r2, r3
 8003264:	d910      	bls.n	8003288 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003266:	4b67      	ldr	r3, [pc, #412]	; (8003404 <HAL_RCC_ClockConfig+0x1c0>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f023 0207 	bic.w	r2, r3, #7
 800326e:	4965      	ldr	r1, [pc, #404]	; (8003404 <HAL_RCC_ClockConfig+0x1c0>)
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	4313      	orrs	r3, r2
 8003274:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003276:	4b63      	ldr	r3, [pc, #396]	; (8003404 <HAL_RCC_ClockConfig+0x1c0>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0307 	and.w	r3, r3, #7
 800327e:	683a      	ldr	r2, [r7, #0]
 8003280:	429a      	cmp	r2, r3
 8003282:	d001      	beq.n	8003288 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e0b8      	b.n	80033fa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 0302 	and.w	r3, r3, #2
 8003290:	2b00      	cmp	r3, #0
 8003292:	d020      	beq.n	80032d6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0304 	and.w	r3, r3, #4
 800329c:	2b00      	cmp	r3, #0
 800329e:	d005      	beq.n	80032ac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032a0:	4b59      	ldr	r3, [pc, #356]	; (8003408 <HAL_RCC_ClockConfig+0x1c4>)
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	4a58      	ldr	r2, [pc, #352]	; (8003408 <HAL_RCC_ClockConfig+0x1c4>)
 80032a6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80032aa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0308 	and.w	r3, r3, #8
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d005      	beq.n	80032c4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032b8:	4b53      	ldr	r3, [pc, #332]	; (8003408 <HAL_RCC_ClockConfig+0x1c4>)
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	4a52      	ldr	r2, [pc, #328]	; (8003408 <HAL_RCC_ClockConfig+0x1c4>)
 80032be:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80032c2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032c4:	4b50      	ldr	r3, [pc, #320]	; (8003408 <HAL_RCC_ClockConfig+0x1c4>)
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	494d      	ldr	r1, [pc, #308]	; (8003408 <HAL_RCC_ClockConfig+0x1c4>)
 80032d2:	4313      	orrs	r3, r2
 80032d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0301 	and.w	r3, r3, #1
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d040      	beq.n	8003364 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d107      	bne.n	80032fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ea:	4b47      	ldr	r3, [pc, #284]	; (8003408 <HAL_RCC_ClockConfig+0x1c4>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d115      	bne.n	8003322 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e07f      	b.n	80033fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	2b02      	cmp	r3, #2
 8003300:	d107      	bne.n	8003312 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003302:	4b41      	ldr	r3, [pc, #260]	; (8003408 <HAL_RCC_ClockConfig+0x1c4>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d109      	bne.n	8003322 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e073      	b.n	80033fa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003312:	4b3d      	ldr	r3, [pc, #244]	; (8003408 <HAL_RCC_ClockConfig+0x1c4>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0302 	and.w	r3, r3, #2
 800331a:	2b00      	cmp	r3, #0
 800331c:	d101      	bne.n	8003322 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e06b      	b.n	80033fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003322:	4b39      	ldr	r3, [pc, #228]	; (8003408 <HAL_RCC_ClockConfig+0x1c4>)
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	f023 0203 	bic.w	r2, r3, #3
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	4936      	ldr	r1, [pc, #216]	; (8003408 <HAL_RCC_ClockConfig+0x1c4>)
 8003330:	4313      	orrs	r3, r2
 8003332:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003334:	f7fe fbb8 	bl	8001aa8 <HAL_GetTick>
 8003338:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800333a:	e00a      	b.n	8003352 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800333c:	f7fe fbb4 	bl	8001aa8 <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	f241 3288 	movw	r2, #5000	; 0x1388
 800334a:	4293      	cmp	r3, r2
 800334c:	d901      	bls.n	8003352 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e053      	b.n	80033fa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003352:	4b2d      	ldr	r3, [pc, #180]	; (8003408 <HAL_RCC_ClockConfig+0x1c4>)
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	f003 020c 	and.w	r2, r3, #12
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	429a      	cmp	r2, r3
 8003362:	d1eb      	bne.n	800333c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003364:	4b27      	ldr	r3, [pc, #156]	; (8003404 <HAL_RCC_ClockConfig+0x1c0>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0307 	and.w	r3, r3, #7
 800336c:	683a      	ldr	r2, [r7, #0]
 800336e:	429a      	cmp	r2, r3
 8003370:	d210      	bcs.n	8003394 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003372:	4b24      	ldr	r3, [pc, #144]	; (8003404 <HAL_RCC_ClockConfig+0x1c0>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f023 0207 	bic.w	r2, r3, #7
 800337a:	4922      	ldr	r1, [pc, #136]	; (8003404 <HAL_RCC_ClockConfig+0x1c0>)
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	4313      	orrs	r3, r2
 8003380:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003382:	4b20      	ldr	r3, [pc, #128]	; (8003404 <HAL_RCC_ClockConfig+0x1c0>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0307 	and.w	r3, r3, #7
 800338a:	683a      	ldr	r2, [r7, #0]
 800338c:	429a      	cmp	r2, r3
 800338e:	d001      	beq.n	8003394 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e032      	b.n	80033fa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0304 	and.w	r3, r3, #4
 800339c:	2b00      	cmp	r3, #0
 800339e:	d008      	beq.n	80033b2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033a0:	4b19      	ldr	r3, [pc, #100]	; (8003408 <HAL_RCC_ClockConfig+0x1c4>)
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	4916      	ldr	r1, [pc, #88]	; (8003408 <HAL_RCC_ClockConfig+0x1c4>)
 80033ae:	4313      	orrs	r3, r2
 80033b0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0308 	and.w	r3, r3, #8
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d009      	beq.n	80033d2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80033be:	4b12      	ldr	r3, [pc, #72]	; (8003408 <HAL_RCC_ClockConfig+0x1c4>)
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	691b      	ldr	r3, [r3, #16]
 80033ca:	00db      	lsls	r3, r3, #3
 80033cc:	490e      	ldr	r1, [pc, #56]	; (8003408 <HAL_RCC_ClockConfig+0x1c4>)
 80033ce:	4313      	orrs	r3, r2
 80033d0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80033d2:	f000 f821 	bl	8003418 <HAL_RCC_GetSysClockFreq>
 80033d6:	4602      	mov	r2, r0
 80033d8:	4b0b      	ldr	r3, [pc, #44]	; (8003408 <HAL_RCC_ClockConfig+0x1c4>)
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	091b      	lsrs	r3, r3, #4
 80033de:	f003 030f 	and.w	r3, r3, #15
 80033e2:	490a      	ldr	r1, [pc, #40]	; (800340c <HAL_RCC_ClockConfig+0x1c8>)
 80033e4:	5ccb      	ldrb	r3, [r1, r3]
 80033e6:	fa22 f303 	lsr.w	r3, r2, r3
 80033ea:	4a09      	ldr	r2, [pc, #36]	; (8003410 <HAL_RCC_ClockConfig+0x1cc>)
 80033ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80033ee:	4b09      	ldr	r3, [pc, #36]	; (8003414 <HAL_RCC_ClockConfig+0x1d0>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4618      	mov	r0, r3
 80033f4:	f7fe fb16 	bl	8001a24 <HAL_InitTick>

  return HAL_OK;
 80033f8:	2300      	movs	r3, #0
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3710      	adds	r7, #16
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	40022000 	.word	0x40022000
 8003408:	40021000 	.word	0x40021000
 800340c:	08005fa4 	.word	0x08005fa4
 8003410:	200002a8 	.word	0x200002a8
 8003414:	200002ac 	.word	0x200002ac

08003418 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003418:	b490      	push	{r4, r7}
 800341a:	b08a      	sub	sp, #40	; 0x28
 800341c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800341e:	4b2a      	ldr	r3, [pc, #168]	; (80034c8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003420:	1d3c      	adds	r4, r7, #4
 8003422:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003424:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003428:	f240 2301 	movw	r3, #513	; 0x201
 800342c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800342e:	2300      	movs	r3, #0
 8003430:	61fb      	str	r3, [r7, #28]
 8003432:	2300      	movs	r3, #0
 8003434:	61bb      	str	r3, [r7, #24]
 8003436:	2300      	movs	r3, #0
 8003438:	627b      	str	r3, [r7, #36]	; 0x24
 800343a:	2300      	movs	r3, #0
 800343c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800343e:	2300      	movs	r3, #0
 8003440:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003442:	4b22      	ldr	r3, [pc, #136]	; (80034cc <HAL_RCC_GetSysClockFreq+0xb4>)
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	f003 030c 	and.w	r3, r3, #12
 800344e:	2b04      	cmp	r3, #4
 8003450:	d002      	beq.n	8003458 <HAL_RCC_GetSysClockFreq+0x40>
 8003452:	2b08      	cmp	r3, #8
 8003454:	d003      	beq.n	800345e <HAL_RCC_GetSysClockFreq+0x46>
 8003456:	e02d      	b.n	80034b4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003458:	4b1d      	ldr	r3, [pc, #116]	; (80034d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800345a:	623b      	str	r3, [r7, #32]
      break;
 800345c:	e02d      	b.n	80034ba <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	0c9b      	lsrs	r3, r3, #18
 8003462:	f003 030f 	and.w	r3, r3, #15
 8003466:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800346a:	4413      	add	r3, r2
 800346c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003470:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d013      	beq.n	80034a4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800347c:	4b13      	ldr	r3, [pc, #76]	; (80034cc <HAL_RCC_GetSysClockFreq+0xb4>)
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	0c5b      	lsrs	r3, r3, #17
 8003482:	f003 0301 	and.w	r3, r3, #1
 8003486:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800348a:	4413      	add	r3, r2
 800348c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003490:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	4a0e      	ldr	r2, [pc, #56]	; (80034d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003496:	fb02 f203 	mul.w	r2, r2, r3
 800349a:	69bb      	ldr	r3, [r7, #24]
 800349c:	fbb2 f3f3 	udiv	r3, r2, r3
 80034a0:	627b      	str	r3, [r7, #36]	; 0x24
 80034a2:	e004      	b.n	80034ae <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	4a0b      	ldr	r2, [pc, #44]	; (80034d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80034a8:	fb02 f303 	mul.w	r3, r2, r3
 80034ac:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80034ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b0:	623b      	str	r3, [r7, #32]
      break;
 80034b2:	e002      	b.n	80034ba <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80034b4:	4b06      	ldr	r3, [pc, #24]	; (80034d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80034b6:	623b      	str	r3, [r7, #32]
      break;
 80034b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034ba:	6a3b      	ldr	r3, [r7, #32]
}
 80034bc:	4618      	mov	r0, r3
 80034be:	3728      	adds	r7, #40	; 0x28
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bc90      	pop	{r4, r7}
 80034c4:	4770      	bx	lr
 80034c6:	bf00      	nop
 80034c8:	08003ed4 	.word	0x08003ed4
 80034cc:	40021000 	.word	0x40021000
 80034d0:	007a1200 	.word	0x007a1200
 80034d4:	003d0900 	.word	0x003d0900

080034d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034d8:	b480      	push	{r7}
 80034da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034dc:	4b02      	ldr	r3, [pc, #8]	; (80034e8 <HAL_RCC_GetHCLKFreq+0x10>)
 80034de:	681b      	ldr	r3, [r3, #0]
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bc80      	pop	{r7}
 80034e6:	4770      	bx	lr
 80034e8:	200002a8 	.word	0x200002a8

080034ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80034f0:	f7ff fff2 	bl	80034d8 <HAL_RCC_GetHCLKFreq>
 80034f4:	4602      	mov	r2, r0
 80034f6:	4b05      	ldr	r3, [pc, #20]	; (800350c <HAL_RCC_GetPCLK1Freq+0x20>)
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	0a1b      	lsrs	r3, r3, #8
 80034fc:	f003 0307 	and.w	r3, r3, #7
 8003500:	4903      	ldr	r1, [pc, #12]	; (8003510 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003502:	5ccb      	ldrb	r3, [r1, r3]
 8003504:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003508:	4618      	mov	r0, r3
 800350a:	bd80      	pop	{r7, pc}
 800350c:	40021000 	.word	0x40021000
 8003510:	08005fb4 	.word	0x08005fb4

08003514 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003514:	b480      	push	{r7}
 8003516:	b085      	sub	sp, #20
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800351c:	4b0a      	ldr	r3, [pc, #40]	; (8003548 <RCC_Delay+0x34>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a0a      	ldr	r2, [pc, #40]	; (800354c <RCC_Delay+0x38>)
 8003522:	fba2 2303 	umull	r2, r3, r2, r3
 8003526:	0a5b      	lsrs	r3, r3, #9
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	fb02 f303 	mul.w	r3, r2, r3
 800352e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003530:	bf00      	nop
  }
  while (Delay --);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	1e5a      	subs	r2, r3, #1
 8003536:	60fa      	str	r2, [r7, #12]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d1f9      	bne.n	8003530 <RCC_Delay+0x1c>
}
 800353c:	bf00      	nop
 800353e:	bf00      	nop
 8003540:	3714      	adds	r7, #20
 8003542:	46bd      	mov	sp, r7
 8003544:	bc80      	pop	{r7}
 8003546:	4770      	bx	lr
 8003548:	200002a8 	.word	0x200002a8
 800354c:	10624dd3 	.word	0x10624dd3

08003550 <__errno>:
 8003550:	4b01      	ldr	r3, [pc, #4]	; (8003558 <__errno+0x8>)
 8003552:	6818      	ldr	r0, [r3, #0]
 8003554:	4770      	bx	lr
 8003556:	bf00      	nop
 8003558:	200002b4 	.word	0x200002b4

0800355c <__libc_init_array>:
 800355c:	b570      	push	{r4, r5, r6, lr}
 800355e:	2600      	movs	r6, #0
 8003560:	4d0c      	ldr	r5, [pc, #48]	; (8003594 <__libc_init_array+0x38>)
 8003562:	4c0d      	ldr	r4, [pc, #52]	; (8003598 <__libc_init_array+0x3c>)
 8003564:	1b64      	subs	r4, r4, r5
 8003566:	10a4      	asrs	r4, r4, #2
 8003568:	42a6      	cmp	r6, r4
 800356a:	d109      	bne.n	8003580 <__libc_init_array+0x24>
 800356c:	f000 fc70 	bl	8003e50 <_init>
 8003570:	2600      	movs	r6, #0
 8003572:	4d0a      	ldr	r5, [pc, #40]	; (800359c <__libc_init_array+0x40>)
 8003574:	4c0a      	ldr	r4, [pc, #40]	; (80035a0 <__libc_init_array+0x44>)
 8003576:	1b64      	subs	r4, r4, r5
 8003578:	10a4      	asrs	r4, r4, #2
 800357a:	42a6      	cmp	r6, r4
 800357c:	d105      	bne.n	800358a <__libc_init_array+0x2e>
 800357e:	bd70      	pop	{r4, r5, r6, pc}
 8003580:	f855 3b04 	ldr.w	r3, [r5], #4
 8003584:	4798      	blx	r3
 8003586:	3601      	adds	r6, #1
 8003588:	e7ee      	b.n	8003568 <__libc_init_array+0xc>
 800358a:	f855 3b04 	ldr.w	r3, [r5], #4
 800358e:	4798      	blx	r3
 8003590:	3601      	adds	r6, #1
 8003592:	e7f2      	b.n	800357a <__libc_init_array+0x1e>
 8003594:	08005ff0 	.word	0x08005ff0
 8003598:	08005ff0 	.word	0x08005ff0
 800359c:	08005ff0 	.word	0x08005ff0
 80035a0:	08005ff4 	.word	0x08005ff4

080035a4 <memcpy>:
 80035a4:	440a      	add	r2, r1
 80035a6:	4291      	cmp	r1, r2
 80035a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80035ac:	d100      	bne.n	80035b0 <memcpy+0xc>
 80035ae:	4770      	bx	lr
 80035b0:	b510      	push	{r4, lr}
 80035b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80035b6:	4291      	cmp	r1, r2
 80035b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80035bc:	d1f9      	bne.n	80035b2 <memcpy+0xe>
 80035be:	bd10      	pop	{r4, pc}

080035c0 <memset>:
 80035c0:	4603      	mov	r3, r0
 80035c2:	4402      	add	r2, r0
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d100      	bne.n	80035ca <memset+0xa>
 80035c8:	4770      	bx	lr
 80035ca:	f803 1b01 	strb.w	r1, [r3], #1
 80035ce:	e7f9      	b.n	80035c4 <memset+0x4>

080035d0 <sniprintf>:
 80035d0:	b40c      	push	{r2, r3}
 80035d2:	b530      	push	{r4, r5, lr}
 80035d4:	4b17      	ldr	r3, [pc, #92]	; (8003634 <sniprintf+0x64>)
 80035d6:	1e0c      	subs	r4, r1, #0
 80035d8:	681d      	ldr	r5, [r3, #0]
 80035da:	b09d      	sub	sp, #116	; 0x74
 80035dc:	da08      	bge.n	80035f0 <sniprintf+0x20>
 80035de:	238b      	movs	r3, #139	; 0x8b
 80035e0:	f04f 30ff 	mov.w	r0, #4294967295
 80035e4:	602b      	str	r3, [r5, #0]
 80035e6:	b01d      	add	sp, #116	; 0x74
 80035e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80035ec:	b002      	add	sp, #8
 80035ee:	4770      	bx	lr
 80035f0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80035f4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80035f8:	bf0c      	ite	eq
 80035fa:	4623      	moveq	r3, r4
 80035fc:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003600:	9304      	str	r3, [sp, #16]
 8003602:	9307      	str	r3, [sp, #28]
 8003604:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003608:	9002      	str	r0, [sp, #8]
 800360a:	9006      	str	r0, [sp, #24]
 800360c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003610:	4628      	mov	r0, r5
 8003612:	ab21      	add	r3, sp, #132	; 0x84
 8003614:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003616:	a902      	add	r1, sp, #8
 8003618:	9301      	str	r3, [sp, #4]
 800361a:	f000 f869 	bl	80036f0 <_svfiprintf_r>
 800361e:	1c43      	adds	r3, r0, #1
 8003620:	bfbc      	itt	lt
 8003622:	238b      	movlt	r3, #139	; 0x8b
 8003624:	602b      	strlt	r3, [r5, #0]
 8003626:	2c00      	cmp	r4, #0
 8003628:	d0dd      	beq.n	80035e6 <sniprintf+0x16>
 800362a:	2200      	movs	r2, #0
 800362c:	9b02      	ldr	r3, [sp, #8]
 800362e:	701a      	strb	r2, [r3, #0]
 8003630:	e7d9      	b.n	80035e6 <sniprintf+0x16>
 8003632:	bf00      	nop
 8003634:	200002b4 	.word	0x200002b4

08003638 <__ssputs_r>:
 8003638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800363c:	688e      	ldr	r6, [r1, #8]
 800363e:	4682      	mov	sl, r0
 8003640:	429e      	cmp	r6, r3
 8003642:	460c      	mov	r4, r1
 8003644:	4690      	mov	r8, r2
 8003646:	461f      	mov	r7, r3
 8003648:	d838      	bhi.n	80036bc <__ssputs_r+0x84>
 800364a:	898a      	ldrh	r2, [r1, #12]
 800364c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003650:	d032      	beq.n	80036b8 <__ssputs_r+0x80>
 8003652:	6825      	ldr	r5, [r4, #0]
 8003654:	6909      	ldr	r1, [r1, #16]
 8003656:	3301      	adds	r3, #1
 8003658:	eba5 0901 	sub.w	r9, r5, r1
 800365c:	6965      	ldr	r5, [r4, #20]
 800365e:	444b      	add	r3, r9
 8003660:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003664:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003668:	106d      	asrs	r5, r5, #1
 800366a:	429d      	cmp	r5, r3
 800366c:	bf38      	it	cc
 800366e:	461d      	movcc	r5, r3
 8003670:	0553      	lsls	r3, r2, #21
 8003672:	d531      	bpl.n	80036d8 <__ssputs_r+0xa0>
 8003674:	4629      	mov	r1, r5
 8003676:	f000 fb45 	bl	8003d04 <_malloc_r>
 800367a:	4606      	mov	r6, r0
 800367c:	b950      	cbnz	r0, 8003694 <__ssputs_r+0x5c>
 800367e:	230c      	movs	r3, #12
 8003680:	f04f 30ff 	mov.w	r0, #4294967295
 8003684:	f8ca 3000 	str.w	r3, [sl]
 8003688:	89a3      	ldrh	r3, [r4, #12]
 800368a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800368e:	81a3      	strh	r3, [r4, #12]
 8003690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003694:	464a      	mov	r2, r9
 8003696:	6921      	ldr	r1, [r4, #16]
 8003698:	f7ff ff84 	bl	80035a4 <memcpy>
 800369c:	89a3      	ldrh	r3, [r4, #12]
 800369e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80036a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036a6:	81a3      	strh	r3, [r4, #12]
 80036a8:	6126      	str	r6, [r4, #16]
 80036aa:	444e      	add	r6, r9
 80036ac:	6026      	str	r6, [r4, #0]
 80036ae:	463e      	mov	r6, r7
 80036b0:	6165      	str	r5, [r4, #20]
 80036b2:	eba5 0509 	sub.w	r5, r5, r9
 80036b6:	60a5      	str	r5, [r4, #8]
 80036b8:	42be      	cmp	r6, r7
 80036ba:	d900      	bls.n	80036be <__ssputs_r+0x86>
 80036bc:	463e      	mov	r6, r7
 80036be:	4632      	mov	r2, r6
 80036c0:	4641      	mov	r1, r8
 80036c2:	6820      	ldr	r0, [r4, #0]
 80036c4:	f000 fab8 	bl	8003c38 <memmove>
 80036c8:	68a3      	ldr	r3, [r4, #8]
 80036ca:	6822      	ldr	r2, [r4, #0]
 80036cc:	1b9b      	subs	r3, r3, r6
 80036ce:	4432      	add	r2, r6
 80036d0:	2000      	movs	r0, #0
 80036d2:	60a3      	str	r3, [r4, #8]
 80036d4:	6022      	str	r2, [r4, #0]
 80036d6:	e7db      	b.n	8003690 <__ssputs_r+0x58>
 80036d8:	462a      	mov	r2, r5
 80036da:	f000 fb6d 	bl	8003db8 <_realloc_r>
 80036de:	4606      	mov	r6, r0
 80036e0:	2800      	cmp	r0, #0
 80036e2:	d1e1      	bne.n	80036a8 <__ssputs_r+0x70>
 80036e4:	4650      	mov	r0, sl
 80036e6:	6921      	ldr	r1, [r4, #16]
 80036e8:	f000 fac0 	bl	8003c6c <_free_r>
 80036ec:	e7c7      	b.n	800367e <__ssputs_r+0x46>
	...

080036f0 <_svfiprintf_r>:
 80036f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036f4:	4698      	mov	r8, r3
 80036f6:	898b      	ldrh	r3, [r1, #12]
 80036f8:	4607      	mov	r7, r0
 80036fa:	061b      	lsls	r3, r3, #24
 80036fc:	460d      	mov	r5, r1
 80036fe:	4614      	mov	r4, r2
 8003700:	b09d      	sub	sp, #116	; 0x74
 8003702:	d50e      	bpl.n	8003722 <_svfiprintf_r+0x32>
 8003704:	690b      	ldr	r3, [r1, #16]
 8003706:	b963      	cbnz	r3, 8003722 <_svfiprintf_r+0x32>
 8003708:	2140      	movs	r1, #64	; 0x40
 800370a:	f000 fafb 	bl	8003d04 <_malloc_r>
 800370e:	6028      	str	r0, [r5, #0]
 8003710:	6128      	str	r0, [r5, #16]
 8003712:	b920      	cbnz	r0, 800371e <_svfiprintf_r+0x2e>
 8003714:	230c      	movs	r3, #12
 8003716:	603b      	str	r3, [r7, #0]
 8003718:	f04f 30ff 	mov.w	r0, #4294967295
 800371c:	e0d1      	b.n	80038c2 <_svfiprintf_r+0x1d2>
 800371e:	2340      	movs	r3, #64	; 0x40
 8003720:	616b      	str	r3, [r5, #20]
 8003722:	2300      	movs	r3, #0
 8003724:	9309      	str	r3, [sp, #36]	; 0x24
 8003726:	2320      	movs	r3, #32
 8003728:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800372c:	2330      	movs	r3, #48	; 0x30
 800372e:	f04f 0901 	mov.w	r9, #1
 8003732:	f8cd 800c 	str.w	r8, [sp, #12]
 8003736:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80038dc <_svfiprintf_r+0x1ec>
 800373a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800373e:	4623      	mov	r3, r4
 8003740:	469a      	mov	sl, r3
 8003742:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003746:	b10a      	cbz	r2, 800374c <_svfiprintf_r+0x5c>
 8003748:	2a25      	cmp	r2, #37	; 0x25
 800374a:	d1f9      	bne.n	8003740 <_svfiprintf_r+0x50>
 800374c:	ebba 0b04 	subs.w	fp, sl, r4
 8003750:	d00b      	beq.n	800376a <_svfiprintf_r+0x7a>
 8003752:	465b      	mov	r3, fp
 8003754:	4622      	mov	r2, r4
 8003756:	4629      	mov	r1, r5
 8003758:	4638      	mov	r0, r7
 800375a:	f7ff ff6d 	bl	8003638 <__ssputs_r>
 800375e:	3001      	adds	r0, #1
 8003760:	f000 80aa 	beq.w	80038b8 <_svfiprintf_r+0x1c8>
 8003764:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003766:	445a      	add	r2, fp
 8003768:	9209      	str	r2, [sp, #36]	; 0x24
 800376a:	f89a 3000 	ldrb.w	r3, [sl]
 800376e:	2b00      	cmp	r3, #0
 8003770:	f000 80a2 	beq.w	80038b8 <_svfiprintf_r+0x1c8>
 8003774:	2300      	movs	r3, #0
 8003776:	f04f 32ff 	mov.w	r2, #4294967295
 800377a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800377e:	f10a 0a01 	add.w	sl, sl, #1
 8003782:	9304      	str	r3, [sp, #16]
 8003784:	9307      	str	r3, [sp, #28]
 8003786:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800378a:	931a      	str	r3, [sp, #104]	; 0x68
 800378c:	4654      	mov	r4, sl
 800378e:	2205      	movs	r2, #5
 8003790:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003794:	4851      	ldr	r0, [pc, #324]	; (80038dc <_svfiprintf_r+0x1ec>)
 8003796:	f000 fa41 	bl	8003c1c <memchr>
 800379a:	9a04      	ldr	r2, [sp, #16]
 800379c:	b9d8      	cbnz	r0, 80037d6 <_svfiprintf_r+0xe6>
 800379e:	06d0      	lsls	r0, r2, #27
 80037a0:	bf44      	itt	mi
 80037a2:	2320      	movmi	r3, #32
 80037a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80037a8:	0711      	lsls	r1, r2, #28
 80037aa:	bf44      	itt	mi
 80037ac:	232b      	movmi	r3, #43	; 0x2b
 80037ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80037b2:	f89a 3000 	ldrb.w	r3, [sl]
 80037b6:	2b2a      	cmp	r3, #42	; 0x2a
 80037b8:	d015      	beq.n	80037e6 <_svfiprintf_r+0xf6>
 80037ba:	4654      	mov	r4, sl
 80037bc:	2000      	movs	r0, #0
 80037be:	f04f 0c0a 	mov.w	ip, #10
 80037c2:	9a07      	ldr	r2, [sp, #28]
 80037c4:	4621      	mov	r1, r4
 80037c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80037ca:	3b30      	subs	r3, #48	; 0x30
 80037cc:	2b09      	cmp	r3, #9
 80037ce:	d94e      	bls.n	800386e <_svfiprintf_r+0x17e>
 80037d0:	b1b0      	cbz	r0, 8003800 <_svfiprintf_r+0x110>
 80037d2:	9207      	str	r2, [sp, #28]
 80037d4:	e014      	b.n	8003800 <_svfiprintf_r+0x110>
 80037d6:	eba0 0308 	sub.w	r3, r0, r8
 80037da:	fa09 f303 	lsl.w	r3, r9, r3
 80037de:	4313      	orrs	r3, r2
 80037e0:	46a2      	mov	sl, r4
 80037e2:	9304      	str	r3, [sp, #16]
 80037e4:	e7d2      	b.n	800378c <_svfiprintf_r+0x9c>
 80037e6:	9b03      	ldr	r3, [sp, #12]
 80037e8:	1d19      	adds	r1, r3, #4
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	9103      	str	r1, [sp, #12]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	bfbb      	ittet	lt
 80037f2:	425b      	neglt	r3, r3
 80037f4:	f042 0202 	orrlt.w	r2, r2, #2
 80037f8:	9307      	strge	r3, [sp, #28]
 80037fa:	9307      	strlt	r3, [sp, #28]
 80037fc:	bfb8      	it	lt
 80037fe:	9204      	strlt	r2, [sp, #16]
 8003800:	7823      	ldrb	r3, [r4, #0]
 8003802:	2b2e      	cmp	r3, #46	; 0x2e
 8003804:	d10c      	bne.n	8003820 <_svfiprintf_r+0x130>
 8003806:	7863      	ldrb	r3, [r4, #1]
 8003808:	2b2a      	cmp	r3, #42	; 0x2a
 800380a:	d135      	bne.n	8003878 <_svfiprintf_r+0x188>
 800380c:	9b03      	ldr	r3, [sp, #12]
 800380e:	3402      	adds	r4, #2
 8003810:	1d1a      	adds	r2, r3, #4
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	9203      	str	r2, [sp, #12]
 8003816:	2b00      	cmp	r3, #0
 8003818:	bfb8      	it	lt
 800381a:	f04f 33ff 	movlt.w	r3, #4294967295
 800381e:	9305      	str	r3, [sp, #20]
 8003820:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80038ec <_svfiprintf_r+0x1fc>
 8003824:	2203      	movs	r2, #3
 8003826:	4650      	mov	r0, sl
 8003828:	7821      	ldrb	r1, [r4, #0]
 800382a:	f000 f9f7 	bl	8003c1c <memchr>
 800382e:	b140      	cbz	r0, 8003842 <_svfiprintf_r+0x152>
 8003830:	2340      	movs	r3, #64	; 0x40
 8003832:	eba0 000a 	sub.w	r0, r0, sl
 8003836:	fa03 f000 	lsl.w	r0, r3, r0
 800383a:	9b04      	ldr	r3, [sp, #16]
 800383c:	3401      	adds	r4, #1
 800383e:	4303      	orrs	r3, r0
 8003840:	9304      	str	r3, [sp, #16]
 8003842:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003846:	2206      	movs	r2, #6
 8003848:	4825      	ldr	r0, [pc, #148]	; (80038e0 <_svfiprintf_r+0x1f0>)
 800384a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800384e:	f000 f9e5 	bl	8003c1c <memchr>
 8003852:	2800      	cmp	r0, #0
 8003854:	d038      	beq.n	80038c8 <_svfiprintf_r+0x1d8>
 8003856:	4b23      	ldr	r3, [pc, #140]	; (80038e4 <_svfiprintf_r+0x1f4>)
 8003858:	bb1b      	cbnz	r3, 80038a2 <_svfiprintf_r+0x1b2>
 800385a:	9b03      	ldr	r3, [sp, #12]
 800385c:	3307      	adds	r3, #7
 800385e:	f023 0307 	bic.w	r3, r3, #7
 8003862:	3308      	adds	r3, #8
 8003864:	9303      	str	r3, [sp, #12]
 8003866:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003868:	4433      	add	r3, r6
 800386a:	9309      	str	r3, [sp, #36]	; 0x24
 800386c:	e767      	b.n	800373e <_svfiprintf_r+0x4e>
 800386e:	460c      	mov	r4, r1
 8003870:	2001      	movs	r0, #1
 8003872:	fb0c 3202 	mla	r2, ip, r2, r3
 8003876:	e7a5      	b.n	80037c4 <_svfiprintf_r+0xd4>
 8003878:	2300      	movs	r3, #0
 800387a:	f04f 0c0a 	mov.w	ip, #10
 800387e:	4619      	mov	r1, r3
 8003880:	3401      	adds	r4, #1
 8003882:	9305      	str	r3, [sp, #20]
 8003884:	4620      	mov	r0, r4
 8003886:	f810 2b01 	ldrb.w	r2, [r0], #1
 800388a:	3a30      	subs	r2, #48	; 0x30
 800388c:	2a09      	cmp	r2, #9
 800388e:	d903      	bls.n	8003898 <_svfiprintf_r+0x1a8>
 8003890:	2b00      	cmp	r3, #0
 8003892:	d0c5      	beq.n	8003820 <_svfiprintf_r+0x130>
 8003894:	9105      	str	r1, [sp, #20]
 8003896:	e7c3      	b.n	8003820 <_svfiprintf_r+0x130>
 8003898:	4604      	mov	r4, r0
 800389a:	2301      	movs	r3, #1
 800389c:	fb0c 2101 	mla	r1, ip, r1, r2
 80038a0:	e7f0      	b.n	8003884 <_svfiprintf_r+0x194>
 80038a2:	ab03      	add	r3, sp, #12
 80038a4:	9300      	str	r3, [sp, #0]
 80038a6:	462a      	mov	r2, r5
 80038a8:	4638      	mov	r0, r7
 80038aa:	4b0f      	ldr	r3, [pc, #60]	; (80038e8 <_svfiprintf_r+0x1f8>)
 80038ac:	a904      	add	r1, sp, #16
 80038ae:	f3af 8000 	nop.w
 80038b2:	1c42      	adds	r2, r0, #1
 80038b4:	4606      	mov	r6, r0
 80038b6:	d1d6      	bne.n	8003866 <_svfiprintf_r+0x176>
 80038b8:	89ab      	ldrh	r3, [r5, #12]
 80038ba:	065b      	lsls	r3, r3, #25
 80038bc:	f53f af2c 	bmi.w	8003718 <_svfiprintf_r+0x28>
 80038c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80038c2:	b01d      	add	sp, #116	; 0x74
 80038c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038c8:	ab03      	add	r3, sp, #12
 80038ca:	9300      	str	r3, [sp, #0]
 80038cc:	462a      	mov	r2, r5
 80038ce:	4638      	mov	r0, r7
 80038d0:	4b05      	ldr	r3, [pc, #20]	; (80038e8 <_svfiprintf_r+0x1f8>)
 80038d2:	a904      	add	r1, sp, #16
 80038d4:	f000 f87c 	bl	80039d0 <_printf_i>
 80038d8:	e7eb      	b.n	80038b2 <_svfiprintf_r+0x1c2>
 80038da:	bf00      	nop
 80038dc:	08005fbc 	.word	0x08005fbc
 80038e0:	08005fc6 	.word	0x08005fc6
 80038e4:	00000000 	.word	0x00000000
 80038e8:	08003639 	.word	0x08003639
 80038ec:	08005fc2 	.word	0x08005fc2

080038f0 <_printf_common>:
 80038f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038f4:	4616      	mov	r6, r2
 80038f6:	4699      	mov	r9, r3
 80038f8:	688a      	ldr	r2, [r1, #8]
 80038fa:	690b      	ldr	r3, [r1, #16]
 80038fc:	4607      	mov	r7, r0
 80038fe:	4293      	cmp	r3, r2
 8003900:	bfb8      	it	lt
 8003902:	4613      	movlt	r3, r2
 8003904:	6033      	str	r3, [r6, #0]
 8003906:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800390a:	460c      	mov	r4, r1
 800390c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003910:	b10a      	cbz	r2, 8003916 <_printf_common+0x26>
 8003912:	3301      	adds	r3, #1
 8003914:	6033      	str	r3, [r6, #0]
 8003916:	6823      	ldr	r3, [r4, #0]
 8003918:	0699      	lsls	r1, r3, #26
 800391a:	bf42      	ittt	mi
 800391c:	6833      	ldrmi	r3, [r6, #0]
 800391e:	3302      	addmi	r3, #2
 8003920:	6033      	strmi	r3, [r6, #0]
 8003922:	6825      	ldr	r5, [r4, #0]
 8003924:	f015 0506 	ands.w	r5, r5, #6
 8003928:	d106      	bne.n	8003938 <_printf_common+0x48>
 800392a:	f104 0a19 	add.w	sl, r4, #25
 800392e:	68e3      	ldr	r3, [r4, #12]
 8003930:	6832      	ldr	r2, [r6, #0]
 8003932:	1a9b      	subs	r3, r3, r2
 8003934:	42ab      	cmp	r3, r5
 8003936:	dc28      	bgt.n	800398a <_printf_common+0x9a>
 8003938:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800393c:	1e13      	subs	r3, r2, #0
 800393e:	6822      	ldr	r2, [r4, #0]
 8003940:	bf18      	it	ne
 8003942:	2301      	movne	r3, #1
 8003944:	0692      	lsls	r2, r2, #26
 8003946:	d42d      	bmi.n	80039a4 <_printf_common+0xb4>
 8003948:	4649      	mov	r1, r9
 800394a:	4638      	mov	r0, r7
 800394c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003950:	47c0      	blx	r8
 8003952:	3001      	adds	r0, #1
 8003954:	d020      	beq.n	8003998 <_printf_common+0xa8>
 8003956:	6823      	ldr	r3, [r4, #0]
 8003958:	68e5      	ldr	r5, [r4, #12]
 800395a:	f003 0306 	and.w	r3, r3, #6
 800395e:	2b04      	cmp	r3, #4
 8003960:	bf18      	it	ne
 8003962:	2500      	movne	r5, #0
 8003964:	6832      	ldr	r2, [r6, #0]
 8003966:	f04f 0600 	mov.w	r6, #0
 800396a:	68a3      	ldr	r3, [r4, #8]
 800396c:	bf08      	it	eq
 800396e:	1aad      	subeq	r5, r5, r2
 8003970:	6922      	ldr	r2, [r4, #16]
 8003972:	bf08      	it	eq
 8003974:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003978:	4293      	cmp	r3, r2
 800397a:	bfc4      	itt	gt
 800397c:	1a9b      	subgt	r3, r3, r2
 800397e:	18ed      	addgt	r5, r5, r3
 8003980:	341a      	adds	r4, #26
 8003982:	42b5      	cmp	r5, r6
 8003984:	d11a      	bne.n	80039bc <_printf_common+0xcc>
 8003986:	2000      	movs	r0, #0
 8003988:	e008      	b.n	800399c <_printf_common+0xac>
 800398a:	2301      	movs	r3, #1
 800398c:	4652      	mov	r2, sl
 800398e:	4649      	mov	r1, r9
 8003990:	4638      	mov	r0, r7
 8003992:	47c0      	blx	r8
 8003994:	3001      	adds	r0, #1
 8003996:	d103      	bne.n	80039a0 <_printf_common+0xb0>
 8003998:	f04f 30ff 	mov.w	r0, #4294967295
 800399c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039a0:	3501      	adds	r5, #1
 80039a2:	e7c4      	b.n	800392e <_printf_common+0x3e>
 80039a4:	2030      	movs	r0, #48	; 0x30
 80039a6:	18e1      	adds	r1, r4, r3
 80039a8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80039ac:	1c5a      	adds	r2, r3, #1
 80039ae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80039b2:	4422      	add	r2, r4
 80039b4:	3302      	adds	r3, #2
 80039b6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80039ba:	e7c5      	b.n	8003948 <_printf_common+0x58>
 80039bc:	2301      	movs	r3, #1
 80039be:	4622      	mov	r2, r4
 80039c0:	4649      	mov	r1, r9
 80039c2:	4638      	mov	r0, r7
 80039c4:	47c0      	blx	r8
 80039c6:	3001      	adds	r0, #1
 80039c8:	d0e6      	beq.n	8003998 <_printf_common+0xa8>
 80039ca:	3601      	adds	r6, #1
 80039cc:	e7d9      	b.n	8003982 <_printf_common+0x92>
	...

080039d0 <_printf_i>:
 80039d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80039d4:	460c      	mov	r4, r1
 80039d6:	7e27      	ldrb	r7, [r4, #24]
 80039d8:	4691      	mov	r9, r2
 80039da:	2f78      	cmp	r7, #120	; 0x78
 80039dc:	4680      	mov	r8, r0
 80039de:	469a      	mov	sl, r3
 80039e0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80039e2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80039e6:	d807      	bhi.n	80039f8 <_printf_i+0x28>
 80039e8:	2f62      	cmp	r7, #98	; 0x62
 80039ea:	d80a      	bhi.n	8003a02 <_printf_i+0x32>
 80039ec:	2f00      	cmp	r7, #0
 80039ee:	f000 80d9 	beq.w	8003ba4 <_printf_i+0x1d4>
 80039f2:	2f58      	cmp	r7, #88	; 0x58
 80039f4:	f000 80a4 	beq.w	8003b40 <_printf_i+0x170>
 80039f8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80039fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003a00:	e03a      	b.n	8003a78 <_printf_i+0xa8>
 8003a02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003a06:	2b15      	cmp	r3, #21
 8003a08:	d8f6      	bhi.n	80039f8 <_printf_i+0x28>
 8003a0a:	a001      	add	r0, pc, #4	; (adr r0, 8003a10 <_printf_i+0x40>)
 8003a0c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003a10:	08003a69 	.word	0x08003a69
 8003a14:	08003a7d 	.word	0x08003a7d
 8003a18:	080039f9 	.word	0x080039f9
 8003a1c:	080039f9 	.word	0x080039f9
 8003a20:	080039f9 	.word	0x080039f9
 8003a24:	080039f9 	.word	0x080039f9
 8003a28:	08003a7d 	.word	0x08003a7d
 8003a2c:	080039f9 	.word	0x080039f9
 8003a30:	080039f9 	.word	0x080039f9
 8003a34:	080039f9 	.word	0x080039f9
 8003a38:	080039f9 	.word	0x080039f9
 8003a3c:	08003b8b 	.word	0x08003b8b
 8003a40:	08003aad 	.word	0x08003aad
 8003a44:	08003b6d 	.word	0x08003b6d
 8003a48:	080039f9 	.word	0x080039f9
 8003a4c:	080039f9 	.word	0x080039f9
 8003a50:	08003bad 	.word	0x08003bad
 8003a54:	080039f9 	.word	0x080039f9
 8003a58:	08003aad 	.word	0x08003aad
 8003a5c:	080039f9 	.word	0x080039f9
 8003a60:	080039f9 	.word	0x080039f9
 8003a64:	08003b75 	.word	0x08003b75
 8003a68:	680b      	ldr	r3, [r1, #0]
 8003a6a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003a6e:	1d1a      	adds	r2, r3, #4
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	600a      	str	r2, [r1, #0]
 8003a74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e0a4      	b.n	8003bc6 <_printf_i+0x1f6>
 8003a7c:	6825      	ldr	r5, [r4, #0]
 8003a7e:	6808      	ldr	r0, [r1, #0]
 8003a80:	062e      	lsls	r6, r5, #24
 8003a82:	f100 0304 	add.w	r3, r0, #4
 8003a86:	d50a      	bpl.n	8003a9e <_printf_i+0xce>
 8003a88:	6805      	ldr	r5, [r0, #0]
 8003a8a:	600b      	str	r3, [r1, #0]
 8003a8c:	2d00      	cmp	r5, #0
 8003a8e:	da03      	bge.n	8003a98 <_printf_i+0xc8>
 8003a90:	232d      	movs	r3, #45	; 0x2d
 8003a92:	426d      	negs	r5, r5
 8003a94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a98:	230a      	movs	r3, #10
 8003a9a:	485e      	ldr	r0, [pc, #376]	; (8003c14 <_printf_i+0x244>)
 8003a9c:	e019      	b.n	8003ad2 <_printf_i+0x102>
 8003a9e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003aa2:	6805      	ldr	r5, [r0, #0]
 8003aa4:	600b      	str	r3, [r1, #0]
 8003aa6:	bf18      	it	ne
 8003aa8:	b22d      	sxthne	r5, r5
 8003aaa:	e7ef      	b.n	8003a8c <_printf_i+0xbc>
 8003aac:	680b      	ldr	r3, [r1, #0]
 8003aae:	6825      	ldr	r5, [r4, #0]
 8003ab0:	1d18      	adds	r0, r3, #4
 8003ab2:	6008      	str	r0, [r1, #0]
 8003ab4:	0628      	lsls	r0, r5, #24
 8003ab6:	d501      	bpl.n	8003abc <_printf_i+0xec>
 8003ab8:	681d      	ldr	r5, [r3, #0]
 8003aba:	e002      	b.n	8003ac2 <_printf_i+0xf2>
 8003abc:	0669      	lsls	r1, r5, #25
 8003abe:	d5fb      	bpl.n	8003ab8 <_printf_i+0xe8>
 8003ac0:	881d      	ldrh	r5, [r3, #0]
 8003ac2:	2f6f      	cmp	r7, #111	; 0x6f
 8003ac4:	bf0c      	ite	eq
 8003ac6:	2308      	moveq	r3, #8
 8003ac8:	230a      	movne	r3, #10
 8003aca:	4852      	ldr	r0, [pc, #328]	; (8003c14 <_printf_i+0x244>)
 8003acc:	2100      	movs	r1, #0
 8003ace:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003ad2:	6866      	ldr	r6, [r4, #4]
 8003ad4:	2e00      	cmp	r6, #0
 8003ad6:	bfa8      	it	ge
 8003ad8:	6821      	ldrge	r1, [r4, #0]
 8003ada:	60a6      	str	r6, [r4, #8]
 8003adc:	bfa4      	itt	ge
 8003ade:	f021 0104 	bicge.w	r1, r1, #4
 8003ae2:	6021      	strge	r1, [r4, #0]
 8003ae4:	b90d      	cbnz	r5, 8003aea <_printf_i+0x11a>
 8003ae6:	2e00      	cmp	r6, #0
 8003ae8:	d04d      	beq.n	8003b86 <_printf_i+0x1b6>
 8003aea:	4616      	mov	r6, r2
 8003aec:	fbb5 f1f3 	udiv	r1, r5, r3
 8003af0:	fb03 5711 	mls	r7, r3, r1, r5
 8003af4:	5dc7      	ldrb	r7, [r0, r7]
 8003af6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003afa:	462f      	mov	r7, r5
 8003afc:	42bb      	cmp	r3, r7
 8003afe:	460d      	mov	r5, r1
 8003b00:	d9f4      	bls.n	8003aec <_printf_i+0x11c>
 8003b02:	2b08      	cmp	r3, #8
 8003b04:	d10b      	bne.n	8003b1e <_printf_i+0x14e>
 8003b06:	6823      	ldr	r3, [r4, #0]
 8003b08:	07df      	lsls	r7, r3, #31
 8003b0a:	d508      	bpl.n	8003b1e <_printf_i+0x14e>
 8003b0c:	6923      	ldr	r3, [r4, #16]
 8003b0e:	6861      	ldr	r1, [r4, #4]
 8003b10:	4299      	cmp	r1, r3
 8003b12:	bfde      	ittt	le
 8003b14:	2330      	movle	r3, #48	; 0x30
 8003b16:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003b1a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003b1e:	1b92      	subs	r2, r2, r6
 8003b20:	6122      	str	r2, [r4, #16]
 8003b22:	464b      	mov	r3, r9
 8003b24:	4621      	mov	r1, r4
 8003b26:	4640      	mov	r0, r8
 8003b28:	f8cd a000 	str.w	sl, [sp]
 8003b2c:	aa03      	add	r2, sp, #12
 8003b2e:	f7ff fedf 	bl	80038f0 <_printf_common>
 8003b32:	3001      	adds	r0, #1
 8003b34:	d14c      	bne.n	8003bd0 <_printf_i+0x200>
 8003b36:	f04f 30ff 	mov.w	r0, #4294967295
 8003b3a:	b004      	add	sp, #16
 8003b3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b40:	4834      	ldr	r0, [pc, #208]	; (8003c14 <_printf_i+0x244>)
 8003b42:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003b46:	680e      	ldr	r6, [r1, #0]
 8003b48:	6823      	ldr	r3, [r4, #0]
 8003b4a:	f856 5b04 	ldr.w	r5, [r6], #4
 8003b4e:	061f      	lsls	r7, r3, #24
 8003b50:	600e      	str	r6, [r1, #0]
 8003b52:	d514      	bpl.n	8003b7e <_printf_i+0x1ae>
 8003b54:	07d9      	lsls	r1, r3, #31
 8003b56:	bf44      	itt	mi
 8003b58:	f043 0320 	orrmi.w	r3, r3, #32
 8003b5c:	6023      	strmi	r3, [r4, #0]
 8003b5e:	b91d      	cbnz	r5, 8003b68 <_printf_i+0x198>
 8003b60:	6823      	ldr	r3, [r4, #0]
 8003b62:	f023 0320 	bic.w	r3, r3, #32
 8003b66:	6023      	str	r3, [r4, #0]
 8003b68:	2310      	movs	r3, #16
 8003b6a:	e7af      	b.n	8003acc <_printf_i+0xfc>
 8003b6c:	6823      	ldr	r3, [r4, #0]
 8003b6e:	f043 0320 	orr.w	r3, r3, #32
 8003b72:	6023      	str	r3, [r4, #0]
 8003b74:	2378      	movs	r3, #120	; 0x78
 8003b76:	4828      	ldr	r0, [pc, #160]	; (8003c18 <_printf_i+0x248>)
 8003b78:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003b7c:	e7e3      	b.n	8003b46 <_printf_i+0x176>
 8003b7e:	065e      	lsls	r6, r3, #25
 8003b80:	bf48      	it	mi
 8003b82:	b2ad      	uxthmi	r5, r5
 8003b84:	e7e6      	b.n	8003b54 <_printf_i+0x184>
 8003b86:	4616      	mov	r6, r2
 8003b88:	e7bb      	b.n	8003b02 <_printf_i+0x132>
 8003b8a:	680b      	ldr	r3, [r1, #0]
 8003b8c:	6826      	ldr	r6, [r4, #0]
 8003b8e:	1d1d      	adds	r5, r3, #4
 8003b90:	6960      	ldr	r0, [r4, #20]
 8003b92:	600d      	str	r5, [r1, #0]
 8003b94:	0635      	lsls	r5, r6, #24
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	d501      	bpl.n	8003b9e <_printf_i+0x1ce>
 8003b9a:	6018      	str	r0, [r3, #0]
 8003b9c:	e002      	b.n	8003ba4 <_printf_i+0x1d4>
 8003b9e:	0671      	lsls	r1, r6, #25
 8003ba0:	d5fb      	bpl.n	8003b9a <_printf_i+0x1ca>
 8003ba2:	8018      	strh	r0, [r3, #0]
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	4616      	mov	r6, r2
 8003ba8:	6123      	str	r3, [r4, #16]
 8003baa:	e7ba      	b.n	8003b22 <_printf_i+0x152>
 8003bac:	680b      	ldr	r3, [r1, #0]
 8003bae:	1d1a      	adds	r2, r3, #4
 8003bb0:	600a      	str	r2, [r1, #0]
 8003bb2:	681e      	ldr	r6, [r3, #0]
 8003bb4:	2100      	movs	r1, #0
 8003bb6:	4630      	mov	r0, r6
 8003bb8:	6862      	ldr	r2, [r4, #4]
 8003bba:	f000 f82f 	bl	8003c1c <memchr>
 8003bbe:	b108      	cbz	r0, 8003bc4 <_printf_i+0x1f4>
 8003bc0:	1b80      	subs	r0, r0, r6
 8003bc2:	6060      	str	r0, [r4, #4]
 8003bc4:	6863      	ldr	r3, [r4, #4]
 8003bc6:	6123      	str	r3, [r4, #16]
 8003bc8:	2300      	movs	r3, #0
 8003bca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003bce:	e7a8      	b.n	8003b22 <_printf_i+0x152>
 8003bd0:	4632      	mov	r2, r6
 8003bd2:	4649      	mov	r1, r9
 8003bd4:	4640      	mov	r0, r8
 8003bd6:	6923      	ldr	r3, [r4, #16]
 8003bd8:	47d0      	blx	sl
 8003bda:	3001      	adds	r0, #1
 8003bdc:	d0ab      	beq.n	8003b36 <_printf_i+0x166>
 8003bde:	6823      	ldr	r3, [r4, #0]
 8003be0:	079b      	lsls	r3, r3, #30
 8003be2:	d413      	bmi.n	8003c0c <_printf_i+0x23c>
 8003be4:	68e0      	ldr	r0, [r4, #12]
 8003be6:	9b03      	ldr	r3, [sp, #12]
 8003be8:	4298      	cmp	r0, r3
 8003bea:	bfb8      	it	lt
 8003bec:	4618      	movlt	r0, r3
 8003bee:	e7a4      	b.n	8003b3a <_printf_i+0x16a>
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	4632      	mov	r2, r6
 8003bf4:	4649      	mov	r1, r9
 8003bf6:	4640      	mov	r0, r8
 8003bf8:	47d0      	blx	sl
 8003bfa:	3001      	adds	r0, #1
 8003bfc:	d09b      	beq.n	8003b36 <_printf_i+0x166>
 8003bfe:	3501      	adds	r5, #1
 8003c00:	68e3      	ldr	r3, [r4, #12]
 8003c02:	9903      	ldr	r1, [sp, #12]
 8003c04:	1a5b      	subs	r3, r3, r1
 8003c06:	42ab      	cmp	r3, r5
 8003c08:	dcf2      	bgt.n	8003bf0 <_printf_i+0x220>
 8003c0a:	e7eb      	b.n	8003be4 <_printf_i+0x214>
 8003c0c:	2500      	movs	r5, #0
 8003c0e:	f104 0619 	add.w	r6, r4, #25
 8003c12:	e7f5      	b.n	8003c00 <_printf_i+0x230>
 8003c14:	08005fcd 	.word	0x08005fcd
 8003c18:	08005fde 	.word	0x08005fde

08003c1c <memchr>:
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	b510      	push	{r4, lr}
 8003c20:	b2c9      	uxtb	r1, r1
 8003c22:	4402      	add	r2, r0
 8003c24:	4293      	cmp	r3, r2
 8003c26:	4618      	mov	r0, r3
 8003c28:	d101      	bne.n	8003c2e <memchr+0x12>
 8003c2a:	2000      	movs	r0, #0
 8003c2c:	e003      	b.n	8003c36 <memchr+0x1a>
 8003c2e:	7804      	ldrb	r4, [r0, #0]
 8003c30:	3301      	adds	r3, #1
 8003c32:	428c      	cmp	r4, r1
 8003c34:	d1f6      	bne.n	8003c24 <memchr+0x8>
 8003c36:	bd10      	pop	{r4, pc}

08003c38 <memmove>:
 8003c38:	4288      	cmp	r0, r1
 8003c3a:	b510      	push	{r4, lr}
 8003c3c:	eb01 0402 	add.w	r4, r1, r2
 8003c40:	d902      	bls.n	8003c48 <memmove+0x10>
 8003c42:	4284      	cmp	r4, r0
 8003c44:	4623      	mov	r3, r4
 8003c46:	d807      	bhi.n	8003c58 <memmove+0x20>
 8003c48:	1e43      	subs	r3, r0, #1
 8003c4a:	42a1      	cmp	r1, r4
 8003c4c:	d008      	beq.n	8003c60 <memmove+0x28>
 8003c4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003c52:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003c56:	e7f8      	b.n	8003c4a <memmove+0x12>
 8003c58:	4601      	mov	r1, r0
 8003c5a:	4402      	add	r2, r0
 8003c5c:	428a      	cmp	r2, r1
 8003c5e:	d100      	bne.n	8003c62 <memmove+0x2a>
 8003c60:	bd10      	pop	{r4, pc}
 8003c62:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003c66:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003c6a:	e7f7      	b.n	8003c5c <memmove+0x24>

08003c6c <_free_r>:
 8003c6c:	b538      	push	{r3, r4, r5, lr}
 8003c6e:	4605      	mov	r5, r0
 8003c70:	2900      	cmp	r1, #0
 8003c72:	d043      	beq.n	8003cfc <_free_r+0x90>
 8003c74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c78:	1f0c      	subs	r4, r1, #4
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	bfb8      	it	lt
 8003c7e:	18e4      	addlt	r4, r4, r3
 8003c80:	f000 f8d0 	bl	8003e24 <__malloc_lock>
 8003c84:	4a1e      	ldr	r2, [pc, #120]	; (8003d00 <_free_r+0x94>)
 8003c86:	6813      	ldr	r3, [r2, #0]
 8003c88:	4610      	mov	r0, r2
 8003c8a:	b933      	cbnz	r3, 8003c9a <_free_r+0x2e>
 8003c8c:	6063      	str	r3, [r4, #4]
 8003c8e:	6014      	str	r4, [r2, #0]
 8003c90:	4628      	mov	r0, r5
 8003c92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003c96:	f000 b8cb 	b.w	8003e30 <__malloc_unlock>
 8003c9a:	42a3      	cmp	r3, r4
 8003c9c:	d90a      	bls.n	8003cb4 <_free_r+0x48>
 8003c9e:	6821      	ldr	r1, [r4, #0]
 8003ca0:	1862      	adds	r2, r4, r1
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	bf01      	itttt	eq
 8003ca6:	681a      	ldreq	r2, [r3, #0]
 8003ca8:	685b      	ldreq	r3, [r3, #4]
 8003caa:	1852      	addeq	r2, r2, r1
 8003cac:	6022      	streq	r2, [r4, #0]
 8003cae:	6063      	str	r3, [r4, #4]
 8003cb0:	6004      	str	r4, [r0, #0]
 8003cb2:	e7ed      	b.n	8003c90 <_free_r+0x24>
 8003cb4:	461a      	mov	r2, r3
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	b10b      	cbz	r3, 8003cbe <_free_r+0x52>
 8003cba:	42a3      	cmp	r3, r4
 8003cbc:	d9fa      	bls.n	8003cb4 <_free_r+0x48>
 8003cbe:	6811      	ldr	r1, [r2, #0]
 8003cc0:	1850      	adds	r0, r2, r1
 8003cc2:	42a0      	cmp	r0, r4
 8003cc4:	d10b      	bne.n	8003cde <_free_r+0x72>
 8003cc6:	6820      	ldr	r0, [r4, #0]
 8003cc8:	4401      	add	r1, r0
 8003cca:	1850      	adds	r0, r2, r1
 8003ccc:	4283      	cmp	r3, r0
 8003cce:	6011      	str	r1, [r2, #0]
 8003cd0:	d1de      	bne.n	8003c90 <_free_r+0x24>
 8003cd2:	6818      	ldr	r0, [r3, #0]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	4401      	add	r1, r0
 8003cd8:	6011      	str	r1, [r2, #0]
 8003cda:	6053      	str	r3, [r2, #4]
 8003cdc:	e7d8      	b.n	8003c90 <_free_r+0x24>
 8003cde:	d902      	bls.n	8003ce6 <_free_r+0x7a>
 8003ce0:	230c      	movs	r3, #12
 8003ce2:	602b      	str	r3, [r5, #0]
 8003ce4:	e7d4      	b.n	8003c90 <_free_r+0x24>
 8003ce6:	6820      	ldr	r0, [r4, #0]
 8003ce8:	1821      	adds	r1, r4, r0
 8003cea:	428b      	cmp	r3, r1
 8003cec:	bf01      	itttt	eq
 8003cee:	6819      	ldreq	r1, [r3, #0]
 8003cf0:	685b      	ldreq	r3, [r3, #4]
 8003cf2:	1809      	addeq	r1, r1, r0
 8003cf4:	6021      	streq	r1, [r4, #0]
 8003cf6:	6063      	str	r3, [r4, #4]
 8003cf8:	6054      	str	r4, [r2, #4]
 8003cfa:	e7c9      	b.n	8003c90 <_free_r+0x24>
 8003cfc:	bd38      	pop	{r3, r4, r5, pc}
 8003cfe:	bf00      	nop
 8003d00:	20000788 	.word	0x20000788

08003d04 <_malloc_r>:
 8003d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d06:	1ccd      	adds	r5, r1, #3
 8003d08:	f025 0503 	bic.w	r5, r5, #3
 8003d0c:	3508      	adds	r5, #8
 8003d0e:	2d0c      	cmp	r5, #12
 8003d10:	bf38      	it	cc
 8003d12:	250c      	movcc	r5, #12
 8003d14:	2d00      	cmp	r5, #0
 8003d16:	4606      	mov	r6, r0
 8003d18:	db01      	blt.n	8003d1e <_malloc_r+0x1a>
 8003d1a:	42a9      	cmp	r1, r5
 8003d1c:	d903      	bls.n	8003d26 <_malloc_r+0x22>
 8003d1e:	230c      	movs	r3, #12
 8003d20:	6033      	str	r3, [r6, #0]
 8003d22:	2000      	movs	r0, #0
 8003d24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d26:	f000 f87d 	bl	8003e24 <__malloc_lock>
 8003d2a:	4921      	ldr	r1, [pc, #132]	; (8003db0 <_malloc_r+0xac>)
 8003d2c:	680a      	ldr	r2, [r1, #0]
 8003d2e:	4614      	mov	r4, r2
 8003d30:	b99c      	cbnz	r4, 8003d5a <_malloc_r+0x56>
 8003d32:	4f20      	ldr	r7, [pc, #128]	; (8003db4 <_malloc_r+0xb0>)
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	b923      	cbnz	r3, 8003d42 <_malloc_r+0x3e>
 8003d38:	4621      	mov	r1, r4
 8003d3a:	4630      	mov	r0, r6
 8003d3c:	f000 f862 	bl	8003e04 <_sbrk_r>
 8003d40:	6038      	str	r0, [r7, #0]
 8003d42:	4629      	mov	r1, r5
 8003d44:	4630      	mov	r0, r6
 8003d46:	f000 f85d 	bl	8003e04 <_sbrk_r>
 8003d4a:	1c43      	adds	r3, r0, #1
 8003d4c:	d123      	bne.n	8003d96 <_malloc_r+0x92>
 8003d4e:	230c      	movs	r3, #12
 8003d50:	4630      	mov	r0, r6
 8003d52:	6033      	str	r3, [r6, #0]
 8003d54:	f000 f86c 	bl	8003e30 <__malloc_unlock>
 8003d58:	e7e3      	b.n	8003d22 <_malloc_r+0x1e>
 8003d5a:	6823      	ldr	r3, [r4, #0]
 8003d5c:	1b5b      	subs	r3, r3, r5
 8003d5e:	d417      	bmi.n	8003d90 <_malloc_r+0x8c>
 8003d60:	2b0b      	cmp	r3, #11
 8003d62:	d903      	bls.n	8003d6c <_malloc_r+0x68>
 8003d64:	6023      	str	r3, [r4, #0]
 8003d66:	441c      	add	r4, r3
 8003d68:	6025      	str	r5, [r4, #0]
 8003d6a:	e004      	b.n	8003d76 <_malloc_r+0x72>
 8003d6c:	6863      	ldr	r3, [r4, #4]
 8003d6e:	42a2      	cmp	r2, r4
 8003d70:	bf0c      	ite	eq
 8003d72:	600b      	streq	r3, [r1, #0]
 8003d74:	6053      	strne	r3, [r2, #4]
 8003d76:	4630      	mov	r0, r6
 8003d78:	f000 f85a 	bl	8003e30 <__malloc_unlock>
 8003d7c:	f104 000b 	add.w	r0, r4, #11
 8003d80:	1d23      	adds	r3, r4, #4
 8003d82:	f020 0007 	bic.w	r0, r0, #7
 8003d86:	1ac2      	subs	r2, r0, r3
 8003d88:	d0cc      	beq.n	8003d24 <_malloc_r+0x20>
 8003d8a:	1a1b      	subs	r3, r3, r0
 8003d8c:	50a3      	str	r3, [r4, r2]
 8003d8e:	e7c9      	b.n	8003d24 <_malloc_r+0x20>
 8003d90:	4622      	mov	r2, r4
 8003d92:	6864      	ldr	r4, [r4, #4]
 8003d94:	e7cc      	b.n	8003d30 <_malloc_r+0x2c>
 8003d96:	1cc4      	adds	r4, r0, #3
 8003d98:	f024 0403 	bic.w	r4, r4, #3
 8003d9c:	42a0      	cmp	r0, r4
 8003d9e:	d0e3      	beq.n	8003d68 <_malloc_r+0x64>
 8003da0:	1a21      	subs	r1, r4, r0
 8003da2:	4630      	mov	r0, r6
 8003da4:	f000 f82e 	bl	8003e04 <_sbrk_r>
 8003da8:	3001      	adds	r0, #1
 8003daa:	d1dd      	bne.n	8003d68 <_malloc_r+0x64>
 8003dac:	e7cf      	b.n	8003d4e <_malloc_r+0x4a>
 8003dae:	bf00      	nop
 8003db0:	20000788 	.word	0x20000788
 8003db4:	2000078c 	.word	0x2000078c

08003db8 <_realloc_r>:
 8003db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dba:	4607      	mov	r7, r0
 8003dbc:	4614      	mov	r4, r2
 8003dbe:	460e      	mov	r6, r1
 8003dc0:	b921      	cbnz	r1, 8003dcc <_realloc_r+0x14>
 8003dc2:	4611      	mov	r1, r2
 8003dc4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003dc8:	f7ff bf9c 	b.w	8003d04 <_malloc_r>
 8003dcc:	b922      	cbnz	r2, 8003dd8 <_realloc_r+0x20>
 8003dce:	f7ff ff4d 	bl	8003c6c <_free_r>
 8003dd2:	4625      	mov	r5, r4
 8003dd4:	4628      	mov	r0, r5
 8003dd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003dd8:	f000 f830 	bl	8003e3c <_malloc_usable_size_r>
 8003ddc:	42a0      	cmp	r0, r4
 8003dde:	d20f      	bcs.n	8003e00 <_realloc_r+0x48>
 8003de0:	4621      	mov	r1, r4
 8003de2:	4638      	mov	r0, r7
 8003de4:	f7ff ff8e 	bl	8003d04 <_malloc_r>
 8003de8:	4605      	mov	r5, r0
 8003dea:	2800      	cmp	r0, #0
 8003dec:	d0f2      	beq.n	8003dd4 <_realloc_r+0x1c>
 8003dee:	4631      	mov	r1, r6
 8003df0:	4622      	mov	r2, r4
 8003df2:	f7ff fbd7 	bl	80035a4 <memcpy>
 8003df6:	4631      	mov	r1, r6
 8003df8:	4638      	mov	r0, r7
 8003dfa:	f7ff ff37 	bl	8003c6c <_free_r>
 8003dfe:	e7e9      	b.n	8003dd4 <_realloc_r+0x1c>
 8003e00:	4635      	mov	r5, r6
 8003e02:	e7e7      	b.n	8003dd4 <_realloc_r+0x1c>

08003e04 <_sbrk_r>:
 8003e04:	b538      	push	{r3, r4, r5, lr}
 8003e06:	2300      	movs	r3, #0
 8003e08:	4d05      	ldr	r5, [pc, #20]	; (8003e20 <_sbrk_r+0x1c>)
 8003e0a:	4604      	mov	r4, r0
 8003e0c:	4608      	mov	r0, r1
 8003e0e:	602b      	str	r3, [r5, #0]
 8003e10:	f7fd fd90 	bl	8001934 <_sbrk>
 8003e14:	1c43      	adds	r3, r0, #1
 8003e16:	d102      	bne.n	8003e1e <_sbrk_r+0x1a>
 8003e18:	682b      	ldr	r3, [r5, #0]
 8003e1a:	b103      	cbz	r3, 8003e1e <_sbrk_r+0x1a>
 8003e1c:	6023      	str	r3, [r4, #0]
 8003e1e:	bd38      	pop	{r3, r4, r5, pc}
 8003e20:	2000086c 	.word	0x2000086c

08003e24 <__malloc_lock>:
 8003e24:	4801      	ldr	r0, [pc, #4]	; (8003e2c <__malloc_lock+0x8>)
 8003e26:	f000 b811 	b.w	8003e4c <__retarget_lock_acquire_recursive>
 8003e2a:	bf00      	nop
 8003e2c:	20000874 	.word	0x20000874

08003e30 <__malloc_unlock>:
 8003e30:	4801      	ldr	r0, [pc, #4]	; (8003e38 <__malloc_unlock+0x8>)
 8003e32:	f000 b80c 	b.w	8003e4e <__retarget_lock_release_recursive>
 8003e36:	bf00      	nop
 8003e38:	20000874 	.word	0x20000874

08003e3c <_malloc_usable_size_r>:
 8003e3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e40:	1f18      	subs	r0, r3, #4
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	bfbc      	itt	lt
 8003e46:	580b      	ldrlt	r3, [r1, r0]
 8003e48:	18c0      	addlt	r0, r0, r3
 8003e4a:	4770      	bx	lr

08003e4c <__retarget_lock_acquire_recursive>:
 8003e4c:	4770      	bx	lr

08003e4e <__retarget_lock_release_recursive>:
 8003e4e:	4770      	bx	lr

08003e50 <_init>:
 8003e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e52:	bf00      	nop
 8003e54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e56:	bc08      	pop	{r3}
 8003e58:	469e      	mov	lr, r3
 8003e5a:	4770      	bx	lr

08003e5c <_fini>:
 8003e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e5e:	bf00      	nop
 8003e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e62:	bc08      	pop	{r3}
 8003e64:	469e      	mov	lr, r3
 8003e66:	4770      	bx	lr
